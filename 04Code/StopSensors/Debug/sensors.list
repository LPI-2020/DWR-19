
sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e48  08004e48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e50  08004e50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000070  08004ec8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08004ec8  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a33  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e15  00000000  00000000  00036ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000398e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  0003a8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b9c  00000000  00000000  0003b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143bb  00000000  00000000  000652ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d2d  00000000  00000000  000796a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017a3d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b8  00000000  00000000  0017a428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004db0 	.word	0x08004db0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004db0 	.word	0x08004db0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MX_ADC1_Init+0xa0>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x9c>)
 800062c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x9c>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x9c>)
 800064e:	f000 fc4f 	bl	8000ef0 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000658:	f000 f99a 	bl	8000990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800065c:	230d      	movs	r3, #13
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x9c>)
 800066e:	f000 febd 	bl	80013ec <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 f98a 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000a4 	.word	0x200000a4
 8000688:	40012000 	.word	0x40012000

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_ADC_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006de:	2308      	movs	r3, #8
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_ADC_MspInit+0x8c>)
 80006f2:	f001 fa6d 	bl	8001bd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f001 f99f 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000700:	2012      	movs	r0, #18
 8000702:	f001 f9b8 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020800 	.word	0x40020800

0800071c <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_ADC_ConvCpltCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_ADC_ConvCpltCallback+0x16>
	{
		isr_obs_detector();
 800072e:	f000 f9ad 	bl	8000a8c <isr_obs_detector>
	}
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40012000 	.word	0x40012000

08000740 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0xcc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0xcc>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xcc>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0xcc>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	; (800080c <MX_GPIO_Init+0xcc>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xcc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_GPIO_Init+0xcc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <MX_GPIO_Init+0xcc>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_GPIO_Init+0xcc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007a4:	f001 fbd8 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_GPIO_Init+0xd0>)
 80007c0:	f001 fa06 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PinA_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_GPIO_Init+0xd4>)
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PinA_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <MX_GPIO_Init+0xd8>)
 80007d8:	f001 f9fa 	bl	8001bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PinB_Pin;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PinB_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <MX_GPIO_Init+0xd8>)
 80007f0:	f001 f9ee 	bl	8001bd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2006      	movs	r0, #6
 80007fa:	f001 f920 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fe:	2006      	movs	r0, #6
 8000800:	f001 f939 	bl	8001a76 <HAL_NVIC_EnableIRQ>

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020400 	.word	0x40020400
 8000814:	10110000 	.word	0x10110000
 8000818:	40020c00 	.word	0x40020c00

0800081c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PinA_Pin)
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d105      	bne.n	8000838 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800082c:	2101      	movs	r1, #1
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <HAL_GPIO_EXTI_Callback+0x24>)
 8000830:	f001 fbab 	bl	8001f8a <HAL_GPIO_TogglePin>
		isr_stop_detector();
 8000834:	f000 f968 	bl	8000b08 <isr_stop_detector>
	}
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40020400 	.word	0x40020400

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 faf5 	bl	8000e36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f810 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff ff76 	bl	8000740 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000854:	f7ff fec8 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000858:	f000 f9c2 	bl	8000be0 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 800085c:	f000 fa18 	bl	8000c90 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //Rx_UART_init(); // set USART3 interrupt

  stop_sensors_init();
 8000860:	f000 f906 	bl	8000a70 <stop_sensors_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  UART_puts("Hello STM32: stop sensors.\n\r");
 8000864:	4801      	ldr	r0, [pc, #4]	; (800086c <main+0x28>)
 8000866:	f000 fa8f 	bl	8000d88 <UART_puts>
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0x26>
 800086c:	08004dc8 	.word	0x08004dc8

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0b8      	sub	sp, #224	; 0xe0
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800087a:	2234      	movs	r2, #52	; 0x34
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fe44 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2290      	movs	r2, #144	; 0x90
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fe35 	bl	800450c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <SystemClock_Config+0x118>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a38      	ldr	r2, [pc, #224]	; (8000988 <SystemClock_Config+0x118>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <SystemClock_Config+0x118>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ba:	4b34      	ldr	r3, [pc, #208]	; (800098c <SystemClock_Config+0x11c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <SystemClock_Config+0x11c>)
 80008c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <SystemClock_Config+0x11c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2310      	movs	r3, #16
 80008e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e4:	2302      	movs	r3, #2
 80008e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008f6:	23d8      	movs	r3, #216	; 0xd8
 80008f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fbbf 	bl	8002090 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000918:	f000 f83a 	bl	8000990 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800091c:	f001 fb68 	bl	8001ff0 <HAL_PWREx_EnableOverDrive>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000926:	f000 f833 	bl	8000990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000930:	2302      	movs	r3, #2
 8000932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000940:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800094c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000950:	2107      	movs	r1, #7
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fe4a 	bl	80025ec <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800095e:	f000 f817 	bl	8000990 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000966:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000968:	2300      	movs	r3, #0
 800096a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f811 	bl	8002998 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800097c:	f000 f808 	bl	8000990 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	37e0      	adds	r7, #224	; 0xe0
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	e7fe      	b.n	8000998 <Error_Handler+0x8>
	...

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x44>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 fa3e 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f001 fabf 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <ADC_IRQHandler+0x10>)
 8000a4e:	f000 fb6b 	bl	8001128 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000a4 	.word	0x200000a4

08000a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USART3_IRQHandler+0x10>)
 8000a62:	f002 fe61 	bl	8003728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000138 	.word	0x20000138

08000a70 <stop_sensors_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_sensors_init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Start(&OBS_DETECTOR_TIM);
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <stop_sensors_init+0x14>)
 8000a76:	f002 fc0f 	bl	8003298 <HAL_TIM_Base_Start>
	// start Obstacle detector ADC
	HAL_ADC_Start_IT(&OBS_DETECTOR_ADC);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <stop_sensors_init+0x18>)
 8000a7c:	f000 fa7c 	bl	8000f78 <HAL_ADC_Start_IT>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000ec 	.word	0x200000ec
 8000a88:	200000a4 	.word	0x200000a4

08000a8c <isr_obs_detector>:
- The closer the object is to the sensor, the higher value will be measured
  by the sensor.
- ADC_DISTANCE_LIMIT is the limit that defines that an object has been found.
******************************************************************************/
void isr_obs_detector(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af02      	add	r7, sp, #8
	// Digital value of distance
	static uint32_t distance;
	static uint32_t old_distance = 0;

	// read ADC value
	distance = HAL_ADC_GetValue(&OBS_DETECTOR_ADC);
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <isr_obs_detector+0x68>)
 8000a94:	f000 fc89 	bl	80013aa <HAL_ADC_GetValue>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <isr_obs_detector+0x6c>)
 8000a9c:	6013      	str	r3, [r2, #0]

	// Obstacle found flag update
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <isr_obs_detector+0x6c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f240 4272 	movw	r2, #1138	; 0x472
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d907      	bls.n	8000aba <isr_obs_detector+0x2e>
						(old_distance >= ADC_DISTANCE_LIMIT));
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <isr_obs_detector+0x70>)
 8000aac:	681b      	ldr	r3, [r3, #0]
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8000aae:	f240 4272 	movw	r2, #1138	; 0x472
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d901      	bls.n	8000aba <isr_obs_detector+0x2e>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <isr_obs_detector+0x30>
 8000aba:	2300      	movs	r3, #0
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <isr_obs_detector+0x74>)
 8000ac0:	701a      	strb	r2, [r3, #0]
	// update old distance variable
	old_distance = distance;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <isr_obs_detector+0x6c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <isr_obs_detector+0x70>)
 8000ac8:	6013      	str	r3, [r2, #0]

#ifdef _DEBUG_
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); // ## debug <- remove this pin

	char str[32];
	snprintf(str, sizeof(str), "Dist: %d, flag%d\n\r", (int)distance,
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <isr_obs_detector+0x6c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <isr_obs_detector+0x74>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <isr_obs_detector+0x78>)
 8000adc:	2120      	movs	r1, #32
 8000ade:	f003 fd1d 	bl	800451c <sniprintf>
														obs_found_flag);
	UART_puts(str);
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f94f 	bl	8000d88 <UART_puts>
#endif // !_DEBUG_
}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000a4 	.word	0x200000a4
 8000af8:	20000090 	.word	0x20000090
 8000afc:	20000094 	.word	0x20000094
 8000b00:	2000008c 	.word	0x2000008c
 8000b04:	08004de8 	.word	0x08004de8

08000b08 <isr_stop_detector>:

- An external interrupt is generated when PIN_A = 1. There this function is
  used to check PinB value.
******************************************************************************/
void isr_stop_detector(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
	GPIO_PinState pinB;
	pinB = HAL_GPIO_ReadPin(PIN_B_PORT, PIN_B);
 8000b0e:	2102      	movs	r1, #2
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <isr_stop_detector+0x3c>)
 8000b12:	f001 fa09 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]

	cross_found_flag = pinB & 0x01;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <isr_stop_detector+0x40>)
 8000b24:	701a      	strb	r2, [r3, #0]
	room_found_flag = (~pinB) & 0x01;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf0c      	ite	eq
 8000b30:	2301      	moveq	r3, #1
 8000b32:	2300      	movne	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <isr_stop_detector+0x44>)
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	2000008d 	.word	0x2000008d
 8000b4c:	2000008e 	.word	0x2000008e

08000b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b58:	4a14      	ldr	r2, [pc, #80]	; (8000bac <_sbrk+0x5c>)
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_sbrk+0x60>)
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d102      	bne.n	8000b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_sbrk+0x64>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <_sbrk+0x68>)
 8000b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d207      	bcs.n	8000b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b80:	f003 fc9a 	bl	80044b8 <__errno>
 8000b84:	4603      	mov	r3, r0
 8000b86:	220c      	movs	r2, #12
 8000b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8e:	e009      	b.n	8000ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <_sbrk+0x64>)
 8000ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20080000 	.word	0x20080000
 8000bb0:	00000400 	.word	0x00000400
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	200002e8 	.word	0x200002e8

08000bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000bf2:	4a16      	ldr	r2, [pc, #88]	; (8000c4c <MX_TIM6_Init+0x6c>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 863;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000bf8:	f240 325f 	movw	r2, #863	; 0x35f
 8000bfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 62499;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000c06:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000c0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c12:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000c14:	f002 fae8 	bl	80031e8 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c1e:	f7ff feb7 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c22:	2320      	movs	r3, #32
 8000c24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_TIM6_Init+0x68>)
 8000c30:	f002 fc42 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000c3a:	f7ff fea9 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000ec 	.word	0x200000ec
 8000c4c:	40001000 	.word	0x40001000

08000c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_TIM_Base_MspInit+0x38>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10b      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_TIM_Base_MspInit+0x3c>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <MX_USART3_UART_Init+0x5c>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART3_UART_Init+0x58>)
 8000cd4:	f002 fc7e 	bl	80035d4 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cde:	f7ff fe57 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000138 	.word	0x20000138
 8000cec:	40004800 	.word	0x40004800

08000cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d130      	bne.n	8000d74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d54:	2307      	movs	r3, #7
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d60:	f000 ff36 	bl	8001bd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2027      	movs	r0, #39	; 0x27
 8000d6a:	f000 fe68 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d6e:	2027      	movs	r0, #39	; 0x27
 8000d70:	f000 fe81 	bl	8001a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40004800 	.word	0x40004800
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmitt 
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(const char *s)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if((s == NULL) || (s[0] == 0))	// string empty?
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d01c      	beq.n	8000dd0 <UART_puts+0x48>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d018      	beq.n	8000dd0 <UART_puts+0x48>
		return;
	
	int len = strlen(s);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fa4e 	bl	8000240 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b80      	cmp	r3, #128	; 0x80
 8000dac:	dc12      	bgt.n	8000dd4 <UART_puts+0x4c>
		return;

	while(huart3.gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmitt queued data
 8000dae:	bf00      	nop
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <UART_puts+0x54>)
 8000db2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000db4:	2b21      	cmp	r3, #33	; 0x21
 8000db6:	d0fb      	beq.n	8000db0 <UART_puts+0x28>
		;
	
	strcpy(Tx_Buffer, s);	// send string 'str' to 'TX_Buffer'
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <UART_puts+0x58>)
 8000dbc:	f003 fbe2 	bl	8004584 <strcpy>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)Tx_Buffer, len);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4906      	ldr	r1, [pc, #24]	; (8000de0 <UART_puts+0x58>)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <UART_puts+0x54>)
 8000dca:	f002 fc51 	bl	8003670 <HAL_UART_Transmit_IT>
 8000dce:	e002      	b.n	8000dd6 <UART_puts+0x4e>
		return;
 8000dd0:	bf00      	nop
 8000dd2:	e000      	b.n	8000dd6 <UART_puts+0x4e>
		return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000138 	.word	0x20000138
 8000de0:	200001bc 	.word	0x200001bc

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff fed5 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f003 fb57 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fd15 	bl	8000844 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e28:	08004e58 	.word	0x08004e58
  ldr r2, =_sbss
 8000e2c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e30:	200002e4 	.word	0x200002e4

08000e34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <CAN1_RX0_IRQHandler>

08000e36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 fdf4 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f805 	bl	8000e50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e46:	f7ff fda9 	bl	800099c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fe0f 	bl	8001a92 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 fdd7 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	200002d0 	.word	0x200002d0

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200002d0 	.word	0x200002d0

08000ef0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e031      	b.n	8000f6a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fbbc 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d116      	bne.n	8000f5c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_ADC_Init+0x84>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	f043 0202 	orr.w	r2, r3, #2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fb9e 	bl	8001680 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
 8000f5a:	e001      	b.n	8000f60 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	ffffeefd 	.word	0xffffeefd

08000f78 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Start_IT+0x1a>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e0b5      	b.n	80010fe <HAL_ADC_Start_IT+0x186>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d018      	beq.n	8000fda <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689a      	ldr	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f042 0201 	orr.w	r2, r2, #1
 8000fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000fb8:	4b54      	ldr	r3, [pc, #336]	; (800110c <HAL_ADC_Start_IT+0x194>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a54      	ldr	r2, [pc, #336]	; (8001110 <HAL_ADC_Start_IT+0x198>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	0c9a      	lsrs	r2, r3, #18
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fcc:	e002      	b.n	8000fd4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f9      	bne.n	8000fce <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d17d      	bne.n	80010e4 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fec:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_ADC_Start_IT+0x19c>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800100e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f023 0206 	bic.w	r2, r3, #6
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
 8001030:	e002      	b.n	8001038 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001048:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6859      	ldr	r1, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b30      	ldr	r3, [pc, #192]	; (8001118 <HAL_ADC_Start_IT+0x1a0>)
 8001056:	430b      	orrs	r3, r1
 8001058:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_ADC_Start_IT+0x1a4>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10f      	bne.n	8001086 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d143      	bne.n	80010fc <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e03a      	b.n	80010fc <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <HAL_ADC_Start_IT+0x1a8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d10e      	bne.n	80010ae <HAL_ADC_Start_IT+0x136>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d107      	bne.n	80010ae <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ac:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_ADC_Start_IT+0x1a4>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d120      	bne.n	80010fc <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_ADC_Start_IT+0x1ac>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d11b      	bne.n	80010fc <HAL_ADC_Start_IT+0x184>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d114      	bne.n	80010fc <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	e00b      	b.n	80010fc <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f043 0210 	orr.w	r2, r3, #16
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f043 0201 	orr.w	r2, r3, #1
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000
 8001110:	431bde83 	.word	0x431bde83
 8001114:	fffff8fe 	.word	0xfffff8fe
 8001118:	04000020 	.word	0x04000020
 800111c:	40012300 	.word	0x40012300
 8001120:	40012000 	.word	0x40012000
 8001124:	40012200 	.word	0x40012200

08001128 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b02      	cmp	r3, #2
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	2b20      	cmp	r3, #32
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d049      	beq.n	80011fe <HAL_ADC_IRQHandler+0xd6>
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d046      	beq.n	80011fe <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	d105      	bne.n	8001188 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d12b      	bne.n	80011ee <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d127      	bne.n	80011ee <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d119      	bne.n	80011ee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0220 	bic.w	r2, r2, #32
 80011c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fa94 	bl	800071c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f06f 0212 	mvn.w	r2, #18
 80011fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b04      	cmp	r3, #4
 800120a:	bf0c      	ite	eq
 800120c:	2301      	moveq	r3, #1
 800120e:	2300      	movne	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	2b80      	cmp	r3, #128	; 0x80
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d057      	beq.n	80012e0 <HAL_ADC_IRQHandler+0x1b8>
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d054      	beq.n	80012e0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d139      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12b      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001282:	2b00      	cmp	r3, #0
 8001284:	d124      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11d      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001298:	2b00      	cmp	r3, #0
 800129a:	d119      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f043 0201 	orr.w	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 facf 	bl	8001874 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f06f 020c 	mvn.w	r2, #12
 80012de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d017      	beq.n	8001342 <HAL_ADC_IRQHandler+0x21a>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d014      	beq.n	8001342 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10d      	bne.n	8001342 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f846 	bl	80013c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f06f 0201 	mvn.w	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	2b20      	cmp	r3, #32
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001366:	bf0c      	ite	eq
 8001368:	2301      	moveq	r3, #1
 800136a:	2300      	movne	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d015      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x27a>
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d012      	beq.n	80013a2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f043 0202 	orr.w	r2, r3, #2
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0220 	mvn.w	r2, #32
 8001390:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f820 	bl	80013d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f06f 0220 	mvn.w	r2, #32
 80013a0:	601a      	str	r2, [r3, #0]
  }
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ADC_ConfigChannel+0x1c>
 8001404:	2302      	movs	r3, #2
 8001406:	e12a      	b.n	800165e <HAL_ADC_ConfigChannel+0x272>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b09      	cmp	r3, #9
 8001416:	d93a      	bls.n	800148e <HAL_ADC_ConfigChannel+0xa2>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001420:	d035      	beq.n	800148e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68d9      	ldr	r1, [r3, #12]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	3b1e      	subs	r3, #30
 8001438:	2207      	movs	r2, #7
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	400a      	ands	r2, r1
 8001446:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a87      	ldr	r2, [pc, #540]	; (800166c <HAL_ADC_ConfigChannel+0x280>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10a      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68d9      	ldr	r1, [r3, #12]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	061a      	lsls	r2, r3, #24
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001466:	e035      	b.n	80014d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68d9      	ldr	r1, [r3, #12]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	4603      	mov	r3, r0
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4403      	add	r3, r0
 8001480:	3b1e      	subs	r3, #30
 8001482:	409a      	lsls	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148c:	e022      	b.n	80014d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6919      	ldr	r1, [r3, #16]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	2207      	movs	r2, #7
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6919      	ldr	r1, [r3, #16]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4403      	add	r3, r0
 80014ca:	409a      	lsls	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b06      	cmp	r3, #6
 80014da:	d824      	bhi.n	8001526 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	3b05      	subs	r3, #5
 80014ee:	221f      	movs	r2, #31
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	3b05      	subs	r3, #5
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
 8001524:	e04c      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d824      	bhi.n	8001578 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	3b23      	subs	r3, #35	; 0x23
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	400a      	ands	r2, r1
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4618      	mov	r0, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	3b23      	subs	r3, #35	; 0x23
 800156a:	fa00 f203 	lsl.w	r2, r0, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	e023      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	3b41      	subs	r3, #65	; 0x41
 800158a:	221f      	movs	r2, #31
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43da      	mvns	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	400a      	ands	r2, r1
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	3b41      	subs	r3, #65	; 0x41
 80015b4:	fa00 f203 	lsl.w	r2, r0, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <HAL_ADC_ConfigChannel+0x284>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10a      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1f4>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015d2:	d105      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 80015da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <HAL_ADC_ConfigChannel+0x284>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d109      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x212>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d105      	bne.n	80015fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 80015f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_ADC_ConfigChannel+0x284>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d125      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x268>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_ADC_ConfigChannel+0x280>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d003      	beq.n	800161a <HAL_ADC_ConfigChannel+0x22e>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b11      	cmp	r3, #17
 8001618:	d11c      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_ADC_ConfigChannel+0x288>)
 8001620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001624:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_ADC_ConfigChannel+0x280>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d111      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_ADC_ConfigChannel+0x28c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a11      	ldr	r2, [pc, #68]	; (800167c <HAL_ADC_ConfigChannel+0x290>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9a      	lsrs	r2, r3, #18
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001646:	e002      	b.n	800164e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3b01      	subs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f9      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	10000012 	.word	0x10000012
 8001670:	40012000 	.word	0x40012000
 8001674:	40012300 	.word	0x40012300
 8001678:	20000000 	.word	0x20000000
 800167c:	431bde83 	.word	0x431bde83

08001680 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001688:	4b78      	ldr	r3, [pc, #480]	; (800186c <ADC_Init+0x1ec>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a77      	ldr	r2, [pc, #476]	; (800186c <ADC_Init+0x1ec>)
 800168e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001692:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001694:	4b75      	ldr	r3, [pc, #468]	; (800186c <ADC_Init+0x1ec>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4973      	ldr	r1, [pc, #460]	; (800186c <ADC_Init+0x1ec>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	021a      	lsls	r2, r3, #8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6899      	ldr	r1, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	4a58      	ldr	r2, [pc, #352]	; (8001870 <ADC_Init+0x1f0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001722:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6899      	ldr	r1, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	e00f      	b.n	800177a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001778:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0202 	bic.w	r2, r2, #2
 8001788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6899      	ldr	r1, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	005a      	lsls	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d01b      	beq.n	80017e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	3b01      	subs	r3, #1
 80017d4:	035a      	lsls	r2, r3, #13
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	e007      	b.n	80017f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	3b01      	subs	r3, #1
 800180c:	051a      	lsls	r2, r3, #20
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6899      	ldr	r1, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001832:	025a      	lsls	r2, r3, #9
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800184a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6899      	ldr	r1, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	029a      	lsls	r2, r3, #10
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40012300 	.word	0x40012300
 8001870:	0f000001 	.word	0x0f000001

08001874 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <__NVIC_SetPriorityGrouping+0x40>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a4:	4013      	ands	r3, r2
 80018a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x40>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	05fa0000 	.word	0x05fa0000

080018d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <__NVIC_GetPriorityGrouping+0x18>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	f003 0307 	and.w	r3, r3, #7
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0b      	blt.n	8001916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_EnableIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff29 	bl	8001888 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff3e 	bl	80018d0 <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff31 	bl	80018ec <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ffa2 	bl	80019e4 <SysTick_Config>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff fa0e 	bl	8000ed8 <HAL_GetTick>
 8001abc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d008      	beq.n	8001adc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e052      	b.n	8001b82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0216 	bic.w	r2, r2, #22
 8001aea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001afa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_DMA_Abort+0x62>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0208 	bic.w	r2, r2, #8
 8001b1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	e013      	b.n	8001b56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2e:	f7ff f9d3 	bl	8000ed8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d90c      	bls.n	8001b56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e015      	b.n	8001b82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e4      	bne.n	8001b2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	223f      	movs	r2, #63	; 0x3f
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d004      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e00c      	b.n	8001bc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2205      	movs	r2, #5
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e175      	b.n	8001edc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8164 	bne.w	8001ed6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d00b      	beq.n	8001c2e <HAL_GPIO_Init+0x5e>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c22:	2b11      	cmp	r3, #17
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x100>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b12      	cmp	r3, #18
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80be 	beq.w	8001ed6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	4b66      	ldr	r3, [pc, #408]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a65      	ldr	r2, [pc, #404]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d72:	4a61      	ldr	r2, [pc, #388]	; (8001ef8 <HAL_GPIO_Init+0x328>)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a58      	ldr	r2, [pc, #352]	; (8001efc <HAL_GPIO_Init+0x32c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d037      	beq.n	8001e0e <HAL_GPIO_Init+0x23e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x330>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d031      	beq.n	8001e0a <HAL_GPIO_Init+0x23a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x334>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <HAL_GPIO_Init+0x236>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a55      	ldr	r2, [pc, #340]	; (8001f08 <HAL_GPIO_Init+0x338>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x232>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a54      	ldr	r2, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x33c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_GPIO_Init+0x340>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x22a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x344>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x226>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x348>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x222>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_Init+0x34c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x21e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x350>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x21a>
 8001de6:	2309      	movs	r3, #9
 8001de8:	e012      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dea:	230a      	movs	r3, #10
 8001dec:	e010      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00e      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001df6:	2306      	movs	r3, #6
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x240>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x328>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e52:	4a34      	ldr	r2, [pc, #208]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7c:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_GPIO_Init+0x354>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f ae86 	bls.w	8001bf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40021400 	.word	0x40021400
 8001f14:	40021800 	.word	0x40021800
 8001f18:	40021c00 	.word	0x40021c00
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40022400 	.word	0x40022400
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b085      	sub	sp, #20
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9c:	887a      	ldrh	r2, [r7, #2]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	041a      	lsls	r2, r3, #16
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	400b      	ands	r3, r1
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	619a      	str	r2, [r3, #24]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fc1c 	bl	800081c <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40013c00 	.word	0x40013c00

08001ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <HAL_PWREx_EnableOverDrive+0x98>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_PWREx_EnableOverDrive+0x98>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201e:	f7fe ff5b 	bl	8000ed8 <HAL_GetTick>
 8002022:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002024:	e009      	b.n	800203a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002026:	f7fe ff57 	bl	8000ed8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002034:	d901      	bls.n	800203a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e022      	b.n	8002080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d1ee      	bne.n	8002026 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 800204e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7fe ff40 	bl	8000ed8 <HAL_GetTick>
 8002058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800205a:	e009      	b.n	8002070 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800205c:	f7fe ff3c 	bl	8000ed8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800206a:	d901      	bls.n	8002070 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e007      	b.n	8002080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207c:	d1ee      	bne.n	800205c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e29b      	b.n	80025de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8087 	beq.w	80021c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d00c      	beq.n	80020da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c0:	4b93      	ldr	r3, [pc, #588]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d112      	bne.n	80020f2 <HAL_RCC_OscConfig+0x62>
 80020cc:	4b90      	ldr	r3, [pc, #576]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020d8:	d10b      	bne.n	80020f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d06c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x130>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d168      	bne.n	80021c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e275      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x7a>
 80020fc:	4b84      	ldr	r3, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a83      	ldr	r2, [pc, #524]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e02e      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x9c>
 8002112:	4b7f      	ldr	r3, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7e      	ldr	r2, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7b      	ldr	r2, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xc0>
 8002136:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a75      	ldr	r2, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xd8>
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6b      	ldr	r2, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe feb2 	bl	8000ed8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe feae 	bl	8000ed8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e229      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xe8>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe9e 	bl	8000ed8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7fe fe9a 	bl	8000ed8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e215      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x110>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d069      	beq.n	80022a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d11c      	bne.n	8002220 <HAL_RCC_OscConfig+0x190>
 80021e6:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x17a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e1e9      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	493d      	ldr	r1, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	e040      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a38      	ldr	r2, [pc, #224]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe50 	bl	8000ed8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe fe4c 	bl	8000ed8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1c7      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4929      	ldr	r1, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e018      	b.n	80022a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a26      	ldr	r2, [pc, #152]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fe2c 	bl	8000ed8 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe fe28 	bl	8000ed8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e1a3      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d038      	beq.n	8002320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d019      	beq.n	80022ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80022b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fe09 	bl	8000ed8 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ca:	f7fe fe05 	bl	8000ed8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e180      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x23a>
 80022e8:	e01a      	b.n	8002320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fdef 	bl	8000ed8 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fdeb 	bl	8000ed8 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d903      	bls.n	8002314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e166      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
 8002310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1ee      	bne.n	80022fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a4 	beq.w	8002476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a88      	ldr	r2, [pc, #544]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002356:	4b83      	ldr	r3, [pc, #524]	; (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002362:	4b80      	ldr	r3, [pc, #512]	; (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7f      	ldr	r2, [pc, #508]	; (8002564 <HAL_RCC_OscConfig+0x4d4>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7fe fdb3 	bl	8000ed8 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7fe fdaf 	bl	8000ed8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e12a      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x4d4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x31a>
 800239c:	4b70      	ldr	r3, [pc, #448]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a6f      	ldr	r2, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	e02d      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x33c>
 80023b2:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6713      	str	r3, [r2, #112]	; 0x70
 80023be:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ca:	e01c      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x35e>
 80023d4:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	4a61      	ldr	r2, [pc, #388]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6713      	str	r3, [r2, #112]	; 0x70
 80023e0:	4b5f      	ldr	r3, [pc, #380]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a5e      	ldr	r2, [pc, #376]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x376>
 80023ee:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a5b      	ldr	r2, [pc, #364]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d015      	beq.n	800243a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240e:	f7fe fd63 	bl	8000ed8 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fd5f 	bl	8000ed8 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0d8      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ee      	beq.n	8002416 <HAL_RCC_OscConfig+0x386>
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fd4d 	bl	8000ed8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fd49 	bl	8000ed8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0c2      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ee      	bne.n	8002442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80ae 	beq.w	80025dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d06d      	beq.n	8002568 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d14b      	bne.n	800252c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a31      	ldr	r2, [pc, #196]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800249a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fd1a 	bl	8000ed8 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fd16 	bl	8000ed8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e091      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	491b      	ldr	r1, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe fce8 	bl	8000ed8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fce4 	bl	8000ed8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e05f      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x47c>
 800252a:	e057      	b.n	80025dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fcce 	bl	8000ed8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fcca 	bl	8000ed8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e045      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x4b0>
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x54c>
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_RCC_OscConfig+0x558>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d030      	beq.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d129      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d122      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800259e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d119      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d10f      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4965      	ldr	r1, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7fe fbfa 	bl	8000ed8 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fbf6 	bl	8000ed8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fb56 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08004dfc 	.word	0x08004dfc
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027ca:	2100      	movs	r1, #0
 80027cc:	6079      	str	r1, [r7, #4]
 80027ce:	2100      	movs	r1, #0
 80027d0:	60f9      	str	r1, [r7, #12]
 80027d2:	2100      	movs	r1, #0
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80027d6:	2100      	movs	r1, #0
 80027d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027da:	4952      	ldr	r1, [pc, #328]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 80027dc:	6889      	ldr	r1, [r1, #8]
 80027de:	f001 010c 	and.w	r1, r1, #12
 80027e2:	2908      	cmp	r1, #8
 80027e4:	d00d      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x3e>
 80027e6:	2908      	cmp	r1, #8
 80027e8:	f200 8094 	bhi.w	8002914 <HAL_RCC_GetSysClockFreq+0x150>
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x32>
 80027f0:	2904      	cmp	r1, #4
 80027f2:	d003      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x38>
 80027f4:	e08e      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f6:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <HAL_RCC_GetSysClockFreq+0x164>)
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e08e      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_RCC_GetSysClockFreq+0x168>)
 80027fe:	60bb      	str	r3, [r7, #8]
      break;
 8002800:	e08b      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002802:	4948      	ldr	r1, [pc, #288]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 8002804:	6849      	ldr	r1, [r1, #4]
 8002806:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800280a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800280c:	4945      	ldr	r1, [pc, #276]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 800280e:	6849      	ldr	r1, [r1, #4]
 8002810:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002814:	2900      	cmp	r1, #0
 8002816:	d024      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002818:	4942      	ldr	r1, [pc, #264]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 800281a:	6849      	ldr	r1, [r1, #4]
 800281c:	0989      	lsrs	r1, r1, #6
 800281e:	4608      	mov	r0, r1
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002828:	f04f 0500 	mov.w	r5, #0
 800282c:	ea00 0204 	and.w	r2, r0, r4
 8002830:	ea01 0305 	and.w	r3, r1, r5
 8002834:	493d      	ldr	r1, [pc, #244]	; (800292c <HAL_RCC_GetSysClockFreq+0x168>)
 8002836:	fb01 f003 	mul.w	r0, r1, r3
 800283a:	2100      	movs	r1, #0
 800283c:	fb01 f102 	mul.w	r1, r1, r2
 8002840:	1844      	adds	r4, r0, r1
 8002842:	493a      	ldr	r1, [pc, #232]	; (800292c <HAL_RCC_GetSysClockFreq+0x168>)
 8002844:	fba2 0101 	umull	r0, r1, r2, r1
 8002848:	1863      	adds	r3, r4, r1
 800284a:	4619      	mov	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	461a      	mov	r2, r3
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	f7fd fd4c 	bl	80002f0 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e04a      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	461a      	mov	r2, r3
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	ea02 0400 	and.w	r4, r2, r0
 800287a:	ea03 0501 	and.w	r5, r3, r1
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	014b      	lsls	r3, r1, #5
 800288c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002890:	0142      	lsls	r2, r0, #5
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	1b00      	subs	r0, r0, r4
 8002898:	eb61 0105 	sbc.w	r1, r1, r5
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	018b      	lsls	r3, r1, #6
 80028a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028aa:	0182      	lsls	r2, r0, #6
 80028ac:	1a12      	subs	r2, r2, r0
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	00d9      	lsls	r1, r3, #3
 80028bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028c0:	00d0      	lsls	r0, r2, #3
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	1912      	adds	r2, r2, r4
 80028c8:	eb45 0303 	adc.w	r3, r5, r3
 80028cc:	f04f 0000 	mov.w	r0, #0
 80028d0:	f04f 0100 	mov.w	r1, #0
 80028d4:	0299      	lsls	r1, r3, #10
 80028d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028da:	0290      	lsls	r0, r2, #10
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f04f 0300 	mov.w	r3, #0
 80028ec:	f7fd fd00 	bl	80002f0 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_RCC_GetSysClockFreq+0x160>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	60bb      	str	r3, [r7, #8]
      break;
 8002912:	e002      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <HAL_RCC_GetSysClockFreq+0x164>)
 8002916:	60bb      	str	r3, [r7, #8]
      break;
 8002918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291a:	68bb      	ldr	r3, [r7, #8]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bdb0      	pop	{r4, r5, r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	00f42400 	.word	0x00f42400
 800292c:	017d7840 	.word	0x017d7840

08002930 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_RCC_GetHCLKFreq+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff0 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0a9b      	lsrs	r3, r3, #10
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	08004e0c 	.word	0x08004e0c

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffdc 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0b5b      	lsrs	r3, r3, #13
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	08004e0c 	.word	0x08004e0c

08002998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029c0:	4b69      	ldr	r3, [pc, #420]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4a68      	ldr	r2, [pc, #416]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ca:	6093      	str	r3, [r2, #8]
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d4:	4964      	ldr	r1, [pc, #400]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d017      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a00:	4959      	ldr	r1, [pc, #356]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a10:	d101      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d017      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a2e:	4b4e      	ldr	r3, [pc, #312]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	494a      	ldr	r1, [pc, #296]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 808b 	beq.w	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	4a39      	ldr	r2, [pc, #228]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6413      	str	r3, [r2, #64]	; 0x40
 8002a88:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fa1a 	bl	8000ed8 <HAL_GetTick>
 8002aa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe fa16 	bl	8000ed8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e38f      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002aba:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ace:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d035      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d02e      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a1a      	ldr	r2, [pc, #104]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b0c:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d114      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe f9de 	bl	8000ed8 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7fe f9da 	bl	8000ed8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e351      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b4e:	d111      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b5e:	400b      	ands	r3, r1
 8002b60:	4901      	ldr	r1, [pc, #4]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40007000 	.word	0x40007000
 8002b70:	0ffffcff 	.word	0x0ffffcff
 8002b74:	4bb3      	ldr	r3, [pc, #716]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4ab2      	ldr	r2, [pc, #712]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b7e:	6093      	str	r3, [r2, #8]
 8002b80:	4bb0      	ldr	r3, [pc, #704]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8c:	49ad      	ldr	r1, [pc, #692]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b9e:	4ba9      	ldr	r3, [pc, #676]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba4:	4aa7      	ldr	r2, [pc, #668]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002baa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bae:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb8:	49a2      	ldr	r1, [pc, #648]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bcc:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bda:	499a      	ldr	r1, [pc, #616]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bee:	4b95      	ldr	r3, [pc, #596]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfc:	4991      	ldr	r1, [pc, #580]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c10:	4b8c      	ldr	r3, [pc, #560]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c1e:	4989      	ldr	r1, [pc, #548]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c32:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4980      	ldr	r1, [pc, #512]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c54:	4b7b      	ldr	r3, [pc, #492]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4978      	ldr	r1, [pc, #480]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c76:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f023 020c 	bic.w	r2, r3, #12
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c84:	496f      	ldr	r1, [pc, #444]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	4967      	ldr	r1, [pc, #412]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cba:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	495e      	ldr	r1, [pc, #376]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	4956      	ldr	r1, [pc, #344]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	494d      	ldr	r1, [pc, #308]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d20:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	4945      	ldr	r1, [pc, #276]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d42:	4b40      	ldr	r3, [pc, #256]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d50:	493c      	ldr	r1, [pc, #240]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d64:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	4934      	ldr	r1, [pc, #208]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d011      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d94:	492b      	ldr	r1, [pc, #172]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da4:	d101      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd4:	491b      	ldr	r1, [pc, #108]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df8:	4912      	ldr	r1, [pc, #72]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00b      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e1c:	4909      	ldr	r1, [pc, #36]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00f      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	e002      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	4986      	ldr	r1, [pc, #536]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00b      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e5c:	4b81      	ldr	r3, [pc, #516]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e6c:	497d      	ldr	r1, [pc, #500]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d006      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80d6 	beq.w	8003034 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e88:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e94:	f7fe f820 	bl	8000ed8 <HAL_GetTick>
 8002e98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e9c:	f7fe f81c 	bl	8000ed8 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e195      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d021      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11d      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ece:	4b65      	ldr	r3, [pc, #404]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ee2:	0e1b      	lsrs	r3, r3, #24
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	019a      	lsls	r2, r3, #6
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	4958      	ldr	r1, [pc, #352]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d02e      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f34:	d129      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f44:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	0f1b      	lsrs	r3, r3, #28
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	019a      	lsls	r2, r3, #6
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	041b      	lsls	r3, r3, #16
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	061b      	lsls	r3, r3, #24
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	071b      	lsls	r3, r3, #28
 8002f6a:	493e      	ldr	r1, [pc, #248]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f72:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f78:	f023 021f 	bic.w	r2, r3, #31
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4938      	ldr	r1, [pc, #224]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01d      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f96:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9c:	0e1b      	lsrs	r3, r3, #24
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fa4:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	0f1b      	lsrs	r3, r3, #28
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	019a      	lsls	r2, r3, #6
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	4926      	ldr	r1, [pc, #152]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d011      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	019a      	lsls	r2, r3, #6
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	041b      	lsls	r3, r3, #16
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	071b      	lsls	r3, r3, #28
 8002ffa:	491a      	ldr	r1, [pc, #104]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800300c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300e:	f7fd ff63 	bl	8000ed8 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003016:	f7fd ff5f 	bl	8000ed8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b64      	cmp	r3, #100	; 0x64
 8003022:	d901      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0d8      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b01      	cmp	r3, #1
 8003038:	f040 80ce 	bne.w	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fd ff46 	bl	8000ed8 <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800304e:	e00b      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003050:	f7fd ff42 	bl	8000ed8 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d904      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0bb      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003068:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003074:	d0ec      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003092:	2b00      	cmp	r3, #0
 8003094:	d02e      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d12a      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030ac:	4b4d      	ldr	r3, [pc, #308]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b2:	0f1b      	lsrs	r3, r3, #28
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	019a      	lsls	r2, r3, #6
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	4944      	ldr	r1, [pc, #272]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030da:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	493d      	ldr	r1, [pc, #244]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d022      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003104:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003108:	d11d      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	0e1b      	lsrs	r3, r3, #24
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	0f1b      	lsrs	r3, r3, #28
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	019a      	lsls	r2, r3, #6
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	061b      	lsls	r3, r3, #24
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	071b      	lsls	r3, r3, #28
 800313e:	4929      	ldr	r1, [pc, #164]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d028      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	0e1b      	lsrs	r3, r3, #24
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	019a      	lsls	r2, r3, #6
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	071b      	lsls	r3, r3, #28
 8003186:	4917      	ldr	r1, [pc, #92]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003194:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4911      	ldr	r1, [pc, #68]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0e      	ldr	r2, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b0:	f7fd fe92 	bl	8000ed8 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031b8:	f7fd fe8e 	bl	8000ed8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e007      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d6:	d1ef      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e049      	b.n	800328e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fd1e 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 f8a6 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d001      	beq.n	80032b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e04c      	b.n	800334a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <HAL_TIM_Base_Start+0xc0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d022      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d01d      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_TIM_Base_Start+0xc4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d018      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_TIM_Base_Start+0xc8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d013      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_TIM_Base_Start+0xcc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00e      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_TIM_Base_Start+0xd0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_TIM_Base_Start+0xd4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d004      	beq.n	8003308 <HAL_TIM_Base_Start+0x70>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <HAL_TIM_Base_Start+0xd8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d115      	bne.n	8003334 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_TIM_Base_Start+0xdc>)
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d015      	beq.n	8003346 <HAL_TIM_Base_Start+0xae>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d011      	beq.n	8003346 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003332:	e008      	b.n	8003346 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	e000      	b.n	8003348 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40010400 	.word	0x40010400
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800
 8003374:	00010007 	.word	0x00010007

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <TIM_Base_SetConfig+0x114>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d013      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d00f      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3d      	ldr	r2, [pc, #244]	; (8003490 <TIM_Base_SetConfig+0x118>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3c      	ldr	r2, [pc, #240]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3b      	ldr	r2, [pc, #236]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3a      	ldr	r2, [pc, #232]	; (800349c <TIM_Base_SetConfig+0x124>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d108      	bne.n	80033ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <TIM_Base_SetConfig+0x114>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d02b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d027      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2c      	ldr	r2, [pc, #176]	; (8003490 <TIM_Base_SetConfig+0x118>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d023      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <TIM_Base_SetConfig+0x11c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <TIM_Base_SetConfig+0x120>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a29      	ldr	r2, [pc, #164]	; (800349c <TIM_Base_SetConfig+0x124>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d017      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <TIM_Base_SetConfig+0x128>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d013      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <TIM_Base_SetConfig+0x12c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00f      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a26      	ldr	r2, [pc, #152]	; (80034a8 <TIM_Base_SetConfig+0x130>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00b      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a25      	ldr	r2, [pc, #148]	; (80034ac <TIM_Base_SetConfig+0x134>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <TIM_Base_SetConfig+0x138>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d003      	beq.n	800342a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a23      	ldr	r2, [pc, #140]	; (80034b4 <TIM_Base_SetConfig+0x13c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <TIM_Base_SetConfig+0x114>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d003      	beq.n	8003470 <TIM_Base_SetConfig+0xf8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0c      	ldr	r2, [pc, #48]	; (800349c <TIM_Base_SetConfig+0x124>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d103      	bne.n	8003478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	615a      	str	r2, [r3, #20]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40001800 	.word	0x40001800
 80034b0:	40001c00 	.word	0x40001c00
 80034b4:	40002000 	.word	0x40002000

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e06d      	b.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a2f      	ldr	r2, [pc, #188]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d108      	bne.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800350a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d022      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d01d      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d018      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00e      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a15      	ldr	r2, [pc, #84]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d009      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10c      	bne.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40010000 	.word	0x40010000
 80035bc:	40010400 	.word	0x40010400
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000800 	.word	0x40000800
 80035c8:	40000c00 	.word	0x40000c00
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40001800 	.word	0x40001800

080035d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e040      	b.n	8003668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fb7a 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0201 	bic.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fab2 	bl	8003b7c <UART_SetConfig>
 8003618:	4603      	mov	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e022      	b.n	8003668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd08 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800363e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800364e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fd8f 	bl	8004184 <UART_CheckIdleState>
 8003666:	4603      	mov	r3, r0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003682:	2b20      	cmp	r3, #32
 8003684:	d145      	bne.n	8003712 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit_IT+0x22>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e03e      	b.n	8003714 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit_IT+0x34>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e037      	b.n	8003714 <HAL_UART_Transmit_IT+0xa4>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	88fa      	ldrh	r2, [r7, #6]
 80036be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2221      	movs	r2, #33	; 0x21
 80036d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d107      	bne.n	80036f0 <HAL_UART_Transmit_IT+0x80>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_UART_Transmit_IT+0xb0>)
 80036ec:	669a      	str	r2, [r3, #104]	; 0x68
 80036ee:	e002      	b.n	80036f6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <HAL_UART_Transmit_IT+0xb4>)
 80036f4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800370c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003712:	2302      	movs	r3, #2
  }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	0800440b 	.word	0x0800440b
 8003724:	08004399 	.word	0x08004399

08003728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f640 030f 	movw	r3, #2063	; 0x80f
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 81cc 	beq.w	8003b0e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	4798      	blx	r3
      }
      return;
 800377e:	e1c6      	b.n	8003b0e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80e3 	beq.w	800394e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4ba5      	ldr	r3, [pc, #660]	; (8003a2c <HAL_UART_IRQHandler+0x304>)
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80d8 	beq.w	800394e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d010      	beq.n	80037ca <HAL_UART_IRQHandler+0xa2>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2201      	movs	r2, #1
 80037b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d010      	beq.n	80037f6 <HAL_UART_IRQHandler+0xce>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2202      	movs	r2, #2
 80037e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_UART_IRQHandler+0xfa>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2204      	movs	r2, #4
 8003810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003818:	f043 0202 	orr.w	r2, r3, #2
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d015      	beq.n	8003858 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d104      	bne.n	8003840 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2208      	movs	r2, #8
 8003846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384e:	f043 0208 	orr.w	r2, r3, #8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385e:	2b00      	cmp	r3, #0
 8003860:	d011      	beq.n	8003886 <HAL_UART_IRQHandler+0x15e>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8140 	beq.w	8003b12 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00c      	beq.n	80038b6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d004      	beq.n	80038d6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d031      	beq.n	800393a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fd19 	bl	800430e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d123      	bne.n	8003932 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d013      	beq.n	800392a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <HAL_UART_IRQHandler+0x308>)
 8003908:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f93b 	bl	8001b8a <HAL_DMA_Abort_IT>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d017      	beq.n	800394a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003924:	4610      	mov	r0, r2
 8003926:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00f      	b.n	800394a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f906 	bl	8003b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e00b      	b.n	800394a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f902 	bl	8003b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	e007      	b.n	800394a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8fe 	bl	8003b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003948:	e0e3      	b.n	8003b12 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	bf00      	nop
    return;
 800394c:	e0e1      	b.n	8003b12 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003952:	2b01      	cmp	r3, #1
 8003954:	f040 80a7 	bne.w	8003aa6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80a1 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 809b 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d156      	bne.n	8003a34 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003990:	893b      	ldrh	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80bf 	beq.w	8003b16 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800399e:	893a      	ldrh	r2, [r7, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	f080 80b8 	bcs.w	8003b16 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b8:	d02a      	beq.n	8003a10 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0210 	bic.w	r2, r2, #16
 8003a04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f84d 	bl	8001aaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f893 	bl	8003b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a2a:	e074      	b.n	8003b16 <HAL_UART_IRQHandler+0x3ee>
 8003a2c:	04000120 	.word	0x04000120
 8003a30:	0800436d 	.word	0x0800436d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8003a52:	897b      	ldrh	r3, [r7, #10]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d060      	beq.n	8003b1a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a66:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0210 	bic.w	r2, r2, #16
 8003a98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f856 	bl	8003b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa4:	e039      	b.n	8003b1a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_UART_IRQHandler+0x3a4>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f84f 	bl	8003b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aca:	e029      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01a      	beq.n	8003b1e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
    }
    return;
 8003af0:	e015      	b.n	8003b1e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d011      	beq.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fcbd 	bl	8004486 <UART_EndTransmit_IT>
    return;
 8003b0c:	e008      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003b0e:	bf00      	nop
 8003b10:	e006      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003b1e:	bf00      	nop
  }

}
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop

08003b28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4ba7      	ldr	r3, [pc, #668]	; (8003e44 <UART_SetConfig+0x2c8>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a95      	ldr	r2, [pc, #596]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d120      	bne.n	8003c3a <UART_SetConfig+0xbe>
 8003bf8:	4b94      	ldr	r3, [pc, #592]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d816      	bhi.n	8003c34 <UART_SetConfig+0xb8>
 8003c06:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x90>)
 8003c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c23 	.word	0x08003c23
 8003c18:	08003c2f 	.word	0x08003c2f
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e14f      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e14c      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e149      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e146      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e143      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a84      	ldr	r2, [pc, #528]	; (8003e50 <UART_SetConfig+0x2d4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d132      	bne.n	8003caa <UART_SetConfig+0x12e>
 8003c44:	4b81      	ldr	r3, [pc, #516]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d828      	bhi.n	8003ca4 <UART_SetConfig+0x128>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0xdc>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003c93 	.word	0x08003c93
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003ca5 	.word	0x08003ca5
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e117      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c92:	2302      	movs	r3, #2
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e114      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e111      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e10e      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e10b      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a69      	ldr	r2, [pc, #420]	; (8003e54 <UART_SetConfig+0x2d8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d120      	bne.n	8003cf6 <UART_SetConfig+0x17a>
 8003cb4:	4b65      	ldr	r3, [pc, #404]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d013      	beq.n	8003cea <UART_SetConfig+0x16e>
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	d814      	bhi.n	8003cf0 <UART_SetConfig+0x174>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d009      	beq.n	8003cde <UART_SetConfig+0x162>
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d810      	bhi.n	8003cf0 <UART_SetConfig+0x174>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x15c>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d006      	beq.n	8003ce4 <UART_SetConfig+0x168>
 8003cd6:	e00b      	b.n	8003cf0 <UART_SetConfig+0x174>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e0f1      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e0ee      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e0eb      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003cea:	2308      	movs	r3, #8
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e0e8      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e0e5      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a57      	ldr	r2, [pc, #348]	; (8003e58 <UART_SetConfig+0x2dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d120      	bne.n	8003d42 <UART_SetConfig+0x1c6>
 8003d00:	4b52      	ldr	r3, [pc, #328]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d013      	beq.n	8003d36 <UART_SetConfig+0x1ba>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x1c0>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d009      	beq.n	8003d2a <UART_SetConfig+0x1ae>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d810      	bhi.n	8003d3c <UART_SetConfig+0x1c0>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x1a8>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x1b4>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x1c0>
 8003d24:	2300      	movs	r3, #0
 8003d26:	77fb      	strb	r3, [r7, #31]
 8003d28:	e0cb      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e0c8      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d30:	2304      	movs	r3, #4
 8003d32:	77fb      	strb	r3, [r7, #31]
 8003d34:	e0c5      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d36:	2308      	movs	r3, #8
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e0c2      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e0bf      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a45      	ldr	r2, [pc, #276]	; (8003e5c <UART_SetConfig+0x2e0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d125      	bne.n	8003d98 <UART_SetConfig+0x21c>
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d017      	beq.n	8003d8c <UART_SetConfig+0x210>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d817      	bhi.n	8003d92 <UART_SetConfig+0x216>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d00b      	beq.n	8003d80 <UART_SetConfig+0x204>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d811      	bhi.n	8003d92 <UART_SetConfig+0x216>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <UART_SetConfig+0x1fe>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d006      	beq.n	8003d86 <UART_SetConfig+0x20a>
 8003d78:	e00b      	b.n	8003d92 <UART_SetConfig+0x216>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	77fb      	strb	r3, [r7, #31]
 8003d7e:	e0a0      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d80:	2302      	movs	r3, #2
 8003d82:	77fb      	strb	r3, [r7, #31]
 8003d84:	e09d      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d86:	2304      	movs	r3, #4
 8003d88:	77fb      	strb	r3, [r7, #31]
 8003d8a:	e09a      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e097      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d92:	2310      	movs	r3, #16
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e094      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a30      	ldr	r2, [pc, #192]	; (8003e60 <UART_SetConfig+0x2e4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d125      	bne.n	8003dee <UART_SetConfig+0x272>
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db0:	d017      	beq.n	8003de2 <UART_SetConfig+0x266>
 8003db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db6:	d817      	bhi.n	8003de8 <UART_SetConfig+0x26c>
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d00b      	beq.n	8003dd6 <UART_SetConfig+0x25a>
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d811      	bhi.n	8003de8 <UART_SetConfig+0x26c>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <UART_SetConfig+0x254>
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d006      	beq.n	8003ddc <UART_SetConfig+0x260>
 8003dce:	e00b      	b.n	8003de8 <UART_SetConfig+0x26c>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	77fb      	strb	r3, [r7, #31]
 8003dd4:	e075      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	77fb      	strb	r3, [r7, #31]
 8003dda:	e072      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e06f      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003de2:	2308      	movs	r3, #8
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e06c      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003de8:	2310      	movs	r3, #16
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e069      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1c      	ldr	r2, [pc, #112]	; (8003e64 <UART_SetConfig+0x2e8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d137      	bne.n	8003e68 <UART_SetConfig+0x2ec>
 8003df8:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e06:	d017      	beq.n	8003e38 <UART_SetConfig+0x2bc>
 8003e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e0c:	d817      	bhi.n	8003e3e <UART_SetConfig+0x2c2>
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d00b      	beq.n	8003e2c <UART_SetConfig+0x2b0>
 8003e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e18:	d811      	bhi.n	8003e3e <UART_SetConfig+0x2c2>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <UART_SetConfig+0x2aa>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e22:	d006      	beq.n	8003e32 <UART_SetConfig+0x2b6>
 8003e24:	e00b      	b.n	8003e3e <UART_SetConfig+0x2c2>
 8003e26:	2300      	movs	r3, #0
 8003e28:	77fb      	strb	r3, [r7, #31]
 8003e2a:	e04a      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e047      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003e32:	2304      	movs	r3, #4
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e044      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e041      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003e3e:	2310      	movs	r3, #16
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e03e      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003e44:	efff69f3 	.word	0xefff69f3
 8003e48:	40011000 	.word	0x40011000
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40004400 	.word	0x40004400
 8003e54:	40004800 	.word	0x40004800
 8003e58:	40004c00 	.word	0x40004c00
 8003e5c:	40005000 	.word	0x40005000
 8003e60:	40011400 	.word	0x40011400
 8003e64:	40007800 	.word	0x40007800
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a71      	ldr	r2, [pc, #452]	; (8004034 <UART_SetConfig+0x4b8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d125      	bne.n	8003ebe <UART_SetConfig+0x342>
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <UART_SetConfig+0x4bc>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e80:	d017      	beq.n	8003eb2 <UART_SetConfig+0x336>
 8003e82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003e86:	d817      	bhi.n	8003eb8 <UART_SetConfig+0x33c>
 8003e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e8c:	d00b      	beq.n	8003ea6 <UART_SetConfig+0x32a>
 8003e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e92:	d811      	bhi.n	8003eb8 <UART_SetConfig+0x33c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <UART_SetConfig+0x324>
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9c:	d006      	beq.n	8003eac <UART_SetConfig+0x330>
 8003e9e:	e00b      	b.n	8003eb8 <UART_SetConfig+0x33c>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e00d      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e00a      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003eac:	2304      	movs	r3, #4
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e007      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	77fb      	strb	r3, [r7, #31]
 8003eb6:	e004      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e001      	b.n	8003ec2 <UART_SetConfig+0x346>
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eca:	d15b      	bne.n	8003f84 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d827      	bhi.n	8003f22 <UART_SetConfig+0x3a6>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x35c>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fd24 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8003f00:	61b8      	str	r0, [r7, #24]
        break;
 8003f02:	e013      	b.n	8003f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fd34 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8003f08:	61b8      	str	r0, [r7, #24]
        break;
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b4b      	ldr	r3, [pc, #300]	; (800403c <UART_SetConfig+0x4c0>)
 8003f0e:	61bb      	str	r3, [r7, #24]
        break;
 8003f10:	e00c      	b.n	8003f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fc57 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003f16:	61b8      	str	r0, [r7, #24]
        break;
 8003f18:	e008      	b.n	8003f2c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	61bb      	str	r3, [r7, #24]
        break;
 8003f20:	e004      	b.n	8003f2c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77bb      	strb	r3, [r7, #30]
        break;
 8003f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d074      	beq.n	800401c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	005a      	lsls	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b0f      	cmp	r3, #15
 8003f4e:	d916      	bls.n	8003f7e <UART_SetConfig+0x402>
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f56:	d212      	bcs.n	8003f7e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	89fb      	ldrh	r3, [r7, #14]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	89fa      	ldrh	r2, [r7, #14]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e04e      	b.n	800401c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77bb      	strb	r3, [r7, #30]
 8003f82:	e04b      	b.n	800401c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d827      	bhi.n	8003fda <UART_SetConfig+0x45e>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x414>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	08003fdb 	.word	0x08003fdb
 8003fa0:	08003fcb 	.word	0x08003fcb
 8003fa4:	08003fdb 	.word	0x08003fdb
 8003fa8:	08003fdb 	.word	0x08003fdb
 8003fac:	08003fdb 	.word	0x08003fdb
 8003fb0:	08003fd3 	.word	0x08003fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7fe fcc8 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61b8      	str	r0, [r7, #24]
        break;
 8003fba:	e013      	b.n	8003fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7fe fcd8 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <UART_SetConfig+0x4c0>)
 8003fc6:	61bb      	str	r3, [r7, #24]
        break;
 8003fc8:	e00c      	b.n	8003fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fca:	f7fe fbfb 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8003fce:	61b8      	str	r0, [r7, #24]
        break;
 8003fd0:	e008      	b.n	8003fe4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	61bb      	str	r3, [r7, #24]
        break;
 8003fd8:	e004      	b.n	8003fe4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77bb      	strb	r3, [r7, #30]
        break;
 8003fe2:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	085a      	lsrs	r2, r3, #1
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d908      	bls.n	8004018 <UART_SetConfig+0x49c>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d204      	bcs.n	8004018 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	e001      	b.n	800401c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004028:	7fbb      	ldrb	r3, [r7, #30]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40007c00 	.word	0x40007c00
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fc fea0 	bl	8000ed8 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10e      	bne.n	80041c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82d 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e023      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f817 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00d      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e05e      	b.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d05a      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fc fe52 	bl	8000ed8 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <UART_WaitOnFlagUntilTimeout+0x30>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11b      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004254:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e043      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02c      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d124      	bne.n	80042e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e00f      	b.n	8004306 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	429a      	cmp	r2, r3
 8004302:	d091      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004324:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0201 	bic.w	r2, r2, #1
 8004334:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0210 	bic.w	r2, r2, #16
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004378:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff fbd6 	bl	8003b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a4:	2b21      	cmp	r3, #33	; 0x21
 80043a6:	d12a      	bne.n	80043fe <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d110      	bne.n	80043d6 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80043d4:	e013      	b.n	80043fe <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004416:	2b21      	cmp	r3, #33	; 0x21
 8004418:	d12f      	bne.n	800447a <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d110      	bne.n	8004448 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004444:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004446:	e018      	b.n	800447a <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444c:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800447a:	bf00      	nop
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff fb3c 	bl	8003b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	; (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	; (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	; (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	; (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 fc6a 	bl	8004db0 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08004e50 	.word	0x08004e50
 8004500:	08004e50 	.word	0x08004e50
 8004504:	08004e50 	.word	0x08004e50
 8004508:	08004e54 	.word	0x08004e54

0800450c <memset>:
 800450c:	4402      	add	r2, r0
 800450e:	4603      	mov	r3, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <sniprintf>:
 800451c:	b40c      	push	{r2, r3}
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <sniprintf+0x64>)
 8004522:	1e0c      	subs	r4, r1, #0
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	b09d      	sub	sp, #116	; 0x74
 8004528:	da08      	bge.n	800453c <sniprintf+0x20>
 800452a:	238b      	movs	r3, #139	; 0x8b
 800452c:	602b      	str	r3, [r5, #0]
 800452e:	f04f 30ff 	mov.w	r0, #4294967295
 8004532:	b01d      	add	sp, #116	; 0x74
 8004534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004538:	b002      	add	sp, #8
 800453a:	4770      	bx	lr
 800453c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004540:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004544:	bf14      	ite	ne
 8004546:	f104 33ff 	addne.w	r3, r4, #4294967295
 800454a:	4623      	moveq	r3, r4
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	9307      	str	r3, [sp, #28]
 8004550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004554:	9002      	str	r0, [sp, #8]
 8004556:	9006      	str	r0, [sp, #24]
 8004558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800455c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800455e:	ab21      	add	r3, sp, #132	; 0x84
 8004560:	a902      	add	r1, sp, #8
 8004562:	4628      	mov	r0, r5
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	f000 f871 	bl	800464c <_svfiprintf_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	bfbc      	itt	lt
 800456e:	238b      	movlt	r3, #139	; 0x8b
 8004570:	602b      	strlt	r3, [r5, #0]
 8004572:	2c00      	cmp	r4, #0
 8004574:	d0dd      	beq.n	8004532 <sniprintf+0x16>
 8004576:	9b02      	ldr	r3, [sp, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
 800457c:	e7d9      	b.n	8004532 <sniprintf+0x16>
 800457e:	bf00      	nop
 8004580:	2000000c 	.word	0x2000000c

08004584 <strcpy>:
 8004584:	4603      	mov	r3, r0
 8004586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800458a:	f803 2b01 	strb.w	r2, [r3], #1
 800458e:	2a00      	cmp	r2, #0
 8004590:	d1f9      	bne.n	8004586 <strcpy+0x2>
 8004592:	4770      	bx	lr

08004594 <__ssputs_r>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	688e      	ldr	r6, [r1, #8]
 800459a:	429e      	cmp	r6, r3
 800459c:	4682      	mov	sl, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	4690      	mov	r8, r2
 80045a2:	461f      	mov	r7, r3
 80045a4:	d838      	bhi.n	8004618 <__ssputs_r+0x84>
 80045a6:	898a      	ldrh	r2, [r1, #12]
 80045a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ac:	d032      	beq.n	8004614 <__ssputs_r+0x80>
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	6909      	ldr	r1, [r1, #16]
 80045b2:	eba5 0901 	sub.w	r9, r5, r1
 80045b6:	6965      	ldr	r5, [r4, #20]
 80045b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c0:	3301      	adds	r3, #1
 80045c2:	444b      	add	r3, r9
 80045c4:	106d      	asrs	r5, r5, #1
 80045c6:	429d      	cmp	r5, r3
 80045c8:	bf38      	it	cc
 80045ca:	461d      	movcc	r5, r3
 80045cc:	0553      	lsls	r3, r2, #21
 80045ce:	d531      	bpl.n	8004634 <__ssputs_r+0xa0>
 80045d0:	4629      	mov	r1, r5
 80045d2:	f000 fb47 	bl	8004c64 <_malloc_r>
 80045d6:	4606      	mov	r6, r0
 80045d8:	b950      	cbnz	r0, 80045f0 <__ssputs_r+0x5c>
 80045da:	230c      	movs	r3, #12
 80045dc:	f8ca 3000 	str.w	r3, [sl]
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	6921      	ldr	r1, [r4, #16]
 80045f2:	464a      	mov	r2, r9
 80045f4:	f000 fabe 	bl	8004b74 <memcpy>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	6126      	str	r6, [r4, #16]
 8004606:	6165      	str	r5, [r4, #20]
 8004608:	444e      	add	r6, r9
 800460a:	eba5 0509 	sub.w	r5, r5, r9
 800460e:	6026      	str	r6, [r4, #0]
 8004610:	60a5      	str	r5, [r4, #8]
 8004612:	463e      	mov	r6, r7
 8004614:	42be      	cmp	r6, r7
 8004616:	d900      	bls.n	800461a <__ssputs_r+0x86>
 8004618:	463e      	mov	r6, r7
 800461a:	4632      	mov	r2, r6
 800461c:	6820      	ldr	r0, [r4, #0]
 800461e:	4641      	mov	r1, r8
 8004620:	f000 fab6 	bl	8004b90 <memmove>
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	1b9b      	subs	r3, r3, r6
 800462a:	4432      	add	r2, r6
 800462c:	60a3      	str	r3, [r4, #8]
 800462e:	6022      	str	r2, [r4, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	e7db      	b.n	80045ec <__ssputs_r+0x58>
 8004634:	462a      	mov	r2, r5
 8004636:	f000 fb6f 	bl	8004d18 <_realloc_r>
 800463a:	4606      	mov	r6, r0
 800463c:	2800      	cmp	r0, #0
 800463e:	d1e1      	bne.n	8004604 <__ssputs_r+0x70>
 8004640:	6921      	ldr	r1, [r4, #16]
 8004642:	4650      	mov	r0, sl
 8004644:	f000 fabe 	bl	8004bc4 <_free_r>
 8004648:	e7c7      	b.n	80045da <__ssputs_r+0x46>
	...

0800464c <_svfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	4698      	mov	r8, r3
 8004652:	898b      	ldrh	r3, [r1, #12]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	b09d      	sub	sp, #116	; 0x74
 8004658:	4607      	mov	r7, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4614      	mov	r4, r2
 800465e:	d50e      	bpl.n	800467e <_svfiprintf_r+0x32>
 8004660:	690b      	ldr	r3, [r1, #16]
 8004662:	b963      	cbnz	r3, 800467e <_svfiprintf_r+0x32>
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	f000 fafd 	bl	8004c64 <_malloc_r>
 800466a:	6028      	str	r0, [r5, #0]
 800466c:	6128      	str	r0, [r5, #16]
 800466e:	b920      	cbnz	r0, 800467a <_svfiprintf_r+0x2e>
 8004670:	230c      	movs	r3, #12
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295
 8004678:	e0d1      	b.n	800481e <_svfiprintf_r+0x1d2>
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	616b      	str	r3, [r5, #20]
 800467e:	2300      	movs	r3, #0
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
 8004682:	2320      	movs	r3, #32
 8004684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004688:	f8cd 800c 	str.w	r8, [sp, #12]
 800468c:	2330      	movs	r3, #48	; 0x30
 800468e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004838 <_svfiprintf_r+0x1ec>
 8004692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004696:	f04f 0901 	mov.w	r9, #1
 800469a:	4623      	mov	r3, r4
 800469c:	469a      	mov	sl, r3
 800469e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a2:	b10a      	cbz	r2, 80046a8 <_svfiprintf_r+0x5c>
 80046a4:	2a25      	cmp	r2, #37	; 0x25
 80046a6:	d1f9      	bne.n	800469c <_svfiprintf_r+0x50>
 80046a8:	ebba 0b04 	subs.w	fp, sl, r4
 80046ac:	d00b      	beq.n	80046c6 <_svfiprintf_r+0x7a>
 80046ae:	465b      	mov	r3, fp
 80046b0:	4622      	mov	r2, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	4638      	mov	r0, r7
 80046b6:	f7ff ff6d 	bl	8004594 <__ssputs_r>
 80046ba:	3001      	adds	r0, #1
 80046bc:	f000 80aa 	beq.w	8004814 <_svfiprintf_r+0x1c8>
 80046c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c2:	445a      	add	r2, fp
 80046c4:	9209      	str	r2, [sp, #36]	; 0x24
 80046c6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a2 	beq.w	8004814 <_svfiprintf_r+0x1c8>
 80046d0:	2300      	movs	r3, #0
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295
 80046d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046da:	f10a 0a01 	add.w	sl, sl, #1
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046e6:	931a      	str	r3, [sp, #104]	; 0x68
 80046e8:	4654      	mov	r4, sl
 80046ea:	2205      	movs	r2, #5
 80046ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f0:	4851      	ldr	r0, [pc, #324]	; (8004838 <_svfiprintf_r+0x1ec>)
 80046f2:	f7fb fdad 	bl	8000250 <memchr>
 80046f6:	9a04      	ldr	r2, [sp, #16]
 80046f8:	b9d8      	cbnz	r0, 8004732 <_svfiprintf_r+0xe6>
 80046fa:	06d0      	lsls	r0, r2, #27
 80046fc:	bf44      	itt	mi
 80046fe:	2320      	movmi	r3, #32
 8004700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004704:	0711      	lsls	r1, r2, #28
 8004706:	bf44      	itt	mi
 8004708:	232b      	movmi	r3, #43	; 0x2b
 800470a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470e:	f89a 3000 	ldrb.w	r3, [sl]
 8004712:	2b2a      	cmp	r3, #42	; 0x2a
 8004714:	d015      	beq.n	8004742 <_svfiprintf_r+0xf6>
 8004716:	9a07      	ldr	r2, [sp, #28]
 8004718:	4654      	mov	r4, sl
 800471a:	2000      	movs	r0, #0
 800471c:	f04f 0c0a 	mov.w	ip, #10
 8004720:	4621      	mov	r1, r4
 8004722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004726:	3b30      	subs	r3, #48	; 0x30
 8004728:	2b09      	cmp	r3, #9
 800472a:	d94e      	bls.n	80047ca <_svfiprintf_r+0x17e>
 800472c:	b1b0      	cbz	r0, 800475c <_svfiprintf_r+0x110>
 800472e:	9207      	str	r2, [sp, #28]
 8004730:	e014      	b.n	800475c <_svfiprintf_r+0x110>
 8004732:	eba0 0308 	sub.w	r3, r0, r8
 8004736:	fa09 f303 	lsl.w	r3, r9, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	46a2      	mov	sl, r4
 8004740:	e7d2      	b.n	80046e8 <_svfiprintf_r+0x9c>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	1d19      	adds	r1, r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	9103      	str	r1, [sp, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbb      	ittet	lt
 800474e:	425b      	neglt	r3, r3
 8004750:	f042 0202 	orrlt.w	r2, r2, #2
 8004754:	9307      	strge	r3, [sp, #28]
 8004756:	9307      	strlt	r3, [sp, #28]
 8004758:	bfb8      	it	lt
 800475a:	9204      	strlt	r2, [sp, #16]
 800475c:	7823      	ldrb	r3, [r4, #0]
 800475e:	2b2e      	cmp	r3, #46	; 0x2e
 8004760:	d10c      	bne.n	800477c <_svfiprintf_r+0x130>
 8004762:	7863      	ldrb	r3, [r4, #1]
 8004764:	2b2a      	cmp	r3, #42	; 0x2a
 8004766:	d135      	bne.n	80047d4 <_svfiprintf_r+0x188>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	bfb8      	it	lt
 8004774:	f04f 33ff 	movlt.w	r3, #4294967295
 8004778:	3402      	adds	r4, #2
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004848 <_svfiprintf_r+0x1fc>
 8004780:	7821      	ldrb	r1, [r4, #0]
 8004782:	2203      	movs	r2, #3
 8004784:	4650      	mov	r0, sl
 8004786:	f7fb fd63 	bl	8000250 <memchr>
 800478a:	b140      	cbz	r0, 800479e <_svfiprintf_r+0x152>
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	eba0 000a 	sub.w	r0, r0, sl
 8004792:	fa03 f000 	lsl.w	r0, r3, r0
 8004796:	9b04      	ldr	r3, [sp, #16]
 8004798:	4303      	orrs	r3, r0
 800479a:	3401      	adds	r4, #1
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a2:	4826      	ldr	r0, [pc, #152]	; (800483c <_svfiprintf_r+0x1f0>)
 80047a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047a8:	2206      	movs	r2, #6
 80047aa:	f7fb fd51 	bl	8000250 <memchr>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d038      	beq.n	8004824 <_svfiprintf_r+0x1d8>
 80047b2:	4b23      	ldr	r3, [pc, #140]	; (8004840 <_svfiprintf_r+0x1f4>)
 80047b4:	bb1b      	cbnz	r3, 80047fe <_svfiprintf_r+0x1b2>
 80047b6:	9b03      	ldr	r3, [sp, #12]
 80047b8:	3307      	adds	r3, #7
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	3308      	adds	r3, #8
 80047c0:	9303      	str	r3, [sp, #12]
 80047c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c4:	4433      	add	r3, r6
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
 80047c8:	e767      	b.n	800469a <_svfiprintf_r+0x4e>
 80047ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ce:	460c      	mov	r4, r1
 80047d0:	2001      	movs	r0, #1
 80047d2:	e7a5      	b.n	8004720 <_svfiprintf_r+0xd4>
 80047d4:	2300      	movs	r3, #0
 80047d6:	3401      	adds	r4, #1
 80047d8:	9305      	str	r3, [sp, #20]
 80047da:	4619      	mov	r1, r3
 80047dc:	f04f 0c0a 	mov.w	ip, #10
 80047e0:	4620      	mov	r0, r4
 80047e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e6:	3a30      	subs	r2, #48	; 0x30
 80047e8:	2a09      	cmp	r2, #9
 80047ea:	d903      	bls.n	80047f4 <_svfiprintf_r+0x1a8>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0c5      	beq.n	800477c <_svfiprintf_r+0x130>
 80047f0:	9105      	str	r1, [sp, #20]
 80047f2:	e7c3      	b.n	800477c <_svfiprintf_r+0x130>
 80047f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f8:	4604      	mov	r4, r0
 80047fa:	2301      	movs	r3, #1
 80047fc:	e7f0      	b.n	80047e0 <_svfiprintf_r+0x194>
 80047fe:	ab03      	add	r3, sp, #12
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	462a      	mov	r2, r5
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <_svfiprintf_r+0x1f8>)
 8004806:	a904      	add	r1, sp, #16
 8004808:	4638      	mov	r0, r7
 800480a:	f3af 8000 	nop.w
 800480e:	1c42      	adds	r2, r0, #1
 8004810:	4606      	mov	r6, r0
 8004812:	d1d6      	bne.n	80047c2 <_svfiprintf_r+0x176>
 8004814:	89ab      	ldrh	r3, [r5, #12]
 8004816:	065b      	lsls	r3, r3, #25
 8004818:	f53f af2c 	bmi.w	8004674 <_svfiprintf_r+0x28>
 800481c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800481e:	b01d      	add	sp, #116	; 0x74
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	462a      	mov	r2, r5
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <_svfiprintf_r+0x1f8>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4638      	mov	r0, r7
 8004830:	f000 f87a 	bl	8004928 <_printf_i>
 8004834:	e7eb      	b.n	800480e <_svfiprintf_r+0x1c2>
 8004836:	bf00      	nop
 8004838:	08004e14 	.word	0x08004e14
 800483c:	08004e1e 	.word	0x08004e1e
 8004840:	00000000 	.word	0x00000000
 8004844:	08004595 	.word	0x08004595
 8004848:	08004e1a 	.word	0x08004e1a

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4699      	mov	r9, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800485c:	4293      	cmp	r3, r2
 800485e:	bfb8      	it	lt
 8004860:	4613      	movlt	r3, r2
 8004862:	6033      	str	r3, [r6, #0]
 8004864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004868:	4607      	mov	r7, r0
 800486a:	460c      	mov	r4, r1
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc26      	bgt.n	80048e2 <_printf_common+0x96>
 8004894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004898:	1e13      	subs	r3, r2, #0
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d42b      	bmi.n	80048fc <_printf_common+0xb0>
 80048a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d01e      	beq.n	80048f0 <_printf_common+0xa4>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	68e5      	ldr	r5, [r4, #12]
 80048b6:	6832      	ldr	r2, [r6, #0]
 80048b8:	f003 0306 	and.w	r3, r3, #6
 80048bc:	2b04      	cmp	r3, #4
 80048be:	bf08      	it	eq
 80048c0:	1aad      	subeq	r5, r5, r2
 80048c2:	68a3      	ldr	r3, [r4, #8]
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	bf0c      	ite	eq
 80048c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048cc:	2500      	movne	r5, #0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bfc4      	itt	gt
 80048d2:	1a9b      	subgt	r3, r3, r2
 80048d4:	18ed      	addgt	r5, r5, r3
 80048d6:	2600      	movs	r6, #0
 80048d8:	341a      	adds	r4, #26
 80048da:	42b5      	cmp	r5, r6
 80048dc:	d11a      	bne.n	8004914 <_printf_common+0xc8>
 80048de:	2000      	movs	r0, #0
 80048e0:	e008      	b.n	80048f4 <_printf_common+0xa8>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4652      	mov	r2, sl
 80048e6:	4649      	mov	r1, r9
 80048e8:	4638      	mov	r0, r7
 80048ea:	47c0      	blx	r8
 80048ec:	3001      	adds	r0, #1
 80048ee:	d103      	bne.n	80048f8 <_printf_common+0xac>
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	3501      	adds	r5, #1
 80048fa:	e7c6      	b.n	800488a <_printf_common+0x3e>
 80048fc:	18e1      	adds	r1, r4, r3
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	2030      	movs	r0, #48	; 0x30
 8004902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004906:	4422      	add	r2, r4
 8004908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800490c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004910:	3302      	adds	r3, #2
 8004912:	e7c7      	b.n	80048a4 <_printf_common+0x58>
 8004914:	2301      	movs	r3, #1
 8004916:	4622      	mov	r2, r4
 8004918:	4649      	mov	r1, r9
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d0e6      	beq.n	80048f0 <_printf_common+0xa4>
 8004922:	3601      	adds	r6, #1
 8004924:	e7d9      	b.n	80048da <_printf_common+0x8e>
	...

08004928 <_printf_i>:
 8004928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	4691      	mov	r9, r2
 8004930:	7e27      	ldrb	r7, [r4, #24]
 8004932:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4680      	mov	r8, r0
 8004938:	469a      	mov	sl, r3
 800493a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800493e:	d807      	bhi.n	8004950 <_printf_i+0x28>
 8004940:	2f62      	cmp	r7, #98	; 0x62
 8004942:	d80a      	bhi.n	800495a <_printf_i+0x32>
 8004944:	2f00      	cmp	r7, #0
 8004946:	f000 80d8 	beq.w	8004afa <_printf_i+0x1d2>
 800494a:	2f58      	cmp	r7, #88	; 0x58
 800494c:	f000 80a3 	beq.w	8004a96 <_printf_i+0x16e>
 8004950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004958:	e03a      	b.n	80049d0 <_printf_i+0xa8>
 800495a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495e:	2b15      	cmp	r3, #21
 8004960:	d8f6      	bhi.n	8004950 <_printf_i+0x28>
 8004962:	a001      	add	r0, pc, #4	; (adr r0, 8004968 <_printf_i+0x40>)
 8004964:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004968:	080049c1 	.word	0x080049c1
 800496c:	080049d5 	.word	0x080049d5
 8004970:	08004951 	.word	0x08004951
 8004974:	08004951 	.word	0x08004951
 8004978:	08004951 	.word	0x08004951
 800497c:	08004951 	.word	0x08004951
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004951 	.word	0x08004951
 8004988:	08004951 	.word	0x08004951
 800498c:	08004951 	.word	0x08004951
 8004990:	08004951 	.word	0x08004951
 8004994:	08004ae1 	.word	0x08004ae1
 8004998:	08004a05 	.word	0x08004a05
 800499c:	08004ac3 	.word	0x08004ac3
 80049a0:	08004951 	.word	0x08004951
 80049a4:	08004951 	.word	0x08004951
 80049a8:	08004b03 	.word	0x08004b03
 80049ac:	08004951 	.word	0x08004951
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004951 	.word	0x08004951
 80049b8:	08004951 	.word	0x08004951
 80049bc:	08004acb 	.word	0x08004acb
 80049c0:	680b      	ldr	r3, [r1, #0]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	600a      	str	r2, [r1, #0]
 80049c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0a3      	b.n	8004b1c <_printf_i+0x1f4>
 80049d4:	6825      	ldr	r5, [r4, #0]
 80049d6:	6808      	ldr	r0, [r1, #0]
 80049d8:	062e      	lsls	r6, r5, #24
 80049da:	f100 0304 	add.w	r3, r0, #4
 80049de:	d50a      	bpl.n	80049f6 <_printf_i+0xce>
 80049e0:	6805      	ldr	r5, [r0, #0]
 80049e2:	600b      	str	r3, [r1, #0]
 80049e4:	2d00      	cmp	r5, #0
 80049e6:	da03      	bge.n	80049f0 <_printf_i+0xc8>
 80049e8:	232d      	movs	r3, #45	; 0x2d
 80049ea:	426d      	negs	r5, r5
 80049ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f0:	485e      	ldr	r0, [pc, #376]	; (8004b6c <_printf_i+0x244>)
 80049f2:	230a      	movs	r3, #10
 80049f4:	e019      	b.n	8004a2a <_printf_i+0x102>
 80049f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049fa:	6805      	ldr	r5, [r0, #0]
 80049fc:	600b      	str	r3, [r1, #0]
 80049fe:	bf18      	it	ne
 8004a00:	b22d      	sxthne	r5, r5
 8004a02:	e7ef      	b.n	80049e4 <_printf_i+0xbc>
 8004a04:	680b      	ldr	r3, [r1, #0]
 8004a06:	6825      	ldr	r5, [r4, #0]
 8004a08:	1d18      	adds	r0, r3, #4
 8004a0a:	6008      	str	r0, [r1, #0]
 8004a0c:	0628      	lsls	r0, r5, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xec>
 8004a10:	681d      	ldr	r5, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <_printf_i+0xf2>
 8004a14:	0669      	lsls	r1, r5, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xe8>
 8004a18:	881d      	ldrh	r5, [r3, #0]
 8004a1a:	4854      	ldr	r0, [pc, #336]	; (8004b6c <_printf_i+0x244>)
 8004a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1e:	bf0c      	ite	eq
 8004a20:	2308      	moveq	r3, #8
 8004a22:	230a      	movne	r3, #10
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2a:	6866      	ldr	r6, [r4, #4]
 8004a2c:	60a6      	str	r6, [r4, #8]
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	bfa2      	ittt	ge
 8004a32:	6821      	ldrge	r1, [r4, #0]
 8004a34:	f021 0104 	bicge.w	r1, r1, #4
 8004a38:	6021      	strge	r1, [r4, #0]
 8004a3a:	b90d      	cbnz	r5, 8004a40 <_printf_i+0x118>
 8004a3c:	2e00      	cmp	r6, #0
 8004a3e:	d04d      	beq.n	8004adc <_printf_i+0x1b4>
 8004a40:	4616      	mov	r6, r2
 8004a42:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a46:	fb03 5711 	mls	r7, r3, r1, r5
 8004a4a:	5dc7      	ldrb	r7, [r0, r7]
 8004a4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a50:	462f      	mov	r7, r5
 8004a52:	42bb      	cmp	r3, r7
 8004a54:	460d      	mov	r5, r1
 8004a56:	d9f4      	bls.n	8004a42 <_printf_i+0x11a>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d10b      	bne.n	8004a74 <_printf_i+0x14c>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07df      	lsls	r7, r3, #31
 8004a60:	d508      	bpl.n	8004a74 <_printf_i+0x14c>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	6861      	ldr	r1, [r4, #4]
 8004a66:	4299      	cmp	r1, r3
 8004a68:	bfde      	ittt	le
 8004a6a:	2330      	movle	r3, #48	; 0x30
 8004a6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a74:	1b92      	subs	r2, r2, r6
 8004a76:	6122      	str	r2, [r4, #16]
 8004a78:	f8cd a000 	str.w	sl, [sp]
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	aa03      	add	r2, sp, #12
 8004a80:	4621      	mov	r1, r4
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff fee2 	bl	800484c <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d14c      	bne.n	8004b26 <_printf_i+0x1fe>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a90:	b004      	add	sp, #16
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	4835      	ldr	r0, [pc, #212]	; (8004b6c <_printf_i+0x244>)
 8004a98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	680e      	ldr	r6, [r1, #0]
 8004aa0:	061f      	lsls	r7, r3, #24
 8004aa2:	f856 5b04 	ldr.w	r5, [r6], #4
 8004aa6:	600e      	str	r6, [r1, #0]
 8004aa8:	d514      	bpl.n	8004ad4 <_printf_i+0x1ac>
 8004aaa:	07d9      	lsls	r1, r3, #31
 8004aac:	bf44      	itt	mi
 8004aae:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab2:	6023      	strmi	r3, [r4, #0]
 8004ab4:	b91d      	cbnz	r5, 8004abe <_printf_i+0x196>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f023 0320 	bic.w	r3, r3, #32
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	2310      	movs	r3, #16
 8004ac0:	e7b0      	b.n	8004a24 <_printf_i+0xfc>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f043 0320 	orr.w	r3, r3, #32
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	2378      	movs	r3, #120	; 0x78
 8004acc:	4828      	ldr	r0, [pc, #160]	; (8004b70 <_printf_i+0x248>)
 8004ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad2:	e7e3      	b.n	8004a9c <_printf_i+0x174>
 8004ad4:	065e      	lsls	r6, r3, #25
 8004ad6:	bf48      	it	mi
 8004ad8:	b2ad      	uxthmi	r5, r5
 8004ada:	e7e6      	b.n	8004aaa <_printf_i+0x182>
 8004adc:	4616      	mov	r6, r2
 8004ade:	e7bb      	b.n	8004a58 <_printf_i+0x130>
 8004ae0:	680b      	ldr	r3, [r1, #0]
 8004ae2:	6826      	ldr	r6, [r4, #0]
 8004ae4:	6960      	ldr	r0, [r4, #20]
 8004ae6:	1d1d      	adds	r5, r3, #4
 8004ae8:	600d      	str	r5, [r1, #0]
 8004aea:	0635      	lsls	r5, r6, #24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	d501      	bpl.n	8004af4 <_printf_i+0x1cc>
 8004af0:	6018      	str	r0, [r3, #0]
 8004af2:	e002      	b.n	8004afa <_printf_i+0x1d2>
 8004af4:	0671      	lsls	r1, r6, #25
 8004af6:	d5fb      	bpl.n	8004af0 <_printf_i+0x1c8>
 8004af8:	8018      	strh	r0, [r3, #0]
 8004afa:	2300      	movs	r3, #0
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	4616      	mov	r6, r2
 8004b00:	e7ba      	b.n	8004a78 <_printf_i+0x150>
 8004b02:	680b      	ldr	r3, [r1, #0]
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	600a      	str	r2, [r1, #0]
 8004b08:	681e      	ldr	r6, [r3, #0]
 8004b0a:	6862      	ldr	r2, [r4, #4]
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f7fb fb9e 	bl	8000250 <memchr>
 8004b14:	b108      	cbz	r0, 8004b1a <_printf_i+0x1f2>
 8004b16:	1b80      	subs	r0, r0, r6
 8004b18:	6060      	str	r0, [r4, #4]
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b24:	e7a8      	b.n	8004a78 <_printf_i+0x150>
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	4632      	mov	r2, r6
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	47d0      	blx	sl
 8004b30:	3001      	adds	r0, #1
 8004b32:	d0ab      	beq.n	8004a8c <_printf_i+0x164>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	079b      	lsls	r3, r3, #30
 8004b38:	d413      	bmi.n	8004b62 <_printf_i+0x23a>
 8004b3a:	68e0      	ldr	r0, [r4, #12]
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	bfb8      	it	lt
 8004b42:	4618      	movlt	r0, r3
 8004b44:	e7a4      	b.n	8004a90 <_printf_i+0x168>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	47d0      	blx	sl
 8004b50:	3001      	adds	r0, #1
 8004b52:	d09b      	beq.n	8004a8c <_printf_i+0x164>
 8004b54:	3501      	adds	r5, #1
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	9903      	ldr	r1, [sp, #12]
 8004b5a:	1a5b      	subs	r3, r3, r1
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dcf2      	bgt.n	8004b46 <_printf_i+0x21e>
 8004b60:	e7eb      	b.n	8004b3a <_printf_i+0x212>
 8004b62:	2500      	movs	r5, #0
 8004b64:	f104 0619 	add.w	r6, r4, #25
 8004b68:	e7f5      	b.n	8004b56 <_printf_i+0x22e>
 8004b6a:	bf00      	nop
 8004b6c:	08004e25 	.word	0x08004e25
 8004b70:	08004e36 	.word	0x08004e36

08004b74 <memcpy>:
 8004b74:	440a      	add	r2, r1
 8004b76:	4291      	cmp	r1, r2
 8004b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b7c:	d100      	bne.n	8004b80 <memcpy+0xc>
 8004b7e:	4770      	bx	lr
 8004b80:	b510      	push	{r4, lr}
 8004b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	d1f9      	bne.n	8004b82 <memcpy+0xe>
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0402 	add.w	r4, r1, r2
 8004b98:	d902      	bls.n	8004ba0 <memmove+0x10>
 8004b9a:	4284      	cmp	r4, r0
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	d807      	bhi.n	8004bb0 <memmove+0x20>
 8004ba0:	1e43      	subs	r3, r0, #1
 8004ba2:	42a1      	cmp	r1, r4
 8004ba4:	d008      	beq.n	8004bb8 <memmove+0x28>
 8004ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bae:	e7f8      	b.n	8004ba2 <memmove+0x12>
 8004bb0:	4402      	add	r2, r0
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	428a      	cmp	r2, r1
 8004bb6:	d100      	bne.n	8004bba <memmove+0x2a>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bc2:	e7f7      	b.n	8004bb4 <memmove+0x24>

08004bc4 <_free_r>:
 8004bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d048      	beq.n	8004c5c <_free_r+0x98>
 8004bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bce:	9001      	str	r0, [sp, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bd6:	bfb8      	it	lt
 8004bd8:	18e4      	addlt	r4, r4, r3
 8004bda:	f000 f8d3 	bl	8004d84 <__malloc_lock>
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <_free_r+0x9c>)
 8004be0:	9801      	ldr	r0, [sp, #4]
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	4615      	mov	r5, r2
 8004be6:	b933      	cbnz	r3, 8004bf6 <_free_r+0x32>
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	6014      	str	r4, [r2, #0]
 8004bec:	b003      	add	sp, #12
 8004bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bf2:	f000 b8cd 	b.w	8004d90 <__malloc_unlock>
 8004bf6:	42a3      	cmp	r3, r4
 8004bf8:	d90b      	bls.n	8004c12 <_free_r+0x4e>
 8004bfa:	6821      	ldr	r1, [r4, #0]
 8004bfc:	1862      	adds	r2, r4, r1
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	bf04      	itt	eq
 8004c02:	681a      	ldreq	r2, [r3, #0]
 8004c04:	685b      	ldreq	r3, [r3, #4]
 8004c06:	6063      	str	r3, [r4, #4]
 8004c08:	bf04      	itt	eq
 8004c0a:	1852      	addeq	r2, r2, r1
 8004c0c:	6022      	streq	r2, [r4, #0]
 8004c0e:	602c      	str	r4, [r5, #0]
 8004c10:	e7ec      	b.n	8004bec <_free_r+0x28>
 8004c12:	461a      	mov	r2, r3
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	b10b      	cbz	r3, 8004c1c <_free_r+0x58>
 8004c18:	42a3      	cmp	r3, r4
 8004c1a:	d9fa      	bls.n	8004c12 <_free_r+0x4e>
 8004c1c:	6811      	ldr	r1, [r2, #0]
 8004c1e:	1855      	adds	r5, r2, r1
 8004c20:	42a5      	cmp	r5, r4
 8004c22:	d10b      	bne.n	8004c3c <_free_r+0x78>
 8004c24:	6824      	ldr	r4, [r4, #0]
 8004c26:	4421      	add	r1, r4
 8004c28:	1854      	adds	r4, r2, r1
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6011      	str	r1, [r2, #0]
 8004c2e:	d1dd      	bne.n	8004bec <_free_r+0x28>
 8004c30:	681c      	ldr	r4, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	6053      	str	r3, [r2, #4]
 8004c36:	4421      	add	r1, r4
 8004c38:	6011      	str	r1, [r2, #0]
 8004c3a:	e7d7      	b.n	8004bec <_free_r+0x28>
 8004c3c:	d902      	bls.n	8004c44 <_free_r+0x80>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	6003      	str	r3, [r0, #0]
 8004c42:	e7d3      	b.n	8004bec <_free_r+0x28>
 8004c44:	6825      	ldr	r5, [r4, #0]
 8004c46:	1961      	adds	r1, r4, r5
 8004c48:	428b      	cmp	r3, r1
 8004c4a:	bf04      	itt	eq
 8004c4c:	6819      	ldreq	r1, [r3, #0]
 8004c4e:	685b      	ldreq	r3, [r3, #4]
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	bf04      	itt	eq
 8004c54:	1949      	addeq	r1, r1, r5
 8004c56:	6021      	streq	r1, [r4, #0]
 8004c58:	6054      	str	r4, [r2, #4]
 8004c5a:	e7c7      	b.n	8004bec <_free_r+0x28>
 8004c5c:	b003      	add	sp, #12
 8004c5e:	bd30      	pop	{r4, r5, pc}
 8004c60:	2000009c 	.word	0x2000009c

08004c64 <_malloc_r>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	1ccd      	adds	r5, r1, #3
 8004c68:	f025 0503 	bic.w	r5, r5, #3
 8004c6c:	3508      	adds	r5, #8
 8004c6e:	2d0c      	cmp	r5, #12
 8004c70:	bf38      	it	cc
 8004c72:	250c      	movcc	r5, #12
 8004c74:	2d00      	cmp	r5, #0
 8004c76:	4606      	mov	r6, r0
 8004c78:	db01      	blt.n	8004c7e <_malloc_r+0x1a>
 8004c7a:	42a9      	cmp	r1, r5
 8004c7c:	d903      	bls.n	8004c86 <_malloc_r+0x22>
 8004c7e:	230c      	movs	r3, #12
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	2000      	movs	r0, #0
 8004c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c86:	f000 f87d 	bl	8004d84 <__malloc_lock>
 8004c8a:	4921      	ldr	r1, [pc, #132]	; (8004d10 <_malloc_r+0xac>)
 8004c8c:	680a      	ldr	r2, [r1, #0]
 8004c8e:	4614      	mov	r4, r2
 8004c90:	b99c      	cbnz	r4, 8004cba <_malloc_r+0x56>
 8004c92:	4f20      	ldr	r7, [pc, #128]	; (8004d14 <_malloc_r+0xb0>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	b923      	cbnz	r3, 8004ca2 <_malloc_r+0x3e>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f000 f862 	bl	8004d64 <_sbrk_r>
 8004ca0:	6038      	str	r0, [r7, #0]
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f000 f85d 	bl	8004d64 <_sbrk_r>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d123      	bne.n	8004cf6 <_malloc_r+0x92>
 8004cae:	230c      	movs	r3, #12
 8004cb0:	6033      	str	r3, [r6, #0]
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f000 f86c 	bl	8004d90 <__malloc_unlock>
 8004cb8:	e7e3      	b.n	8004c82 <_malloc_r+0x1e>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	1b5b      	subs	r3, r3, r5
 8004cbe:	d417      	bmi.n	8004cf0 <_malloc_r+0x8c>
 8004cc0:	2b0b      	cmp	r3, #11
 8004cc2:	d903      	bls.n	8004ccc <_malloc_r+0x68>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	441c      	add	r4, r3
 8004cc8:	6025      	str	r5, [r4, #0]
 8004cca:	e004      	b.n	8004cd6 <_malloc_r+0x72>
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	42a2      	cmp	r2, r4
 8004cd0:	bf0c      	ite	eq
 8004cd2:	600b      	streq	r3, [r1, #0]
 8004cd4:	6053      	strne	r3, [r2, #4]
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 f85a 	bl	8004d90 <__malloc_unlock>
 8004cdc:	f104 000b 	add.w	r0, r4, #11
 8004ce0:	1d23      	adds	r3, r4, #4
 8004ce2:	f020 0007 	bic.w	r0, r0, #7
 8004ce6:	1ac2      	subs	r2, r0, r3
 8004ce8:	d0cc      	beq.n	8004c84 <_malloc_r+0x20>
 8004cea:	1a1b      	subs	r3, r3, r0
 8004cec:	50a3      	str	r3, [r4, r2]
 8004cee:	e7c9      	b.n	8004c84 <_malloc_r+0x20>
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	6864      	ldr	r4, [r4, #4]
 8004cf4:	e7cc      	b.n	8004c90 <_malloc_r+0x2c>
 8004cf6:	1cc4      	adds	r4, r0, #3
 8004cf8:	f024 0403 	bic.w	r4, r4, #3
 8004cfc:	42a0      	cmp	r0, r4
 8004cfe:	d0e3      	beq.n	8004cc8 <_malloc_r+0x64>
 8004d00:	1a21      	subs	r1, r4, r0
 8004d02:	4630      	mov	r0, r6
 8004d04:	f000 f82e 	bl	8004d64 <_sbrk_r>
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d1dd      	bne.n	8004cc8 <_malloc_r+0x64>
 8004d0c:	e7cf      	b.n	8004cae <_malloc_r+0x4a>
 8004d0e:	bf00      	nop
 8004d10:	2000009c 	.word	0x2000009c
 8004d14:	200000a0 	.word	0x200000a0

08004d18 <_realloc_r>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	4614      	mov	r4, r2
 8004d1e:	460e      	mov	r6, r1
 8004d20:	b921      	cbnz	r1, 8004d2c <_realloc_r+0x14>
 8004d22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d26:	4611      	mov	r1, r2
 8004d28:	f7ff bf9c 	b.w	8004c64 <_malloc_r>
 8004d2c:	b922      	cbnz	r2, 8004d38 <_realloc_r+0x20>
 8004d2e:	f7ff ff49 	bl	8004bc4 <_free_r>
 8004d32:	4625      	mov	r5, r4
 8004d34:	4628      	mov	r0, r5
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	f000 f830 	bl	8004d9c <_malloc_usable_size_r>
 8004d3c:	42a0      	cmp	r0, r4
 8004d3e:	d20f      	bcs.n	8004d60 <_realloc_r+0x48>
 8004d40:	4621      	mov	r1, r4
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7ff ff8e 	bl	8004c64 <_malloc_r>
 8004d48:	4605      	mov	r5, r0
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0f2      	beq.n	8004d34 <_realloc_r+0x1c>
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4622      	mov	r2, r4
 8004d52:	f7ff ff0f 	bl	8004b74 <memcpy>
 8004d56:	4631      	mov	r1, r6
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ff33 	bl	8004bc4 <_free_r>
 8004d5e:	e7e9      	b.n	8004d34 <_realloc_r+0x1c>
 8004d60:	4635      	mov	r5, r6
 8004d62:	e7e7      	b.n	8004d34 <_realloc_r+0x1c>

08004d64 <_sbrk_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_sbrk_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fb feee 	bl	8000b50 <_sbrk>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_sbrk_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_sbrk_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	200002d4 	.word	0x200002d4

08004d84 <__malloc_lock>:
 8004d84:	4801      	ldr	r0, [pc, #4]	; (8004d8c <__malloc_lock+0x8>)
 8004d86:	f000 b811 	b.w	8004dac <__retarget_lock_acquire_recursive>
 8004d8a:	bf00      	nop
 8004d8c:	200002dc 	.word	0x200002dc

08004d90 <__malloc_unlock>:
 8004d90:	4801      	ldr	r0, [pc, #4]	; (8004d98 <__malloc_unlock+0x8>)
 8004d92:	f000 b80c 	b.w	8004dae <__retarget_lock_release_recursive>
 8004d96:	bf00      	nop
 8004d98:	200002dc 	.word	0x200002dc

08004d9c <_malloc_usable_size_r>:
 8004d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da0:	1f18      	subs	r0, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfbc      	itt	lt
 8004da6:	580b      	ldrlt	r3, [r1, r0]
 8004da8:	18c0      	addlt	r0, r0, r3
 8004daa:	4770      	bx	lr

08004dac <__retarget_lock_acquire_recursive>:
 8004dac:	4770      	bx	lr

08004dae <__retarget_lock_release_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
