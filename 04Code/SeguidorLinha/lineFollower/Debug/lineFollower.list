
lineFollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f80  08005f80  00015f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f88  08005f88  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000002c  08005fbc  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005fbc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014871  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9c  00000000  00000000  000348cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00038770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a7e  00000000  00000000  00039620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000150aa  00000000  00000000  0006309e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100bea  00000000  00000000  00078148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00178d32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e4  00000000  00000000  00178d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000002c 	.word	0x2000002c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005f48 	.word	0x08005f48

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000030 	.word	0x20000030
 8000234:	08005f48 	.word	0x08005f48

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b52      	ldr	r3, [pc, #328]	; (800068c <MX_ADC1_Init+0x15c>)
 8000544:	4a52      	ldr	r2, [pc, #328]	; (8000690 <MX_ADC1_Init+0x160>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b50      	ldr	r3, [pc, #320]	; (800068c <MX_ADC1_Init+0x15c>)
 800054a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b4e      	ldr	r3, [pc, #312]	; (800068c <MX_ADC1_Init+0x15c>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000556:	4b4d      	ldr	r3, [pc, #308]	; (800068c <MX_ADC1_Init+0x15c>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055c:	4b4b      	ldr	r3, [pc, #300]	; (800068c <MX_ADC1_Init+0x15c>)
 800055e:	2201      	movs	r2, #1
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b4a      	ldr	r3, [pc, #296]	; (800068c <MX_ADC1_Init+0x15c>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b48      	ldr	r3, [pc, #288]	; (800068c <MX_ADC1_Init+0x15c>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b46      	ldr	r3, [pc, #280]	; (800068c <MX_ADC1_Init+0x15c>)
 8000572:	4a48      	ldr	r2, [pc, #288]	; (8000694 <MX_ADC1_Init+0x164>)
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b45      	ldr	r3, [pc, #276]	; (800068c <MX_ADC1_Init+0x15c>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <MX_ADC1_Init+0x15c>)
 800057e:	2208      	movs	r2, #8
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000582:	4b42      	ldr	r3, [pc, #264]	; (800068c <MX_ADC1_Init+0x15c>)
 8000584:	2201      	movs	r2, #1
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <MX_ADC1_Init+0x15c>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	483e      	ldr	r0, [pc, #248]	; (800068c <MX_ADC1_Init+0x15c>)
 8000592:	f000 fee3 	bl	800135c <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fabe 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005a8:	2307      	movs	r3, #7
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4836      	ldr	r0, [pc, #216]	; (800068c <MX_ADC1_Init+0x15c>)
 80005b2:	f001 f971 	bl	8001898 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 faae 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	482f      	ldr	r0, [pc, #188]	; (800068c <MX_ADC1_Init+0x15c>)
 80005ce:	f001 f963 	bl	8001898 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005d8:	f000 faa0 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005dc:	2304      	movs	r3, #4
 80005de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4828      	ldr	r0, [pc, #160]	; (800068c <MX_ADC1_Init+0x15c>)
 80005ea:	f001 f955 	bl	8001898 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005f4:	f000 fa92 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <MX_ADC1_Init+0x15c>)
 8000606:	f001 f947 	bl	8001898 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000610:	f000 fa84 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000614:	2309      	movs	r3, #9
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000618:	2305      	movs	r3, #5
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	481a      	ldr	r0, [pc, #104]	; (800068c <MX_ADC1_Init+0x15c>)
 8000622:	f001 f939 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800062c:	f000 fa76 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000630:	230a      	movs	r3, #10
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000634:	2306      	movs	r3, #6
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_ADC1_Init+0x15c>)
 800063e:	f001 f92b 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000648:	f000 fa68 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800064c:	230c      	movs	r3, #12
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000650:	2307      	movs	r3, #7
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_ADC1_Init+0x15c>)
 800065a:	f001 f91d 	bl	8001898 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000664:	f000 fa5a 	bl	8000b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000668:	230d      	movs	r3, #13
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800066c:	2308      	movs	r3, #8
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC1_Init+0x15c>)
 8000676:	f001 f90f 	bl	8001898 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000680:	f000 fa4c 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000a8 	.word	0x200000a8
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a49      	ldr	r2, [pc, #292]	; (80007dc <HAL_ADC_MspInit+0x144>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f040 808c 	bne.w	80007d4 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006bc:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c0:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c6:	6453      	str	r3, [r2, #68]	; 0x44
 80006c8:	4b45      	ldr	r3, [pc, #276]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d4:	4b42      	ldr	r3, [pc, #264]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a41      	ldr	r2, [pc, #260]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b3c      	ldr	r3, [pc, #240]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a3b      	ldr	r2, [pc, #236]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b36      	ldr	r3, [pc, #216]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a35      	ldr	r2, [pc, #212]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
 8000710:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <HAL_ADC_MspInit+0x148>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSOR6_Pin|SENSOR7_Pin|SENSOR8_Pin;
 800071c:	230d      	movs	r3, #13
 800071e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	482d      	ldr	r0, [pc, #180]	; (80007e4 <HAL_ADC_MspInit+0x14c>)
 8000730:	f002 f89e 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR2_Pin|SENSOR3_Pin;
 8000734:	2319      	movs	r3, #25
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000738:	2303      	movs	r3, #3
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4828      	ldr	r0, [pc, #160]	; (80007e8 <HAL_ADC_MspInit+0x150>)
 8000748:	f002 f892 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin;
 800074c:	2303      	movs	r3, #3
 800074e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000750:	2303      	movs	r3, #3
 8000752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4823      	ldr	r0, [pc, #140]	; (80007ec <HAL_ADC_MspInit+0x154>)
 8000760:	f002 f886 	bl	8002870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 8000766:	4a23      	ldr	r2, [pc, #140]	; (80007f4 <HAL_ADC_MspInit+0x15c>)
 8000768:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000776:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800077c:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 800077e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000782:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000784:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 8000786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800078a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 8000796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800079a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 80007aa:	f001 fc57 	bl	800205c <HAL_DMA_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80007b4:	f000 f9b2 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 80007bc:	639a      	str	r2, [r3, #56]	; 0x38
 80007be:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <HAL_ADC_MspInit+0x158>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	2012      	movs	r0, #18
 80007ca:	f001 fc10 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007ce:	2012      	movs	r0, #18
 80007d0:	f001 fc29 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40012000 	.word	0x40012000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020400 	.word	0x40020400
 80007f0:	200000f0 	.word	0x200000f0
 80007f4:	40026410 	.word	0x40026410

080007f8 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
//
//		if(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY)
//			HAL_DAC_Stop(&hdac,DAC1_CHANNEL_2);
//		if(HAL_DAC_Start(&hdac,DAC1_CHANNEL_2) == HAL_OK)
//			HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,  qtr[SENSOR1]);
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_DMA_Init+0x38>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <MX_DMA_Init+0x38>)
 8000818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_DMA_Init+0x38>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2038      	movs	r0, #56	; 0x38
 8000830:	f001 fbdd 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000834:	2038      	movs	r0, #56	; 0x38
 8000836:	f001 fbf6 	bl	8002026 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <MX_GPIO_Init+0x144>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a4a      	ldr	r2, [pc, #296]	; (800098c <MX_GPIO_Init+0x144>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b48      	ldr	r3, [pc, #288]	; (800098c <MX_GPIO_Init+0x144>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b45      	ldr	r3, [pc, #276]	; (800098c <MX_GPIO_Init+0x144>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a44      	ldr	r2, [pc, #272]	; (800098c <MX_GPIO_Init+0x144>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b42      	ldr	r3, [pc, #264]	; (800098c <MX_GPIO_Init+0x144>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b3f      	ldr	r3, [pc, #252]	; (800098c <MX_GPIO_Init+0x144>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a3e      	ldr	r2, [pc, #248]	; (800098c <MX_GPIO_Init+0x144>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <MX_GPIO_Init+0x144>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b39      	ldr	r3, [pc, #228]	; (800098c <MX_GPIO_Init+0x144>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a38      	ldr	r2, [pc, #224]	; (800098c <MX_GPIO_Init+0x144>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b36      	ldr	r3, [pc, #216]	; (800098c <MX_GPIO_Init+0x144>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <MX_GPIO_Init+0x144>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a32      	ldr	r2, [pc, #200]	; (800098c <MX_GPIO_Init+0x144>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_GPIO_Init+0x144>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TESTE_Pin|IN1_LEFT_Pin|IN2_RIGHT_Pin|LD3_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f64f 0180 	movw	r1, #63616	; 0xf880
 80008dc:	482c      	ldr	r0, [pc, #176]	; (8000990 <MX_GPIO_Init+0x148>)
 80008de:	f002 f973 	bl	8002bc8 <HAL_GPIO_WritePin>
                          |IN1_RIGHT_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	482b      	ldr	r0, [pc, #172]	; (8000994 <MX_GPIO_Init+0x14c>)
 80008e8:	f002 f96e 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_LEFT_GPIO_Port, IN2_LEFT_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f2:	4829      	ldr	r0, [pc, #164]	; (8000998 <MX_GPIO_Init+0x150>)
 80008f4:	f002 f968 	bl	8002bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_GPIO_Init+0x154>)
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4824      	ldr	r0, [pc, #144]	; (80009a0 <MX_GPIO_Init+0x158>)
 800090e:	f001 ffaf 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TESTE_Pin|IN1_LEFT_Pin|IN2_RIGHT_Pin|LD3_Pin
 8000912:	f64f 0380 	movw	r3, #63616	; 0xf880
 8000916:	617b      	str	r3, [r7, #20]
                          |IN1_RIGHT_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4819      	ldr	r0, [pc, #100]	; (8000990 <MX_GPIO_Init+0x148>)
 800092c:	f001 ffa0 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_GPIO_Init+0x14c>)
 8000948:	f001 ff92 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_GPIO_Init+0x14c>)
 8000960:	f001 ff86 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin;
 8000964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_GPIO_Init+0x150>)
 800097e:	f001 ff77 	bl	8002870 <HAL_GPIO_Init>

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40020400 	.word	0x40020400
 8000994:	40021800 	.word	0x40021800
 8000998:	40020000 	.word	0x40020000
 800099c:	10110000 	.word	0x10110000
 80009a0:	40020800 	.word	0x40020800

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0a0      	sub	sp, #128	; 0x80
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fc7a 	bl	80012a2 <HAL_Init>
  /* USER CODE BEGIN Init */
  char Tx_buffer[128];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f825 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f7ff ff49 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 80009b6:	f7ff ff29 	bl	800080c <MX_DMA_Init>
  MX_ADC1_Init();
 80009ba:	f7ff fdb9 	bl	8000530 <MX_ADC1_Init>
  MX_TIM6_Init();
 80009be:	f000 fad1 	bl	8000f64 <MX_TIM6_Init>
  MX_TIM3_Init();
 80009c2:	f000 fa4d 	bl	8000e60 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80009c6:	f000 fbc7 	bl	8001158 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);			// <---------------------------------------------------------------------
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x48>)
 80009cc:	f003 fa94 	bl	8003ef8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// <---------------------------------------------------------------------
 80009d0:	2100      	movs	r1, #0
 80009d2:	4807      	ldr	r0, [pc, #28]	; (80009f0 <main+0x4c>)
 80009d4:	f003 fb6a 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// <---------------------------------------------------------------------
 80009d8:	2104      	movs	r1, #4
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <main+0x4c>)
 80009dc:	f003 fb66 	bl	80040ac <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, qtr, 8);
 80009e0:	2208      	movs	r2, #8
 80009e2:	4904      	ldr	r1, [pc, #16]	; (80009f4 <main+0x50>)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <main+0x54>)
 80009e6:	f000 fe3f 	bl	8001668 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <main+0x46>
 80009ec:	200001bc 	.word	0x200001bc
 80009f0:	20000170 	.word	0x20000170
 80009f4:	20000150 	.word	0x20000150
 80009f8:	200000a8 	.word	0x200000a8

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b0b8      	sub	sp, #224	; 0xe0
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a06:	2234      	movs	r2, #52	; 0x34
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f005 fa94 	bl	8005f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2290      	movs	r2, #144	; 0x90
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 fa85 	bl	8005f38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <SystemClock_Config+0x118>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a38      	ldr	r2, [pc, #224]	; (8000b14 <SystemClock_Config+0x118>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b36      	ldr	r3, [pc, #216]	; (8000b14 <SystemClock_Config+0x118>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a46:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <SystemClock_Config+0x11c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a33      	ldr	r2, [pc, #204]	; (8000b18 <SystemClock_Config+0x11c>)
 8000a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <SystemClock_Config+0x11c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a82:	23d8      	movs	r3, #216	; 0xd8
 8000a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 f8ff 	bl	8002c9c <HAL_RCC_OscConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000aa4:	f000 f83a 	bl	8000b1c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aa8:	f002 f8a8 	bl	8002bfc <HAL_PWREx_EnableOverDrive>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ab2:	f000 f833 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ad8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000adc:	2107      	movs	r1, #7
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 fb8a 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aea:	f000 f817 	bl	8000b1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 fd7b 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b08:	f000 f808 	bl	8000b1c <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e0      	adds	r7, #224	; 0xe0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>

08000b26 <motor_front>:
#include "motor.h"

void motor_front(motor_st* m)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, GPIO_PIN_SET);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	889b      	ldrh	r3, [r3, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f002 f845 	bl	8002bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, GPIO_PIN_RESET);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6898      	ldr	r0, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	899b      	ldrh	r3, [r3, #12]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f002 f83d 	bl	8002bc8 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <move_front>:
	.GPIO_port_IN2 = IN2_LEFT_GPIO_Port,
	.GPIO_pin_IN2 =  IN2_LEFT_Pin
};

void move_front()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	motor_front(&motor_right);
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <move_front+0x14>)
 8000b5e:	f7ff ffe2 	bl	8000b26 <motor_front>
	motor_front(&motor_left);
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <move_front+0x18>)
 8000b64:	f7ff ffdf 	bl	8000b26 <motor_front>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000010 	.word	0x20000010

08000b74 <line_follower>:

void line_follower()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	move_front();
 8000b78:	f7ff ffee 	bl	8000b58 <move_front>
	pid_calcule(&pid_right, qtr[SENSOR3], qtr[SENSOR6]);
 8000b7c:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <line_follower+0x9c>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	ee07 3a90 	vmov	s15, r3
 8000b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <line_follower+0x9c>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	ee07 3a10 	vmov	s14, r3
 8000b90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000b94:	eef0 0a47 	vmov.f32	s1, s14
 8000b98:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9c:	481d      	ldr	r0, [pc, #116]	; (8000c14 <line_follower+0xa0>)
 8000b9e:	f000 f841 	bl	8000c24 <pid_calcule>
	pid_calcule(&pid_left, qtr[SENSOR6], qtr[SENSOR3]);
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <line_follower+0x9c>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <line_follower+0x9c>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	ee07 3a10 	vmov	s14, r3
 8000bb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000bba:	eef0 0a47 	vmov.f32	s1, s14
 8000bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <line_follower+0xa4>)
 8000bc4:	f000 f82e 	bl	8000c24 <pid_calcule>
	set_pwm(&PWM_TIM_INSTANCE, PWM_R_TIM_CHANNEL, pid_right.u * 100);
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <line_follower+0xa0>)
 8000bca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000bce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000c1c <line_follower+0xa8>
 8000bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <line_follower+0xac>)
 8000be6:	f000 fa6d 	bl	80010c4 <set_pwm>
	set_pwm(&PWM_TIM_INSTANCE, PWM_L_TIM_CHANNEL, pid_left.u * 100);
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <line_follower+0xa4>)
 8000bec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000bf0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000c1c <line_follower+0xa8>
 8000bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfc:	ee17 3a90 	vmov	r3, s15
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	2104      	movs	r1, #4
 8000c06:	4806      	ldr	r0, [pc, #24]	; (8000c20 <line_follower+0xac>)
 8000c08:	f000 fa5c 	bl	80010c4 <set_pwm>

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000150 	.word	0x20000150
 8000c14:	20000048 	.word	0x20000048
 8000c18:	20000078 	.word	0x20000078
 8000c1c:	42c80000 	.word	0x42c80000
 8000c20:	20000170 	.word	0x20000170

08000c24 <pid_calcule>:
//	pid->u_d = 0;
//	pid->prev_u_d = 0;
//}

void pid_calcule(pid_st* pid, float ref_sensor, float sensor)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000c30:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->error = ref_sensor - sensor;
 8000c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	edc3 7a05 	vstr	s15, [r3, #20]
	pid->sum_errors_bck = pid->sum_errors;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	69da      	ldr	r2, [r3, #28]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	621a      	str	r2, [r3, #32]
	pid->sum_errors += pid->prev_error;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	ed93 7a07 	vldr	s14, [r3, #28]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u_d =  pid->kd_h * (pid->y - pid->prev_y) + a_pid * pid->prev_u_d;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	edd3 6a00 	vldr	s13, [r3]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000c84:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000d38 <pid_calcule+0x114>
 8000c88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors - pid->u_d;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	ed93 7a02 	vldr	s14, [r3, #8]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	edd3 7a07 	vldr	s15, [r3, #28]
 8000cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->prev_error = pid->error;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	695a      	ldr	r2, [r3, #20]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	619a      	str	r2, [r3, #24]
	pid->prev_y = pid->y;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	605a      	str	r2, [r3, #4]
	pid->prev_u_d = pid->u_d;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(pid->u > U_SAT_A)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	dd08      	ble.n	8000d08 <pid_calcule+0xe4>
	{
		pid->u = U_SAT_A;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a1a      	ldr	r2, [r3, #32]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	61da      	str	r2, [r3, #28]
	else if	(pid->u < U_SAT_B)
	{
		pid->u = U_SAT_B;
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8000d06:	e010      	b.n	8000d2a <pid_calcule+0x106>
	else if	(pid->u < U_SAT_B)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d16:	d400      	bmi.n	8000d1a <pid_calcule+0xf6>
}
 8000d18:	e007      	b.n	8000d2a <pid_calcule+0x106>
		pid->u = U_SAT_B;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f04f 0200 	mov.w	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a1a      	ldr	r2, [r3, #32]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	61da      	str	r2, [r3, #28]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	3e99999a 	.word	0x3e99999a

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x44>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 faa4 	bl	800131c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <ADC_IRQHandler+0x10>)
 8000dde:	f000 fb01 	bl	80013e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000a8 	.word	0x200000a8

08000dec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM3_IRQHandler+0x10>)
 8000df2:	f003 fa55 	bl	80042a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000170 	.word	0x20000170

08000e00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <USART3_IRQHandler+0x10>)
 8000e06:	f004 fa21 	bl	800524c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000208 	.word	0x20000208

08000e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <TIM6_DAC_IRQHandler+0x10>)
 8000e1a:	f003 fa41 	bl	80042a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001bc 	.word	0x200001bc

08000e28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <DMA2_Stream0_IRQHandler+0x10>)
 8000e2e:	f001 fab5 	bl	800239c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000f0 	.word	0x200000f0

08000e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]
 8000e8e:	615a      	str	r2, [r3, #20]
 8000e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000e94:	4a32      	ldr	r2, [pc, #200]	; (8000f60 <MX_TIM3_Init+0x100>)
 8000e96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000e9a:	226b      	movs	r2, #107	; 0x6b
 8000e9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-0;
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000ea6:	2264      	movs	r2, #100	; 0x64
 8000ea8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eb6:	4829      	ldr	r0, [pc, #164]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000eb8:	f002 ffc6 	bl	8003e48 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ec2:	f7ff fe2b 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4822      	ldr	r0, [pc, #136]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000ed4:	f003 fc14 	bl	8004700 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ede:	f7ff fe1d 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee2:	481e      	ldr	r0, [pc, #120]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000ee4:	f003 f880 	bl	8003fe8 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000eee:	f7ff fe15 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4816      	ldr	r0, [pc, #88]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000f02:	f004 f8a9 	bl	8005058 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f0c:	f7ff fe06 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	; 0x60
 8000f12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000f28:	f003 fada 	bl	80044e0 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f32:	f7ff fdf3 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	2204      	movs	r2, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000f3e:	f003 facf 	bl	80044e0 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000f48:	f7ff fde8 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM3_Init+0xfc>)
 8000f4e:	f000 f881 	bl	8001054 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000170 	.word	0x20000170
 8000f60:	40000400 	.word	0x40000400

08000f64 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_TIM6_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f7c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000f80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f8a:	2263      	movs	r2, #99	; 0x63
 8000f8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000f96:	f002 ff57 	bl	8003e48 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fa0:	f7ff fdbc 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fa4:	2320      	movs	r3, #32
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM6_Init+0x64>)
 8000fb2:	f004 f851 	bl	8005058 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f7ff fdae 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001bc 	.word	0x200001bc
 8000fcc:	40001000 	.word	0x40001000

08000fd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_TIM_Base_MspInit+0x78>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d114      	bne.n	800100c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201d      	movs	r0, #29
 8001000:	f000 fff5 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f001 f80e 	bl	8002026 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800100a:	e018      	b.n	800103e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_TIM_Base_MspInit+0x80>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d113      	bne.n	800103e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a0c      	ldr	r2, [pc, #48]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_TIM_Base_MspInit+0x7c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2036      	movs	r0, #54	; 0x36
 8001034:	f000 ffdb 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001038:	2036      	movs	r0, #54	; 0x36
 800103a:	f000 fff4 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40000400 	.word	0x40000400
 800104c:	40023800 	.word	0x40023800
 8001050:	40001000 	.word	0x40001000

08001054 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_TIM_MspPostInit+0x64>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d11b      	bne.n	80010ae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_TIM_MspPostInit+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWN_RIGHT_Pin|PWM_LEFT_Pin;
 800108e:	23c0      	movs	r3, #192	; 0xc0
 8001090:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_TIM_MspPostInit+0x6c>)
 80010aa:	f001 fbe1 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40000400 	.word	0x40000400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800

080010c4 <set_pwm>:
}

/* USER CODE BEGIN 1 */

void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t signal)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <set_pwm+0x20>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	883a      	ldrh	r2, [r7, #0]
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e2:	e023      	b.n	800112c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d104      	bne.n	80010f4 <set_pwm+0x30>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	883b      	ldrh	r3, [r7, #0]
 80010f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010f2:	e01b      	b.n	800112c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d104      	bne.n	8001104 <set_pwm+0x40>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	883b      	ldrh	r3, [r7, #0]
 8001100:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001102:	e013      	b.n	800112c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d104      	bne.n	8001114 <set_pwm+0x50>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	883b      	ldrh	r3, [r7, #0]
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001112:	e00b      	b.n	800112c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	2b10      	cmp	r3, #16
 8001118:	d104      	bne.n	8001124 <set_pwm+0x60>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	883b      	ldrh	r3, [r7, #0]
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001122:	e003      	b.n	800112c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, signal);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	883b      	ldrh	r3, [r7, #0]
 800112a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		line_follower();
 8001148:	f7ff fd14 	bl	8000b74 <line_follower>
	}
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001bc 	.word	0x200001bc

08001158 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_USART3_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800119c:	f004 f808 	bl	80051b0 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f7ff fcb9 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000208 	.word	0x20000208
 80011b4:	40004800 	.word	0x40004800

080011b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1b      	ldr	r2, [pc, #108]	; (8001244 <HAL_UART_MspInit+0x8c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d130      	bne.n	800123c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_UART_MspInit+0x90>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_UART_MspInit+0x90>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121c:	2307      	movs	r3, #7
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <HAL_UART_MspInit+0x94>)
 8001228:	f001 fb22 	bl	8002870 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2027      	movs	r0, #39	; 0x27
 8001232:	f000 fedc 	bl	8001fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001236:	2027      	movs	r0, #39	; 0x27
 8001238:	f000 fef5 	bl	8002026 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40004800 	.word	0x40004800
 8001248:	40023800 	.word	0x40023800
 800124c:	40020c00 	.word	0x40020c00

08001250 <Reset_Handler>:
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001288 <LoopFillZerobss+0x12>
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <LoopFillZerobss+0x16>)
 8001256:	490e      	ldr	r1, [pc, #56]	; (8001290 <LoopFillZerobss+0x1a>)
 8001258:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <LoopFillZerobss+0x1e>)
 800125a:	2300      	movs	r3, #0
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:
 800125e:	58d4      	ldr	r4, [r2, r3]
 8001260:	50c4      	str	r4, [r0, r3]
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:
 8001264:	18c4      	adds	r4, r0, r3
 8001266:	428c      	cmp	r4, r1
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <LoopFillZerobss+0x22>)
 800126c:	4c0b      	ldr	r4, [pc, #44]	; (800129c <LoopFillZerobss+0x26>)
 800126e:	2300      	movs	r3, #0
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:
 8001276:	42a2      	cmp	r2, r4
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>
 800127a:	f7ff fddf 	bl	8000e3c <SystemInit>
 800127e:	f004 fe37 	bl	8005ef0 <__libc_init_array>
 8001282:	f7ff fb8f 	bl	80009a4 <main>
 8001286:	4770      	bx	lr
 8001288:	20080000 	.word	0x20080000
 800128c:	20000000 	.word	0x20000000
 8001290:	2000002c 	.word	0x2000002c
 8001294:	08005f90 	.word	0x08005f90
 8001298:	2000002c 	.word	0x2000002c
 800129c:	20000290 	.word	0x20000290

080012a0 <CAN1_RX0_IRQHandler>:
 80012a0:	e7fe      	b.n	80012a0 <CAN1_RX0_IRQHandler>

080012a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a6:	2003      	movs	r0, #3
 80012a8:	f000 fe96 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 f805 	bl	80012bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012b2:	f7ff fd43 	bl	8000d3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x54>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x58>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 feb1 	bl	8002042 <HAL_SYSTICK_Config>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00e      	b.n	8001308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	d80a      	bhi.n	8001306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f0:	2200      	movs	r2, #0
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f000 fe79 	bl	8001fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_InitTick+0x5c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	e000      	b.n	8001308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000020 	.word	0x20000020
 8001314:	20000028 	.word	0x20000028
 8001318:	20000024 	.word	0x20000024

0800131c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x20>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x24>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4413      	add	r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_IncTick+0x24>)
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000028 	.word	0x20000028
 8001340:	2000028c 	.word	0x2000028c

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_GetTick+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000028c 	.word	0x2000028c

0800135c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e031      	b.n	80013d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff f98c 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_ADC_Init+0x84>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 fbbe 	bl	8001b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0201 	orr.w	r2, r3, #1
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
 80013c6:	e001      	b.n	80013cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	ffffeefd 	.word	0xffffeefd

080013e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	bf0c      	ite	eq
 8001402:	2301      	moveq	r3, #1
 8001404:	2300      	movne	r3, #0
 8001406:	b2db      	uxtb	r3, r3
 8001408:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b20      	cmp	r3, #32
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d049      	beq.n	80014ba <HAL_ADC_IRQHandler+0xd6>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d046      	beq.n	80014ba <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d12b      	bne.n	80014aa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001456:	2b00      	cmp	r3, #0
 8001458:	d127      	bne.n	80014aa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0220 	bic.w	r2, r2, #32
 8001484:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f043 0201 	orr.w	r2, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff f9a4 	bl	80007f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f06f 0212 	mvn.w	r2, #18
 80014b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014da:	2b80      	cmp	r3, #128	; 0x80
 80014dc:	bf0c      	ite	eq
 80014de:	2301      	moveq	r3, #1
 80014e0:	2300      	movne	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d057      	beq.n	800159c <HAL_ADC_IRQHandler+0x1b8>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d054      	beq.n	800159c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d139      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001522:	2b00      	cmp	r3, #0
 8001524:	d006      	beq.n	8001534 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12b      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800153e:	2b00      	cmp	r3, #0
 8001540:	d124      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11d      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001554:	2b00      	cmp	r3, #0
 8001556:	d119      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001566:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fc49 	bl	8001e24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f06f 020c 	mvn.w	r2, #12
 800159a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	bf0c      	ite	eq
 80015aa:	2301      	moveq	r3, #1
 80015ac:	2300      	movne	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015bc:	2b40      	cmp	r3, #64	; 0x40
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d017      	beq.n	80015fe <HAL_ADC_IRQHandler+0x21a>
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d014      	beq.n	80015fe <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10d      	bne.n	80015fe <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f93e 	bl	8001870 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0201 	mvn.w	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b20      	cmp	r3, #32
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800161e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_ADC_IRQHandler+0x27a>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0220 	mvn.w	r2, #32
 800164c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f918 	bl	8001884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0220 	mvn.w	r2, #32
 800165c:	601a      	str	r2, [r3, #0]
  }
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Start_DMA+0x1e>
 8001682:	2302      	movs	r3, #2
 8001684:	e0d4      	b.n	8001830 <HAL_ADC_Start_DMA+0x1c8>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d018      	beq.n	80016ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016ac:	4b62      	ldr	r3, [pc, #392]	; (8001838 <HAL_ADC_Start_DMA+0x1d0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a62      	ldr	r2, [pc, #392]	; (800183c <HAL_ADC_Start_DMA+0x1d4>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9a      	lsrs	r2, r3, #18
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	f040 809c 	bne.w	8001816 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	4b57      	ldr	r3, [pc, #348]	; (8001840 <HAL_ADC_Start_DMA+0x1d8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001704:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001718:	d106      	bne.n	8001728 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f023 0206 	bic.w	r2, r3, #6
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
 8001726:	e002      	b.n	800172e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	4a42      	ldr	r2, [pc, #264]	; (8001844 <HAL_ADC_Start_DMA+0x1dc>)
 800173c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	4a41      	ldr	r2, [pc, #260]	; (8001848 <HAL_ADC_Start_DMA+0x1e0>)
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	4a40      	ldr	r2, [pc, #256]	; (800184c <HAL_ADC_Start_DMA+0x1e4>)
 800174c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001756:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001766:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	334c      	adds	r3, #76	; 0x4c
 8001782:	4619      	mov	r1, r3
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f000 fd16 	bl	80021b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800178c:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_ADC_Start_DMA+0x1e8>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10f      	bne.n	80017b8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d143      	bne.n	800182e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	e03a      	b.n	800182e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_ADC_Start_DMA+0x1ec>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10e      	bne.n	80017e0 <HAL_ADC_Start_DMA+0x178>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017de:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_ADC_Start_DMA+0x1e8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d120      	bne.n	800182e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_ADC_Start_DMA+0x1f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d11b      	bne.n	800182e <HAL_ADC_Start_DMA+0x1c6>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d114      	bne.n	800182e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e00b      	b.n	800182e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000020 	.word	0x20000020
 800183c:	431bde83 	.word	0x431bde83
 8001840:	fffff8fe 	.word	0xfffff8fe
 8001844:	08001d21 	.word	0x08001d21
 8001848:	08001ddb 	.word	0x08001ddb
 800184c:	08001df7 	.word	0x08001df7
 8001850:	40012300 	.word	0x40012300
 8001854:	40012000 	.word	0x40012000
 8001858:	40012200 	.word	0x40012200

0800185c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e12a      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x272>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d93a      	bls.n	800193a <HAL_ADC_ConfigChannel+0xa2>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018cc:	d035      	beq.n	800193a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68d9      	ldr	r1, [r3, #12]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	2207      	movs	r2, #7
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a87      	ldr	r2, [pc, #540]	; (8001b18 <HAL_ADC_ConfigChannel+0x280>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	061a      	lsls	r2, r3, #24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001912:	e035      	b.n	8001980 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68d9      	ldr	r1, [r3, #12]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	4603      	mov	r3, r0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4403      	add	r3, r0
 800192c:	3b1e      	subs	r3, #30
 800192e:	409a      	lsls	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001938:	e022      	b.n	8001980 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6919      	ldr	r1, [r3, #16]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	2207      	movs	r2, #7
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43da      	mvns	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	400a      	ands	r2, r1
 800195c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6919      	ldr	r1, [r3, #16]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4618      	mov	r0, r3
 8001970:	4603      	mov	r3, r0
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4403      	add	r3, r0
 8001976:	409a      	lsls	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d824      	bhi.n	80019d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b05      	subs	r3, #5
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
 80019d0:	e04c      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d824      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b23      	subs	r3, #35	; 0x23
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b23      	subs	r3, #35	; 0x23
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
 8001a22:	e023      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b41      	subs	r3, #65	; 0x41
 8001a36:	221f      	movs	r2, #31
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	400a      	ands	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3b41      	subs	r3, #65	; 0x41
 8001a60:	fa00 f203 	lsl.w	r2, r0, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_ADC_ConfigChannel+0x284>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1f4>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001a86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <HAL_ADC_ConfigChannel+0x284>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d109      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x212>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_ADC_ConfigChannel+0x284>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d125      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x268>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_ADC_ConfigChannel+0x280>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d003      	beq.n	8001ac6 <HAL_ADC_ConfigChannel+0x22e>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	d11c      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <HAL_ADC_ConfigChannel+0x288>)
 8001acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a10      	ldr	r2, [pc, #64]	; (8001b18 <HAL_ADC_ConfigChannel+0x280>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d111      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_ADC_ConfigChannel+0x28c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_ADC_ConfigChannel+0x290>)
 8001ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae6:	0c9a      	lsrs	r2, r3, #18
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001af2:	e002      	b.n	8001afa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	10000012 	.word	0x10000012
 8001b1c:	40012000 	.word	0x40012000
 8001b20:	40012300 	.word	0x40012300
 8001b24:	20000020 	.word	0x20000020
 8001b28:	431bde83 	.word	0x431bde83

08001b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001b34:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <ADC_Init+0x1ec>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <ADC_Init+0x1ec>)
 8001b3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001b40:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <ADC_Init+0x1ec>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4973      	ldr	r1, [pc, #460]	; (8001d18 <ADC_Init+0x1ec>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <ADC_Init+0x1f0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e00f      	b.n	8001c26 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0202 	bic.w	r2, r2, #2
 8001c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	005a      	lsls	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	035a      	lsls	r2, r3, #13
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e007      	b.n	8001c9c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	051a      	lsls	r2, r3, #20
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cde:	025a      	lsls	r2, r3, #9
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	029a      	lsls	r2, r3, #10
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40012300 	.word	0x40012300
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d13c      	bne.n	8001db4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d12b      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d127      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d119      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0220 	bic.w	r2, r2, #32
 8001d86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fd23 	bl	80007f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001db2:	e00e      	b.n	8001dd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff fd5f 	bl	8001884 <HAL_ADC_ErrorCallback>
}
 8001dc6:	e004      	b.n	8001dd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fd37 	bl	800185c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fd34 	bl	8001884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <__NVIC_SetPriorityGrouping+0x40>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x40>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00
 8001e7c:	05fa0000 	.word	0x05fa0000

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff f96c 	bl	8001344 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e099      	b.n	80021ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	e00f      	b.n	80020ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff f953 	bl	8001344 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d908      	bls.n	80020ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e078      	b.n	80021ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_DMA_Init+0x158>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2b04      	cmp	r3, #4
 800214c:	d117      	bne.n	800217e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fb09 	bl	8002778 <DMA_CheckFifoParam>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fac0 	bl	800270c <DMA_CalcBaseAndBitshift>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	e010803f 	.word	0xe010803f

080021b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Start_IT+0x26>
 80021da:	2302      	movs	r3, #2
 80021dc:	e048      	b.n	8002270 <HAL_DMA_Start_IT+0xb8>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d137      	bne.n	8002262 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa52 	bl	80026b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0216 	orr.w	r2, r2, #22
 8002226:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002236:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0208 	orr.w	r2, r2, #8
 800224e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e005      	b.n	800226e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800226a:	2302      	movs	r3, #2
 800226c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002286:	f7ff f85d 	bl	8001344 <HAL_GetTick>
 800228a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d008      	beq.n	80022aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e052      	b.n	8002350 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0216 	bic.w	r2, r2, #22
 80022b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695a      	ldr	r2, [r3, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d103      	bne.n	80022da <HAL_DMA_Abort+0x62>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d007      	beq.n	80022ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0208 	bic.w	r2, r2, #8
 80022e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fa:	e013      	b.n	8002324 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022fc:	f7ff f822 	bl	8001344 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b05      	cmp	r3, #5
 8002308:	d90c      	bls.n	8002324 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e015      	b.n	8002350 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e4      	bne.n	80022fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	223f      	movs	r2, #63	; 0x3f
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d004      	beq.n	8002376 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00c      	b.n	8002390 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2205      	movs	r2, #5
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0201 	bic.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80023a8:	4b92      	ldr	r3, [pc, #584]	; (80025f4 <HAL_DMA_IRQHandler+0x258>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a92      	ldr	r2, [pc, #584]	; (80025f8 <HAL_DMA_IRQHandler+0x25c>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2208      	movs	r2, #8
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01a      	beq.n	8002408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0204 	bic.w	r2, r2, #4
 80023ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2208      	movs	r2, #8
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d012      	beq.n	800243e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2201      	movs	r2, #1
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0202 	orr.w	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	2204      	movs	r2, #4
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	2204      	movs	r2, #4
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2210      	movs	r2, #16
 800247a:	409a      	lsls	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4013      	ands	r3, r2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d043      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03c      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2210      	movs	r2, #16
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d018      	beq.n	80024de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d024      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
 80024ca:	e01f      	b.n	800250c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	4798      	blx	r3
 80024dc:	e016      	b.n	800250c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0208 	bic.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2220      	movs	r2, #32
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 808e 	beq.w	800263a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 8086 	beq.w	800263a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2220      	movs	r2, #32
 8002534:	409a      	lsls	r2, r3
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b05      	cmp	r3, #5
 8002544:	d136      	bne.n	80025b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0216 	bic.w	r2, r2, #22
 8002554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695a      	ldr	r2, [r3, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <HAL_DMA_IRQHandler+0x1da>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0208 	bic.w	r2, r2, #8
 8002584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	223f      	movs	r2, #63	; 0x3f
 800258c:	409a      	lsls	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d07d      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
        }
        return;
 80025b2:	e078      	b.n	80026a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01c      	beq.n	80025fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d108      	bne.n	80025e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d030      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
 80025e0:	e02b      	b.n	800263a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d027      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
 80025f2:	e022      	b.n	800263a <HAL_DMA_IRQHandler+0x29e>
 80025f4:	20000020 	.word	0x20000020
 80025f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0210 	bic.w	r2, r2, #16
 8002618:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	2b00      	cmp	r3, #0
 8002640:	d032      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d022      	beq.n	8002694 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2205      	movs	r2, #5
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0201 	bic.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	429a      	cmp	r2, r3
 8002670:	d307      	bcc.n	8002682 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f2      	bne.n	8002666 <HAL_DMA_IRQHandler+0x2ca>
 8002680:	e000      	b.n	8002684 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002682:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
 80026a4:	e000      	b.n	80026a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026a6:	bf00      	nop
    }
  }
}
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop

080026b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d108      	bne.n	80026f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ee:	e007      	b.n	8002700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	60da      	str	r2, [r3, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	3b10      	subs	r3, #16
 800271c:	4a13      	ldr	r2, [pc, #76]	; (800276c <DMA_CalcBaseAndBitshift+0x60>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <DMA_CalcBaseAndBitshift+0x64>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d908      	bls.n	800274c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <DMA_CalcBaseAndBitshift+0x68>)
 8002742:	4013      	ands	r3, r2
 8002744:	1d1a      	adds	r2, r3, #4
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	; 0x58
 800274a:	e006      	b.n	800275a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <DMA_CalcBaseAndBitshift+0x68>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	aaaaaaab 	.word	0xaaaaaaab
 8002770:	08005f78 	.word	0x08005f78
 8002774:	fffffc00 	.word	0xfffffc00

08002778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11f      	bne.n	80027d2 <DMA_CheckFifoParam+0x5a>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d856      	bhi.n	8002846 <DMA_CheckFifoParam+0xce>
 8002798:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <DMA_CheckFifoParam+0x28>)
 800279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279e:	bf00      	nop
 80027a0:	080027b1 	.word	0x080027b1
 80027a4:	080027c3 	.word	0x080027c3
 80027a8:	080027b1 	.word	0x080027b1
 80027ac:	08002847 	.word	0x08002847
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d046      	beq.n	800284a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e043      	b.n	800284a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ca:	d140      	bne.n	800284e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d0:	e03d      	b.n	800284e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027da:	d121      	bne.n	8002820 <DMA_CheckFifoParam+0xa8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d837      	bhi.n	8002852 <DMA_CheckFifoParam+0xda>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <DMA_CheckFifoParam+0x70>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	080027ff 	.word	0x080027ff
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	08002811 	.word	0x08002811
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e030      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d025      	beq.n	8002856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280e:	e022      	b.n	8002856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800281e:	e01c      	b.n	800285a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d903      	bls.n	800282e <DMA_CheckFifoParam+0xb6>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d003      	beq.n	8002834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800282c:	e018      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      break;
 8002832:	e015      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e00b      	b.n	800285e <DMA_CheckFifoParam+0xe6>
      break;
 8002846:	bf00      	nop
 8002848:	e00a      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284a:	bf00      	nop
 800284c:	e008      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800284e:	bf00      	nop
 8002850:	e006      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e004      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e002      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;   
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
    }
  } 
  
  return status; 
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e175      	b.n	8002b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8164 	bne.w	8002b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d00b      	beq.n	80028ce <HAL_GPIO_Init+0x5e>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d007      	beq.n	80028ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c2:	2b11      	cmp	r3, #17
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b12      	cmp	r3, #18
 80028cc:	d130      	bne.n	8002930 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x100>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b12      	cmp	r3, #18
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80be 	beq.w	8002b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_GPIO_Init+0x324>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a65      	ldr	r2, [pc, #404]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_GPIO_Init+0x324>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a12:	4a61      	ldr	r2, [pc, #388]	; (8002b98 <HAL_GPIO_Init+0x328>)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	089b      	lsrs	r3, r3, #2
 8002a18:	3302      	adds	r3, #2
 8002a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	220f      	movs	r2, #15
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_GPIO_Init+0x32c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d037      	beq.n	8002aae <HAL_GPIO_Init+0x23e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a57      	ldr	r2, [pc, #348]	; (8002ba0 <HAL_GPIO_Init+0x330>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d031      	beq.n	8002aaa <HAL_GPIO_Init+0x23a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <HAL_GPIO_Init+0x334>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_GPIO_Init+0x236>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a55      	ldr	r2, [pc, #340]	; (8002ba8 <HAL_GPIO_Init+0x338>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x232>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a54      	ldr	r2, [pc, #336]	; (8002bac <HAL_GPIO_Init+0x33c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x22e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a53      	ldr	r2, [pc, #332]	; (8002bb0 <HAL_GPIO_Init+0x340>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x22a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a52      	ldr	r2, [pc, #328]	; (8002bb4 <HAL_GPIO_Init+0x344>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x226>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a51      	ldr	r2, [pc, #324]	; (8002bb8 <HAL_GPIO_Init+0x348>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x222>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_GPIO_Init+0x34c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x21e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4f      	ldr	r2, [pc, #316]	; (8002bc0 <HAL_GPIO_Init+0x350>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x21a>
 8002a86:	2309      	movs	r3, #9
 8002a88:	e012      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a8a:	230a      	movs	r3, #10
 8002a8c:	e010      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a8e:	2308      	movs	r3, #8
 8002a90:	e00e      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a92:	2307      	movs	r3, #7
 8002a94:	e00c      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e00a      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a9a:	2305      	movs	r3, #5
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x240>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f002 0203 	and.w	r2, r2, #3
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x328>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ace:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af2:	4a34      	ldr	r2, [pc, #208]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af8:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b70:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_GPIO_Init+0x354>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f ae86 	bls.w	8002890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40021400 	.word	0x40021400
 8002bb4:	40021800 	.word	0x40021800
 8002bb8:	40021c00 	.word	0x40021c00
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40022400 	.word	0x40022400
 8002bc4:	40013c00 	.word	0x40013c00

08002bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	807b      	strh	r3, [r7, #2]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd8:	787b      	ldrb	r3, [r7, #1]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bde:	887a      	ldrh	r2, [r7, #2]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002be4:	e003      	b.n	8002bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002be6:	887b      	ldrh	r3, [r7, #2]
 8002be8:	041a      	lsls	r2, r3, #16
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a22      	ldr	r2, [pc, #136]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c1e:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2a:	f7fe fb8b 	bl	8001344 <HAL_GetTick>
 8002c2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c30:	e009      	b.n	8002c46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c32:	f7fe fb87 	bl	8001344 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c40:	d901      	bls.n	8002c46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e022      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c52:	d1ee      	bne.n	8002c32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0f      	ldr	r2, [pc, #60]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fb70 	bl	8001344 <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fe fb6c 	bl	8001344 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e007      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e29b      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b96      	ldr	r3, [pc, #600]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ccc:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d112      	bne.n	8002cfe <HAL_RCC_OscConfig+0x62>
 8002cd8:	4b90      	ldr	r3, [pc, #576]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b8d      	ldr	r3, [pc, #564]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x130>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d168      	bne.n	8002dcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e275      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x7a>
 8002d08:	4b84      	ldr	r3, [pc, #528]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a83      	ldr	r2, [pc, #524]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e02e      	b.n	8002d74 <HAL_RCC_OscConfig+0xd8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x9c>
 8002d1e:	4b7f      	ldr	r3, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7e      	ldr	r2, [pc, #504]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b7c      	ldr	r3, [pc, #496]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7b      	ldr	r2, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d42:	4b76      	ldr	r3, [pc, #472]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a72      	ldr	r2, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd8>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6b      	ldr	r2, [pc, #428]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fae2 	bl	8001344 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fade 	bl	8001344 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e229      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe face 	bl	8001344 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe faca 	bl	8001344 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e215      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x110>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d069      	beq.n	8002eae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de6:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x190>
 8002df2:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1e9      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	493d      	ldr	r1, [pc, #244]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e040      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d023      	beq.n	8002e7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a38      	ldr	r2, [pc, #224]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fa80 	bl	8001344 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fe fa7c 	bl	8001344 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4929      	ldr	r1, [pc, #164]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
 8002e7a:	e018      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fa5c 	bl	8001344 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fa58 	bl	8001344 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1a3      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d038      	beq.n	8002f2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d019      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ece:	f7fe fa39 	bl	8001344 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fa35 	bl	8001344 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e180      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x23a>
 8002ef4:	e01a      	b.n	8002f2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_RCC_OscConfig+0x280>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fa1f 	bl	8001344 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fa1b 	bl	8001344 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d903      	bls.n	8002f20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e166      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
 8002f1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	4b92      	ldr	r3, [pc, #584]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80a4 	beq.w	8003082 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b8c      	ldr	r3, [pc, #560]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b89      	ldr	r3, [pc, #548]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a88      	ldr	r2, [pc, #544]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b86      	ldr	r3, [pc, #536]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f62:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x4d4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f6e:	4b80      	ldr	r3, [pc, #512]	; (8003170 <HAL_RCC_OscConfig+0x4d4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7f      	ldr	r2, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x4d4>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe f9e3 	bl	8001344 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe f9df 	bl	8001344 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e12a      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f94:	4b76      	ldr	r3, [pc, #472]	; (8003170 <HAL_RCC_OscConfig+0x4d4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x31a>
 8002fa8:	4b70      	ldr	r3, [pc, #448]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e02d      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x33c>
 8002fbe:	4b6b      	ldr	r3, [pc, #428]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a6a      	ldr	r2, [pc, #424]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4b68      	ldr	r3, [pc, #416]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	e01c      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x35e>
 8002fe0:	4b62      	ldr	r3, [pc, #392]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a61      	ldr	r2, [pc, #388]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a5e      	ldr	r2, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	e00b      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a58      	ldr	r2, [pc, #352]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe f993 	bl	8001344 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f98f 	bl	8001344 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0d8      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCC_OscConfig+0x386>
 8003044:	e014      	b.n	8003070 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fe f97d 	bl	8001344 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe f979 	bl	8001344 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0c2      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ee      	bne.n	800304e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b3d      	ldr	r3, [pc, #244]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	4a3c      	ldr	r2, [pc, #240]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003080:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80ae 	beq.w	80031e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d06d      	beq.n	8003174 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d14b      	bne.n	8003138 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f94a 	bl	8001344 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f946 	bl	8001344 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e091      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b29      	ldr	r3, [pc, #164]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	491b      	ldr	r1, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a18      	ldr	r2, [pc, #96]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe f918 	bl	8001344 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe f914 	bl	8001344 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e05f      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x47c>
 8003136:	e057      	b.n	80031e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe f8fe 	bl	8001344 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe f8fa 	bl	8001344 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCC_OscConfig+0x4d0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x4b0>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x54c>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_RCC_OscConfig+0x558>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d030      	beq.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d129      	bne.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d122      	bne.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031a4:	4013      	ands	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d119      	bne.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	085b      	lsrs	r3, r3, #1
 80031bc:	3b01      	subs	r3, #1
 80031be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10f      	bne.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0d0      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003210:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d910      	bls.n	8003240 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b67      	ldr	r3, [pc, #412]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 020f 	bic.w	r2, r3, #15
 8003226:	4965      	ldr	r1, [pc, #404]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b8      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003258:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003262:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800327a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	494d      	ldr	r1, [pc, #308]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d040      	beq.n	800331c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d115      	bne.n	80032da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e07f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e073      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06b      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 0203 	bic.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4936      	ldr	r1, [pc, #216]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ec:	f7fe f82a 	bl	8001344 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	e00a      	b.n	800330a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7fe f826 	bl	8001344 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e053      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 020c 	and.w	r2, r3, #12
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	429a      	cmp	r2, r3
 800331a:	d1eb      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d210      	bcs.n	800334c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	4922      	ldr	r1, [pc, #136]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e032      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4916      	ldr	r1, [pc, #88]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f821 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1cc>)
 800339c:	5ccb      	ldrb	r3, [r1, r3]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1d0>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1d4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd ff86 	bl	80012bc <HAL_InitTick>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023c00 	.word	0x40023c00
 80033c0:	40023800 	.word	0x40023800
 80033c4:	08005f60 	.word	0x08005f60
 80033c8:	20000020 	.word	0x20000020
 80033cc:	20000024 	.word	0x20000024

080033d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	2300      	movs	r3, #0
 80033e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033e8:	4b67      	ldr	r3, [pc, #412]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d00d      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x40>
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	f200 80bd 	bhi.w	8003574 <HAL_RCC_GetSysClockFreq+0x1a4>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x34>
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0x3a>
 8003402:	e0b7      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003404:	4b61      	ldr	r3, [pc, #388]	; (800358c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003406:	60bb      	str	r3, [r7, #8]
      break;
 8003408:	e0b7      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800340a:	4b60      	ldr	r3, [pc, #384]	; (800358c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800340c:	60bb      	str	r3, [r7, #8]
      break;
 800340e:	e0b4      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003410:	4b5d      	ldr	r3, [pc, #372]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003418:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800341a:	4b5b      	ldr	r3, [pc, #364]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d04d      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003426:	4b58      	ldr	r3, [pc, #352]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	461a      	mov	r2, r3
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	ea02 0800 	and.w	r8, r2, r0
 800343e:	ea03 0901 	and.w	r9, r3, r1
 8003442:	4640      	mov	r0, r8
 8003444:	4649      	mov	r1, r9
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	014b      	lsls	r3, r1, #5
 8003450:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003454:	0142      	lsls	r2, r0, #5
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	ebb0 0008 	subs.w	r0, r0, r8
 800345e:	eb61 0109 	sbc.w	r1, r1, r9
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003470:	0182      	lsls	r2, r0, #6
 8003472:	1a12      	subs	r2, r2, r0
 8003474:	eb63 0301 	sbc.w	r3, r3, r1
 8003478:	f04f 0000 	mov.w	r0, #0
 800347c:	f04f 0100 	mov.w	r1, #0
 8003480:	00d9      	lsls	r1, r3, #3
 8003482:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003486:	00d0      	lsls	r0, r2, #3
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	eb12 0208 	adds.w	r2, r2, r8
 8003490:	eb43 0309 	adc.w	r3, r3, r9
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0299      	lsls	r1, r3, #10
 800349e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034a2:	0290      	lsls	r0, r2, #10
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4610      	mov	r0, r2
 80034aa:	4619      	mov	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	f7fc fec0 	bl	8000238 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e04a      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b31      	ldr	r3, [pc, #196]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	461a      	mov	r2, r3
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	ea02 0400 	and.w	r4, r2, r0
 80034da:	ea03 0501 	and.w	r5, r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	014b      	lsls	r3, r1, #5
 80034ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034f0:	0142      	lsls	r2, r0, #5
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	1b00      	subs	r0, r0, r4
 80034f8:	eb61 0105 	sbc.w	r1, r1, r5
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	018b      	lsls	r3, r1, #6
 8003506:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800350a:	0182      	lsls	r2, r0, #6
 800350c:	1a12      	subs	r2, r2, r0
 800350e:	eb63 0301 	sbc.w	r3, r3, r1
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	00d9      	lsls	r1, r3, #3
 800351c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003520:	00d0      	lsls	r0, r2, #3
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	1912      	adds	r2, r2, r4
 8003528:	eb45 0303 	adc.w	r3, r5, r3
 800352c:	f04f 0000 	mov.w	r0, #0
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	0299      	lsls	r1, r3, #10
 8003536:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800353a:	0290      	lsls	r0, r2, #10
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	461a      	mov	r2, r3
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	f7fc fe74 	bl	8000238 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	60bb      	str	r3, [r7, #8]
      break;
 8003572:	e002      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003576:	60bb      	str	r3, [r7, #8]
      break;
 8003578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800357a:	68bb      	ldr	r3, [r7, #8]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	00f42400 	.word	0x00f42400

08003590 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000020 	.word	0x20000020

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a9b      	lsrs	r3, r3, #10
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4903      	ldr	r1, [pc, #12]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800
 80035cc:	08005f70 	.word	0x08005f70

080035d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035d4:	f7ff ffdc 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0b5b      	lsrs	r3, r3, #13
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08005f70 	.word	0x08005f70

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d012      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003620:	4b69      	ldr	r3, [pc, #420]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a68      	ldr	r2, [pc, #416]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003634:	4964      	ldr	r1, [pc, #400]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003652:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003660:	4959      	ldr	r1, [pc, #356]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003670:	d101      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003672:	2301      	movs	r3, #1
 8003674:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800368e:	4b4e      	ldr	r3, [pc, #312]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	494a      	ldr	r1, [pc, #296]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ac:	d101      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036ca:	2301      	movs	r3, #1
 80036cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 808b 	beq.w	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6413      	str	r3, [r2, #64]	; 0x40
 80036e8:	4b37      	ldr	r3, [pc, #220]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003700:	f7fd fe20 	bl	8001344 <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003708:	f7fd fe1c 	bl	8001344 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e38f      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800371a:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003726:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d035      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	429a      	cmp	r2, r3
 8003742:	d02e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003744:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d114      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fd fde4 	bl	8001344 <HAL_GetTick>
 800377c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377e:	e00a      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fd fde0 	bl	8001344 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e351      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ee      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ae:	d111      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037be:	400b      	ands	r3, r1
 80037c0:	4901      	ldr	r1, [pc, #4]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
 80037c6:	e00b      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40007000 	.word	0x40007000
 80037d0:	0ffffcff 	.word	0x0ffffcff
 80037d4:	4bb3      	ldr	r3, [pc, #716]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4ab2      	ldr	r2, [pc, #712]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	4bb0      	ldr	r3, [pc, #704]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	49ad      	ldr	r1, [pc, #692]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d010      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037fe:	4ba9      	ldr	r3, [pc, #676]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003804:	4aa7      	ldr	r2, [pc, #668]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800380a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800380e:	4ba5      	ldr	r3, [pc, #660]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003810:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	49a2      	ldr	r1, [pc, #648]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382c:	4b9d      	ldr	r3, [pc, #628]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383a:	499a      	ldr	r1, [pc, #616]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384e:	4b95      	ldr	r3, [pc, #596]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800385c:	4991      	ldr	r1, [pc, #580]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387e:	4989      	ldr	r1, [pc, #548]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003892:	4b84      	ldr	r3, [pc, #528]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4980      	ldr	r1, [pc, #512]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b4:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4978      	ldr	r1, [pc, #480]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d6:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f023 020c 	bic.w	r2, r3, #12
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e4:	496f      	ldr	r1, [pc, #444]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	4967      	ldr	r1, [pc, #412]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391a:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003920:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	495e      	ldr	r1, [pc, #376]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	4956      	ldr	r1, [pc, #344]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800395e:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003980:	4b48      	ldr	r3, [pc, #288]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003986:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	4945      	ldr	r1, [pc, #276]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039a2:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b0:	493c      	ldr	r1, [pc, #240]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039c4:	4b37      	ldr	r3, [pc, #220]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d2:	4934      	ldr	r1, [pc, #208]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d011      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039f4:	492b      	ldr	r1, [pc, #172]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a34:	491b      	ldr	r1, [pc, #108]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	4912      	ldr	r1, [pc, #72]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7c:	4909      	ldr	r1, [pc, #36]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00f      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	4986      	ldr	r1, [pc, #536]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003abc:	4b81      	ldr	r3, [pc, #516]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003acc:	497d      	ldr	r1, [pc, #500]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d006      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 80d6 	beq.w	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ae8:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a75      	ldr	r2, [pc, #468]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fd fc26 	bl	8001344 <HAL_GetTick>
 8003af8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afc:	f7fd fc22 	bl	8001344 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d901      	bls.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e195      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0e:	4b6d      	ldr	r3, [pc, #436]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11d      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b3c:	4b61      	ldr	r3, [pc, #388]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b42:	0e1b      	lsrs	r3, r3, #24
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	061b      	lsls	r3, r3, #24
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	4958      	ldr	r1, [pc, #352]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d004      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d02e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b94:	d129      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b96:	4b4b      	ldr	r3, [pc, #300]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ba4:	4b47      	ldr	r3, [pc, #284]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	019a      	lsls	r2, r3, #6
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	071b      	lsls	r3, r3, #28
 8003bca:	493e      	ldr	r1, [pc, #248]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bd8:	f023 021f 	bic.w	r2, r3, #31
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	3b01      	subs	r3, #1
 8003be2:	4938      	ldr	r1, [pc, #224]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01d      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bf6:	4b33      	ldr	r3, [pc, #204]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c04:	4b2f      	ldr	r3, [pc, #188]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0a:	0f1b      	lsrs	r3, r3, #28
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	019a      	lsls	r2, r3, #6
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	4926      	ldr	r1, [pc, #152]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	019a      	lsls	r2, r3, #6
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	061b      	lsls	r3, r3, #24
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	491a      	ldr	r1, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c62:	4b18      	ldr	r3, [pc, #96]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c6e:	f7fd fb69 	bl	8001344 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c76:	f7fd fb65 	bl	8001344 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d901      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e0d8      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	f040 80ce 	bne.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fd fb4c 	bl	8001344 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cb0:	f7fd fb48 	bl	8001344 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d904      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0bb      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cc8:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd4:	d0ec      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d02e      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d12a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cfe:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d0c:	4b4d      	ldr	r3, [pc, #308]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	0f1b      	lsrs	r3, r3, #28
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4944      	ldr	r1, [pc, #272]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d3a:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d022      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d68:	d11d      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	0f1b      	lsrs	r3, r3, #28
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	019a      	lsls	r2, r3, #6
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	061b      	lsls	r3, r3, #24
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	071b      	lsls	r3, r3, #28
 8003d9e:	4929      	ldr	r1, [pc, #164]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db8:	0e1b      	lsrs	r3, r3, #24
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	019a      	lsls	r2, r3, #6
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	061b      	lsls	r3, r3, #24
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	071b      	lsls	r3, r3, #28
 8003de6:	4917      	ldr	r1, [pc, #92]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4911      	ldr	r1, [pc, #68]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e04:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e10:	f7fd fa98 	bl	8001344 <HAL_GetTick>
 8003e14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e18:	f7fd fa94 	bl	8001344 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	; 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e36:	d1ef      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e049      	b.n	8003eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd f8ae 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fd28 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e054      	b.n	8003fba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d01d      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIM_Base_Start_IT+0xe4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x80>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	; (8003fe0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d115      	bne.n	8003fa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_TIM_Base_Start_IT+0xec>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d015      	beq.n	8003fb6 <HAL_TIM_Base_Start_IT+0xbe>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d011      	beq.n	8003fb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	e008      	b.n	8003fb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e000      	b.n	8003fb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40010000 	.word	0x40010000
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40010400 	.word	0x40010400
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40001800 	.word	0x40001800
 8003fe4:	00010007 	.word	0x00010007

08003fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e049      	b.n	800408e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f841 	bl	8004096 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3304      	adds	r3, #4
 8004024:	4619      	mov	r1, r3
 8004026:	4610      	mov	r0, r2
 8004028:	f000 fc58 	bl	80048dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_TIM_PWM_Start+0x24>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e03c      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d109      	bne.n	80040ea <HAL_TIM_PWM_Start+0x3e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b01      	cmp	r3, #1
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	e02f      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d109      	bne.n	8004104 <HAL_TIM_PWM_Start+0x58>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e022      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d109      	bne.n	800411e <HAL_TIM_PWM_Start+0x72>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e015      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d109      	bne.n	8004138 <HAL_TIM_PWM_Start+0x8c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	e008      	b.n	800414a <HAL_TIM_PWM_Start+0x9e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b01      	cmp	r3, #1
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e092      	b.n	8004278 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xb6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xc6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004170:	e01b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0xd6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004180:	e013      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b0c      	cmp	r3, #12
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0xe6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004190:	e00b      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b10      	cmp	r3, #16
 8004196:	d104      	bne.n	80041a2 <HAL_TIM_PWM_Start+0xf6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a0:	e003      	b.n	80041aa <HAL_TIM_PWM_Start+0xfe>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ff2a 	bl	800500c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a30      	ldr	r2, [pc, #192]	; (8004280 <HAL_TIM_PWM_Start+0x1d4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIM_PWM_Start+0x120>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <HAL_TIM_PWM_Start+0x1d8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_PWM_Start+0x124>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_TIM_PWM_Start+0x126>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a25      	ldr	r2, [pc, #148]	; (8004280 <HAL_TIM_PWM_Start+0x1d4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f8:	d01d      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a22      	ldr	r2, [pc, #136]	; (8004288 <HAL_TIM_PWM_Start+0x1dc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_TIM_PWM_Start+0x1e0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1f      	ldr	r2, [pc, #124]	; (8004290 <HAL_TIM_PWM_Start+0x1e4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_TIM_PWM_Start+0x1d8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1b      	ldr	r2, [pc, #108]	; (8004294 <HAL_TIM_PWM_Start+0x1e8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIM_PWM_Start+0x18a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a19      	ldr	r2, [pc, #100]	; (8004298 <HAL_TIM_PWM_Start+0x1ec>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d115      	bne.n	8004262 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <HAL_TIM_PWM_Start+0x1f0>)
 800423e:	4013      	ands	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d015      	beq.n	8004274 <HAL_TIM_PWM_Start+0x1c8>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d011      	beq.n	8004274 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	e008      	b.n	8004274 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e000      	b.n	8004276 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40010000 	.word	0x40010000
 8004284:	40010400 	.word	0x40010400
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40014000 	.word	0x40014000
 8004298:	40001800 	.word	0x40001800
 800429c:	00010007 	.word	0x00010007

080042a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0202 	mvn.w	r2, #2
 80042cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fadc 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 face 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 fadf 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0204 	mvn.w	r2, #4
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fab2 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 faa4 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fab5 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b08      	cmp	r3, #8
 800435c:	d122      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d11b      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0208 	mvn.w	r2, #8
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa88 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa7a 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa8b 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b10      	cmp	r3, #16
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0210 	mvn.w	r2, #16
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2208      	movs	r2, #8
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa5e 	bl	80048a0 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa50 	bl	800488c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa61 	bl	80048b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0201 	mvn.w	r2, #1
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fc fe8a 	bl	8001138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443c:	2b80      	cmp	r3, #128	; 0x80
 800443e:	d107      	bne.n	8004450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fe9c 	bl	8005188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445e:	d10e      	bne.n	800447e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d107      	bne.n	800447e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fe8f 	bl	800519c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d10e      	bne.n	80044aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d107      	bne.n	80044aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fa0f 	bl	80048c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d10e      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d107      	bne.n	80044d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f06f 0220 	mvn.w	r2, #32
 80044ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fe4f 	bl	8005174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e0fd      	b.n	80046f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b14      	cmp	r3, #20
 8004506:	f200 80f0 	bhi.w	80046ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004565 	.word	0x08004565
 8004514:	080046eb 	.word	0x080046eb
 8004518:	080046eb 	.word	0x080046eb
 800451c:	080046eb 	.word	0x080046eb
 8004520:	080045a5 	.word	0x080045a5
 8004524:	080046eb 	.word	0x080046eb
 8004528:	080046eb 	.word	0x080046eb
 800452c:	080046eb 	.word	0x080046eb
 8004530:	080045e7 	.word	0x080045e7
 8004534:	080046eb 	.word	0x080046eb
 8004538:	080046eb 	.word	0x080046eb
 800453c:	080046eb 	.word	0x080046eb
 8004540:	08004627 	.word	0x08004627
 8004544:	080046eb 	.word	0x080046eb
 8004548:	080046eb 	.word	0x080046eb
 800454c:	080046eb 	.word	0x080046eb
 8004550:	08004669 	.word	0x08004669
 8004554:	080046eb 	.word	0x080046eb
 8004558:	080046eb 	.word	0x080046eb
 800455c:	080046eb 	.word	0x080046eb
 8004560:	080046a9 	.word	0x080046a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fa56 	bl	8004a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0208 	orr.w	r2, r2, #8
 800457e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0204 	bic.w	r2, r2, #4
 800458e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6999      	ldr	r1, [r3, #24]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	619a      	str	r2, [r3, #24]
      break;
 80045a2:	e0a3      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 faa8 	bl	8004b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6999      	ldr	r1, [r3, #24]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	021a      	lsls	r2, r3, #8
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	619a      	str	r2, [r3, #24]
      break;
 80045e4:	e082      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 faff 	bl	8004bf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0208 	orr.w	r2, r2, #8
 8004600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0204 	bic.w	r2, r2, #4
 8004610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69d9      	ldr	r1, [r3, #28]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	61da      	str	r2, [r3, #28]
      break;
 8004624:	e062      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fb55 	bl	8004cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	021a      	lsls	r2, r3, #8
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	61da      	str	r2, [r3, #28]
      break;
 8004666:	e041      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fb8c 	bl	8004d8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046a6:	e021      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fbbe 	bl	8004e30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80046e8:	e000      	b.n	80046ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80046ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop

08004700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_TIM_ConfigClockSource+0x18>
 8004714:	2302      	movs	r3, #2
 8004716:	e0b3      	b.n	8004880 <HAL_TIM_ConfigClockSource+0x180>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4b55      	ldr	r3, [pc, #340]	; (8004888 <HAL_TIM_ConfigClockSource+0x188>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004750:	d03e      	beq.n	80047d0 <HAL_TIM_ConfigClockSource+0xd0>
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	f200 8087 	bhi.w	8004868 <HAL_TIM_ConfigClockSource+0x168>
 800475a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475e:	f000 8085 	beq.w	800486c <HAL_TIM_ConfigClockSource+0x16c>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	d87f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b70      	cmp	r3, #112	; 0x70
 800476a:	d01a      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0xa2>
 800476c:	2b70      	cmp	r3, #112	; 0x70
 800476e:	d87b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b60      	cmp	r3, #96	; 0x60
 8004772:	d050      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x116>
 8004774:	2b60      	cmp	r3, #96	; 0x60
 8004776:	d877      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b50      	cmp	r3, #80	; 0x50
 800477a:	d03c      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xf6>
 800477c:	2b50      	cmp	r3, #80	; 0x50
 800477e:	d873      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d058      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x136>
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d86f      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004788:	2b30      	cmp	r3, #48	; 0x30
 800478a:	d064      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 800478c:	2b30      	cmp	r3, #48	; 0x30
 800478e:	d86b      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004790:	2b20      	cmp	r3, #32
 8004792:	d060      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d867      	bhi.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d05c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
 800479c:	2b10      	cmp	r3, #16
 800479e:	d05a      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047a0:	e062      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6899      	ldr	r1, [r3, #8]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f000 fc0b 	bl	8004fcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
      break;
 80047ce:	e04e      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	6899      	ldr	r1, [r3, #8]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f000 fbf4 	bl	8004fcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f2:	609a      	str	r2, [r3, #8]
      break;
 80047f4:	e03b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fb68 	bl	8004ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2150      	movs	r1, #80	; 0x50
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fbc1 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004814:	e02b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fb87 	bl	8004f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2160      	movs	r1, #96	; 0x60
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fbb1 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004834:	e01b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6859      	ldr	r1, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	461a      	mov	r2, r3
 8004844:	f000 fb48 	bl	8004ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2140      	movs	r1, #64	; 0x40
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fba1 	bl	8004f96 <TIM_ITRx_SetConfig>
      break;
 8004854:	e00b      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f000 fb98 	bl	8004f96 <TIM_ITRx_SetConfig>
        break;
 8004866:	e002      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004868:	bf00      	nop
 800486a:	e000      	b.n	800486e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800486c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	fffeff88 	.word	0xfffeff88

0800488c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d013      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d00f      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00b      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a3c      	ldr	r2, [pc, #240]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d007      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3b      	ldr	r2, [pc, #236]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d003      	beq.n	800491c <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3a      	ldr	r2, [pc, #232]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d108      	bne.n	800492e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493c:	d027      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <TIM_Base_SetConfig+0x118>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d023      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0x11c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0x120>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d017      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0x128>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a27      	ldr	r2, [pc, #156]	; (8004a08 <TIM_Base_SetConfig+0x12c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00f      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <TIM_Base_SetConfig+0x130>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <TIM_Base_SetConfig+0x134>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <TIM_Base_SetConfig+0x138>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <TIM_Base_SetConfig+0x13c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d108      	bne.n	80049a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <TIM_Base_SetConfig+0x114>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0xf8>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <TIM_Base_SetConfig+0x124>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d103      	bne.n	80049dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800
 8004a10:	40001800 	.word	0x40001800
 8004a14:	40001c00 	.word	0x40001c00
 8004a18:	40002000 	.word	0x40002000

08004a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <TIM_OC1_SetConfig+0xd8>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 0302 	bic.w	r3, r3, #2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a21      	ldr	r2, [pc, #132]	; (8004af8 <TIM_OC1_SetConfig+0xdc>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC1_SetConfig+0x64>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a20      	ldr	r2, [pc, #128]	; (8004afc <TIM_OC1_SetConfig+0xe0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10c      	bne.n	8004a9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0308 	bic.w	r3, r3, #8
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f023 0304 	bic.w	r3, r3, #4
 8004a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC1_SetConfig+0xdc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d003      	beq.n	8004aaa <TIM_OC1_SetConfig+0x8e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <TIM_OC1_SetConfig+0xe0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d111      	bne.n	8004ace <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	621a      	str	r2, [r3, #32]
}
 8004ae8:	bf00      	nop
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	fffeff8f 	.word	0xfffeff8f
 8004af8:	40010000 	.word	0x40010000
 8004afc:	40010400 	.word	0x40010400

08004b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <TIM_OC2_SetConfig+0xe4>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0320 	bic.w	r3, r3, #32
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <TIM_OC2_SetConfig+0xe8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_OC2_SetConfig+0x68>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a22      	ldr	r2, [pc, #136]	; (8004bec <TIM_OC2_SetConfig+0xec>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10d      	bne.n	8004b84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <TIM_OC2_SetConfig+0xe8>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_OC2_SetConfig+0x94>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a17      	ldr	r2, [pc, #92]	; (8004bec <TIM_OC2_SetConfig+0xec>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d113      	bne.n	8004bbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	feff8fff 	.word	0xfeff8fff
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <TIM_OC3_SetConfig+0xe0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0303 	bic.w	r3, r3, #3
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <TIM_OC3_SetConfig+0xe4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_OC3_SetConfig+0x66>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <TIM_OC3_SetConfig+0xe8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10d      	bne.n	8004c72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <TIM_OC3_SetConfig+0xe4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC3_SetConfig+0x92>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a16      	ldr	r2, [pc, #88]	; (8004cd8 <TIM_OC3_SetConfig+0xe8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d113      	bne.n	8004caa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	621a      	str	r2, [r3, #32]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	fffeff8f 	.word	0xfffeff8f
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400

08004cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <TIM_OC4_SetConfig+0xa4>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	031b      	lsls	r3, r3, #12
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <TIM_OC4_SetConfig+0xa8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d003      	beq.n	8004d44 <TIM_OC4_SetConfig+0x68>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <TIM_OC4_SetConfig+0xac>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d109      	bne.n	8004d58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	019b      	lsls	r3, r3, #6
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	feff8fff 	.word	0xfeff8fff
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400

08004d8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <TIM_OC5_SetConfig+0x98>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004dcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	041b      	lsls	r3, r3, #16
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <TIM_OC5_SetConfig+0x9c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC5_SetConfig+0x5e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <TIM_OC5_SetConfig+0xa0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d109      	bne.n	8004dfe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	bf00      	nop
 8004e1a:	371c      	adds	r7, #28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	fffeff8f 	.word	0xfffeff8f
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40010400 	.word	0x40010400

08004e30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4b1c      	ldr	r3, [pc, #112]	; (8004ecc <TIM_OC6_SetConfig+0x9c>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	051b      	lsls	r3, r3, #20
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <TIM_OC6_SetConfig+0xa0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_OC6_SetConfig+0x60>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <TIM_OC6_SetConfig+0xa4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d109      	bne.n	8004ea4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	029b      	lsls	r3, r3, #10
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	feff8fff 	.word	0xfeff8fff
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40010400 	.word	0x40010400

08004ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f023 030a 	bic.w	r3, r3, #10
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	621a      	str	r2, [r3, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	371c      	adds	r7, #28
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f023 0210 	bic.w	r2, r3, #16
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	031b      	lsls	r3, r3, #12
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b085      	sub	sp, #20
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f043 0307 	orr.w	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	609a      	str	r2, [r3, #8]
}
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 031f 	and.w	r3, r3, #31
 800501e:	2201      	movs	r2, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	43db      	mvns	r3, r3
 800502e:	401a      	ands	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	431a      	orrs	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800506c:	2302      	movs	r3, #2
 800506e:	e06d      	b.n	800514c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a30      	ldr	r2, [pc, #192]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2f      	ldr	r2, [pc, #188]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a20      	ldr	r2, [pc, #128]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d022      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e2:	d01d      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d018      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00e      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a15      	ldr	r2, [pc, #84]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d009      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a16      	ldr	r2, [pc, #88]	; (800516c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	4313      	orrs	r3, r2
 8005130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000
 800515c:	40010400 	.word	0x40010400
 8005160:	40000400 	.word	0x40000400
 8005164:	40000800 	.word	0x40000800
 8005168:	40000c00 	.word	0x40000c00
 800516c:	40014000 	.word	0x40014000
 8005170:	40001800 	.word	0x40001800

08005174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e040      	b.n	8005244 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d106      	bne.n	80051d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb fff0 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2224      	movs	r2, #36	; 0x24
 80051dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa56 	bl	80056a0 <UART_SetConfig>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e022      	b.n	8005244 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fcac 	bl	8005b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fd33 	bl	8005ca8 <UART_CheckIdleState>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d113      	bne.n	80052a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 81cc 	beq.w	8005632 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      }
      return;
 80052a2:	e1c6      	b.n	8005632 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80e3 	beq.w	8005472 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d105      	bne.n	80052c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4ba5      	ldr	r3, [pc, #660]	; (8005550 <HAL_UART_IRQHandler+0x304>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80d8 	beq.w	8005472 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d010      	beq.n	80052ee <HAL_UART_IRQHandler+0xa2>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2201      	movs	r2, #1
 80052dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052e4:	f043 0201 	orr.w	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <HAL_UART_IRQHandler+0xce>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2202      	movs	r2, #2
 8005308:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <HAL_UART_IRQHandler+0xfa>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2204      	movs	r2, #4
 8005334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800533c:	f043 0202 	orr.w	r2, r3, #2
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2208      	movs	r2, #8
 800536a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	f043 0208 	orr.w	r2, r3, #8
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005382:	2b00      	cmp	r3, #0
 8005384:	d011      	beq.n	80053aa <HAL_UART_IRQHandler+0x15e>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00c      	beq.n	80053aa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a0:	f043 0220 	orr.w	r2, r3, #32
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8140 	beq.w	8005636 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00c      	beq.n	80053da <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d004      	beq.n	80053fa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d031      	beq.n	800545e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fd19 	bl	8005e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	d123      	bne.n	8005456 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	4a4a      	ldr	r2, [pc, #296]	; (8005554 <HAL_UART_IRQHandler+0x308>)
 800542c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	4618      	mov	r0, r3
 8005434:	f7fc ff90 	bl	8002358 <HAL_DMA_Abort_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005448:	4610      	mov	r0, r2
 800544a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	e00f      	b.n	800546e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f906 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005454:	e00b      	b.n	800546e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f902 	bl	8005660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e007      	b.n	800546e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8fe 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800546c:	e0e3      	b.n	8005636 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546e:	bf00      	nop
    return;
 8005470:	e0e1      	b.n	8005636 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	2b01      	cmp	r3, #1
 8005478:	f040 80a7 	bne.w	80055ca <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 80a1 	beq.w	80055ca <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 809b 	beq.w	80055ca <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2210      	movs	r2, #16
 800549a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d156      	bne.n	8005558 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80054b4:	893b      	ldrh	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80bf 	beq.w	800563a <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80054c2:	893a      	ldrh	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f080 80b8 	bcs.w	800563a <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	893a      	ldrh	r2, [r7, #8]
 80054ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054dc:	d02a      	beq.n	8005534 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0210 	bic.w	r2, r2, #16
 8005528:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4618      	mov	r0, r3
 8005530:	f7fc fea2 	bl	8002278 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005540:	b29b      	uxth	r3, r3
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	b29b      	uxth	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f893 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800554e:	e074      	b.n	800563a <HAL_UART_IRQHandler+0x3ee>
 8005550:	04000120 	.word	0x04000120
 8005554:	08005e91 	.word	0x08005e91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005576:	897b      	ldrh	r3, [r7, #10]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d060      	beq.n	800563e <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800558a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689a      	ldr	r2, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0201 	bic.w	r2, r2, #1
 800559a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0210 	bic.w	r2, r2, #16
 80055bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f856 	bl	8005674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055c8:	e039      	b.n	800563e <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <HAL_UART_IRQHandler+0x3a4>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d008      	beq.n	80055f0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80055e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f84f 	bl	800568c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ee:	e029      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01a      	beq.n	8005642 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
    }
    return;
 8005614:	e015      	b.n	8005642 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_UART_IRQHandler+0x3f8>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fc46 	bl	8005ebc <UART_EndTransmit_IT>
    return;
 8005630:	e008      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005632:	bf00      	nop
 8005634:	e006      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005636:	bf00      	nop
 8005638:	e004      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
      return;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
      return;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005642:	bf00      	nop
  }

}
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop

0800564c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4ba7      	ldr	r3, [pc, #668]	; (8005968 <UART_SetConfig+0x2c8>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a95      	ldr	r2, [pc, #596]	; (800596c <UART_SetConfig+0x2cc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d120      	bne.n	800575e <UART_SetConfig+0xbe>
 800571c:	4b94      	ldr	r3, [pc, #592]	; (8005970 <UART_SetConfig+0x2d0>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d816      	bhi.n	8005758 <UART_SetConfig+0xb8>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x90>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005747 	.word	0x08005747
 800573c:	08005753 	.word	0x08005753
 8005740:	2301      	movs	r3, #1
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e14f      	b.n	80059e6 <UART_SetConfig+0x346>
 8005746:	2302      	movs	r3, #2
 8005748:	77fb      	strb	r3, [r7, #31]
 800574a:	e14c      	b.n	80059e6 <UART_SetConfig+0x346>
 800574c:	2304      	movs	r3, #4
 800574e:	77fb      	strb	r3, [r7, #31]
 8005750:	e149      	b.n	80059e6 <UART_SetConfig+0x346>
 8005752:	2308      	movs	r3, #8
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e146      	b.n	80059e6 <UART_SetConfig+0x346>
 8005758:	2310      	movs	r3, #16
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e143      	b.n	80059e6 <UART_SetConfig+0x346>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a84      	ldr	r2, [pc, #528]	; (8005974 <UART_SetConfig+0x2d4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d132      	bne.n	80057ce <UART_SetConfig+0x12e>
 8005768:	4b81      	ldr	r3, [pc, #516]	; (8005970 <UART_SetConfig+0x2d0>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b0c      	cmp	r3, #12
 8005774:	d828      	bhi.n	80057c8 <UART_SetConfig+0x128>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0xdc>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057c9 	.word	0x080057c9
 8005784:	080057c9 	.word	0x080057c9
 8005788:	080057c9 	.word	0x080057c9
 800578c:	080057bd 	.word	0x080057bd
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057c9 	.word	0x080057c9
 8005798:	080057c9 	.word	0x080057c9
 800579c:	080057b7 	.word	0x080057b7
 80057a0:	080057c9 	.word	0x080057c9
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057c9 	.word	0x080057c9
 80057ac:	080057c3 	.word	0x080057c3
 80057b0:	2300      	movs	r3, #0
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e117      	b.n	80059e6 <UART_SetConfig+0x346>
 80057b6:	2302      	movs	r3, #2
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e114      	b.n	80059e6 <UART_SetConfig+0x346>
 80057bc:	2304      	movs	r3, #4
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e111      	b.n	80059e6 <UART_SetConfig+0x346>
 80057c2:	2308      	movs	r3, #8
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e10e      	b.n	80059e6 <UART_SetConfig+0x346>
 80057c8:	2310      	movs	r3, #16
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e10b      	b.n	80059e6 <UART_SetConfig+0x346>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a69      	ldr	r2, [pc, #420]	; (8005978 <UART_SetConfig+0x2d8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d120      	bne.n	800581a <UART_SetConfig+0x17a>
 80057d8:	4b65      	ldr	r3, [pc, #404]	; (8005970 <UART_SetConfig+0x2d0>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057e2:	2b30      	cmp	r3, #48	; 0x30
 80057e4:	d013      	beq.n	800580e <UART_SetConfig+0x16e>
 80057e6:	2b30      	cmp	r3, #48	; 0x30
 80057e8:	d814      	bhi.n	8005814 <UART_SetConfig+0x174>
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d009      	beq.n	8005802 <UART_SetConfig+0x162>
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d810      	bhi.n	8005814 <UART_SetConfig+0x174>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d002      	beq.n	80057fc <UART_SetConfig+0x15c>
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d006      	beq.n	8005808 <UART_SetConfig+0x168>
 80057fa:	e00b      	b.n	8005814 <UART_SetConfig+0x174>
 80057fc:	2300      	movs	r3, #0
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e0f1      	b.n	80059e6 <UART_SetConfig+0x346>
 8005802:	2302      	movs	r3, #2
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e0ee      	b.n	80059e6 <UART_SetConfig+0x346>
 8005808:	2304      	movs	r3, #4
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e0eb      	b.n	80059e6 <UART_SetConfig+0x346>
 800580e:	2308      	movs	r3, #8
 8005810:	77fb      	strb	r3, [r7, #31]
 8005812:	e0e8      	b.n	80059e6 <UART_SetConfig+0x346>
 8005814:	2310      	movs	r3, #16
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e0e5      	b.n	80059e6 <UART_SetConfig+0x346>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a57      	ldr	r2, [pc, #348]	; (800597c <UART_SetConfig+0x2dc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d120      	bne.n	8005866 <UART_SetConfig+0x1c6>
 8005824:	4b52      	ldr	r3, [pc, #328]	; (8005970 <UART_SetConfig+0x2d0>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800582e:	2bc0      	cmp	r3, #192	; 0xc0
 8005830:	d013      	beq.n	800585a <UART_SetConfig+0x1ba>
 8005832:	2bc0      	cmp	r3, #192	; 0xc0
 8005834:	d814      	bhi.n	8005860 <UART_SetConfig+0x1c0>
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d009      	beq.n	800584e <UART_SetConfig+0x1ae>
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d810      	bhi.n	8005860 <UART_SetConfig+0x1c0>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <UART_SetConfig+0x1a8>
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d006      	beq.n	8005854 <UART_SetConfig+0x1b4>
 8005846:	e00b      	b.n	8005860 <UART_SetConfig+0x1c0>
 8005848:	2300      	movs	r3, #0
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e0cb      	b.n	80059e6 <UART_SetConfig+0x346>
 800584e:	2302      	movs	r3, #2
 8005850:	77fb      	strb	r3, [r7, #31]
 8005852:	e0c8      	b.n	80059e6 <UART_SetConfig+0x346>
 8005854:	2304      	movs	r3, #4
 8005856:	77fb      	strb	r3, [r7, #31]
 8005858:	e0c5      	b.n	80059e6 <UART_SetConfig+0x346>
 800585a:	2308      	movs	r3, #8
 800585c:	77fb      	strb	r3, [r7, #31]
 800585e:	e0c2      	b.n	80059e6 <UART_SetConfig+0x346>
 8005860:	2310      	movs	r3, #16
 8005862:	77fb      	strb	r3, [r7, #31]
 8005864:	e0bf      	b.n	80059e6 <UART_SetConfig+0x346>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a45      	ldr	r2, [pc, #276]	; (8005980 <UART_SetConfig+0x2e0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d125      	bne.n	80058bc <UART_SetConfig+0x21c>
 8005870:	4b3f      	ldr	r3, [pc, #252]	; (8005970 <UART_SetConfig+0x2d0>)
 8005872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800587e:	d017      	beq.n	80058b0 <UART_SetConfig+0x210>
 8005880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005884:	d817      	bhi.n	80058b6 <UART_SetConfig+0x216>
 8005886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588a:	d00b      	beq.n	80058a4 <UART_SetConfig+0x204>
 800588c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005890:	d811      	bhi.n	80058b6 <UART_SetConfig+0x216>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <UART_SetConfig+0x1fe>
 8005896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589a:	d006      	beq.n	80058aa <UART_SetConfig+0x20a>
 800589c:	e00b      	b.n	80058b6 <UART_SetConfig+0x216>
 800589e:	2300      	movs	r3, #0
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e0a0      	b.n	80059e6 <UART_SetConfig+0x346>
 80058a4:	2302      	movs	r3, #2
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e09d      	b.n	80059e6 <UART_SetConfig+0x346>
 80058aa:	2304      	movs	r3, #4
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e09a      	b.n	80059e6 <UART_SetConfig+0x346>
 80058b0:	2308      	movs	r3, #8
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e097      	b.n	80059e6 <UART_SetConfig+0x346>
 80058b6:	2310      	movs	r3, #16
 80058b8:	77fb      	strb	r3, [r7, #31]
 80058ba:	e094      	b.n	80059e6 <UART_SetConfig+0x346>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <UART_SetConfig+0x2e4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d125      	bne.n	8005912 <UART_SetConfig+0x272>
 80058c6:	4b2a      	ldr	r3, [pc, #168]	; (8005970 <UART_SetConfig+0x2d0>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058d4:	d017      	beq.n	8005906 <UART_SetConfig+0x266>
 80058d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058da:	d817      	bhi.n	800590c <UART_SetConfig+0x26c>
 80058dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e0:	d00b      	beq.n	80058fa <UART_SetConfig+0x25a>
 80058e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058e6:	d811      	bhi.n	800590c <UART_SetConfig+0x26c>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <UART_SetConfig+0x254>
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f0:	d006      	beq.n	8005900 <UART_SetConfig+0x260>
 80058f2:	e00b      	b.n	800590c <UART_SetConfig+0x26c>
 80058f4:	2301      	movs	r3, #1
 80058f6:	77fb      	strb	r3, [r7, #31]
 80058f8:	e075      	b.n	80059e6 <UART_SetConfig+0x346>
 80058fa:	2302      	movs	r3, #2
 80058fc:	77fb      	strb	r3, [r7, #31]
 80058fe:	e072      	b.n	80059e6 <UART_SetConfig+0x346>
 8005900:	2304      	movs	r3, #4
 8005902:	77fb      	strb	r3, [r7, #31]
 8005904:	e06f      	b.n	80059e6 <UART_SetConfig+0x346>
 8005906:	2308      	movs	r3, #8
 8005908:	77fb      	strb	r3, [r7, #31]
 800590a:	e06c      	b.n	80059e6 <UART_SetConfig+0x346>
 800590c:	2310      	movs	r3, #16
 800590e:	77fb      	strb	r3, [r7, #31]
 8005910:	e069      	b.n	80059e6 <UART_SetConfig+0x346>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <UART_SetConfig+0x2e8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d137      	bne.n	800598c <UART_SetConfig+0x2ec>
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <UART_SetConfig+0x2d0>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800592a:	d017      	beq.n	800595c <UART_SetConfig+0x2bc>
 800592c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005930:	d817      	bhi.n	8005962 <UART_SetConfig+0x2c2>
 8005932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005936:	d00b      	beq.n	8005950 <UART_SetConfig+0x2b0>
 8005938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593c:	d811      	bhi.n	8005962 <UART_SetConfig+0x2c2>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <UART_SetConfig+0x2aa>
 8005942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005946:	d006      	beq.n	8005956 <UART_SetConfig+0x2b6>
 8005948:	e00b      	b.n	8005962 <UART_SetConfig+0x2c2>
 800594a:	2300      	movs	r3, #0
 800594c:	77fb      	strb	r3, [r7, #31]
 800594e:	e04a      	b.n	80059e6 <UART_SetConfig+0x346>
 8005950:	2302      	movs	r3, #2
 8005952:	77fb      	strb	r3, [r7, #31]
 8005954:	e047      	b.n	80059e6 <UART_SetConfig+0x346>
 8005956:	2304      	movs	r3, #4
 8005958:	77fb      	strb	r3, [r7, #31]
 800595a:	e044      	b.n	80059e6 <UART_SetConfig+0x346>
 800595c:	2308      	movs	r3, #8
 800595e:	77fb      	strb	r3, [r7, #31]
 8005960:	e041      	b.n	80059e6 <UART_SetConfig+0x346>
 8005962:	2310      	movs	r3, #16
 8005964:	77fb      	strb	r3, [r7, #31]
 8005966:	e03e      	b.n	80059e6 <UART_SetConfig+0x346>
 8005968:	efff69f3 	.word	0xefff69f3
 800596c:	40011000 	.word	0x40011000
 8005970:	40023800 	.word	0x40023800
 8005974:	40004400 	.word	0x40004400
 8005978:	40004800 	.word	0x40004800
 800597c:	40004c00 	.word	0x40004c00
 8005980:	40005000 	.word	0x40005000
 8005984:	40011400 	.word	0x40011400
 8005988:	40007800 	.word	0x40007800
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a71      	ldr	r2, [pc, #452]	; (8005b58 <UART_SetConfig+0x4b8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d125      	bne.n	80059e2 <UART_SetConfig+0x342>
 8005996:	4b71      	ldr	r3, [pc, #452]	; (8005b5c <UART_SetConfig+0x4bc>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059a4:	d017      	beq.n	80059d6 <UART_SetConfig+0x336>
 80059a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059aa:	d817      	bhi.n	80059dc <UART_SetConfig+0x33c>
 80059ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b0:	d00b      	beq.n	80059ca <UART_SetConfig+0x32a>
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b6:	d811      	bhi.n	80059dc <UART_SetConfig+0x33c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <UART_SetConfig+0x324>
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d006      	beq.n	80059d0 <UART_SetConfig+0x330>
 80059c2:	e00b      	b.n	80059dc <UART_SetConfig+0x33c>
 80059c4:	2300      	movs	r3, #0
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e00d      	b.n	80059e6 <UART_SetConfig+0x346>
 80059ca:	2302      	movs	r3, #2
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e00a      	b.n	80059e6 <UART_SetConfig+0x346>
 80059d0:	2304      	movs	r3, #4
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e007      	b.n	80059e6 <UART_SetConfig+0x346>
 80059d6:	2308      	movs	r3, #8
 80059d8:	77fb      	strb	r3, [r7, #31]
 80059da:	e004      	b.n	80059e6 <UART_SetConfig+0x346>
 80059dc:	2310      	movs	r3, #16
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e001      	b.n	80059e6 <UART_SetConfig+0x346>
 80059e2:	2310      	movs	r3, #16
 80059e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ee:	d15b      	bne.n	8005aa8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80059f0:	7ffb      	ldrb	r3, [r7, #31]
 80059f2:	2b08      	cmp	r3, #8
 80059f4:	d827      	bhi.n	8005a46 <UART_SetConfig+0x3a6>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <UART_SetConfig+0x35c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a21 	.word	0x08005a21
 8005a00:	08005a29 	.word	0x08005a29
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a47 	.word	0x08005a47
 8005a0c:	08005a37 	.word	0x08005a37
 8005a10:	08005a47 	.word	0x08005a47
 8005a14:	08005a47 	.word	0x08005a47
 8005a18:	08005a47 	.word	0x08005a47
 8005a1c:	08005a3f 	.word	0x08005a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a20:	f7fd fdc2 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8005a24:	61b8      	str	r0, [r7, #24]
        break;
 8005a26:	e013      	b.n	8005a50 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a28:	f7fd fdd2 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8005a2c:	61b8      	str	r0, [r7, #24]
        break;
 8005a2e:	e00f      	b.n	8005a50 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a30:	4b4b      	ldr	r3, [pc, #300]	; (8005b60 <UART_SetConfig+0x4c0>)
 8005a32:	61bb      	str	r3, [r7, #24]
        break;
 8005a34:	e00c      	b.n	8005a50 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a36:	f7fd fccb 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005a3a:	61b8      	str	r0, [r7, #24]
        break;
 8005a3c:	e008      	b.n	8005a50 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a42:	61bb      	str	r3, [r7, #24]
        break;
 8005a44:	e004      	b.n	8005a50 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8005a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d074      	beq.n	8005b40 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b0f      	cmp	r3, #15
 8005a72:	d916      	bls.n	8005aa2 <UART_SetConfig+0x402>
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a7a:	d212      	bcs.n	8005aa2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f023 030f 	bic.w	r3, r3, #15
 8005a84:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	085b      	lsrs	r3, r3, #1
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	89fb      	ldrh	r3, [r7, #14]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	89fa      	ldrh	r2, [r7, #14]
 8005a9e:	60da      	str	r2, [r3, #12]
 8005aa0:	e04e      	b.n	8005b40 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	77bb      	strb	r3, [r7, #30]
 8005aa6:	e04b      	b.n	8005b40 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005aa8:	7ffb      	ldrb	r3, [r7, #31]
 8005aaa:	2b08      	cmp	r3, #8
 8005aac:	d827      	bhi.n	8005afe <UART_SetConfig+0x45e>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x414>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005ad9 	.word	0x08005ad9
 8005ab8:	08005ae1 	.word	0x08005ae1
 8005abc:	08005ae9 	.word	0x08005ae9
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005aef 	.word	0x08005aef
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aff 	.word	0x08005aff
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f7fd fd66 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8005adc:	61b8      	str	r0, [r7, #24]
        break;
 8005ade:	e013      	b.n	8005b08 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae0:	f7fd fd76 	bl	80035d0 <HAL_RCC_GetPCLK2Freq>
 8005ae4:	61b8      	str	r0, [r7, #24]
        break;
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	; (8005b60 <UART_SetConfig+0x4c0>)
 8005aea:	61bb      	str	r3, [r7, #24]
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fd fc6f 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 8005af2:	61b8      	str	r0, [r7, #24]
        break;
 8005af4:	e008      	b.n	8005b08 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	61bb      	str	r3, [r7, #24]
        break;
 8005afc:	e004      	b.n	8005b08 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	77bb      	strb	r3, [r7, #30]
        break;
 8005b06:	bf00      	nop
    }

    if (pclk != 0U)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d018      	beq.n	8005b40 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	085a      	lsrs	r2, r3, #1
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	441a      	add	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d908      	bls.n	8005b3c <UART_SetConfig+0x49c>
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d204      	bcs.n	8005b3c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e001      	b.n	8005b40 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40007c00 	.word	0x40007c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	00f42400 	.word	0x00f42400

08005b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0308 	and.w	r3, r3, #8
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01a      	beq.n	8005c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c62:	d10a      	bne.n	8005c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	605a      	str	r2, [r3, #4]
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cb8:	f7fb fb44 	bl	8001344 <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0308 	and.w	r3, r3, #8
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d10e      	bne.n	8005cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f82d 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e023      	b.n	8005d32 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d10e      	bne.n	8005d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f817 	bl	8005d3a <UART_WaitOnFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00d      	b.n	8005d32 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	4613      	mov	r3, r2
 8005d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d4a:	e05e      	b.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d05a      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d54:	f7fb faf6 	bl	8001344 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11b      	bne.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e043      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02c      	beq.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dbe:	d124      	bne.n	8005e0a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e00f      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4013      	ands	r3, r2
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d091      	beq.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e48:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0210 	bic.w	r2, r2, #16
 8005e70:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fbd6 	bl	8005660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff fbb3 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <__libc_init_array>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	4d0d      	ldr	r5, [pc, #52]	; (8005f28 <__libc_init_array+0x38>)
 8005ef4:	4c0d      	ldr	r4, [pc, #52]	; (8005f2c <__libc_init_array+0x3c>)
 8005ef6:	1b64      	subs	r4, r4, r5
 8005ef8:	10a4      	asrs	r4, r4, #2
 8005efa:	2600      	movs	r6, #0
 8005efc:	42a6      	cmp	r6, r4
 8005efe:	d109      	bne.n	8005f14 <__libc_init_array+0x24>
 8005f00:	4d0b      	ldr	r5, [pc, #44]	; (8005f30 <__libc_init_array+0x40>)
 8005f02:	4c0c      	ldr	r4, [pc, #48]	; (8005f34 <__libc_init_array+0x44>)
 8005f04:	f000 f820 	bl	8005f48 <_init>
 8005f08:	1b64      	subs	r4, r4, r5
 8005f0a:	10a4      	asrs	r4, r4, #2
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	42a6      	cmp	r6, r4
 8005f10:	d105      	bne.n	8005f1e <__libc_init_array+0x2e>
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f18:	4798      	blx	r3
 8005f1a:	3601      	adds	r6, #1
 8005f1c:	e7ee      	b.n	8005efc <__libc_init_array+0xc>
 8005f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f22:	4798      	blx	r3
 8005f24:	3601      	adds	r6, #1
 8005f26:	e7f2      	b.n	8005f0e <__libc_init_array+0x1e>
 8005f28:	08005f88 	.word	0x08005f88
 8005f2c:	08005f88 	.word	0x08005f88
 8005f30:	08005f88 	.word	0x08005f88
 8005f34:	08005f8c 	.word	0x08005f8c

08005f38 <memset>:
 8005f38:	4402      	add	r2, r0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d100      	bne.n	8005f42 <memset+0xa>
 8005f40:	4770      	bx	lr
 8005f42:	f803 1b01 	strb.w	r1, [r3], #1
 8005f46:	e7f9      	b.n	8005f3c <memset+0x4>

08005f48 <_init>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr

08005f54 <_fini>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr
