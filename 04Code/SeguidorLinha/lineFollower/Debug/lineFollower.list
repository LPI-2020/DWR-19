
lineFollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080086f8  080086f8  000186f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008afc  08008afc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b04  08008b04  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08008b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000204  08008d10  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08008d10  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b8a  00000000  00000000  00020232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003329  00000000  00000000  00036dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa66  00000000  00000000  0003c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b95  00000000  00000000  00066bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102604  00000000  00000000  0007c74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ed4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  0017eda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000204 	.word	0x20000204
 800021c:	00000000 	.word	0x00000000
 8000220:	080086e0 	.word	0x080086e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000208 	.word	0x20000208
 800023c:	080086e0 	.word	0x080086e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <MX_ADC1_Init+0xb4>)
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <MX_ADC1_Init+0xb8>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <MX_ADC1_Init+0xb4>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_ADC1_Init+0xb4>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_ADC1_Init+0xb4>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC1_Init+0xb4>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_ADC1_Init+0xb4>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_ADC1_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC1_Init+0xb4>)
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_ADC1_Init+0xbc>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ADC1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC1_Init+0xb4>)
 8000636:	2202      	movs	r2, #2
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_ADC1_Init+0xb4>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_ADC1_Init+0xb4>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_ADC1_Init+0xb4>)
 800064a:	f000 fe03 	bl	8001254 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fa44 	bl	8000ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000658:	2304      	movs	r3, #4
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_ADC1_Init+0xb4>)
 800066a:	f001 f89b 	bl	80017a4 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fa34 	bl	8000ae0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000678:	230a      	movs	r3, #10
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800067c:	2302      	movs	r3, #2
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0xb4>)
 8000686:	f001 f88d 	bl	80017a4 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000690:	f000 fa26 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000234 	.word	0x20000234
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a3d      	ldr	r2, [pc, #244]	; (80007bc <HAL_ADC_MspInit+0x114>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d173      	bne.n	80007b2 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	4a3c      	ldr	r2, [pc, #240]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d4:	6453      	str	r3, [r2, #68]	; 0x44
 80006d6:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a36      	ldr	r2, [pc, #216]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <HAL_ADC_MspInit+0x118>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = SENSOR6_Pin;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000716:	2303      	movs	r3, #3
 8000718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR6_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	4827      	ldr	r0, [pc, #156]	; (80007c4 <HAL_ADC_MspInit+0x11c>)
 8000726:	f002 f829 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR3_Pin;
 800072a:	2310      	movs	r3, #16
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSOR3_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <HAL_ADC_MspInit+0x120>)
 800073e:	f002 f81d 	bl	800277c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000744:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <HAL_ADC_MspInit+0x128>)
 8000746:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000748:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800076c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_ADC_MspInit+0x124>)
 8000788:	f001 fbee 	bl	8001f68 <HAL_DMA_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000792:	f000 f9a5 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800079a:	639a      	str	r2, [r3, #56]	; 0x38
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <HAL_ADC_MspInit+0x124>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2012      	movs	r0, #18
 80007a8:	f001 fba7 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007ac:	2012      	movs	r0, #18
 80007ae:	f001 fbc0 	bl	8001f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40012000 	.word	0x40012000
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020800 	.word	0x40020800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	2000027c 	.word	0x2000027c
 80007d0:	40026410 	.word	0x40026410

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x38>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x38>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x38>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2038      	movs	r0, #56	; 0x38
 80007f8:	f001 fb7f 	bl	8001efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007fc:	2038      	movs	r0, #56	; 0x38
 80007fe:	f001 fb98 	bl	8001f32 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <MX_GPIO_Init+0x144>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a4a      	ldr	r2, [pc, #296]	; (8000954 <MX_GPIO_Init+0x144>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b48      	ldr	r3, [pc, #288]	; (8000954 <MX_GPIO_Init+0x144>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b45      	ldr	r3, [pc, #276]	; (8000954 <MX_GPIO_Init+0x144>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a44      	ldr	r2, [pc, #272]	; (8000954 <MX_GPIO_Init+0x144>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <MX_GPIO_Init+0x144>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <MX_GPIO_Init+0x144>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a3e      	ldr	r2, [pc, #248]	; (8000954 <MX_GPIO_Init+0x144>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b3c      	ldr	r3, [pc, #240]	; (8000954 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	; (8000954 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a38      	ldr	r2, [pc, #224]	; (8000954 <MX_GPIO_Init+0x144>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a32      	ldr	r2, [pc, #200]	; (8000954 <MX_GPIO_Init+0x144>)
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TESTE_Pin|IN1_LEFT_Pin|IN2_RIGHT_Pin|LD3_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f64f 0180 	movw	r1, #63616	; 0xf880
 80008a4:	482c      	ldr	r0, [pc, #176]	; (8000958 <MX_GPIO_Init+0x148>)
 80008a6:	f002 f915 	bl	8002ad4 <HAL_GPIO_WritePin>
                          |IN1_RIGHT_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2140      	movs	r1, #64	; 0x40
 80008ae:	482b      	ldr	r0, [pc, #172]	; (800095c <MX_GPIO_Init+0x14c>)
 80008b0:	f002 f910 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_LEFT_GPIO_Port, IN2_LEFT_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ba:	4829      	ldr	r0, [pc, #164]	; (8000960 <MX_GPIO_Init+0x150>)
 80008bc:	f002 f90a 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_GPIO_Init+0x154>)
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	4619      	mov	r1, r3
 80008d4:	4824      	ldr	r0, [pc, #144]	; (8000968 <MX_GPIO_Init+0x158>)
 80008d6:	f001 ff51 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TESTE_Pin|IN1_LEFT_Pin|IN2_RIGHT_Pin|LD3_Pin
 80008da:	f64f 0380 	movw	r3, #63616	; 0xf880
 80008de:	617b      	str	r3, [r7, #20]
                          |IN1_RIGHT_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4819      	ldr	r0, [pc, #100]	; (8000958 <MX_GPIO_Init+0x148>)
 80008f4:	f001 ff42 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f8:	2340      	movs	r3, #64	; 0x40
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4813      	ldr	r0, [pc, #76]	; (800095c <MX_GPIO_Init+0x14c>)
 8000910:	f001 ff34 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_GPIO_Init+0x14c>)
 8000928:	f001 ff28 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin;
 800092c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_LEFT_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_GPIO_Init+0x150>)
 8000946:	f001 ff19 	bl	800277c <HAL_GPIO_Init>

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800
 8000960:	40020000 	.word	0x40020000
 8000964:	10110000 	.word	0x10110000
 8000968:	40020800 	.word	0x40020800

0800096c <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	// start storing Line Follower Sensor values
	HAL_ADC_Start_DMA(&ADC_DMA_INSTANCE, lf_sens, 2);
 8000970:	2202      	movs	r2, #2
 8000972:	4905      	ldr	r1, [pc, #20]	; (8000988 <lfollower_start+0x1c>)
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <lfollower_start+0x20>)
 8000976:	f000 fdf3 	bl	8001560 <HAL_ADC_Start_DMA>
	// start sampling for PID application
	HAL_TIM_Base_Start_IT(&TIM_PID_SAMPLING);
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <lfollower_start+0x24>)
 800097c:	f003 fa42 	bl	8003e04 <HAL_TIM_Base_Start_IT>
	// start movement
	move_start();
 8000980:	f000 f8c4 	bl	8000b0c <move_start>
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000220 	.word	0x20000220
 800098c:	20000234 	.word	0x20000234
 8000990:	20000328 	.word	0x20000328

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fbff 	bl	800119a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f810 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f7ff ff36 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a4:	f7ff ff16 	bl	80007d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009a8:	f7ff fe1e 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80009ac:	f000 fa96 	bl	8000edc <MX_TIM6_Init>
  MX_TIM3_Init();
 80009b0:	f000 fa12 	bl	8000dd8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80009b4:	f000 fb4c 	bl	8001050 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // inits motors, PID and DMA to sensors
  lfollower_start();
 80009b8:	f7ff ffd8 	bl	800096c <lfollower_start>

  while (1)
 80009bc:	e7fe      	b.n	80009bc <main+0x28>
	...

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0b8      	sub	sp, #224	; 0xe0
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009ca:	2234      	movs	r2, #52	; 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fa3e 	bl	8005e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2290      	movs	r2, #144	; 0x90
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 fa2f 	bl	8005e50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <SystemClock_Config+0x118>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a38      	ldr	r2, [pc, #224]	; (8000ad8 <SystemClock_Config+0x118>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b36      	ldr	r3, [pc, #216]	; (8000ad8 <SystemClock_Config+0x118>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <SystemClock_Config+0x11c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a33      	ldr	r2, [pc, #204]	; (8000adc <SystemClock_Config+0x11c>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	6013      	str	r3, [r2, #0]
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <SystemClock_Config+0x11c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2e:	2310      	movs	r3, #16
 8000a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a46:	23d8      	movs	r3, #216	; 0xd8
 8000a48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 f8a3 	bl	8002ba8 <HAL_RCC_OscConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a68:	f000 f83a 	bl	8000ae0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a6c:	f002 f84c 	bl	8002b08 <HAL_PWREx_EnableOverDrive>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a76:	f000 f833 	bl	8000ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a9c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000aa0:	2107      	movs	r1, #7
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f002 fb2e 	bl	8003104 <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000aae:	f000 f817 	bl	8000ae0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ab6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fd1f 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000acc:	f000 f808 	bl	8000ae0 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	37e0      	adds	r7, #224	; 0xe0
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <motor_init+0x1c>)
 8000afc:	f003 fa5c 	bl	8003fb8 <HAL_TIM_PWM_Start>
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200002dc 	.word	0x200002dc

08000b0c <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <move_start+0x14>)
 8000b12:	f7ff ffeb 	bl	8000aec <motor_init>
	motor_init(&motor_left);
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <move_start+0x18>)
 8000b18:	f7ff ffe8 	bl	8000aec <motor_init>
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000014 	.word	0x20000014

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 fb2a 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <ADC_IRQHandler+0x10>)
 8000bca:	f000 fb87 	bl	80012dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000234 	.word	0x20000234

08000bd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM3_IRQHandler+0x10>)
 8000bde:	f003 fae5 	bl	80041ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200002dc 	.word	0x200002dc

08000bec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART3_IRQHandler+0x10>)
 8000bf2:	f004 fab1 	bl	8005158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000374 	.word	0x20000374

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <TIM6_DAC_IRQHandler+0x10>)
 8000c06:	f003 fad1 	bl	80041ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000328 	.word	0x20000328

08000c14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <DMA2_Stream0_IRQHandler+0x10>)
 8000c1a:	f001 fb45 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000027c 	.word	0x2000027c

08000c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_kill>:

int _kill(int pid, int sig)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c42:	f005 f8db 	bl	8005dfc <__errno>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2216      	movs	r2, #22
 8000c4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_exit>:

void _exit (int status)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ffe7 	bl	8000c38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c6a:	e7fe      	b.n	8000c6a <_exit+0x12>

08000c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
	}

return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
	}
	return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d06:	605a      	str	r2, [r3, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_isatty>:

int _isatty(int file)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1e:	2301      	movs	r3, #1
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f005 f840 	bl	8005dfc <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20080000 	.word	0x20080000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000228 	.word	0x20000228
 8000db0:	20000490 	.word	0x20000490

08000db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <MX_TIM3_Init+0x100>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e12:	226b      	movs	r2, #107	; 0x6b
 8000e14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-0;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e1e:	2264      	movs	r2, #100	; 0x64
 8000e20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b2c      	ldr	r3, [pc, #176]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e2e:	4829      	ldr	r0, [pc, #164]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e30:	f002 ff90 	bl	8003d54 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f7ff fe51 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e4c:	f003 fbde 	bl	800460c <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e56:	f7ff fe43 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e5a:	481e      	ldr	r0, [pc, #120]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e5c:	f003 f84a 	bl	8003ef4 <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e66:	f7ff fe3b 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4816      	ldr	r0, [pc, #88]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000e7a:	f004 f873 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f7ff fe2c 	bl	8000ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000ea0:	f003 faa4 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f7ff fe19 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000eb6:	f003 fa99 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000ec0:	f7ff fe0e 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <MX_TIM3_Init+0xfc>)
 8000ec6:	f000 f881 	bl	8000fcc <HAL_TIM_MspPostInit>

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002dc 	.word	0x200002dc
 8000ed8:	40000400 	.word	0x40000400

08000edc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_TIM6_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000ef4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000ef8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000f02:	2263      	movs	r2, #99	; 0x63
 8000f04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f0c:	480c      	ldr	r0, [pc, #48]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000f0e:	f002 ff21 	bl	8003d54 <HAL_TIM_Base_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f18:	f7ff fde2 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_TIM6_Init+0x64>)
 8000f2a:	f004 f81b 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f34:	f7ff fdd4 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000328 	.word	0x20000328
 8000f44:	40001000 	.word	0x40001000

08000f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <HAL_TIM_Base_MspInit+0x78>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d114      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	201d      	movs	r0, #29
 8000f78:	f000 ffbf 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f7c:	201d      	movs	r0, #29
 8000f7e:	f000 ffd8 	bl	8001f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000f82:	e018      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_TIM_Base_MspInit+0x80>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d113      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_TIM_Base_MspInit+0x7c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2036      	movs	r0, #54	; 0x36
 8000fac:	f000 ffa5 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb0:	2036      	movs	r0, #54	; 0x36
 8000fb2:	f000 ffbe 	bl	8001f32 <HAL_NVIC_EnableIRQ>
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40000400 	.word	0x40000400
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40001000 	.word	0x40001000

08000fcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_TIM_MspPostInit+0x64>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d11b      	bne.n	8001026 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_TIM_MspPostInit+0x68>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWN_RIGHT_Pin|PWM_LEFT_Pin;
 8001006:	23c0      	movs	r3, #192	; 0xc0
 8001008:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001016:	2302      	movs	r3, #2
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_MspPostInit+0x6c>)
 8001022:	f001 fbab 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40000400 	.word	0x40000400
 8001034:	40023800 	.word	0x40023800
 8001038:	40020800 	.word	0x40020800

0800103c <HAL_TIM_PeriodElapsedCallback>:
{
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
	{
		//lfollower_pid();
	}
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_USART3_UART_Init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_USART3_UART_Init+0x58>)
 8001094:	f004 f812 	bl	80050bc <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800109e:	f7ff fd1f 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000374 	.word	0x20000374
 80010ac:	40004800 	.word	0x40004800

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <HAL_UART_MspInit+0x8c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d130      	bne.n	8001134 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6413      	str	r3, [r2, #64]	; 0x40
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001102:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001114:	2307      	movs	r3, #7
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <HAL_UART_MspInit+0x94>)
 8001120:	f001 fb2c 	bl	800277c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2027      	movs	r0, #39	; 0x27
 800112a:	f000 fee6 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800112e:	2027      	movs	r0, #39	; 0x27
 8001130:	f000 feff 	bl	8001f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004800 	.word	0x40004800
 8001140:	40023800 	.word	0x40023800
 8001144:	40020c00 	.word	0x40020c00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114e:	490e      	ldr	r1, [pc, #56]	; (8001188 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001164:	4c0b      	ldr	r4, [pc, #44]	; (8001194 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001172:	f7ff fe1f 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001176:	f004 fe47 	bl	8005e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fc0b 	bl	8000994 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800118c:	08008b0c 	.word	0x08008b0c
  ldr r2, =_sbss
 8001190:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001194:	2000048c 	.word	0x2000048c

08001198 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <CAN1_RX0_IRQHandler>

0800119a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 fea0 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f805 	bl	80011b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fcbd 	bl	8000b28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 febb 	bl	8001f4e <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 fe83 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000028 	.word	0x20000028
 800120c:	20000030 	.word	0x20000030
 8001210:	2000002c 	.word	0x2000002c

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000030 	.word	0x20000030
 8001238:	20000478 	.word	0x20000478

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000478 	.word	0x20000478

08001254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e031      	b.n	80012ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fa18 	bl	80006a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_ADC_Init+0x84>)
 8001298:	4013      	ands	r3, r2
 800129a:	f043 0202 	orr.w	r2, r3, #2
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fbc8 	bl	8001a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	f043 0201 	orr.w	r2, r3, #1
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	; 0x40
 80012be:	e001      	b.n	80012c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	ffffeefd 	.word	0xffffeefd

080012dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	2b20      	cmp	r3, #32
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d049      	beq.n	80013b2 <HAL_ADC_IRQHandler+0xd6>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d046      	beq.n	80013b2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d12b      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d127      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0220 	bic.w	r2, r2, #32
 800137c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f9d6 	bl	8001754 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0212 	mvn.w	r2, #18
 80013b0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b04      	cmp	r3, #4
 80013be:	bf0c      	ite	eq
 80013c0:	2301      	moveq	r3, #1
 80013c2:	2300      	movne	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	2b80      	cmp	r3, #128	; 0x80
 80013d4:	bf0c      	ite	eq
 80013d6:	2301      	moveq	r3, #1
 80013d8:	2300      	movne	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d057      	beq.n	8001494 <HAL_ADC_IRQHandler+0x1b8>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d054      	beq.n	8001494 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d139      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001416:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001428:	2b00      	cmp	r3, #0
 800142a:	d12b      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d124      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001444:	2b00      	cmp	r3, #0
 8001446:	d11d      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d119      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800145e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fc53 	bl	8001d30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f06f 020c 	mvn.w	r2, #12
 8001492:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b01      	cmp	r3, #1
 80014a0:	bf0c      	ite	eq
 80014a2:	2301      	moveq	r3, #1
 80014a4:	2300      	movne	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	2b40      	cmp	r3, #64	; 0x40
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d017      	beq.n	80014f6 <HAL_ADC_IRQHandler+0x21a>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d014      	beq.n	80014f6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d10d      	bne.n	80014f6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f948 	bl	800177c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0201 	mvn.w	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	2b20      	cmp	r3, #32
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001516:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d015      	beq.n	8001556 <HAL_ADC_IRQHandler+0x27a>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001534:	f043 0202 	orr.w	r2, r3, #2
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0220 	mvn.w	r2, #32
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f922 	bl	8001790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f06f 0220 	mvn.w	r2, #32
 8001554:	601a      	str	r2, [r3, #0]
  }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_Start_DMA+0x1e>
 800157a:	2302      	movs	r3, #2
 800157c:	e0d4      	b.n	8001728 <HAL_ADC_Start_DMA+0x1c8>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d018      	beq.n	80015c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_ADC_Start_DMA+0x1d0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a62      	ldr	r2, [pc, #392]	; (8001734 <HAL_ADC_Start_DMA+0x1d4>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9a      	lsrs	r2, r3, #18
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3b01      	subs	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f040 809c 	bne.w	800170e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <HAL_ADC_Start_DMA+0x1d8>)
 80015dc:	4013      	ands	r3, r2
 80015de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001610:	d106      	bne.n	8001620 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f023 0206 	bic.w	r2, r3, #6
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
 800161e:	e002      	b.n	8001626 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <HAL_ADC_Start_DMA+0x1dc>)
 8001634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	4a41      	ldr	r2, [pc, #260]	; (8001740 <HAL_ADC_Start_DMA+0x1e0>)
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001642:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_ADC_Start_DMA+0x1e4>)
 8001644:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800164e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800165e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800166e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	334c      	adds	r3, #76	; 0x4c
 800167a:	4619      	mov	r1, r3
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f000 fd20 	bl	80020c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_ADC_Start_DMA+0x1e8>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d143      	bne.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	e03a      	b.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_ADC_Start_DMA+0x1ec>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10e      	bne.n	80016d8 <HAL_ADC_Start_DMA+0x178>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d107      	bne.n	80016d8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016d6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_ADC_Start_DMA+0x1e8>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d120      	bne.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_ADC_Start_DMA+0x1f0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11b      	bne.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d114      	bne.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	e00b      	b.n	8001726 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000028 	.word	0x20000028
 8001734:	431bde83 	.word	0x431bde83
 8001738:	fffff8fe 	.word	0xfffff8fe
 800173c:	08001c2d 	.word	0x08001c2d
 8001740:	08001ce7 	.word	0x08001ce7
 8001744:	08001d03 	.word	0x08001d03
 8001748:	40012300 	.word	0x40012300
 800174c:	40012000 	.word	0x40012000
 8001750:	40012200 	.word	0x40012200

08001754 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1c>
 80017bc:	2302      	movs	r3, #2
 80017be:	e12a      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x272>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b09      	cmp	r3, #9
 80017ce:	d93a      	bls.n	8001846 <HAL_ADC_ConfigChannel+0xa2>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017d8:	d035      	beq.n	8001846 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68d9      	ldr	r1, [r3, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	3b1e      	subs	r3, #30
 80017f0:	2207      	movs	r2, #7
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a87      	ldr	r2, [pc, #540]	; (8001a24 <HAL_ADC_ConfigChannel+0x280>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68d9      	ldr	r1, [r3, #12]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	061a      	lsls	r2, r3, #24
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181e:	e035      	b.n	800188c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	4603      	mov	r3, r0
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4403      	add	r3, r0
 8001838:	3b1e      	subs	r3, #30
 800183a:	409a      	lsls	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001844:	e022      	b.n	800188c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6919      	ldr	r1, [r3, #16]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	2207      	movs	r2, #7
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43da      	mvns	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	400a      	ands	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6919      	ldr	r1, [r3, #16]
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	4603      	mov	r3, r0
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4403      	add	r3, r0
 8001882:	409a      	lsls	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b06      	cmp	r3, #6
 8001892:	d824      	bhi.n	80018de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	3b05      	subs	r3, #5
 80018a6:	221f      	movs	r2, #31
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43da      	mvns	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	400a      	ands	r2, r1
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b05      	subs	r3, #5
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
 80018dc:	e04c      	b.n	8001978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d824      	bhi.n	8001930 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b23      	subs	r3, #35	; 0x23
 80018f8:	221f      	movs	r2, #31
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	400a      	ands	r2, r1
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b23      	subs	r3, #35	; 0x23
 8001922:	fa00 f203 	lsl.w	r2, r0, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
 800192e:	e023      	b.n	8001978 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b41      	subs	r3, #65	; 0x41
 8001942:	221f      	movs	r2, #31
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b41      	subs	r3, #65	; 0x41
 800196c:	fa00 f203 	lsl.w	r2, r0, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2a      	ldr	r2, [pc, #168]	; (8001a28 <HAL_ADC_ConfigChannel+0x284>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10a      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1f4>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800198a:	d105      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 8001992:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001996:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a22      	ldr	r2, [pc, #136]	; (8001a28 <HAL_ADC_ConfigChannel+0x284>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d109      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x212>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 80019b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <HAL_ADC_ConfigChannel+0x284>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d125      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x268>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_ADC_ConfigChannel+0x280>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0x22e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b11      	cmp	r3, #17
 80019d0:	d11c      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <HAL_ADC_ConfigChannel+0x288>)
 80019d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_ADC_ConfigChannel+0x280>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d111      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_ADC_ConfigChannel+0x28c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_ADC_ConfigChannel+0x290>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0c9a      	lsrs	r2, r3, #18
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80019fe:	e002      	b.n	8001a06 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f9      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	10000012 	.word	0x10000012
 8001a28:	40012000 	.word	0x40012000
 8001a2c:	40012300 	.word	0x40012300
 8001a30:	20000028 	.word	0x20000028
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a40:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <ADC_Init+0x1ec>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a77      	ldr	r2, [pc, #476]	; (8001c24 <ADC_Init+0x1ec>)
 8001a46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <ADC_Init+0x1ec>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4973      	ldr	r1, [pc, #460]	; (8001c24 <ADC_Init+0x1ec>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6859      	ldr	r1, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	021a      	lsls	r2, r3, #8
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6899      	ldr	r1, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <ADC_Init+0x1f0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e00f      	b.n	8001b32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0202 	bic.w	r2, r2, #2
 8001b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	005a      	lsls	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6859      	ldr	r1, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	035a      	lsls	r2, r3, #13
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	e007      	b.n	8001ba8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	051a      	lsls	r2, r3, #20
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6899      	ldr	r1, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bea:	025a      	lsls	r2, r3, #9
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6899      	ldr	r1, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	029a      	lsls	r2, r3, #10
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40012300 	.word	0x40012300
 8001c28:	0f000001 	.word	0x0f000001

08001c2c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13c      	bne.n	8001cc0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d12b      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d127      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d119      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0220 	bic.w	r2, r2, #32
 8001c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f7ff fd4b 	bl	8001754 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001cbe:	e00e      	b.n	8001cde <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f7ff fd5f 	bl	8001790 <HAL_ADC_ErrorCallback>
}
 8001cd2:	e004      	b.n	8001cde <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f7ff fd37 	bl	8001768 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f043 0204 	orr.w	r2, r3, #4
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fd34 	bl	8001790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d28:	bf00      	nop
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <__NVIC_SetPriorityGrouping+0x40>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <__NVIC_SetPriorityGrouping+0x40>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	05fa0000 	.word	0x05fa0000

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	; (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	; (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff f962 	bl	800123c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e099      	b.n	80020b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa4:	e00f      	b.n	8001fc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fa6:	f7ff f949 	bl	800123c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d908      	bls.n	8001fc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e078      	b.n	80020b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e8      	bne.n	8001fa6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_DMA_Init+0x158>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2b04      	cmp	r3, #4
 800201e:	d107      	bne.n	8002030 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4313      	orrs	r3, r2
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0307 	bic.w	r3, r3, #7
 8002046:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b04      	cmp	r3, #4
 8002058:	d117      	bne.n	800208a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00e      	beq.n	800208a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fb09 	bl	8002684 <DMA_CheckFifoParam>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002086:	2301      	movs	r3, #1
 8002088:	e016      	b.n	80020b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fac0 	bl	8002618 <DMA_CalcBaseAndBitshift>
 8002098:	4603      	mov	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	223f      	movs	r2, #63	; 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	e010803f 	.word	0xe010803f

080020c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_DMA_Start_IT+0x26>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e048      	b.n	800217c <HAL_DMA_Start_IT+0xb8>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d137      	bne.n	800216e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2202      	movs	r2, #2
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa52 	bl	80025bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	223f      	movs	r2, #63	; 0x3f
 800211e:	409a      	lsls	r2, r3
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0216 	orr.w	r2, r2, #22
 8002132:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002142:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0208 	orr.w	r2, r2, #8
 800215a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e005      	b.n	800217a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002192:	f7ff f853 	bl	800123c <HAL_GetTick>
 8002196:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d008      	beq.n	80021b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e052      	b.n	800225c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0216 	bic.w	r2, r2, #22
 80021c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <HAL_DMA_Abort+0x62>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0208 	bic.w	r2, r2, #8
 80021f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002206:	e013      	b.n	8002230 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002208:	f7ff f818 	bl	800123c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b05      	cmp	r3, #5
 8002214:	d90c      	bls.n	8002230 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2220      	movs	r2, #32
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2203      	movs	r2, #3
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e015      	b.n	800225c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e4      	bne.n	8002208 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002242:	223f      	movs	r2, #63	; 0x3f
 8002244:	409a      	lsls	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d004      	beq.n	8002282 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e00c      	b.n	800229c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2205      	movs	r2, #5
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022b4:	4b92      	ldr	r3, [pc, #584]	; (8002500 <HAL_DMA_IRQHandler+0x258>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a92      	ldr	r2, [pc, #584]	; (8002504 <HAL_DMA_IRQHandler+0x25c>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a9b      	lsrs	r3, r3, #10
 80022c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d2:	2208      	movs	r2, #8
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01a      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	2208      	movs	r2, #8
 8002302:	409a      	lsls	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	2204      	movs	r2, #4
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d012      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	2210      	movs	r2, #16
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d043      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03c      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2210      	movs	r2, #16
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d018      	beq.n	80023ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d024      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
 80023d6:	e01f      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e016      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0208 	bic.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	2220      	movs	r2, #32
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 808e 	beq.w	8002546 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8086 	beq.w	8002546 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	2220      	movs	r2, #32
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d136      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0216 	bic.w	r2, r2, #22
 8002460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002470:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <HAL_DMA_IRQHandler+0x1da>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0208 	bic.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	223f      	movs	r2, #63	; 0x3f
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07d      	beq.n	80025b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
        }
        return;
 80024be:	e078      	b.n	80025b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01c      	beq.n	8002508 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d108      	bne.n	80024ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d030      	beq.n	8002546 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e02b      	b.n	8002546 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d027      	beq.n	8002546 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4798      	blx	r3
 80024fe:	e022      	b.n	8002546 <HAL_DMA_IRQHandler+0x29e>
 8002500:	20000028 	.word	0x20000028
 8002504:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10f      	bne.n	8002536 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0210 	bic.w	r2, r2, #16
 8002524:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	2b00      	cmp	r3, #0
 800254c:	d032      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d022      	beq.n	80025a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2205      	movs	r2, #5
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	429a      	cmp	r2, r3
 800257c:	d307      	bcc.n	800258e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f2      	bne.n	8002572 <HAL_DMA_IRQHandler+0x2ca>
 800258c:	e000      	b.n	8002590 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800258e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
 80025b0:	e000      	b.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025b2:	bf00      	nop
    }
  }
}
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop

080025bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b40      	cmp	r3, #64	; 0x40
 80025e8:	d108      	bne.n	80025fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025fa:	e007      	b.n	800260c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b10      	subs	r3, #16
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <DMA_CalcBaseAndBitshift+0x60>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <DMA_CalcBaseAndBitshift+0x64>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d908      	bls.n	8002658 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 800264e:	4013      	ands	r3, r2
 8002650:	1d1a      	adds	r2, r3, #4
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	659a      	str	r2, [r3, #88]	; 0x58
 8002656:	e006      	b.n	8002666 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b08      	ldr	r3, [pc, #32]	; (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	aaaaaaab 	.word	0xaaaaaaab
 800267c:	08008710 	.word	0x08008710
 8002680:	fffffc00 	.word	0xfffffc00

08002684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0x5a>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d856      	bhi.n	8002752 <DMA_CheckFifoParam+0xce>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <DMA_CheckFifoParam+0x28>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	08002753 	.word	0x08002753
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d046      	beq.n	8002756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e043      	b.n	8002756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026d6:	d140      	bne.n	800275a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e03d      	b.n	800275a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	d121      	bne.n	800272c <DMA_CheckFifoParam+0xa8>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d837      	bhi.n	800275e <DMA_CheckFifoParam+0xda>
 80026ee:	a201      	add	r2, pc, #4	; (adr r2, 80026f4 <DMA_CheckFifoParam+0x70>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270b 	.word	0x0800270b
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800271d 	.word	0x0800271d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e030      	b.n	800276c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e022      	b.n	8002762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002724:	d11f      	bne.n	8002766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272a:	e01c      	b.n	8002766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d903      	bls.n	800273a <DMA_CheckFifoParam+0xb6>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d003      	beq.n	8002740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002738:	e018      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      break;
 800273e:	e015      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e00b      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002752:	bf00      	nop
 8002754:	e00a      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e008      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e006      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e004      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;   
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
    }
  } 
  
  return status; 
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	e175      	b.n	8002a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800279c:	2201      	movs	r2, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f040 8164 	bne.w	8002a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d00b      	beq.n	80027da <HAL_GPIO_Init+0x5e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d007      	beq.n	80027da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ce:	2b11      	cmp	r3, #17
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d130      	bne.n	800283c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	2203      	movs	r2, #3
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 0201 	and.w	r2, r3, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x100>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b12      	cmp	r3, #18
 800287a:	d123      	bne.n	80028c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	08da      	lsrs	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3208      	adds	r2, #8
 80028be:	69b9      	ldr	r1, [r7, #24]
 80028c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0203 	and.w	r2, r3, #3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 80be 	beq.w	8002a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d037      	beq.n	80029ba <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x338>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x33c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_GPIO_Init+0x340>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x344>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_GPIO_Init+0x348>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_GPIO_Init+0x34c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_GPIO_Init+0x350>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x21a>
 8002992:	2309      	movs	r3, #9
 8002994:	e012      	b.n	80029bc <HAL_GPIO_Init+0x240>
 8002996:	230a      	movs	r3, #10
 8002998:	e010      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299a:	2308      	movs	r3, #8
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae86 	bls.w	800279c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022400 	.word	0x40022400
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b36:	f7fe fb81 	bl	800123c <HAL_GetTick>
 8002b3a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b3c:	e009      	b.n	8002b52 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b3e:	f7fe fb7d 	bl	800123c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4c:	d901      	bls.n	8002b52 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e022      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0f      	ldr	r2, [pc, #60]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6c:	f7fe fb66 	bl	800123c <HAL_GetTick>
 8002b70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b72:	e009      	b.n	8002b88 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b74:	f7fe fb62 	bl	800123c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b82:	d901      	bls.n	8002b88 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e007      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b94:	d1ee      	bne.n	8002b74 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e29b      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b96      	ldr	r3, [pc, #600]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd8:	4b93      	ldr	r3, [pc, #588]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
 8002be4:	4b90      	ldr	r3, [pc, #576]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b8d      	ldr	r3, [pc, #564]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x130>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e275      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7a>
 8002c14:	4b84      	ldr	r3, [pc, #528]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a83      	ldr	r2, [pc, #524]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x9c>
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7b      	ldr	r2, [pc, #492]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b73      	ldr	r3, [pc, #460]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd8>
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fad8 	bl	800123c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fad4 	bl	800123c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e229      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe8>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fac4 	bl	800123c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fac0 	bl	800123c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e215      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x110>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d069      	beq.n	8002dba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x190>
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1e9      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	493d      	ldr	r1, [pc, #244]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e040      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d023      	beq.n	8002d88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fa76 	bl	800123c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d54:	f7fe fa72 	bl	800123c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1c7      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4929      	ldr	r1, [pc, #164]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
 8002d86:	e018      	b.n	8002dba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002d8e:	f023 0301 	bic.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe fa52 	bl	800123c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fa4e 	bl	800123c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e1a3      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d038      	beq.n	8002e38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d019      	beq.n	8002e02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dda:	f7fe fa2f 	bl	800123c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fe fa2b 	bl	800123c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e180      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x23a>
 8002e00:	e01a      	b.n	8002e38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_RCC_OscConfig+0x280>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fa15 	bl	800123c <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe fa11 	bl	800123c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d903      	bls.n	8002e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e166      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
 8002e28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a4 	beq.w	8002f8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e46:	4b8c      	ldr	r3, [pc, #560]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	4b89      	ldr	r3, [pc, #548]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a88      	ldr	r2, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b86      	ldr	r3, [pc, #536]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60bb      	str	r3, [r7, #8]
 8002e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e6e:	4b83      	ldr	r3, [pc, #524]	; (800307c <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e7a:	4b80      	ldr	r3, [pc, #512]	; (800307c <HAL_RCC_OscConfig+0x4d4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7f      	ldr	r2, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e86:	f7fe f9d9 	bl	800123c <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8e:	f7fe f9d5 	bl	800123c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b64      	cmp	r3, #100	; 0x64
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e12a      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea0:	4b76      	ldr	r3, [pc, #472]	; (800307c <HAL_RCC_OscConfig+0x4d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x31a>
 8002eb4:	4b70      	ldr	r3, [pc, #448]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a6f      	ldr	r2, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	e02d      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x33c>
 8002eca:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a67      	ldr	r2, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	f023 0304 	bic.w	r3, r3, #4
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x35e>
 8002eec:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a61      	ldr	r2, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b5f      	ldr	r3, [pc, #380]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a5e      	ldr	r2, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x376>
 8002f06:	4b5c      	ldr	r3, [pc, #368]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5b      	ldr	r2, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe f989 	bl	800123c <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f985 	bl	800123c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0d8      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ee      	beq.n	8002f2e <HAL_RCC_OscConfig+0x386>
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fe f973 	bl	800123c <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe f96f 	bl	800123c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0c2      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80ae 	beq.w	80030f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d06d      	beq.n	8003080 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d14b      	bne.n	8003044 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a31      	ldr	r2, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f940 	bl	800123c <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe f93c 	bl	800123c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e091      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	491b      	ldr	r1, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe f90e 	bl	800123c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe f90a 	bl	800123c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e05f      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x47c>
 8003042:	e057      	b.n	80030f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f8f4 	bl	800123c <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe f8f0 	bl	800123c <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e045      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x4b0>
 8003076:	e03d      	b.n	80030f4 <HAL_RCC_OscConfig+0x54c>
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <HAL_RCC_OscConfig+0x558>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d030      	beq.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d129      	bne.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d122      	bne.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d119      	bne.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10f      	bne.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d0      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b6a      	ldr	r3, [pc, #424]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4965      	ldr	r1, [pc, #404]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d040      	beq.n	8003228 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d115      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e073      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d6:	4b3d      	ldr	r3, [pc, #244]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06b      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 0203 	bic.w	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4936      	ldr	r1, [pc, #216]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f8:	f7fe f820 	bl	800123c <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe f81c 	bl	800123c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	; 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e053      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 020c 	and.w	r2, r3, #12
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	429a      	cmp	r2, r3
 8003226:	d1eb      	bne.n	8003200 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d210      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	4922      	ldr	r1, [pc, #136]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x1cc>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1d0>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd ff7c 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	080086f8 	.word	0x080086f8
 80032d4:	20000028 	.word	0x20000028
 80032d8:	2000002c 	.word	0x2000002c

080032dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	2300      	movs	r3, #0
 80032ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f4:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d00d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003300:	2b08      	cmp	r3, #8
 8003302:	f200 80bd 	bhi.w	8003480 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x34>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x3a>
 800330e:	e0b7      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b61      	ldr	r3, [pc, #388]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003312:	60bb      	str	r3, [r7, #8]
      break;
 8003314:	e0b7      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003318:	60bb      	str	r3, [r7, #8]
      break;
 800331a:	e0b4      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003326:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04d      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b58      	ldr	r3, [pc, #352]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	461a      	mov	r2, r3
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	ea02 0800 	and.w	r8, r2, r0
 800334a:	ea03 0901 	and.w	r9, r3, r1
 800334e:	4640      	mov	r0, r8
 8003350:	4649      	mov	r1, r9
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	014b      	lsls	r3, r1, #5
 800335c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003360:	0142      	lsls	r2, r0, #5
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	ebb0 0008 	subs.w	r0, r0, r8
 800336a:	eb61 0109 	sbc.w	r1, r1, r9
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800337c:	0182      	lsls	r2, r0, #6
 800337e:	1a12      	subs	r2, r2, r0
 8003380:	eb63 0301 	sbc.w	r3, r3, r1
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	00d9      	lsls	r1, r3, #3
 800338e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003392:	00d0      	lsls	r0, r2, #3
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	eb12 0208 	adds.w	r2, r2, r8
 800339c:	eb43 0309 	adc.w	r3, r3, r9
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	0299      	lsls	r1, r3, #10
 80033aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ae:	0290      	lsls	r0, r2, #10
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	f7fc ff96 	bl	80002f0 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e04a      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	099b      	lsrs	r3, r3, #6
 80033d4:	461a      	mov	r2, r3
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	ea02 0400 	and.w	r4, r2, r0
 80033e6:	ea03 0501 	and.w	r5, r3, r1
 80033ea:	4620      	mov	r0, r4
 80033ec:	4629      	mov	r1, r5
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	014b      	lsls	r3, r1, #5
 80033f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033fc:	0142      	lsls	r2, r0, #5
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	1b00      	subs	r0, r0, r4
 8003404:	eb61 0105 	sbc.w	r1, r1, r5
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	018b      	lsls	r3, r1, #6
 8003412:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003416:	0182      	lsls	r2, r0, #6
 8003418:	1a12      	subs	r2, r2, r0
 800341a:	eb63 0301 	sbc.w	r3, r3, r1
 800341e:	f04f 0000 	mov.w	r0, #0
 8003422:	f04f 0100 	mov.w	r1, #0
 8003426:	00d9      	lsls	r1, r3, #3
 8003428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800342c:	00d0      	lsls	r0, r2, #3
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	1912      	adds	r2, r2, r4
 8003434:	eb45 0303 	adc.w	r3, r5, r3
 8003438:	f04f 0000 	mov.w	r0, #0
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	0299      	lsls	r1, r3, #10
 8003442:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003446:	0290      	lsls	r0, r2, #10
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	f7fc ff4a 	bl	80002f0 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	3301      	adds	r3, #1
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	60bb      	str	r3, [r7, #8]
      break;
 800347e:	e002      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003482:	60bb      	str	r3, [r7, #8]
      break;
 8003484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003486:	68bb      	ldr	r3, [r7, #8]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	00f42400 	.word	0x00f42400

0800349c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000028 	.word	0x20000028

080034b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a9b      	lsrs	r3, r3, #10
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08008708 	.word	0x08008708

080034dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034e0:	f7ff ffdc 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034e4:	4602      	mov	r2, r0
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	4903      	ldr	r1, [pc, #12]	; (8003500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034f2:	5ccb      	ldrb	r3, [r1, r3]
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	08008708 	.word	0x08008708

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800352c:	4b69      	ldr	r3, [pc, #420]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003540:	4964      	ldr	r1, [pc, #400]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	4959      	ldr	r1, [pc, #356]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800359a:	4b4e      	ldr	r3, [pc, #312]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	494a      	ldr	r1, [pc, #296]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808b 	beq.w	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a39      	ldr	r2, [pc, #228]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003600:	4b35      	ldr	r3, [pc, #212]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd fe16 	bl	800123c <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fe12 	bl	800123c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e38f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d035      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d02e      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003650:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d114      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fdda 	bl	800123c <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fdd6 	bl	800123c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e351      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ba:	d111      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	4901      	ldr	r1, [pc, #4]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	608b      	str	r3, [r1, #8]
 80036d2:	e00b      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000
 80036dc:	0ffffcff 	.word	0x0ffffcff
 80036e0:	4bb3      	ldr	r3, [pc, #716]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4ab2      	ldr	r2, [pc, #712]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	4bb0      	ldr	r3, [pc, #704]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	49ad      	ldr	r1, [pc, #692]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d010      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800370a:	4ba9      	ldr	r3, [pc, #676]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003710:	4aa7      	ldr	r2, [pc, #668]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800371a:	4ba5      	ldr	r3, [pc, #660]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800371c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003724:	49a2      	ldr	r1, [pc, #648]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003738:	4b9d      	ldr	r3, [pc, #628]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003746:	499a      	ldr	r1, [pc, #616]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800375a:	4b95      	ldr	r3, [pc, #596]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	4991      	ldr	r1, [pc, #580]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800377c:	4b8c      	ldr	r3, [pc, #560]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	4989      	ldr	r1, [pc, #548]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800379e:	4b84      	ldr	r3, [pc, #528]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4980      	ldr	r1, [pc, #512]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c0:	4b7b      	ldr	r3, [pc, #492]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	4978      	ldr	r1, [pc, #480]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e2:	4b73      	ldr	r3, [pc, #460]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f023 020c 	bic.w	r2, r3, #12
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	496f      	ldr	r1, [pc, #444]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003804:	4b6a      	ldr	r3, [pc, #424]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	4967      	ldr	r1, [pc, #412]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003826:	4b62      	ldr	r3, [pc, #392]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	495e      	ldr	r1, [pc, #376]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003848:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	4956      	ldr	r1, [pc, #344]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800386a:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	494d      	ldr	r1, [pc, #308]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	4945      	ldr	r1, [pc, #276]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ae:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	493c      	ldr	r1, [pc, #240]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038d0:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	4934      	ldr	r1, [pc, #208]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038f2:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003900:	492b      	ldr	r1, [pc, #172]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	491b      	ldr	r1, [pc, #108]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003954:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003964:	4912      	ldr	r1, [pc, #72]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003978:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003988:	4909      	ldr	r1, [pc, #36]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00f      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800399c:	4b04      	ldr	r3, [pc, #16]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	e002      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	4986      	ldr	r1, [pc, #536]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039c8:	4b81      	ldr	r3, [pc, #516]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	497d      	ldr	r1, [pc, #500]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d006      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80d6 	beq.w	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039f4:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a75      	ldr	r2, [pc, #468]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fd fc1c 	bl	800123c <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a08:	f7fd fc18 	bl	800123c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e195      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d021      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11d      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a48:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a4e:	0e1b      	lsrs	r3, r3, #24
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	019a      	lsls	r2, r3, #6
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	4958      	ldr	r1, [pc, #352]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d02e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa0:	d129      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa8:	0c1b      	lsrs	r3, r3, #16
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab0:	4b47      	ldr	r3, [pc, #284]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	019a      	lsls	r2, r3, #6
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	041b      	lsls	r3, r3, #16
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	493e      	ldr	r1, [pc, #248]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ade:	4b3c      	ldr	r3, [pc, #240]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae4:	f023 021f 	bic.w	r2, r3, #31
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4938      	ldr	r1, [pc, #224]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01d      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b02:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b08:	0e1b      	lsrs	r3, r3, #24
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b10:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	041b      	lsls	r3, r3, #16
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	4926      	ldr	r1, [pc, #152]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d011      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	071b      	lsls	r3, r3, #28
 8003b66:	491a      	ldr	r1, [pc, #104]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7a:	f7fd fb5f 	bl	800123c <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b82:	f7fd fb5b 	bl	800123c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b64      	cmp	r3, #100	; 0x64
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e0d8      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b94:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	f040 80ce 	bne.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fd fb42 	bl	800123c <HAL_GetTick>
 8003bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bbc:	f7fd fb3e 	bl	800123c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d904      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0bb      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bd4:	4b5e      	ldr	r3, [pc, #376]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be0:	d0ec      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d12a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c0a:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	0c1b      	lsrs	r3, r3, #16
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c18:	4b4d      	ldr	r3, [pc, #308]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	0f1b      	lsrs	r3, r3, #28
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	019a      	lsls	r2, r3, #6
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	071b      	lsls	r3, r3, #28
 8003c3e:	4944      	ldr	r1, [pc, #272]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c46:	4b42      	ldr	r3, [pc, #264]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	493d      	ldr	r1, [pc, #244]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d022      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c74:	d11d      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c76:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	0e1b      	lsrs	r3, r3, #24
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	0f1b      	lsrs	r3, r3, #28
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	019a      	lsls	r2, r3, #6
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	071b      	lsls	r3, r3, #28
 8003caa:	4929      	ldr	r1, [pc, #164]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	0e1b      	lsrs	r3, r3, #24
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ccc:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	019a      	lsls	r2, r3, #6
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	041b      	lsls	r3, r3, #16
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	071b      	lsls	r3, r3, #28
 8003cf2:	4917      	ldr	r1, [pc, #92]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cfa:	4b15      	ldr	r3, [pc, #84]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	4911      	ldr	r1, [pc, #68]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1c:	f7fd fa8e 	bl	800123c <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d24:	f7fd fa8a 	bl	800123c <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e007      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d42:	d1ef      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800

08003d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e049      	b.n	8003dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd f8e4 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f000 fd28 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e054      	b.n	8003ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a26      	ldr	r2, [pc, #152]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d022      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d01d      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_TIM_Base_Start_IT+0xe8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d115      	bne.n	8003eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d015      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d011      	beq.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	e008      	b.n	8003ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40010400 	.word	0x40010400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40001800 	.word	0x40001800
 8003ef0:	00010007 	.word	0x00010007

08003ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e049      	b.n	8003f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f841 	bl	8003fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fc58 	bl	80047e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_TIM_PWM_Start+0x24>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e03c      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d109      	bne.n	8003ff6 <HAL_TIM_PWM_Start+0x3e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	bf14      	ite	ne
 8003fee:	2301      	movne	r3, #1
 8003ff0:	2300      	moveq	r3, #0
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	e02f      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d109      	bne.n	8004010 <HAL_TIM_PWM_Start+0x58>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	bf14      	ite	ne
 8004008:	2301      	movne	r3, #1
 800400a:	2300      	moveq	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e022      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d109      	bne.n	800402a <HAL_TIM_PWM_Start+0x72>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	bf14      	ite	ne
 8004022:	2301      	movne	r3, #1
 8004024:	2300      	moveq	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	e015      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b10      	cmp	r3, #16
 800402e:	d109      	bne.n	8004044 <HAL_TIM_PWM_Start+0x8c>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b01      	cmp	r3, #1
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	e008      	b.n	8004056 <HAL_TIM_PWM_Start+0x9e>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e092      	b.n	8004184 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d104      	bne.n	800406e <HAL_TIM_PWM_Start+0xb6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406c:	e023      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d104      	bne.n	800407e <HAL_TIM_PWM_Start+0xc6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800407c:	e01b      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d104      	bne.n	800408e <HAL_TIM_PWM_Start+0xd6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	e013      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d104      	bne.n	800409e <HAL_TIM_PWM_Start+0xe6>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800409c:	e00b      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d104      	bne.n	80040ae <HAL_TIM_PWM_Start+0xf6>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ac:	e003      	b.n	80040b6 <HAL_TIM_PWM_Start+0xfe>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 ff2a 	bl	8004f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a30      	ldr	r2, [pc, #192]	; (800418c <HAL_TIM_PWM_Start+0x1d4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_PWM_Start+0x120>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <HAL_TIM_PWM_Start+0x1d8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_TIM_PWM_Start+0x124>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_TIM_PWM_Start+0x126>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_TIM_PWM_Start+0x1d4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d01d      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <HAL_TIM_PWM_Start+0x1dc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <HAL_TIM_PWM_Start+0x1e0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_TIM_PWM_Start+0x1e4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_TIM_PWM_Start+0x1d8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_PWM_Start+0x1e8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIM_PWM_Start+0x18a>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a19      	ldr	r2, [pc, #100]	; (80041a4 <HAL_TIM_PWM_Start+0x1ec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d115      	bne.n	800416e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <HAL_TIM_PWM_Start+0x1f0>)
 800414a:	4013      	ands	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d015      	beq.n	8004180 <HAL_TIM_PWM_Start+0x1c8>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d011      	beq.n	8004180 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e008      	b.n	8004180 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e000      	b.n	8004182 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40001800 	.word	0x40001800
 80041a8:	00010007 	.word	0x00010007

080041ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d122      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d11b      	bne.n	8004208 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0202 	mvn.w	r2, #2
 80041d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fadc 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 face 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fadf 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d122      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d11b      	bne.n	800425c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0204 	mvn.w	r2, #4
 800422c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fab2 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 faa4 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fab5 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b08      	cmp	r3, #8
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0208 	mvn.w	r2, #8
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2204      	movs	r2, #4
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa88 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fa7a 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fa8b 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0210 	mvn.w	r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2208      	movs	r2, #8
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa5e 	bl	80047ac <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa50 	bl	8004798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa61 	bl	80047c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b01      	cmp	r3, #1
 800431e:	d107      	bne.n	8004330 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0201 	mvn.w	r2, #1
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fc fe86 	bl	800103c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433a:	2b80      	cmp	r3, #128	; 0x80
 800433c:	d10e      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d107      	bne.n	800435c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fe9c 	bl	8005094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436a:	d10e      	bne.n	800438a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d107      	bne.n	800438a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fe8f 	bl	80050a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d10e      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d107      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa0f 	bl	80047d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d10e      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f06f 0220 	mvn.w	r2, #32
 80043da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fe4f 	bl	8005080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004402:	2302      	movs	r3, #2
 8004404:	e0fd      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b14      	cmp	r3, #20
 8004412:	f200 80f0 	bhi.w	80045f6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004471 	.word	0x08004471
 8004420:	080045f7 	.word	0x080045f7
 8004424:	080045f7 	.word	0x080045f7
 8004428:	080045f7 	.word	0x080045f7
 800442c:	080044b1 	.word	0x080044b1
 8004430:	080045f7 	.word	0x080045f7
 8004434:	080045f7 	.word	0x080045f7
 8004438:	080045f7 	.word	0x080045f7
 800443c:	080044f3 	.word	0x080044f3
 8004440:	080045f7 	.word	0x080045f7
 8004444:	080045f7 	.word	0x080045f7
 8004448:	080045f7 	.word	0x080045f7
 800444c:	08004533 	.word	0x08004533
 8004450:	080045f7 	.word	0x080045f7
 8004454:	080045f7 	.word	0x080045f7
 8004458:	080045f7 	.word	0x080045f7
 800445c:	08004575 	.word	0x08004575
 8004460:	080045f7 	.word	0x080045f7
 8004464:	080045f7 	.word	0x080045f7
 8004468:	080045f7 	.word	0x080045f7
 800446c:	080045b5 	.word	0x080045b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fa56 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0208 	orr.w	r2, r2, #8
 800448a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0204 	bic.w	r2, r2, #4
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6999      	ldr	r1, [r3, #24]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
      break;
 80044ae:	e0a3      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 faa8 	bl	8004a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	021a      	lsls	r2, r3, #8
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	619a      	str	r2, [r3, #24]
      break;
 80044f0:	e082      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 faff 	bl	8004afc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0208 	orr.w	r2, r2, #8
 800450c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0204 	bic.w	r2, r2, #4
 800451c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69d9      	ldr	r1, [r3, #28]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	61da      	str	r2, [r3, #28]
      break;
 8004530:	e062      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb55 	bl	8004be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	021a      	lsls	r2, r3, #8
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	61da      	str	r2, [r3, #28]
      break;
 8004572:	e041      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68b9      	ldr	r1, [r7, #8]
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fb8c 	bl	8004c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0208 	orr.w	r2, r2, #8
 800458e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045b2:	e021      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fbbe 	bl	8004d3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	021a      	lsls	r2, r3, #8
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045f4:	e000      	b.n	80045f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80045f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_ConfigClockSource+0x18>
 8004620:	2302      	movs	r3, #2
 8004622:	e0b3      	b.n	800478c <HAL_TIM_ConfigClockSource+0x180>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4b55      	ldr	r3, [pc, #340]	; (8004794 <HAL_TIM_ConfigClockSource+0x188>)
 8004640:	4013      	ands	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465c:	d03e      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0xd0>
 800465e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004662:	f200 8087 	bhi.w	8004774 <HAL_TIM_ConfigClockSource+0x168>
 8004666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466a:	f000 8085 	beq.w	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004672:	d87f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 8004674:	2b70      	cmp	r3, #112	; 0x70
 8004676:	d01a      	beq.n	80046ae <HAL_TIM_ConfigClockSource+0xa2>
 8004678:	2b70      	cmp	r3, #112	; 0x70
 800467a:	d87b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d050      	beq.n	8004722 <HAL_TIM_ConfigClockSource+0x116>
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d877      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 8004684:	2b50      	cmp	r3, #80	; 0x50
 8004686:	d03c      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0xf6>
 8004688:	2b50      	cmp	r3, #80	; 0x50
 800468a:	d873      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d058      	beq.n	8004742 <HAL_TIM_ConfigClockSource+0x136>
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d86f      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d064      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x156>
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d86b      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d060      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x156>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d867      	bhi.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d05c      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x156>
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d05a      	beq.n	8004762 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046ac:	e062      	b.n	8004774 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6899      	ldr	r1, [r3, #8]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f000 fc0b 	bl	8004ed8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	609a      	str	r2, [r3, #8]
      break;
 80046da:	e04e      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f000 fbf4 	bl	8004ed8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fe:	609a      	str	r2, [r3, #8]
      break;
 8004700:	e03b      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6859      	ldr	r1, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	461a      	mov	r2, r3
 8004710:	f000 fb68 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2150      	movs	r1, #80	; 0x50
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fbc1 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004720:	e02b      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	461a      	mov	r2, r3
 8004730:	f000 fb87 	bl	8004e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2160      	movs	r1, #96	; 0x60
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fbb1 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004740:	e01b      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	f000 fb48 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2140      	movs	r1, #64	; 0x40
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fba1 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 8004760:	e00b      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f000 fb98 	bl	8004ea2 <TIM_ITRx_SetConfig>
        break;
 8004772:	e002      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004778:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	fffeff88 	.word	0xfffeff88

08004798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a40      	ldr	r2, [pc, #256]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d013      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004806:	d00f      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a3d      	ldr	r2, [pc, #244]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a3c      	ldr	r2, [pc, #240]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a3b      	ldr	r2, [pc, #236]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a3a      	ldr	r2, [pc, #232]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d108      	bne.n	800483a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <TIM_Base_SetConfig+0x114>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d027      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <TIM_Base_SetConfig+0x118>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d023      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2b      	ldr	r2, [pc, #172]	; (8004904 <TIM_Base_SetConfig+0x11c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <TIM_Base_SetConfig+0x120>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0x124>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a28      	ldr	r2, [pc, #160]	; (8004910 <TIM_Base_SetConfig+0x128>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a27      	ldr	r2, [pc, #156]	; (8004914 <TIM_Base_SetConfig+0x12c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <TIM_Base_SetConfig+0x130>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0x134>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a24      	ldr	r2, [pc, #144]	; (8004920 <TIM_Base_SetConfig+0x138>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a23      	ldr	r2, [pc, #140]	; (8004924 <TIM_Base_SetConfig+0x13c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <TIM_Base_SetConfig+0x114>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0xf8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	615a      	str	r2, [r3, #20]
}
 80048ee:	bf00      	nop
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	40001800 	.word	0x40001800
 8004920:	40001c00 	.word	0x40001c00
 8004924:	40002000 	.word	0x40002000

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <TIM_OC1_SetConfig+0xd8>)
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f023 0302 	bic.w	r3, r3, #2
 8004970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC1_SetConfig+0x64>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a20      	ldr	r2, [pc, #128]	; (8004a08 <TIM_OC1_SetConfig+0xe0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10c      	bne.n	80049a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a16      	ldr	r2, [pc, #88]	; (8004a04 <TIM_OC1_SetConfig+0xdc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_OC1_SetConfig+0x8e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <TIM_OC1_SetConfig+0xe0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	fffeff8f 	.word	0xfffeff8f
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400

08004a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f023 0210 	bic.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <TIM_OC2_SetConfig+0xe4>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0320 	bic.w	r3, r3, #32
 8004a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a23      	ldr	r2, [pc, #140]	; (8004af4 <TIM_OC2_SetConfig+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC2_SetConfig+0x68>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <TIM_OC2_SetConfig+0xec>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10d      	bne.n	8004a90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <TIM_OC2_SetConfig+0xe8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d003      	beq.n	8004aa0 <TIM_OC2_SetConfig+0x94>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <TIM_OC2_SetConfig+0xec>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d113      	bne.n	8004ac8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	621a      	str	r2, [r3, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	feff8fff 	.word	0xfeff8fff
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010400 	.word	0x40010400

08004afc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <TIM_OC3_SetConfig+0xe0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_OC3_SetConfig+0x66>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a21      	ldr	r2, [pc, #132]	; (8004be4 <TIM_OC3_SetConfig+0xe8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10d      	bne.n	8004b7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a17      	ldr	r2, [pc, #92]	; (8004be0 <TIM_OC3_SetConfig+0xe4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d003      	beq.n	8004b8e <TIM_OC3_SetConfig+0x92>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC3_SetConfig+0xe8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d113      	bne.n	8004bb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	621a      	str	r2, [r3, #32]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	fffeff8f 	.word	0xfffeff8f
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40010400 	.word	0x40010400

08004be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <TIM_OC4_SetConfig+0xa4>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <TIM_OC4_SetConfig+0xa8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d003      	beq.n	8004c50 <TIM_OC4_SetConfig+0x68>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	; (8004c94 <TIM_OC4_SetConfig+0xac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d109      	bne.n	8004c64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	019b      	lsls	r3, r3, #6
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	feff8fff 	.word	0xfeff8fff
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <TIM_OC5_SetConfig+0x98>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <TIM_OC5_SetConfig+0x9c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_OC5_SetConfig+0x5e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a11      	ldr	r2, [pc, #68]	; (8004d38 <TIM_OC5_SetConfig+0xa0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d109      	bne.n	8004d0a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	621a      	str	r2, [r3, #32]
}
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	fffeff8f 	.word	0xfffeff8f
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <TIM_OC6_SetConfig+0x9c>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	051b      	lsls	r3, r3, #20
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a13      	ldr	r2, [pc, #76]	; (8004ddc <TIM_OC6_SetConfig+0xa0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC6_SetConfig+0x60>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a12      	ldr	r2, [pc, #72]	; (8004de0 <TIM_OC6_SetConfig+0xa4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	029b      	lsls	r3, r3, #10
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	feff8fff 	.word	0xfeff8fff
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40010400 	.word	0x40010400

08004de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 030a 	bic.w	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0210 	bic.w	r2, r3, #16
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e06d      	b.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d108      	bne.n	8004fc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d022      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d01d      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d018      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00e      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d009      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a16      	ldr	r2, [pc, #88]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d004      	beq.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a15      	ldr	r2, [pc, #84]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10c      	bne.n	8005046 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005032:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40014000 	.word	0x40014000
 800507c:	40001800 	.word	0x40001800

08005080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e040      	b.n	8005150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb ffe6 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa56 	bl	80055ac <UART_SetConfig>
 8005100:	4603      	mov	r3, r0
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e022      	b.n	8005150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fcac 	bl	8005a70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fd33 	bl	8005bb4 <UART_CheckIdleState>
 800514e:	4603      	mov	r3, r0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	f640 030f 	movw	r3, #2063	; 0x80f
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d113      	bne.n	80051b0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00e      	beq.n	80051b0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 81cc 	beq.w	800553e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
      }
      return;
 80051ae:	e1c6      	b.n	800553e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80e3 	beq.w	800537e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4ba5      	ldr	r3, [pc, #660]	; (800545c <HAL_UART_IRQHandler+0x304>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80d8 	beq.w	800537e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_UART_IRQHandler+0xa2>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_UART_IRQHandler+0xce>
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2202      	movs	r2, #2
 8005214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d010      	beq.n	8005252 <HAL_UART_IRQHandler+0xfa>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2204      	movs	r2, #4
 8005240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005248:	f043 0202 	orr.w	r2, r3, #2
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2208      	movs	r2, #8
 8005276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527e:	f043 0208 	orr.w	r2, r3, #8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528e:	2b00      	cmp	r3, #0
 8005290:	d011      	beq.n	80052b6 <HAL_UART_IRQHandler+0x15e>
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8140 	beq.w	8005542 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00c      	beq.n	80052e6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d004      	beq.n	8005306 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d031      	beq.n	800536a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd19 	bl	8005d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b40      	cmp	r3, #64	; 0x40
 8005318:	d123      	bne.n	8005362 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005328:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	2b00      	cmp	r3, #0
 8005330:	d013      	beq.n	800535a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_UART_IRQHandler+0x308>)
 8005338:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc ff90 	bl	8002264 <HAL_DMA_Abort_IT>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d017      	beq.n	800537a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005358:	e00f      	b.n	800537a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f906 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e00b      	b.n	800537a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f902 	bl	800556c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005368:	e007      	b.n	800537a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8fe 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005378:	e0e3      	b.n	8005542 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537a:	bf00      	nop
    return;
 800537c:	e0e1      	b.n	8005542 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 80a7 	bne.w	80054d6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 0310 	and.w	r3, r3, #16
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80a1 	beq.w	80054d6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 809b 	beq.w	80054d6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d156      	bne.n	8005464 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80bf 	beq.w	8005546 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053ce:	893a      	ldrh	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	f080 80b8 	bcs.w	8005546 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	893a      	ldrh	r2, [r7, #8]
 80053da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e8:	d02a      	beq.n	8005440 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0210 	bic.w	r2, r2, #16
 8005434:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	4618      	mov	r0, r3
 800543c:	f7fc fea2 	bl	8002184 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800544c:	b29b      	uxth	r3, r3
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	b29b      	uxth	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f893 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800545a:	e074      	b.n	8005546 <HAL_UART_IRQHandler+0x3ee>
 800545c:	04000120 	.word	0x04000120
 8005460:	08005d9d 	.word	0x08005d9d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005470:	b29b      	uxth	r3, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d063      	beq.n	800554a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d060      	beq.n	800554a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005496:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0210 	bic.w	r2, r2, #16
 80054c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f856 	bl	8005580 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054d4:	e039      	b.n	800554a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <HAL_UART_IRQHandler+0x3a4>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f84f 	bl	8005598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054fa:	e029      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005514:	2b00      	cmp	r3, #0
 8005516:	d01a      	beq.n	800554e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
    }
    return;
 8005520:	e015      	b.n	800554e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d011      	beq.n	8005550 <HAL_UART_IRQHandler+0x3f8>
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fc46 	bl	8005dc8 <UART_EndTransmit_IT>
    return;
 800553c:	e008      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
      return;
 800553e:	bf00      	nop
 8005540:	e006      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005542:	bf00      	nop
 8005544:	e004      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
      return;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_UART_IRQHandler+0x3f8>
    return;
 800554e:	bf00      	nop
  }

}
 8005550:	3720      	adds	r7, #32
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop

08005558 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4ba7      	ldr	r3, [pc, #668]	; (8005874 <UART_SetConfig+0x2c8>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a95      	ldr	r2, [pc, #596]	; (8005878 <UART_SetConfig+0x2cc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d120      	bne.n	800566a <UART_SetConfig+0xbe>
 8005628:	4b94      	ldr	r3, [pc, #592]	; (800587c <UART_SetConfig+0x2d0>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d816      	bhi.n	8005664 <UART_SetConfig+0xb8>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0x90>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005659 	.word	0x08005659
 8005644:	08005653 	.word	0x08005653
 8005648:	0800565f 	.word	0x0800565f
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e14f      	b.n	80058f2 <UART_SetConfig+0x346>
 8005652:	2302      	movs	r3, #2
 8005654:	77fb      	strb	r3, [r7, #31]
 8005656:	e14c      	b.n	80058f2 <UART_SetConfig+0x346>
 8005658:	2304      	movs	r3, #4
 800565a:	77fb      	strb	r3, [r7, #31]
 800565c:	e149      	b.n	80058f2 <UART_SetConfig+0x346>
 800565e:	2308      	movs	r3, #8
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e146      	b.n	80058f2 <UART_SetConfig+0x346>
 8005664:	2310      	movs	r3, #16
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e143      	b.n	80058f2 <UART_SetConfig+0x346>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a84      	ldr	r2, [pc, #528]	; (8005880 <UART_SetConfig+0x2d4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d132      	bne.n	80056da <UART_SetConfig+0x12e>
 8005674:	4b81      	ldr	r3, [pc, #516]	; (800587c <UART_SetConfig+0x2d0>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d828      	bhi.n	80056d4 <UART_SetConfig+0x128>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0xdc>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056d5 	.word	0x080056d5
 8005690:	080056d5 	.word	0x080056d5
 8005694:	080056d5 	.word	0x080056d5
 8005698:	080056c9 	.word	0x080056c9
 800569c:	080056d5 	.word	0x080056d5
 80056a0:	080056d5 	.word	0x080056d5
 80056a4:	080056d5 	.word	0x080056d5
 80056a8:	080056c3 	.word	0x080056c3
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056d5 	.word	0x080056d5
 80056b8:	080056cf 	.word	0x080056cf
 80056bc:	2300      	movs	r3, #0
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e117      	b.n	80058f2 <UART_SetConfig+0x346>
 80056c2:	2302      	movs	r3, #2
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e114      	b.n	80058f2 <UART_SetConfig+0x346>
 80056c8:	2304      	movs	r3, #4
 80056ca:	77fb      	strb	r3, [r7, #31]
 80056cc:	e111      	b.n	80058f2 <UART_SetConfig+0x346>
 80056ce:	2308      	movs	r3, #8
 80056d0:	77fb      	strb	r3, [r7, #31]
 80056d2:	e10e      	b.n	80058f2 <UART_SetConfig+0x346>
 80056d4:	2310      	movs	r3, #16
 80056d6:	77fb      	strb	r3, [r7, #31]
 80056d8:	e10b      	b.n	80058f2 <UART_SetConfig+0x346>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a69      	ldr	r2, [pc, #420]	; (8005884 <UART_SetConfig+0x2d8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d120      	bne.n	8005726 <UART_SetConfig+0x17a>
 80056e4:	4b65      	ldr	r3, [pc, #404]	; (800587c <UART_SetConfig+0x2d0>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056ee:	2b30      	cmp	r3, #48	; 0x30
 80056f0:	d013      	beq.n	800571a <UART_SetConfig+0x16e>
 80056f2:	2b30      	cmp	r3, #48	; 0x30
 80056f4:	d814      	bhi.n	8005720 <UART_SetConfig+0x174>
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d009      	beq.n	800570e <UART_SetConfig+0x162>
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d810      	bhi.n	8005720 <UART_SetConfig+0x174>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <UART_SetConfig+0x15c>
 8005702:	2b10      	cmp	r3, #16
 8005704:	d006      	beq.n	8005714 <UART_SetConfig+0x168>
 8005706:	e00b      	b.n	8005720 <UART_SetConfig+0x174>
 8005708:	2300      	movs	r3, #0
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0f1      	b.n	80058f2 <UART_SetConfig+0x346>
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e0ee      	b.n	80058f2 <UART_SetConfig+0x346>
 8005714:	2304      	movs	r3, #4
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e0eb      	b.n	80058f2 <UART_SetConfig+0x346>
 800571a:	2308      	movs	r3, #8
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e0e8      	b.n	80058f2 <UART_SetConfig+0x346>
 8005720:	2310      	movs	r3, #16
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e0e5      	b.n	80058f2 <UART_SetConfig+0x346>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a57      	ldr	r2, [pc, #348]	; (8005888 <UART_SetConfig+0x2dc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d120      	bne.n	8005772 <UART_SetConfig+0x1c6>
 8005730:	4b52      	ldr	r3, [pc, #328]	; (800587c <UART_SetConfig+0x2d0>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800573a:	2bc0      	cmp	r3, #192	; 0xc0
 800573c:	d013      	beq.n	8005766 <UART_SetConfig+0x1ba>
 800573e:	2bc0      	cmp	r3, #192	; 0xc0
 8005740:	d814      	bhi.n	800576c <UART_SetConfig+0x1c0>
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d009      	beq.n	800575a <UART_SetConfig+0x1ae>
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d810      	bhi.n	800576c <UART_SetConfig+0x1c0>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <UART_SetConfig+0x1a8>
 800574e:	2b40      	cmp	r3, #64	; 0x40
 8005750:	d006      	beq.n	8005760 <UART_SetConfig+0x1b4>
 8005752:	e00b      	b.n	800576c <UART_SetConfig+0x1c0>
 8005754:	2300      	movs	r3, #0
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e0cb      	b.n	80058f2 <UART_SetConfig+0x346>
 800575a:	2302      	movs	r3, #2
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e0c8      	b.n	80058f2 <UART_SetConfig+0x346>
 8005760:	2304      	movs	r3, #4
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e0c5      	b.n	80058f2 <UART_SetConfig+0x346>
 8005766:	2308      	movs	r3, #8
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e0c2      	b.n	80058f2 <UART_SetConfig+0x346>
 800576c:	2310      	movs	r3, #16
 800576e:	77fb      	strb	r3, [r7, #31]
 8005770:	e0bf      	b.n	80058f2 <UART_SetConfig+0x346>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a45      	ldr	r2, [pc, #276]	; (800588c <UART_SetConfig+0x2e0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d125      	bne.n	80057c8 <UART_SetConfig+0x21c>
 800577c:	4b3f      	ldr	r3, [pc, #252]	; (800587c <UART_SetConfig+0x2d0>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800578a:	d017      	beq.n	80057bc <UART_SetConfig+0x210>
 800578c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005790:	d817      	bhi.n	80057c2 <UART_SetConfig+0x216>
 8005792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005796:	d00b      	beq.n	80057b0 <UART_SetConfig+0x204>
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d811      	bhi.n	80057c2 <UART_SetConfig+0x216>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <UART_SetConfig+0x1fe>
 80057a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a6:	d006      	beq.n	80057b6 <UART_SetConfig+0x20a>
 80057a8:	e00b      	b.n	80057c2 <UART_SetConfig+0x216>
 80057aa:	2300      	movs	r3, #0
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e0a0      	b.n	80058f2 <UART_SetConfig+0x346>
 80057b0:	2302      	movs	r3, #2
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e09d      	b.n	80058f2 <UART_SetConfig+0x346>
 80057b6:	2304      	movs	r3, #4
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e09a      	b.n	80058f2 <UART_SetConfig+0x346>
 80057bc:	2308      	movs	r3, #8
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e097      	b.n	80058f2 <UART_SetConfig+0x346>
 80057c2:	2310      	movs	r3, #16
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e094      	b.n	80058f2 <UART_SetConfig+0x346>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a30      	ldr	r2, [pc, #192]	; (8005890 <UART_SetConfig+0x2e4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d125      	bne.n	800581e <UART_SetConfig+0x272>
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <UART_SetConfig+0x2d0>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e0:	d017      	beq.n	8005812 <UART_SetConfig+0x266>
 80057e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057e6:	d817      	bhi.n	8005818 <UART_SetConfig+0x26c>
 80057e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ec:	d00b      	beq.n	8005806 <UART_SetConfig+0x25a>
 80057ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f2:	d811      	bhi.n	8005818 <UART_SetConfig+0x26c>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <UART_SetConfig+0x254>
 80057f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fc:	d006      	beq.n	800580c <UART_SetConfig+0x260>
 80057fe:	e00b      	b.n	8005818 <UART_SetConfig+0x26c>
 8005800:	2301      	movs	r3, #1
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e075      	b.n	80058f2 <UART_SetConfig+0x346>
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e072      	b.n	80058f2 <UART_SetConfig+0x346>
 800580c:	2304      	movs	r3, #4
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e06f      	b.n	80058f2 <UART_SetConfig+0x346>
 8005812:	2308      	movs	r3, #8
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e06c      	b.n	80058f2 <UART_SetConfig+0x346>
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e069      	b.n	80058f2 <UART_SetConfig+0x346>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <UART_SetConfig+0x2e8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d137      	bne.n	8005898 <UART_SetConfig+0x2ec>
 8005828:	4b14      	ldr	r3, [pc, #80]	; (800587c <UART_SetConfig+0x2d0>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005832:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005836:	d017      	beq.n	8005868 <UART_SetConfig+0x2bc>
 8005838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800583c:	d817      	bhi.n	800586e <UART_SetConfig+0x2c2>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	d00b      	beq.n	800585c <UART_SetConfig+0x2b0>
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d811      	bhi.n	800586e <UART_SetConfig+0x2c2>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <UART_SetConfig+0x2aa>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d006      	beq.n	8005862 <UART_SetConfig+0x2b6>
 8005854:	e00b      	b.n	800586e <UART_SetConfig+0x2c2>
 8005856:	2300      	movs	r3, #0
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e04a      	b.n	80058f2 <UART_SetConfig+0x346>
 800585c:	2302      	movs	r3, #2
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e047      	b.n	80058f2 <UART_SetConfig+0x346>
 8005862:	2304      	movs	r3, #4
 8005864:	77fb      	strb	r3, [r7, #31]
 8005866:	e044      	b.n	80058f2 <UART_SetConfig+0x346>
 8005868:	2308      	movs	r3, #8
 800586a:	77fb      	strb	r3, [r7, #31]
 800586c:	e041      	b.n	80058f2 <UART_SetConfig+0x346>
 800586e:	2310      	movs	r3, #16
 8005870:	77fb      	strb	r3, [r7, #31]
 8005872:	e03e      	b.n	80058f2 <UART_SetConfig+0x346>
 8005874:	efff69f3 	.word	0xefff69f3
 8005878:	40011000 	.word	0x40011000
 800587c:	40023800 	.word	0x40023800
 8005880:	40004400 	.word	0x40004400
 8005884:	40004800 	.word	0x40004800
 8005888:	40004c00 	.word	0x40004c00
 800588c:	40005000 	.word	0x40005000
 8005890:	40011400 	.word	0x40011400
 8005894:	40007800 	.word	0x40007800
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a71      	ldr	r2, [pc, #452]	; (8005a64 <UART_SetConfig+0x4b8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d125      	bne.n	80058ee <UART_SetConfig+0x342>
 80058a2:	4b71      	ldr	r3, [pc, #452]	; (8005a68 <UART_SetConfig+0x4bc>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80058ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058b0:	d017      	beq.n	80058e2 <UART_SetConfig+0x336>
 80058b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058b6:	d817      	bhi.n	80058e8 <UART_SetConfig+0x33c>
 80058b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058bc:	d00b      	beq.n	80058d6 <UART_SetConfig+0x32a>
 80058be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c2:	d811      	bhi.n	80058e8 <UART_SetConfig+0x33c>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <UART_SetConfig+0x324>
 80058c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058cc:	d006      	beq.n	80058dc <UART_SetConfig+0x330>
 80058ce:	e00b      	b.n	80058e8 <UART_SetConfig+0x33c>
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0x346>
 80058d6:	2302      	movs	r3, #2
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e00a      	b.n	80058f2 <UART_SetConfig+0x346>
 80058dc:	2304      	movs	r3, #4
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e007      	b.n	80058f2 <UART_SetConfig+0x346>
 80058e2:	2308      	movs	r3, #8
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e004      	b.n	80058f2 <UART_SetConfig+0x346>
 80058e8:	2310      	movs	r3, #16
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e001      	b.n	80058f2 <UART_SetConfig+0x346>
 80058ee:	2310      	movs	r3, #16
 80058f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fa:	d15b      	bne.n	80059b4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80058fc:	7ffb      	ldrb	r3, [r7, #31]
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d827      	bhi.n	8005952 <UART_SetConfig+0x3a6>
 8005902:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0x35c>)
 8005904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	08005953 	.word	0x08005953
 8005918:	08005943 	.word	0x08005943
 800591c:	08005953 	.word	0x08005953
 8005920:	08005953 	.word	0x08005953
 8005924:	08005953 	.word	0x08005953
 8005928:	0800594b 	.word	0x0800594b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592c:	f7fd fdc2 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8005930:	61b8      	str	r0, [r7, #24]
        break;
 8005932:	e013      	b.n	800595c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005934:	f7fd fdd2 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 8005938:	61b8      	str	r0, [r7, #24]
        break;
 800593a:	e00f      	b.n	800595c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800593c:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <UART_SetConfig+0x4c0>)
 800593e:	61bb      	str	r3, [r7, #24]
        break;
 8005940:	e00c      	b.n	800595c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005942:	f7fd fccb 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 8005946:	61b8      	str	r0, [r7, #24]
        break;
 8005948:	e008      	b.n	800595c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800594e:	61bb      	str	r3, [r7, #24]
        break;
 8005950:	e004      	b.n	800595c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	77bb      	strb	r3, [r7, #30]
        break;
 800595a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d074      	beq.n	8005a4c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	005a      	lsls	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	441a      	add	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	b29b      	uxth	r3, r3
 8005978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d916      	bls.n	80059ae <UART_SetConfig+0x402>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d212      	bcs.n	80059ae <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f023 030f 	bic.w	r3, r3, #15
 8005990:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	b29b      	uxth	r3, r3
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	b29a      	uxth	r2, r3
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	89fa      	ldrh	r2, [r7, #14]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e04e      	b.n	8005a4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	77bb      	strb	r3, [r7, #30]
 80059b2:	e04b      	b.n	8005a4c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b4:	7ffb      	ldrb	r3, [r7, #31]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d827      	bhi.n	8005a0a <UART_SetConfig+0x45e>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0x414>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059e5 	.word	0x080059e5
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f5 	.word	0x080059f5
 80059cc:	08005a0b 	.word	0x08005a0b
 80059d0:	080059fb 	.word	0x080059fb
 80059d4:	08005a0b 	.word	0x08005a0b
 80059d8:	08005a0b 	.word	0x08005a0b
 80059dc:	08005a0b 	.word	0x08005a0b
 80059e0:	08005a03 	.word	0x08005a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7fd fd66 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 80059e8:	61b8      	str	r0, [r7, #24]
        break;
 80059ea:	e013      	b.n	8005a14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ec:	f7fd fd76 	bl	80034dc <HAL_RCC_GetPCLK2Freq>
 80059f0:	61b8      	str	r0, [r7, #24]
        break;
 80059f2:	e00f      	b.n	8005a14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <UART_SetConfig+0x4c0>)
 80059f6:	61bb      	str	r3, [r7, #24]
        break;
 80059f8:	e00c      	b.n	8005a14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fa:	f7fd fc6f 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 80059fe:	61b8      	str	r0, [r7, #24]
        break;
 8005a00:	e008      	b.n	8005a14 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a06:	61bb      	str	r3, [r7, #24]
        break;
 8005a08:	e004      	b.n	8005a14 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	77bb      	strb	r3, [r7, #30]
        break;
 8005a12:	bf00      	nop
    }

    if (pclk != 0U)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085a      	lsrs	r2, r3, #1
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	d908      	bls.n	8005a48 <UART_SetConfig+0x49c>
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3c:	d204      	bcs.n	8005a48 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	e001      	b.n	8005a4c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a58:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	40007c00 	.word	0x40007c00
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	f003 0308 	and.w	r3, r3, #8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01a      	beq.n	8005b86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b6e:	d10a      	bne.n	8005b86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bc4:	f7fb fb3a 	bl	800123c <HAL_GetTick>
 8005bc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d10e      	bne.n	8005bf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f82d 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e023      	b.n	8005c3e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d10e      	bne.n	8005c22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f817 	bl	8005c46 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00d      	b.n	8005c3e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c56:	e05e      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d05a      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c60:	f7fb faec 	bl	800123c <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d11b      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c84:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e043      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02c      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cca:	d124      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0201 	bic.w	r2, r2, #1
 8005cf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d091      	beq.n	8005c58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d54:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0210 	bic.w	r2, r2, #16
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff fbd6 	bl	800556c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff fbb3 	bl	8005558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	; (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000034 	.word	0x20000034

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	4d0d      	ldr	r5, [pc, #52]	; (8005e40 <__libc_init_array+0x38>)
 8005e0c:	4c0d      	ldr	r4, [pc, #52]	; (8005e44 <__libc_init_array+0x3c>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	2600      	movs	r6, #0
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	4d0b      	ldr	r5, [pc, #44]	; (8005e48 <__libc_init_array+0x40>)
 8005e1a:	4c0c      	ldr	r4, [pc, #48]	; (8005e4c <__libc_init_array+0x44>)
 8005e1c:	f002 fc60 	bl	80086e0 <_init>
 8005e20:	1b64      	subs	r4, r4, r5
 8005e22:	10a4      	asrs	r4, r4, #2
 8005e24:	2600      	movs	r6, #0
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	08008b04 	.word	0x08008b04
 8005e44:	08008b04 	.word	0x08008b04
 8005e48:	08008b04 	.word	0x08008b04
 8005e4c:	08008b08 	.word	0x08008b08

08005e50 <memset>:
 8005e50:	4402      	add	r2, r0
 8005e52:	4603      	mov	r3, r0
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__cvt>:
 8005e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e62:	ed2d 8b02 	vpush	{d8}
 8005e66:	eeb0 8b40 	vmov.f64	d8, d0
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	4617      	mov	r7, r2
 8005e6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005e70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e72:	ee18 2a90 	vmov	r2, s17
 8005e76:	f025 0520 	bic.w	r5, r5, #32
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	bfb6      	itet	lt
 8005e7e:	222d      	movlt	r2, #45	; 0x2d
 8005e80:	2200      	movge	r2, #0
 8005e82:	eeb1 8b40 	vneglt.f64	d8, d0
 8005e86:	2d46      	cmp	r5, #70	; 0x46
 8005e88:	460c      	mov	r4, r1
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	d004      	beq.n	8005e98 <__cvt+0x38>
 8005e8e:	2d45      	cmp	r5, #69	; 0x45
 8005e90:	d100      	bne.n	8005e94 <__cvt+0x34>
 8005e92:	3401      	adds	r4, #1
 8005e94:	2102      	movs	r1, #2
 8005e96:	e000      	b.n	8005e9a <__cvt+0x3a>
 8005e98:	2103      	movs	r1, #3
 8005e9a:	ab03      	add	r3, sp, #12
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	ab02      	add	r3, sp, #8
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	eeb0 0b48 	vmov.f64	d0, d8
 8005eaa:	f000 fca9 	bl	8006800 <_dtoa_r>
 8005eae:	2d47      	cmp	r5, #71	; 0x47
 8005eb0:	d109      	bne.n	8005ec6 <__cvt+0x66>
 8005eb2:	07fb      	lsls	r3, r7, #31
 8005eb4:	d407      	bmi.n	8005ec6 <__cvt+0x66>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eba:	1a1b      	subs	r3, r3, r0
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	b005      	add	sp, #20
 8005ec0:	ecbd 8b02 	vpop	{d8}
 8005ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec6:	2d46      	cmp	r5, #70	; 0x46
 8005ec8:	eb00 0204 	add.w	r2, r0, r4
 8005ecc:	d10c      	bne.n	8005ee8 <__cvt+0x88>
 8005ece:	7803      	ldrb	r3, [r0, #0]
 8005ed0:	2b30      	cmp	r3, #48	; 0x30
 8005ed2:	d107      	bne.n	8005ee4 <__cvt+0x84>
 8005ed4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	bf1c      	itt	ne
 8005ede:	f1c4 0401 	rsbne	r4, r4, #1
 8005ee2:	6034      	strne	r4, [r6, #0]
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	441a      	add	r2, r3
 8005ee8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef0:	bf08      	it	eq
 8005ef2:	9203      	streq	r2, [sp, #12]
 8005ef4:	2130      	movs	r1, #48	; 0x30
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d2dc      	bcs.n	8005eb6 <__cvt+0x56>
 8005efc:	1c5c      	adds	r4, r3, #1
 8005efe:	9403      	str	r4, [sp, #12]
 8005f00:	7019      	strb	r1, [r3, #0]
 8005f02:	e7f8      	b.n	8005ef6 <__cvt+0x96>

08005f04 <__exponent>:
 8005f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f06:	4603      	mov	r3, r0
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	bfb8      	it	lt
 8005f0c:	4249      	neglt	r1, r1
 8005f0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005f12:	bfb4      	ite	lt
 8005f14:	222d      	movlt	r2, #45	; 0x2d
 8005f16:	222b      	movge	r2, #43	; 0x2b
 8005f18:	2909      	cmp	r1, #9
 8005f1a:	7042      	strb	r2, [r0, #1]
 8005f1c:	dd2a      	ble.n	8005f74 <__exponent+0x70>
 8005f1e:	f10d 0407 	add.w	r4, sp, #7
 8005f22:	46a4      	mov	ip, r4
 8005f24:	270a      	movs	r7, #10
 8005f26:	46a6      	mov	lr, r4
 8005f28:	460a      	mov	r2, r1
 8005f2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005f32:	3530      	adds	r5, #48	; 0x30
 8005f34:	2a63      	cmp	r2, #99	; 0x63
 8005f36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	dcf1      	bgt.n	8005f26 <__exponent+0x22>
 8005f42:	3130      	adds	r1, #48	; 0x30
 8005f44:	f1ae 0502 	sub.w	r5, lr, #2
 8005f48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f4c:	1c44      	adds	r4, r0, #1
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4561      	cmp	r1, ip
 8005f52:	d30a      	bcc.n	8005f6a <__exponent+0x66>
 8005f54:	f10d 0209 	add.w	r2, sp, #9
 8005f58:	eba2 020e 	sub.w	r2, r2, lr
 8005f5c:	4565      	cmp	r5, ip
 8005f5e:	bf88      	it	hi
 8005f60:	2200      	movhi	r2, #0
 8005f62:	4413      	add	r3, r2
 8005f64:	1a18      	subs	r0, r3, r0
 8005f66:	b003      	add	sp, #12
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f72:	e7ed      	b.n	8005f50 <__exponent+0x4c>
 8005f74:	2330      	movs	r3, #48	; 0x30
 8005f76:	3130      	adds	r1, #48	; 0x30
 8005f78:	7083      	strb	r3, [r0, #2]
 8005f7a:	70c1      	strb	r1, [r0, #3]
 8005f7c:	1d03      	adds	r3, r0, #4
 8005f7e:	e7f1      	b.n	8005f64 <__exponent+0x60>

08005f80 <_printf_float>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b08b      	sub	sp, #44	; 0x2c
 8005f86:	460c      	mov	r4, r1
 8005f88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	461f      	mov	r7, r3
 8005f90:	4605      	mov	r5, r0
 8005f92:	f001 f9b7 	bl	8007304 <_localeconv_r>
 8005f96:	f8d0 b000 	ldr.w	fp, [r0]
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f7fa f950 	bl	8000240 <strlen>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9308      	str	r3, [sp, #32]
 8005fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	3307      	adds	r3, #7
 8005fb0:	f023 0307 	bic.w	r3, r3, #7
 8005fb4:	f103 0108 	add.w	r1, r3, #8
 8005fb8:	f8c8 1000 	str.w	r1, [r8]
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005fc6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006228 <_printf_float+0x2a8>
 8005fca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005fce:	eeb0 6bc0 	vabs.f64	d6, d0
 8005fd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fda:	dd24      	ble.n	8006026 <_printf_float+0xa6>
 8005fdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe4:	d502      	bpl.n	8005fec <_printf_float+0x6c>
 8005fe6:	232d      	movs	r3, #45	; 0x2d
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fec:	4b90      	ldr	r3, [pc, #576]	; (8006230 <_printf_float+0x2b0>)
 8005fee:	4891      	ldr	r0, [pc, #580]	; (8006234 <_printf_float+0x2b4>)
 8005ff0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ff4:	bf94      	ite	ls
 8005ff6:	4698      	movls	r8, r3
 8005ff8:	4680      	movhi	r8, r0
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	6123      	str	r3, [r4, #16]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	2300      	movs	r3, #0
 8006004:	6022      	str	r2, [r4, #0]
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	9700      	str	r7, [sp, #0]
 800600a:	4633      	mov	r3, r6
 800600c:	aa09      	add	r2, sp, #36	; 0x24
 800600e:	4621      	mov	r1, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 f9d3 	bl	80063bc <_printf_common>
 8006016:	3001      	adds	r0, #1
 8006018:	f040 808a 	bne.w	8006130 <_printf_float+0x1b0>
 800601c:	f04f 30ff 	mov.w	r0, #4294967295
 8006020:	b00b      	add	sp, #44	; 0x2c
 8006022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006026:	eeb4 0b40 	vcmp.f64	d0, d0
 800602a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602e:	d709      	bvc.n	8006044 <_printf_float+0xc4>
 8006030:	ee10 3a90 	vmov	r3, s1
 8006034:	2b00      	cmp	r3, #0
 8006036:	bfbc      	itt	lt
 8006038:	232d      	movlt	r3, #45	; 0x2d
 800603a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800603e:	487e      	ldr	r0, [pc, #504]	; (8006238 <_printf_float+0x2b8>)
 8006040:	4b7e      	ldr	r3, [pc, #504]	; (800623c <_printf_float+0x2bc>)
 8006042:	e7d5      	b.n	8005ff0 <_printf_float+0x70>
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800604a:	9104      	str	r1, [sp, #16]
 800604c:	1c59      	adds	r1, r3, #1
 800604e:	d13c      	bne.n	80060ca <_printf_float+0x14a>
 8006050:	2306      	movs	r3, #6
 8006052:	6063      	str	r3, [r4, #4]
 8006054:	2300      	movs	r3, #0
 8006056:	9303      	str	r3, [sp, #12]
 8006058:	ab08      	add	r3, sp, #32
 800605a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800605e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006062:	ab07      	add	r3, sp, #28
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	6022      	str	r2, [r4, #0]
 800606a:	f10d 031b 	add.w	r3, sp, #27
 800606e:	4628      	mov	r0, r5
 8006070:	f7ff fef6 	bl	8005e60 <__cvt>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	9907      	ldr	r1, [sp, #28]
 8006078:	2b47      	cmp	r3, #71	; 0x47
 800607a:	4680      	mov	r8, r0
 800607c:	d108      	bne.n	8006090 <_printf_float+0x110>
 800607e:	1cc8      	adds	r0, r1, #3
 8006080:	db02      	blt.n	8006088 <_printf_float+0x108>
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	4299      	cmp	r1, r3
 8006086:	dd41      	ble.n	800610c <_printf_float+0x18c>
 8006088:	f1a9 0902 	sub.w	r9, r9, #2
 800608c:	fa5f f989 	uxtb.w	r9, r9
 8006090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006094:	d820      	bhi.n	80060d8 <_printf_float+0x158>
 8006096:	3901      	subs	r1, #1
 8006098:	464a      	mov	r2, r9
 800609a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800609e:	9107      	str	r1, [sp, #28]
 80060a0:	f7ff ff30 	bl	8005f04 <__exponent>
 80060a4:	9a08      	ldr	r2, [sp, #32]
 80060a6:	9004      	str	r0, [sp, #16]
 80060a8:	1813      	adds	r3, r2, r0
 80060aa:	2a01      	cmp	r2, #1
 80060ac:	6123      	str	r3, [r4, #16]
 80060ae:	dc02      	bgt.n	80060b6 <_printf_float+0x136>
 80060b0:	6822      	ldr	r2, [r4, #0]
 80060b2:	07d2      	lsls	r2, r2, #31
 80060b4:	d501      	bpl.n	80060ba <_printf_float+0x13a>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0a2      	beq.n	8006008 <_printf_float+0x88>
 80060c2:	232d      	movs	r3, #45	; 0x2d
 80060c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c8:	e79e      	b.n	8006008 <_printf_float+0x88>
 80060ca:	9904      	ldr	r1, [sp, #16]
 80060cc:	2947      	cmp	r1, #71	; 0x47
 80060ce:	d1c1      	bne.n	8006054 <_printf_float+0xd4>
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1bf      	bne.n	8006054 <_printf_float+0xd4>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e7bc      	b.n	8006052 <_printf_float+0xd2>
 80060d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060dc:	d118      	bne.n	8006110 <_printf_float+0x190>
 80060de:	2900      	cmp	r1, #0
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	dd0b      	ble.n	80060fc <_printf_float+0x17c>
 80060e4:	6121      	str	r1, [r4, #16]
 80060e6:	b913      	cbnz	r3, 80060ee <_printf_float+0x16e>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	07d0      	lsls	r0, r2, #31
 80060ec:	d502      	bpl.n	80060f4 <_printf_float+0x174>
 80060ee:	3301      	adds	r3, #1
 80060f0:	440b      	add	r3, r1
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	2300      	movs	r3, #0
 80060f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	e7de      	b.n	80060ba <_printf_float+0x13a>
 80060fc:	b913      	cbnz	r3, 8006104 <_printf_float+0x184>
 80060fe:	6822      	ldr	r2, [r4, #0]
 8006100:	07d2      	lsls	r2, r2, #31
 8006102:	d501      	bpl.n	8006108 <_printf_float+0x188>
 8006104:	3302      	adds	r3, #2
 8006106:	e7f4      	b.n	80060f2 <_printf_float+0x172>
 8006108:	2301      	movs	r3, #1
 800610a:	e7f2      	b.n	80060f2 <_printf_float+0x172>
 800610c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	4299      	cmp	r1, r3
 8006114:	db05      	blt.n	8006122 <_printf_float+0x1a2>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6121      	str	r1, [r4, #16]
 800611a:	07d8      	lsls	r0, r3, #31
 800611c:	d5ea      	bpl.n	80060f4 <_printf_float+0x174>
 800611e:	1c4b      	adds	r3, r1, #1
 8006120:	e7e7      	b.n	80060f2 <_printf_float+0x172>
 8006122:	2900      	cmp	r1, #0
 8006124:	bfd4      	ite	le
 8006126:	f1c1 0202 	rsble	r2, r1, #2
 800612a:	2201      	movgt	r2, #1
 800612c:	4413      	add	r3, r2
 800612e:	e7e0      	b.n	80060f2 <_printf_float+0x172>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	055a      	lsls	r2, r3, #21
 8006134:	d407      	bmi.n	8006146 <_printf_float+0x1c6>
 8006136:	6923      	ldr	r3, [r4, #16]
 8006138:	4642      	mov	r2, r8
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	d12a      	bne.n	800619a <_printf_float+0x21a>
 8006144:	e76a      	b.n	800601c <_printf_float+0x9c>
 8006146:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800614a:	f240 80e2 	bls.w	8006312 <_printf_float+0x392>
 800614e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006152:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615a:	d133      	bne.n	80061c4 <_printf_float+0x244>
 800615c:	4a38      	ldr	r2, [pc, #224]	; (8006240 <_printf_float+0x2c0>)
 800615e:	2301      	movs	r3, #1
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	f43f af58 	beq.w	800601c <_printf_float+0x9c>
 800616c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006170:	429a      	cmp	r2, r3
 8006172:	db02      	blt.n	800617a <_printf_float+0x1fa>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	07d8      	lsls	r0, r3, #31
 8006178:	d50f      	bpl.n	800619a <_printf_float+0x21a>
 800617a:	4653      	mov	r3, sl
 800617c:	465a      	mov	r2, fp
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f af49 	beq.w	800601c <_printf_float+0x9c>
 800618a:	f04f 0800 	mov.w	r8, #0
 800618e:	f104 091a 	add.w	r9, r4, #26
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	3b01      	subs	r3, #1
 8006196:	4543      	cmp	r3, r8
 8006198:	dc09      	bgt.n	80061ae <_printf_float+0x22e>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	079b      	lsls	r3, r3, #30
 800619e:	f100 8108 	bmi.w	80063b2 <_printf_float+0x432>
 80061a2:	68e0      	ldr	r0, [r4, #12]
 80061a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061a6:	4298      	cmp	r0, r3
 80061a8:	bfb8      	it	lt
 80061aa:	4618      	movlt	r0, r3
 80061ac:	e738      	b.n	8006020 <_printf_float+0xa0>
 80061ae:	2301      	movs	r3, #1
 80061b0:	464a      	mov	r2, r9
 80061b2:	4631      	mov	r1, r6
 80061b4:	4628      	mov	r0, r5
 80061b6:	47b8      	blx	r7
 80061b8:	3001      	adds	r0, #1
 80061ba:	f43f af2f 	beq.w	800601c <_printf_float+0x9c>
 80061be:	f108 0801 	add.w	r8, r8, #1
 80061c2:	e7e6      	b.n	8006192 <_printf_float+0x212>
 80061c4:	9b07      	ldr	r3, [sp, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	dc3c      	bgt.n	8006244 <_printf_float+0x2c4>
 80061ca:	4a1d      	ldr	r2, [pc, #116]	; (8006240 <_printf_float+0x2c0>)
 80061cc:	2301      	movs	r3, #1
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	f43f af21 	beq.w	800601c <_printf_float+0x9c>
 80061da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80061de:	4313      	orrs	r3, r2
 80061e0:	d102      	bne.n	80061e8 <_printf_float+0x268>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	07d9      	lsls	r1, r3, #31
 80061e6:	d5d8      	bpl.n	800619a <_printf_float+0x21a>
 80061e8:	4653      	mov	r3, sl
 80061ea:	465a      	mov	r2, fp
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af12 	beq.w	800601c <_printf_float+0x9c>
 80061f8:	f04f 0900 	mov.w	r9, #0
 80061fc:	f104 0a1a 	add.w	sl, r4, #26
 8006200:	9b07      	ldr	r3, [sp, #28]
 8006202:	425b      	negs	r3, r3
 8006204:	454b      	cmp	r3, r9
 8006206:	dc01      	bgt.n	800620c <_printf_float+0x28c>
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	e795      	b.n	8006138 <_printf_float+0x1b8>
 800620c:	2301      	movs	r3, #1
 800620e:	4652      	mov	r2, sl
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f af00 	beq.w	800601c <_printf_float+0x9c>
 800621c:	f109 0901 	add.w	r9, r9, #1
 8006220:	e7ee      	b.n	8006200 <_printf_float+0x280>
 8006222:	bf00      	nop
 8006224:	f3af 8000 	nop.w
 8006228:	ffffffff 	.word	0xffffffff
 800622c:	7fefffff 	.word	0x7fefffff
 8006230:	0800871c 	.word	0x0800871c
 8006234:	08008720 	.word	0x08008720
 8006238:	08008728 	.word	0x08008728
 800623c:	08008724 	.word	0x08008724
 8006240:	0800872c 	.word	0x0800872c
 8006244:	9a08      	ldr	r2, [sp, #32]
 8006246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006248:	429a      	cmp	r2, r3
 800624a:	bfa8      	it	ge
 800624c:	461a      	movge	r2, r3
 800624e:	2a00      	cmp	r2, #0
 8006250:	4691      	mov	r9, r2
 8006252:	dc38      	bgt.n	80062c6 <_printf_float+0x346>
 8006254:	2300      	movs	r3, #0
 8006256:	9305      	str	r3, [sp, #20]
 8006258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625c:	f104 021a 	add.w	r2, r4, #26
 8006260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006262:	9905      	ldr	r1, [sp, #20]
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	eba3 0309 	sub.w	r3, r3, r9
 800626a:	428b      	cmp	r3, r1
 800626c:	dc33      	bgt.n	80062d6 <_printf_float+0x356>
 800626e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006272:	429a      	cmp	r2, r3
 8006274:	db3c      	blt.n	80062f0 <_printf_float+0x370>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	07da      	lsls	r2, r3, #31
 800627a:	d439      	bmi.n	80062f0 <_printf_float+0x370>
 800627c:	9a08      	ldr	r2, [sp, #32]
 800627e:	9b04      	ldr	r3, [sp, #16]
 8006280:	9907      	ldr	r1, [sp, #28]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	eba2 0901 	sub.w	r9, r2, r1
 8006288:	4599      	cmp	r9, r3
 800628a:	bfa8      	it	ge
 800628c:	4699      	movge	r9, r3
 800628e:	f1b9 0f00 	cmp.w	r9, #0
 8006292:	dc35      	bgt.n	8006300 <_printf_float+0x380>
 8006294:	f04f 0800 	mov.w	r8, #0
 8006298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800629c:	f104 0a1a 	add.w	sl, r4, #26
 80062a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	eba3 0309 	sub.w	r3, r3, r9
 80062aa:	4543      	cmp	r3, r8
 80062ac:	f77f af75 	ble.w	800619a <_printf_float+0x21a>
 80062b0:	2301      	movs	r3, #1
 80062b2:	4652      	mov	r2, sl
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f aeae 	beq.w	800601c <_printf_float+0x9c>
 80062c0:	f108 0801 	add.w	r8, r8, #1
 80062c4:	e7ec      	b.n	80062a0 <_printf_float+0x320>
 80062c6:	4613      	mov	r3, r2
 80062c8:	4631      	mov	r1, r6
 80062ca:	4642      	mov	r2, r8
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	d1bf      	bne.n	8006254 <_printf_float+0x2d4>
 80062d4:	e6a2      	b.n	800601c <_printf_float+0x9c>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	9204      	str	r2, [sp, #16]
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f ae9b 	beq.w	800601c <_printf_float+0x9c>
 80062e6:	9b05      	ldr	r3, [sp, #20]
 80062e8:	9a04      	ldr	r2, [sp, #16]
 80062ea:	3301      	adds	r3, #1
 80062ec:	9305      	str	r3, [sp, #20]
 80062ee:	e7b7      	b.n	8006260 <_printf_float+0x2e0>
 80062f0:	4653      	mov	r3, sl
 80062f2:	465a      	mov	r2, fp
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1be      	bne.n	800627c <_printf_float+0x2fc>
 80062fe:	e68d      	b.n	800601c <_printf_float+0x9c>
 8006300:	9a04      	ldr	r2, [sp, #16]
 8006302:	464b      	mov	r3, r9
 8006304:	4442      	add	r2, r8
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	d1c1      	bne.n	8006294 <_printf_float+0x314>
 8006310:	e684      	b.n	800601c <_printf_float+0x9c>
 8006312:	9a08      	ldr	r2, [sp, #32]
 8006314:	2a01      	cmp	r2, #1
 8006316:	dc01      	bgt.n	800631c <_printf_float+0x39c>
 8006318:	07db      	lsls	r3, r3, #31
 800631a:	d537      	bpl.n	800638c <_printf_float+0x40c>
 800631c:	2301      	movs	r3, #1
 800631e:	4642      	mov	r2, r8
 8006320:	4631      	mov	r1, r6
 8006322:	4628      	mov	r0, r5
 8006324:	47b8      	blx	r7
 8006326:	3001      	adds	r0, #1
 8006328:	f43f ae78 	beq.w	800601c <_printf_float+0x9c>
 800632c:	4653      	mov	r3, sl
 800632e:	465a      	mov	r2, fp
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f ae70 	beq.w	800601c <_printf_float+0x9c>
 800633c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006340:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006348:	d01b      	beq.n	8006382 <_printf_float+0x402>
 800634a:	9b08      	ldr	r3, [sp, #32]
 800634c:	f108 0201 	add.w	r2, r8, #1
 8006350:	3b01      	subs	r3, #1
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	d10e      	bne.n	800637a <_printf_float+0x3fa>
 800635c:	e65e      	b.n	800601c <_printf_float+0x9c>
 800635e:	2301      	movs	r3, #1
 8006360:	464a      	mov	r2, r9
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae57 	beq.w	800601c <_printf_float+0x9c>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	9b08      	ldr	r3, [sp, #32]
 8006374:	3b01      	subs	r3, #1
 8006376:	4543      	cmp	r3, r8
 8006378:	dcf1      	bgt.n	800635e <_printf_float+0x3de>
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006380:	e6db      	b.n	800613a <_printf_float+0x1ba>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 091a 	add.w	r9, r4, #26
 800638a:	e7f2      	b.n	8006372 <_printf_float+0x3f2>
 800638c:	2301      	movs	r3, #1
 800638e:	4642      	mov	r2, r8
 8006390:	e7df      	b.n	8006352 <_printf_float+0x3d2>
 8006392:	2301      	movs	r3, #1
 8006394:	464a      	mov	r2, r9
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae3d 	beq.w	800601c <_printf_float+0x9c>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	4543      	cmp	r3, r8
 80063ae:	dcf0      	bgt.n	8006392 <_printf_float+0x412>
 80063b0:	e6f7      	b.n	80061a2 <_printf_float+0x222>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	f104 0919 	add.w	r9, r4, #25
 80063ba:	e7f4      	b.n	80063a6 <_printf_float+0x426>

080063bc <_printf_common>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4616      	mov	r6, r2
 80063c2:	4699      	mov	r9, r3
 80063c4:	688a      	ldr	r2, [r1, #8]
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063cc:	4293      	cmp	r3, r2
 80063ce:	bfb8      	it	lt
 80063d0:	4613      	movlt	r3, r2
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d8:	4607      	mov	r7, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	b10a      	cbz	r2, 80063e2 <_printf_common+0x26>
 80063de:	3301      	adds	r3, #1
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	0699      	lsls	r1, r3, #26
 80063e6:	bf42      	ittt	mi
 80063e8:	6833      	ldrmi	r3, [r6, #0]
 80063ea:	3302      	addmi	r3, #2
 80063ec:	6033      	strmi	r3, [r6, #0]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	f015 0506 	ands.w	r5, r5, #6
 80063f4:	d106      	bne.n	8006404 <_printf_common+0x48>
 80063f6:	f104 0a19 	add.w	sl, r4, #25
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	6832      	ldr	r2, [r6, #0]
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc26      	bgt.n	8006452 <_printf_common+0x96>
 8006404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006408:	1e13      	subs	r3, r2, #0
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	bf18      	it	ne
 800640e:	2301      	movne	r3, #1
 8006410:	0692      	lsls	r2, r2, #26
 8006412:	d42b      	bmi.n	800646c <_printf_common+0xb0>
 8006414:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006418:	4649      	mov	r1, r9
 800641a:	4638      	mov	r0, r7
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d01e      	beq.n	8006460 <_printf_common+0xa4>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	68e5      	ldr	r5, [r4, #12]
 8006426:	6832      	ldr	r2, [r6, #0]
 8006428:	f003 0306 	and.w	r3, r3, #6
 800642c:	2b04      	cmp	r3, #4
 800642e:	bf08      	it	eq
 8006430:	1aad      	subeq	r5, r5, r2
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	6922      	ldr	r2, [r4, #16]
 8006436:	bf0c      	ite	eq
 8006438:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800643c:	2500      	movne	r5, #0
 800643e:	4293      	cmp	r3, r2
 8006440:	bfc4      	itt	gt
 8006442:	1a9b      	subgt	r3, r3, r2
 8006444:	18ed      	addgt	r5, r5, r3
 8006446:	2600      	movs	r6, #0
 8006448:	341a      	adds	r4, #26
 800644a:	42b5      	cmp	r5, r6
 800644c:	d11a      	bne.n	8006484 <_printf_common+0xc8>
 800644e:	2000      	movs	r0, #0
 8006450:	e008      	b.n	8006464 <_printf_common+0xa8>
 8006452:	2301      	movs	r3, #1
 8006454:	4652      	mov	r2, sl
 8006456:	4649      	mov	r1, r9
 8006458:	4638      	mov	r0, r7
 800645a:	47c0      	blx	r8
 800645c:	3001      	adds	r0, #1
 800645e:	d103      	bne.n	8006468 <_printf_common+0xac>
 8006460:	f04f 30ff 	mov.w	r0, #4294967295
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	3501      	adds	r5, #1
 800646a:	e7c6      	b.n	80063fa <_printf_common+0x3e>
 800646c:	18e1      	adds	r1, r4, r3
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	2030      	movs	r0, #48	; 0x30
 8006472:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006476:	4422      	add	r2, r4
 8006478:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800647c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006480:	3302      	adds	r3, #2
 8006482:	e7c7      	b.n	8006414 <_printf_common+0x58>
 8006484:	2301      	movs	r3, #1
 8006486:	4622      	mov	r2, r4
 8006488:	4649      	mov	r1, r9
 800648a:	4638      	mov	r0, r7
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d0e6      	beq.n	8006460 <_printf_common+0xa4>
 8006492:	3601      	adds	r6, #1
 8006494:	e7d9      	b.n	800644a <_printf_common+0x8e>
	...

08006498 <_printf_i>:
 8006498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	460c      	mov	r4, r1
 800649e:	4691      	mov	r9, r2
 80064a0:	7e27      	ldrb	r7, [r4, #24]
 80064a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80064a4:	2f78      	cmp	r7, #120	; 0x78
 80064a6:	4680      	mov	r8, r0
 80064a8:	469a      	mov	sl, r3
 80064aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ae:	d807      	bhi.n	80064c0 <_printf_i+0x28>
 80064b0:	2f62      	cmp	r7, #98	; 0x62
 80064b2:	d80a      	bhi.n	80064ca <_printf_i+0x32>
 80064b4:	2f00      	cmp	r7, #0
 80064b6:	f000 80d8 	beq.w	800666a <_printf_i+0x1d2>
 80064ba:	2f58      	cmp	r7, #88	; 0x58
 80064bc:	f000 80a3 	beq.w	8006606 <_printf_i+0x16e>
 80064c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c8:	e03a      	b.n	8006540 <_printf_i+0xa8>
 80064ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ce:	2b15      	cmp	r3, #21
 80064d0:	d8f6      	bhi.n	80064c0 <_printf_i+0x28>
 80064d2:	a001      	add	r0, pc, #4	; (adr r0, 80064d8 <_printf_i+0x40>)
 80064d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006545 	.word	0x08006545
 80064e0:	080064c1 	.word	0x080064c1
 80064e4:	080064c1 	.word	0x080064c1
 80064e8:	080064c1 	.word	0x080064c1
 80064ec:	080064c1 	.word	0x080064c1
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080064c1 	.word	0x080064c1
 80064f8:	080064c1 	.word	0x080064c1
 80064fc:	080064c1 	.word	0x080064c1
 8006500:	080064c1 	.word	0x080064c1
 8006504:	08006651 	.word	0x08006651
 8006508:	08006575 	.word	0x08006575
 800650c:	08006633 	.word	0x08006633
 8006510:	080064c1 	.word	0x080064c1
 8006514:	080064c1 	.word	0x080064c1
 8006518:	08006673 	.word	0x08006673
 800651c:	080064c1 	.word	0x080064c1
 8006520:	08006575 	.word	0x08006575
 8006524:	080064c1 	.word	0x080064c1
 8006528:	080064c1 	.word	0x080064c1
 800652c:	0800663b 	.word	0x0800663b
 8006530:	680b      	ldr	r3, [r1, #0]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	600a      	str	r2, [r1, #0]
 8006538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800653c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006540:	2301      	movs	r3, #1
 8006542:	e0a3      	b.n	800668c <_printf_i+0x1f4>
 8006544:	6825      	ldr	r5, [r4, #0]
 8006546:	6808      	ldr	r0, [r1, #0]
 8006548:	062e      	lsls	r6, r5, #24
 800654a:	f100 0304 	add.w	r3, r0, #4
 800654e:	d50a      	bpl.n	8006566 <_printf_i+0xce>
 8006550:	6805      	ldr	r5, [r0, #0]
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	2d00      	cmp	r5, #0
 8006556:	da03      	bge.n	8006560 <_printf_i+0xc8>
 8006558:	232d      	movs	r3, #45	; 0x2d
 800655a:	426d      	negs	r5, r5
 800655c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006560:	485e      	ldr	r0, [pc, #376]	; (80066dc <_printf_i+0x244>)
 8006562:	230a      	movs	r3, #10
 8006564:	e019      	b.n	800659a <_printf_i+0x102>
 8006566:	f015 0f40 	tst.w	r5, #64	; 0x40
 800656a:	6805      	ldr	r5, [r0, #0]
 800656c:	600b      	str	r3, [r1, #0]
 800656e:	bf18      	it	ne
 8006570:	b22d      	sxthne	r5, r5
 8006572:	e7ef      	b.n	8006554 <_printf_i+0xbc>
 8006574:	680b      	ldr	r3, [r1, #0]
 8006576:	6825      	ldr	r5, [r4, #0]
 8006578:	1d18      	adds	r0, r3, #4
 800657a:	6008      	str	r0, [r1, #0]
 800657c:	0628      	lsls	r0, r5, #24
 800657e:	d501      	bpl.n	8006584 <_printf_i+0xec>
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	e002      	b.n	800658a <_printf_i+0xf2>
 8006584:	0669      	lsls	r1, r5, #25
 8006586:	d5fb      	bpl.n	8006580 <_printf_i+0xe8>
 8006588:	881d      	ldrh	r5, [r3, #0]
 800658a:	4854      	ldr	r0, [pc, #336]	; (80066dc <_printf_i+0x244>)
 800658c:	2f6f      	cmp	r7, #111	; 0x6f
 800658e:	bf0c      	ite	eq
 8006590:	2308      	moveq	r3, #8
 8006592:	230a      	movne	r3, #10
 8006594:	2100      	movs	r1, #0
 8006596:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800659a:	6866      	ldr	r6, [r4, #4]
 800659c:	60a6      	str	r6, [r4, #8]
 800659e:	2e00      	cmp	r6, #0
 80065a0:	bfa2      	ittt	ge
 80065a2:	6821      	ldrge	r1, [r4, #0]
 80065a4:	f021 0104 	bicge.w	r1, r1, #4
 80065a8:	6021      	strge	r1, [r4, #0]
 80065aa:	b90d      	cbnz	r5, 80065b0 <_printf_i+0x118>
 80065ac:	2e00      	cmp	r6, #0
 80065ae:	d04d      	beq.n	800664c <_printf_i+0x1b4>
 80065b0:	4616      	mov	r6, r2
 80065b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80065b6:	fb03 5711 	mls	r7, r3, r1, r5
 80065ba:	5dc7      	ldrb	r7, [r0, r7]
 80065bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065c0:	462f      	mov	r7, r5
 80065c2:	42bb      	cmp	r3, r7
 80065c4:	460d      	mov	r5, r1
 80065c6:	d9f4      	bls.n	80065b2 <_printf_i+0x11a>
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d10b      	bne.n	80065e4 <_printf_i+0x14c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07df      	lsls	r7, r3, #31
 80065d0:	d508      	bpl.n	80065e4 <_printf_i+0x14c>
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	6861      	ldr	r1, [r4, #4]
 80065d6:	4299      	cmp	r1, r3
 80065d8:	bfde      	ittt	le
 80065da:	2330      	movle	r3, #48	; 0x30
 80065dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065e4:	1b92      	subs	r2, r2, r6
 80065e6:	6122      	str	r2, [r4, #16]
 80065e8:	f8cd a000 	str.w	sl, [sp]
 80065ec:	464b      	mov	r3, r9
 80065ee:	aa03      	add	r2, sp, #12
 80065f0:	4621      	mov	r1, r4
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff fee2 	bl	80063bc <_printf_common>
 80065f8:	3001      	adds	r0, #1
 80065fa:	d14c      	bne.n	8006696 <_printf_i+0x1fe>
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	b004      	add	sp, #16
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	4835      	ldr	r0, [pc, #212]	; (80066dc <_printf_i+0x244>)
 8006608:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	680e      	ldr	r6, [r1, #0]
 8006610:	061f      	lsls	r7, r3, #24
 8006612:	f856 5b04 	ldr.w	r5, [r6], #4
 8006616:	600e      	str	r6, [r1, #0]
 8006618:	d514      	bpl.n	8006644 <_printf_i+0x1ac>
 800661a:	07d9      	lsls	r1, r3, #31
 800661c:	bf44      	itt	mi
 800661e:	f043 0320 	orrmi.w	r3, r3, #32
 8006622:	6023      	strmi	r3, [r4, #0]
 8006624:	b91d      	cbnz	r5, 800662e <_printf_i+0x196>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	f023 0320 	bic.w	r3, r3, #32
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	2310      	movs	r3, #16
 8006630:	e7b0      	b.n	8006594 <_printf_i+0xfc>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f043 0320 	orr.w	r3, r3, #32
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	2378      	movs	r3, #120	; 0x78
 800663c:	4828      	ldr	r0, [pc, #160]	; (80066e0 <_printf_i+0x248>)
 800663e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006642:	e7e3      	b.n	800660c <_printf_i+0x174>
 8006644:	065e      	lsls	r6, r3, #25
 8006646:	bf48      	it	mi
 8006648:	b2ad      	uxthmi	r5, r5
 800664a:	e7e6      	b.n	800661a <_printf_i+0x182>
 800664c:	4616      	mov	r6, r2
 800664e:	e7bb      	b.n	80065c8 <_printf_i+0x130>
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	6826      	ldr	r6, [r4, #0]
 8006654:	6960      	ldr	r0, [r4, #20]
 8006656:	1d1d      	adds	r5, r3, #4
 8006658:	600d      	str	r5, [r1, #0]
 800665a:	0635      	lsls	r5, r6, #24
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	d501      	bpl.n	8006664 <_printf_i+0x1cc>
 8006660:	6018      	str	r0, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0x1d2>
 8006664:	0671      	lsls	r1, r6, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0x1c8>
 8006668:	8018      	strh	r0, [r3, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	4616      	mov	r6, r2
 8006670:	e7ba      	b.n	80065e8 <_printf_i+0x150>
 8006672:	680b      	ldr	r3, [r1, #0]
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	600a      	str	r2, [r1, #0]
 8006678:	681e      	ldr	r6, [r3, #0]
 800667a:	6862      	ldr	r2, [r4, #4]
 800667c:	2100      	movs	r1, #0
 800667e:	4630      	mov	r0, r6
 8006680:	f7f9 fde6 	bl	8000250 <memchr>
 8006684:	b108      	cbz	r0, 800668a <_printf_i+0x1f2>
 8006686:	1b80      	subs	r0, r0, r6
 8006688:	6060      	str	r0, [r4, #4]
 800668a:	6863      	ldr	r3, [r4, #4]
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	2300      	movs	r3, #0
 8006690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006694:	e7a8      	b.n	80065e8 <_printf_i+0x150>
 8006696:	6923      	ldr	r3, [r4, #16]
 8006698:	4632      	mov	r2, r6
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	47d0      	blx	sl
 80066a0:	3001      	adds	r0, #1
 80066a2:	d0ab      	beq.n	80065fc <_printf_i+0x164>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	079b      	lsls	r3, r3, #30
 80066a8:	d413      	bmi.n	80066d2 <_printf_i+0x23a>
 80066aa:	68e0      	ldr	r0, [r4, #12]
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	4298      	cmp	r0, r3
 80066b0:	bfb8      	it	lt
 80066b2:	4618      	movlt	r0, r3
 80066b4:	e7a4      	b.n	8006600 <_printf_i+0x168>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4632      	mov	r2, r6
 80066ba:	4649      	mov	r1, r9
 80066bc:	4640      	mov	r0, r8
 80066be:	47d0      	blx	sl
 80066c0:	3001      	adds	r0, #1
 80066c2:	d09b      	beq.n	80065fc <_printf_i+0x164>
 80066c4:	3501      	adds	r5, #1
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	9903      	ldr	r1, [sp, #12]
 80066ca:	1a5b      	subs	r3, r3, r1
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dcf2      	bgt.n	80066b6 <_printf_i+0x21e>
 80066d0:	e7eb      	b.n	80066aa <_printf_i+0x212>
 80066d2:	2500      	movs	r5, #0
 80066d4:	f104 0619 	add.w	r6, r4, #25
 80066d8:	e7f5      	b.n	80066c6 <_printf_i+0x22e>
 80066da:	bf00      	nop
 80066dc:	0800872e 	.word	0x0800872e
 80066e0:	0800873f 	.word	0x0800873f

080066e4 <quorem>:
 80066e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	6903      	ldr	r3, [r0, #16]
 80066ea:	690c      	ldr	r4, [r1, #16]
 80066ec:	42a3      	cmp	r3, r4
 80066ee:	4607      	mov	r7, r0
 80066f0:	f2c0 8081 	blt.w	80067f6 <quorem+0x112>
 80066f4:	3c01      	subs	r4, #1
 80066f6:	f101 0814 	add.w	r8, r1, #20
 80066fa:	f100 0514 	add.w	r5, r0, #20
 80066fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800670c:	3301      	adds	r3, #1
 800670e:	429a      	cmp	r2, r3
 8006710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006718:	fbb2 f6f3 	udiv	r6, r2, r3
 800671c:	d331      	bcc.n	8006782 <quorem+0x9e>
 800671e:	f04f 0e00 	mov.w	lr, #0
 8006722:	4640      	mov	r0, r8
 8006724:	46ac      	mov	ip, r5
 8006726:	46f2      	mov	sl, lr
 8006728:	f850 2b04 	ldr.w	r2, [r0], #4
 800672c:	b293      	uxth	r3, r2
 800672e:	fb06 e303 	mla	r3, r6, r3, lr
 8006732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006736:	b29b      	uxth	r3, r3
 8006738:	ebaa 0303 	sub.w	r3, sl, r3
 800673c:	0c12      	lsrs	r2, r2, #16
 800673e:	f8dc a000 	ldr.w	sl, [ip]
 8006742:	fb06 e202 	mla	r2, r6, r2, lr
 8006746:	fa13 f38a 	uxtah	r3, r3, sl
 800674a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800674e:	fa1f fa82 	uxth.w	sl, r2
 8006752:	f8dc 2000 	ldr.w	r2, [ip]
 8006756:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800675a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006764:	4581      	cmp	r9, r0
 8006766:	f84c 3b04 	str.w	r3, [ip], #4
 800676a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800676e:	d2db      	bcs.n	8006728 <quorem+0x44>
 8006770:	f855 300b 	ldr.w	r3, [r5, fp]
 8006774:	b92b      	cbnz	r3, 8006782 <quorem+0x9e>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	3b04      	subs	r3, #4
 800677a:	429d      	cmp	r5, r3
 800677c:	461a      	mov	r2, r3
 800677e:	d32e      	bcc.n	80067de <quorem+0xfa>
 8006780:	613c      	str	r4, [r7, #16]
 8006782:	4638      	mov	r0, r7
 8006784:	f001 f856 	bl	8007834 <__mcmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	db24      	blt.n	80067d6 <quorem+0xf2>
 800678c:	3601      	adds	r6, #1
 800678e:	4628      	mov	r0, r5
 8006790:	f04f 0c00 	mov.w	ip, #0
 8006794:	f858 2b04 	ldr.w	r2, [r8], #4
 8006798:	f8d0 e000 	ldr.w	lr, [r0]
 800679c:	b293      	uxth	r3, r2
 800679e:	ebac 0303 	sub.w	r3, ip, r3
 80067a2:	0c12      	lsrs	r2, r2, #16
 80067a4:	fa13 f38e 	uxtah	r3, r3, lr
 80067a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067b6:	45c1      	cmp	r9, r8
 80067b8:	f840 3b04 	str.w	r3, [r0], #4
 80067bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067c0:	d2e8      	bcs.n	8006794 <quorem+0xb0>
 80067c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ca:	b922      	cbnz	r2, 80067d6 <quorem+0xf2>
 80067cc:	3b04      	subs	r3, #4
 80067ce:	429d      	cmp	r5, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	d30a      	bcc.n	80067ea <quorem+0x106>
 80067d4:	613c      	str	r4, [r7, #16]
 80067d6:	4630      	mov	r0, r6
 80067d8:	b003      	add	sp, #12
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	3b04      	subs	r3, #4
 80067e2:	2a00      	cmp	r2, #0
 80067e4:	d1cc      	bne.n	8006780 <quorem+0x9c>
 80067e6:	3c01      	subs	r4, #1
 80067e8:	e7c7      	b.n	800677a <quorem+0x96>
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1f0      	bne.n	80067d4 <quorem+0xf0>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	e7eb      	b.n	80067ce <quorem+0xea>
 80067f6:	2000      	movs	r0, #0
 80067f8:	e7ee      	b.n	80067d8 <quorem+0xf4>
 80067fa:	0000      	movs	r0, r0
 80067fc:	0000      	movs	r0, r0
	...

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	ec59 8b10 	vmov	r8, r9, d0
 8006808:	b095      	sub	sp, #84	; 0x54
 800680a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800680c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800680e:	9107      	str	r1, [sp, #28]
 8006810:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006814:	4606      	mov	r6, r0
 8006816:	9209      	str	r2, [sp, #36]	; 0x24
 8006818:	9310      	str	r3, [sp, #64]	; 0x40
 800681a:	b975      	cbnz	r5, 800683a <_dtoa_r+0x3a>
 800681c:	2010      	movs	r0, #16
 800681e:	f000 fd75 	bl	800730c <malloc>
 8006822:	4602      	mov	r2, r0
 8006824:	6270      	str	r0, [r6, #36]	; 0x24
 8006826:	b920      	cbnz	r0, 8006832 <_dtoa_r+0x32>
 8006828:	4bab      	ldr	r3, [pc, #684]	; (8006ad8 <_dtoa_r+0x2d8>)
 800682a:	21ea      	movs	r1, #234	; 0xea
 800682c:	48ab      	ldr	r0, [pc, #684]	; (8006adc <_dtoa_r+0x2dc>)
 800682e:	f001 f9cb 	bl	8007bc8 <__assert_func>
 8006832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006836:	6005      	str	r5, [r0, #0]
 8006838:	60c5      	str	r5, [r0, #12]
 800683a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800683c:	6819      	ldr	r1, [r3, #0]
 800683e:	b151      	cbz	r1, 8006856 <_dtoa_r+0x56>
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	604a      	str	r2, [r1, #4]
 8006844:	2301      	movs	r3, #1
 8006846:	4093      	lsls	r3, r2
 8006848:	608b      	str	r3, [r1, #8]
 800684a:	4630      	mov	r0, r6
 800684c:	f000 fdb4 	bl	80073b8 <_Bfree>
 8006850:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f1b9 0300 	subs.w	r3, r9, #0
 800685a:	bfbb      	ittet	lt
 800685c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006860:	9303      	strlt	r3, [sp, #12]
 8006862:	2300      	movge	r3, #0
 8006864:	2201      	movlt	r2, #1
 8006866:	bfac      	ite	ge
 8006868:	6023      	strge	r3, [r4, #0]
 800686a:	6022      	strlt	r2, [r4, #0]
 800686c:	4b9c      	ldr	r3, [pc, #624]	; (8006ae0 <_dtoa_r+0x2e0>)
 800686e:	9c03      	ldr	r4, [sp, #12]
 8006870:	43a3      	bics	r3, r4
 8006872:	d11a      	bne.n	80068aa <_dtoa_r+0xaa>
 8006874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006876:	f242 730f 	movw	r3, #9999	; 0x270f
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006880:	ea53 0308 	orrs.w	r3, r3, r8
 8006884:	f000 8512 	beq.w	80072ac <_dtoa_r+0xaac>
 8006888:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800688a:	b953      	cbnz	r3, 80068a2 <_dtoa_r+0xa2>
 800688c:	4b95      	ldr	r3, [pc, #596]	; (8006ae4 <_dtoa_r+0x2e4>)
 800688e:	e01f      	b.n	80068d0 <_dtoa_r+0xd0>
 8006890:	4b95      	ldr	r3, [pc, #596]	; (8006ae8 <_dtoa_r+0x2e8>)
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	9800      	ldr	r0, [sp, #0]
 800689c:	b015      	add	sp, #84	; 0x54
 800689e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a2:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <_dtoa_r+0x2e4>)
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	3303      	adds	r3, #3
 80068a8:	e7f5      	b.n	8006896 <_dtoa_r+0x96>
 80068aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80068ba:	d10b      	bne.n	80068d4 <_dtoa_r+0xd4>
 80068bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068be:	2301      	movs	r3, #1
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 84ee 	beq.w	80072a6 <_dtoa_r+0xaa6>
 80068ca:	4888      	ldr	r0, [pc, #544]	; (8006aec <_dtoa_r+0x2ec>)
 80068cc:	6018      	str	r0, [r3, #0]
 80068ce:	1e43      	subs	r3, r0, #1
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	e7e2      	b.n	800689a <_dtoa_r+0x9a>
 80068d4:	a913      	add	r1, sp, #76	; 0x4c
 80068d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80068da:	aa12      	add	r2, sp, #72	; 0x48
 80068dc:	4630      	mov	r0, r6
 80068de:	f001 f84d 	bl	800797c <__d2b>
 80068e2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80068e6:	4605      	mov	r5, r0
 80068e8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d047      	beq.n	800697e <_dtoa_r+0x17e>
 80068ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80068f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80068f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068f8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80068fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006900:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006904:	2400      	movs	r4, #0
 8006906:	ec43 2b16 	vmov	d6, r2, r3
 800690a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800690e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8006ac0 <_dtoa_r+0x2c0>
 8006912:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006916:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8006ac8 <_dtoa_r+0x2c8>
 800691a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800691e:	eeb0 7b46 	vmov.f64	d7, d6
 8006922:	ee06 1a90 	vmov	s13, r1
 8006926:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800692a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006ad0 <_dtoa_r+0x2d0>
 800692e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006932:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006936:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	ee16 ba90 	vmov	fp, s13
 8006942:	9411      	str	r4, [sp, #68]	; 0x44
 8006944:	d508      	bpl.n	8006958 <_dtoa_r+0x158>
 8006946:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800694a:	eeb4 6b47 	vcmp.f64	d6, d7
 800694e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006952:	bf18      	it	ne
 8006954:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006958:	f1bb 0f16 	cmp.w	fp, #22
 800695c:	d832      	bhi.n	80069c4 <_dtoa_r+0x1c4>
 800695e:	4b64      	ldr	r3, [pc, #400]	; (8006af0 <_dtoa_r+0x2f0>)
 8006960:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006964:	ed93 7b00 	vldr	d7, [r3]
 8006968:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800696c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006974:	d501      	bpl.n	800697a <_dtoa_r+0x17a>
 8006976:	f10b 3bff 	add.w	fp, fp, #4294967295
 800697a:	2300      	movs	r3, #0
 800697c:	e023      	b.n	80069c6 <_dtoa_r+0x1c6>
 800697e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006980:	4401      	add	r1, r0
 8006982:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006986:	2b20      	cmp	r3, #32
 8006988:	bfc3      	ittte	gt
 800698a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800698e:	fa04 f303 	lslgt.w	r3, r4, r3
 8006992:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006996:	f1c3 0320 	rsble	r3, r3, #32
 800699a:	bfc6      	itte	gt
 800699c:	fa28 f804 	lsrgt.w	r8, r8, r4
 80069a0:	ea43 0308 	orrgt.w	r3, r3, r8
 80069a4:	fa08 f303 	lslle.w	r3, r8, r3
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80069b0:	3901      	subs	r1, #1
 80069b2:	ed8d 7b00 	vstr	d7, [sp]
 80069b6:	9c01      	ldr	r4, [sp, #4]
 80069b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80069c0:	2401      	movs	r4, #1
 80069c2:	e7a0      	b.n	8006906 <_dtoa_r+0x106>
 80069c4:	2301      	movs	r3, #1
 80069c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c8:	1a43      	subs	r3, r0, r1
 80069ca:	1e5a      	subs	r2, r3, #1
 80069cc:	bf45      	ittet	mi
 80069ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80069d2:	9305      	strmi	r3, [sp, #20]
 80069d4:	2300      	movpl	r3, #0
 80069d6:	2300      	movmi	r3, #0
 80069d8:	9206      	str	r2, [sp, #24]
 80069da:	bf54      	ite	pl
 80069dc:	9305      	strpl	r3, [sp, #20]
 80069de:	9306      	strmi	r3, [sp, #24]
 80069e0:	f1bb 0f00 	cmp.w	fp, #0
 80069e4:	db18      	blt.n	8006a18 <_dtoa_r+0x218>
 80069e6:	9b06      	ldr	r3, [sp, #24]
 80069e8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80069ec:	445b      	add	r3, fp
 80069ee:	9306      	str	r3, [sp, #24]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9a07      	ldr	r2, [sp, #28]
 80069f4:	2a09      	cmp	r2, #9
 80069f6:	d849      	bhi.n	8006a8c <_dtoa_r+0x28c>
 80069f8:	2a05      	cmp	r2, #5
 80069fa:	bfc4      	itt	gt
 80069fc:	3a04      	subgt	r2, #4
 80069fe:	9207      	strgt	r2, [sp, #28]
 8006a00:	9a07      	ldr	r2, [sp, #28]
 8006a02:	f1a2 0202 	sub.w	r2, r2, #2
 8006a06:	bfcc      	ite	gt
 8006a08:	2400      	movgt	r4, #0
 8006a0a:	2401      	movle	r4, #1
 8006a0c:	2a03      	cmp	r2, #3
 8006a0e:	d848      	bhi.n	8006aa2 <_dtoa_r+0x2a2>
 8006a10:	e8df f002 	tbb	[pc, r2]
 8006a14:	3a2c2e0b 	.word	0x3a2c2e0b
 8006a18:	9b05      	ldr	r3, [sp, #20]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	eba3 030b 	sub.w	r3, r3, fp
 8006a20:	9305      	str	r3, [sp, #20]
 8006a22:	920e      	str	r2, [sp, #56]	; 0x38
 8006a24:	f1cb 0300 	rsb	r3, fp, #0
 8006a28:	e7e3      	b.n	80069f2 <_dtoa_r+0x1f2>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	9208      	str	r2, [sp, #32]
 8006a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	dc39      	bgt.n	8006aa8 <_dtoa_r+0x2a8>
 8006a34:	f04f 0a01 	mov.w	sl, #1
 8006a38:	46d1      	mov	r9, sl
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006a40:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006a42:	2100      	movs	r1, #0
 8006a44:	6079      	str	r1, [r7, #4]
 8006a46:	2004      	movs	r0, #4
 8006a48:	f100 0c14 	add.w	ip, r0, #20
 8006a4c:	4594      	cmp	ip, r2
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	d92f      	bls.n	8006ab2 <_dtoa_r+0x2b2>
 8006a52:	4630      	mov	r0, r6
 8006a54:	930c      	str	r3, [sp, #48]	; 0x30
 8006a56:	f000 fc6f 	bl	8007338 <_Balloc>
 8006a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a5c:	9000      	str	r0, [sp, #0]
 8006a5e:	4602      	mov	r2, r0
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d149      	bne.n	8006af8 <_dtoa_r+0x2f8>
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <_dtoa_r+0x2f4>)
 8006a66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a6a:	e6df      	b.n	800682c <_dtoa_r+0x2c>
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	e7dd      	b.n	8006a2c <_dtoa_r+0x22c>
 8006a70:	2200      	movs	r2, #0
 8006a72:	9208      	str	r2, [sp, #32]
 8006a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a76:	eb0b 0a02 	add.w	sl, fp, r2
 8006a7a:	f10a 0901 	add.w	r9, sl, #1
 8006a7e:	464a      	mov	r2, r9
 8006a80:	2a01      	cmp	r2, #1
 8006a82:	bfb8      	it	lt
 8006a84:	2201      	movlt	r2, #1
 8006a86:	e7db      	b.n	8006a40 <_dtoa_r+0x240>
 8006a88:	2201      	movs	r2, #1
 8006a8a:	e7f2      	b.n	8006a72 <_dtoa_r+0x272>
 8006a8c:	2401      	movs	r4, #1
 8006a8e:	2200      	movs	r2, #0
 8006a90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8006a94:	f04f 3aff 	mov.w	sl, #4294967295
 8006a98:	2100      	movs	r1, #0
 8006a9a:	46d1      	mov	r9, sl
 8006a9c:	2212      	movs	r2, #18
 8006a9e:	9109      	str	r1, [sp, #36]	; 0x24
 8006aa0:	e7ce      	b.n	8006a40 <_dtoa_r+0x240>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	9208      	str	r2, [sp, #32]
 8006aa6:	e7f5      	b.n	8006a94 <_dtoa_r+0x294>
 8006aa8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006aac:	46d1      	mov	r9, sl
 8006aae:	4652      	mov	r2, sl
 8006ab0:	e7c6      	b.n	8006a40 <_dtoa_r+0x240>
 8006ab2:	3101      	adds	r1, #1
 8006ab4:	6079      	str	r1, [r7, #4]
 8006ab6:	0040      	lsls	r0, r0, #1
 8006ab8:	e7c6      	b.n	8006a48 <_dtoa_r+0x248>
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w
 8006ac0:	636f4361 	.word	0x636f4361
 8006ac4:	3fd287a7 	.word	0x3fd287a7
 8006ac8:	8b60c8b3 	.word	0x8b60c8b3
 8006acc:	3fc68a28 	.word	0x3fc68a28
 8006ad0:	509f79fb 	.word	0x509f79fb
 8006ad4:	3fd34413 	.word	0x3fd34413
 8006ad8:	0800875d 	.word	0x0800875d
 8006adc:	08008774 	.word	0x08008774
 8006ae0:	7ff00000 	.word	0x7ff00000
 8006ae4:	08008759 	.word	0x08008759
 8006ae8:	08008750 	.word	0x08008750
 8006aec:	0800872d 	.word	0x0800872d
 8006af0:	08008870 	.word	0x08008870
 8006af4:	080087d3 	.word	0x080087d3
 8006af8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006afa:	9900      	ldr	r1, [sp, #0]
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	f1b9 0f0e 	cmp.w	r9, #14
 8006b02:	d872      	bhi.n	8006bea <_dtoa_r+0x3ea>
 8006b04:	2c00      	cmp	r4, #0
 8006b06:	d070      	beq.n	8006bea <_dtoa_r+0x3ea>
 8006b08:	f1bb 0f00 	cmp.w	fp, #0
 8006b0c:	f340 80a6 	ble.w	8006c5c <_dtoa_r+0x45c>
 8006b10:	49ca      	ldr	r1, [pc, #808]	; (8006e3c <_dtoa_r+0x63c>)
 8006b12:	f00b 020f 	and.w	r2, fp, #15
 8006b16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006b1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006b1e:	ed92 7b00 	vldr	d7, [r2]
 8006b22:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006b26:	f000 808d 	beq.w	8006c44 <_dtoa_r+0x444>
 8006b2a:	4ac5      	ldr	r2, [pc, #788]	; (8006e40 <_dtoa_r+0x640>)
 8006b2c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8006b30:	ed92 6b08 	vldr	d6, [r2, #32]
 8006b34:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8006b38:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006b3c:	f001 010f 	and.w	r1, r1, #15
 8006b40:	2203      	movs	r2, #3
 8006b42:	48bf      	ldr	r0, [pc, #764]	; (8006e40 <_dtoa_r+0x640>)
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d17f      	bne.n	8006c48 <_dtoa_r+0x448>
 8006b48:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b4c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b56:	2900      	cmp	r1, #0
 8006b58:	f000 80b2 	beq.w	8006cc0 <_dtoa_r+0x4c0>
 8006b5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6c:	f140 80a8 	bpl.w	8006cc0 <_dtoa_r+0x4c0>
 8006b70:	f1b9 0f00 	cmp.w	r9, #0
 8006b74:	f000 80a4 	beq.w	8006cc0 <_dtoa_r+0x4c0>
 8006b78:	f1ba 0f00 	cmp.w	sl, #0
 8006b7c:	dd31      	ble.n	8006be2 <_dtoa_r+0x3e2>
 8006b7e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006b82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b8a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b8e:	3201      	adds	r2, #1
 8006b90:	4650      	mov	r0, sl
 8006b92:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b96:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006b9a:	ee07 2a90 	vmov	s15, r2
 8006b9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006ba2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006ba6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006baa:	9c03      	ldr	r4, [sp, #12]
 8006bac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006bb0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f040 8086 	bne.w	8006cc6 <_dtoa_r+0x4c6>
 8006bba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006bbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006bc2:	ec42 1b17 	vmov	d7, r1, r2
 8006bc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bce:	f300 8272 	bgt.w	80070b6 <_dtoa_r+0x8b6>
 8006bd2:	eeb1 7b47 	vneg.f64	d7, d7
 8006bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bde:	f100 8267 	bmi.w	80070b0 <_dtoa_r+0x8b0>
 8006be2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8006be6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006bea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	f2c0 8129 	blt.w	8006e44 <_dtoa_r+0x644>
 8006bf2:	f1bb 0f0e 	cmp.w	fp, #14
 8006bf6:	f300 8125 	bgt.w	8006e44 <_dtoa_r+0x644>
 8006bfa:	4b90      	ldr	r3, [pc, #576]	; (8006e3c <_dtoa_r+0x63c>)
 8006bfc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c00:	ed93 6b00 	vldr	d6, [r3]
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f280 80c3 	bge.w	8006d92 <_dtoa_r+0x592>
 8006c0c:	f1b9 0f00 	cmp.w	r9, #0
 8006c10:	f300 80bf 	bgt.w	8006d92 <_dtoa_r+0x592>
 8006c14:	f040 824c 	bne.w	80070b0 <_dtoa_r+0x8b0>
 8006c18:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006c1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2c:	464c      	mov	r4, r9
 8006c2e:	464f      	mov	r7, r9
 8006c30:	f280 8222 	bge.w	8007078 <_dtoa_r+0x878>
 8006c34:	f8dd 8000 	ldr.w	r8, [sp]
 8006c38:	2331      	movs	r3, #49	; 0x31
 8006c3a:	f808 3b01 	strb.w	r3, [r8], #1
 8006c3e:	f10b 0b01 	add.w	fp, fp, #1
 8006c42:	e21e      	b.n	8007082 <_dtoa_r+0x882>
 8006c44:	2202      	movs	r2, #2
 8006c46:	e77c      	b.n	8006b42 <_dtoa_r+0x342>
 8006c48:	07cc      	lsls	r4, r1, #31
 8006c4a:	d504      	bpl.n	8006c56 <_dtoa_r+0x456>
 8006c4c:	ed90 6b00 	vldr	d6, [r0]
 8006c50:	3201      	adds	r2, #1
 8006c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c56:	1049      	asrs	r1, r1, #1
 8006c58:	3008      	adds	r0, #8
 8006c5a:	e773      	b.n	8006b44 <_dtoa_r+0x344>
 8006c5c:	d02e      	beq.n	8006cbc <_dtoa_r+0x4bc>
 8006c5e:	f1cb 0100 	rsb	r1, fp, #0
 8006c62:	4a76      	ldr	r2, [pc, #472]	; (8006e3c <_dtoa_r+0x63c>)
 8006c64:	f001 000f 	and.w	r0, r1, #15
 8006c68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006c6c:	ed92 7b00 	vldr	d7, [r2]
 8006c70:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8006c74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c78:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006c7c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8006c80:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8006c84:	486e      	ldr	r0, [pc, #440]	; (8006e40 <_dtoa_r+0x640>)
 8006c86:	1109      	asrs	r1, r1, #4
 8006c88:	2400      	movs	r4, #0
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	b939      	cbnz	r1, 8006c9e <_dtoa_r+0x49e>
 8006c8e:	2c00      	cmp	r4, #0
 8006c90:	f43f af60 	beq.w	8006b54 <_dtoa_r+0x354>
 8006c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c9c:	e75a      	b.n	8006b54 <_dtoa_r+0x354>
 8006c9e:	07cf      	lsls	r7, r1, #31
 8006ca0:	d509      	bpl.n	8006cb6 <_dtoa_r+0x4b6>
 8006ca2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8006ca6:	ed90 7b00 	vldr	d7, [r0]
 8006caa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	2401      	movs	r4, #1
 8006cb6:	1049      	asrs	r1, r1, #1
 8006cb8:	3008      	adds	r0, #8
 8006cba:	e7e7      	b.n	8006c8c <_dtoa_r+0x48c>
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	e749      	b.n	8006b54 <_dtoa_r+0x354>
 8006cc0:	465f      	mov	r7, fp
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	e765      	b.n	8006b92 <_dtoa_r+0x392>
 8006cc6:	ec42 1b17 	vmov	d7, r1, r2
 8006cca:	4a5c      	ldr	r2, [pc, #368]	; (8006e3c <_dtoa_r+0x63c>)
 8006ccc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006cd0:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006cd4:	9a00      	ldr	r2, [sp, #0]
 8006cd6:	1814      	adds	r4, r2, r0
 8006cd8:	9a08      	ldr	r2, [sp, #32]
 8006cda:	b352      	cbz	r2, 8006d32 <_dtoa_r+0x532>
 8006cdc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006ce0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006ce4:	f8dd 8000 	ldr.w	r8, [sp]
 8006ce8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006cec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006cf0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006cf4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006cf8:	ee14 2a90 	vmov	r2, s9
 8006cfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006d00:	3230      	adds	r2, #48	; 0x30
 8006d02:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006d06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	f808 2b01 	strb.w	r2, [r8], #1
 8006d12:	d439      	bmi.n	8006d88 <_dtoa_r+0x588>
 8006d14:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006d18:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d20:	d472      	bmi.n	8006e08 <_dtoa_r+0x608>
 8006d22:	45a0      	cmp	r8, r4
 8006d24:	f43f af5d 	beq.w	8006be2 <_dtoa_r+0x3e2>
 8006d28:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006d2c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d30:	e7e0      	b.n	8006cf4 <_dtoa_r+0x4f4>
 8006d32:	f8dd 8000 	ldr.w	r8, [sp]
 8006d36:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006d40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006d44:	ee14 2a90 	vmov	r2, s9
 8006d48:	3230      	adds	r2, #48	; 0x30
 8006d4a:	f808 2b01 	strb.w	r2, [r8], #1
 8006d4e:	45a0      	cmp	r8, r4
 8006d50:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006d54:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006d58:	d118      	bne.n	8006d8c <_dtoa_r+0x58c>
 8006d5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006d5e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006d62:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6a:	dc4d      	bgt.n	8006e08 <_dtoa_r+0x608>
 8006d6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006d70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d78:	f57f af33 	bpl.w	8006be2 <_dtoa_r+0x3e2>
 8006d7c:	4688      	mov	r8, r1
 8006d7e:	3901      	subs	r1, #1
 8006d80:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006d84:	2b30      	cmp	r3, #48	; 0x30
 8006d86:	d0f9      	beq.n	8006d7c <_dtoa_r+0x57c>
 8006d88:	46bb      	mov	fp, r7
 8006d8a:	e02a      	b.n	8006de2 <_dtoa_r+0x5e2>
 8006d8c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d90:	e7d6      	b.n	8006d40 <_dtoa_r+0x540>
 8006d92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d96:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006d9a:	f8dd 8000 	ldr.w	r8, [sp]
 8006d9e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006da2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006da6:	ee15 3a10 	vmov	r3, s10
 8006daa:	3330      	adds	r3, #48	; 0x30
 8006dac:	f808 3b01 	strb.w	r3, [r8], #1
 8006db0:	9b00      	ldr	r3, [sp, #0]
 8006db2:	eba8 0303 	sub.w	r3, r8, r3
 8006db6:	4599      	cmp	r9, r3
 8006db8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006dbc:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006dc0:	d133      	bne.n	8006e2a <_dtoa_r+0x62a>
 8006dc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006dc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dce:	dc1a      	bgt.n	8006e06 <_dtoa_r+0x606>
 8006dd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	d103      	bne.n	8006de2 <_dtoa_r+0x5e2>
 8006dda:	ee15 3a10 	vmov	r3, s10
 8006dde:	07d9      	lsls	r1, r3, #31
 8006de0:	d411      	bmi.n	8006e06 <_dtoa_r+0x606>
 8006de2:	4629      	mov	r1, r5
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 fae7 	bl	80073b8 <_Bfree>
 8006dea:	2300      	movs	r3, #0
 8006dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006dee:	f888 3000 	strb.w	r3, [r8]
 8006df2:	f10b 0301 	add.w	r3, fp, #1
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f43f ad4d 	beq.w	800689a <_dtoa_r+0x9a>
 8006e00:	f8c3 8000 	str.w	r8, [r3]
 8006e04:	e549      	b.n	800689a <_dtoa_r+0x9a>
 8006e06:	465f      	mov	r7, fp
 8006e08:	4643      	mov	r3, r8
 8006e0a:	4698      	mov	r8, r3
 8006e0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e10:	2a39      	cmp	r2, #57	; 0x39
 8006e12:	d106      	bne.n	8006e22 <_dtoa_r+0x622>
 8006e14:	9a00      	ldr	r2, [sp, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d1f7      	bne.n	8006e0a <_dtoa_r+0x60a>
 8006e1a:	9900      	ldr	r1, [sp, #0]
 8006e1c:	2230      	movs	r2, #48	; 0x30
 8006e1e:	3701      	adds	r7, #1
 8006e20:	700a      	strb	r2, [r1, #0]
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	3201      	adds	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e7ae      	b.n	8006d88 <_dtoa_r+0x588>
 8006e2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e36:	d1b2      	bne.n	8006d9e <_dtoa_r+0x59e>
 8006e38:	e7d3      	b.n	8006de2 <_dtoa_r+0x5e2>
 8006e3a:	bf00      	nop
 8006e3c:	08008870 	.word	0x08008870
 8006e40:	08008848 	.word	0x08008848
 8006e44:	9908      	ldr	r1, [sp, #32]
 8006e46:	2900      	cmp	r1, #0
 8006e48:	f000 80d1 	beq.w	8006fee <_dtoa_r+0x7ee>
 8006e4c:	9907      	ldr	r1, [sp, #28]
 8006e4e:	2901      	cmp	r1, #1
 8006e50:	f300 80b4 	bgt.w	8006fbc <_dtoa_r+0x7bc>
 8006e54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e56:	2900      	cmp	r1, #0
 8006e58:	f000 80ac 	beq.w	8006fb4 <_dtoa_r+0x7b4>
 8006e5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e60:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006e64:	461c      	mov	r4, r3
 8006e66:	930a      	str	r3, [sp, #40]	; 0x28
 8006e68:	9b05      	ldr	r3, [sp, #20]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	9b06      	ldr	r3, [sp, #24]
 8006e70:	2101      	movs	r1, #1
 8006e72:	4413      	add	r3, r2
 8006e74:	4630      	mov	r0, r6
 8006e76:	9306      	str	r3, [sp, #24]
 8006e78:	f000 fb5a 	bl	8007530 <__i2b>
 8006e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7e:	4607      	mov	r7, r0
 8006e80:	f1b8 0f00 	cmp.w	r8, #0
 8006e84:	dd0d      	ble.n	8006ea2 <_dtoa_r+0x6a2>
 8006e86:	9a06      	ldr	r2, [sp, #24]
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	dd0a      	ble.n	8006ea2 <_dtoa_r+0x6a2>
 8006e8c:	4542      	cmp	r2, r8
 8006e8e:	9905      	ldr	r1, [sp, #20]
 8006e90:	bfa8      	it	ge
 8006e92:	4642      	movge	r2, r8
 8006e94:	1a89      	subs	r1, r1, r2
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	9906      	ldr	r1, [sp, #24]
 8006e9a:	eba8 0802 	sub.w	r8, r8, r2
 8006e9e:	1a8a      	subs	r2, r1, r2
 8006ea0:	9206      	str	r2, [sp, #24]
 8006ea2:	b303      	cbz	r3, 8006ee6 <_dtoa_r+0x6e6>
 8006ea4:	9a08      	ldr	r2, [sp, #32]
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	f000 80a6 	beq.w	8006ff8 <_dtoa_r+0x7f8>
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	dd13      	ble.n	8006ed8 <_dtoa_r+0x6d8>
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8006eb8:	f000 fbf6 	bl	80076a8 <__pow5mult>
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4601      	mov	r1, r0
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f000 fb4a 	bl	800755c <__multiply>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	900a      	str	r0, [sp, #40]	; 0x28
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f000 fa73 	bl	80073b8 <_Bfree>
 8006ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed6:	4615      	mov	r5, r2
 8006ed8:	1b1a      	subs	r2, r3, r4
 8006eda:	d004      	beq.n	8006ee6 <_dtoa_r+0x6e6>
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 fbe2 	bl	80076a8 <__pow5mult>
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 fb21 	bl	8007530 <__i2b>
 8006eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	f340 8082 	ble.w	8006ffc <_dtoa_r+0x7fc>
 8006ef8:	461a      	mov	r2, r3
 8006efa:	4601      	mov	r1, r0
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 fbd3 	bl	80076a8 <__pow5mult>
 8006f02:	9b07      	ldr	r3, [sp, #28]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	4604      	mov	r4, r0
 8006f08:	dd7b      	ble.n	8007002 <_dtoa_r+0x802>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f0e:	6922      	ldr	r2, [r4, #16]
 8006f10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006f14:	6910      	ldr	r0, [r2, #16]
 8006f16:	f000 fabb 	bl	8007490 <__hi0bits>
 8006f1a:	f1c0 0020 	rsb	r0, r0, #32
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	4418      	add	r0, r3
 8006f22:	f010 001f 	ands.w	r0, r0, #31
 8006f26:	f000 808d 	beq.w	8007044 <_dtoa_r+0x844>
 8006f2a:	f1c0 0220 	rsb	r2, r0, #32
 8006f2e:	2a04      	cmp	r2, #4
 8006f30:	f340 8086 	ble.w	8007040 <_dtoa_r+0x840>
 8006f34:	f1c0 001c 	rsb	r0, r0, #28
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	4403      	add	r3, r0
 8006f3c:	9305      	str	r3, [sp, #20]
 8006f3e:	9b06      	ldr	r3, [sp, #24]
 8006f40:	4403      	add	r3, r0
 8006f42:	4480      	add	r8, r0
 8006f44:	9306      	str	r3, [sp, #24]
 8006f46:	9b05      	ldr	r3, [sp, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	dd05      	ble.n	8006f58 <_dtoa_r+0x758>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 fc03 	bl	800775c <__lshift>
 8006f56:	4605      	mov	r5, r0
 8006f58:	9b06      	ldr	r3, [sp, #24]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dd05      	ble.n	8006f6a <_dtoa_r+0x76a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	461a      	mov	r2, r3
 8006f62:	4630      	mov	r0, r6
 8006f64:	f000 fbfa 	bl	800775c <__lshift>
 8006f68:	4604      	mov	r4, r0
 8006f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d06b      	beq.n	8007048 <_dtoa_r+0x848>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 fc5e 	bl	8007834 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	da65      	bge.n	8007048 <_dtoa_r+0x848>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4629      	mov	r1, r5
 8006f80:	220a      	movs	r2, #10
 8006f82:	4630      	mov	r0, r6
 8006f84:	f000 fa3a 	bl	80073fc <__multadd>
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f8e:	4605      	mov	r5, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 8192 	beq.w	80072ba <_dtoa_r+0xaba>
 8006f96:	4639      	mov	r1, r7
 8006f98:	2300      	movs	r3, #0
 8006f9a:	220a      	movs	r2, #10
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f000 fa2d 	bl	80073fc <__multadd>
 8006fa2:	f1ba 0f00 	cmp.w	sl, #0
 8006fa6:	4607      	mov	r7, r0
 8006fa8:	f300 808e 	bgt.w	80070c8 <_dtoa_r+0x8c8>
 8006fac:	9b07      	ldr	r3, [sp, #28]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dc51      	bgt.n	8007056 <_dtoa_r+0x856>
 8006fb2:	e089      	b.n	80070c8 <_dtoa_r+0x8c8>
 8006fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fba:	e751      	b.n	8006e60 <_dtoa_r+0x660>
 8006fbc:	f109 34ff 	add.w	r4, r9, #4294967295
 8006fc0:	42a3      	cmp	r3, r4
 8006fc2:	bfbf      	itttt	lt
 8006fc4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006fc6:	1ae3      	sublt	r3, r4, r3
 8006fc8:	18d2      	addlt	r2, r2, r3
 8006fca:	4613      	movlt	r3, r2
 8006fcc:	bfb7      	itett	lt
 8006fce:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006fd0:	1b1c      	subge	r4, r3, r4
 8006fd2:	4623      	movlt	r3, r4
 8006fd4:	2400      	movlt	r4, #0
 8006fd6:	f1b9 0f00 	cmp.w	r9, #0
 8006fda:	bfb5      	itete	lt
 8006fdc:	9a05      	ldrlt	r2, [sp, #20]
 8006fde:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8006fe2:	eba2 0809 	sublt.w	r8, r2, r9
 8006fe6:	464a      	movge	r2, r9
 8006fe8:	bfb8      	it	lt
 8006fea:	2200      	movlt	r2, #0
 8006fec:	e73b      	b.n	8006e66 <_dtoa_r+0x666>
 8006fee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006ff2:	9f08      	ldr	r7, [sp, #32]
 8006ff4:	461c      	mov	r4, r3
 8006ff6:	e743      	b.n	8006e80 <_dtoa_r+0x680>
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	e76f      	b.n	8006edc <_dtoa_r+0x6dc>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	dc18      	bgt.n	8007034 <_dtoa_r+0x834>
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	b9b3      	cbnz	r3, 8007034 <_dtoa_r+0x834>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800700c:	b9a2      	cbnz	r2, 8007038 <_dtoa_r+0x838>
 800700e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007012:	0d12      	lsrs	r2, r2, #20
 8007014:	0512      	lsls	r2, r2, #20
 8007016:	b18a      	cbz	r2, 800703c <_dtoa_r+0x83c>
 8007018:	9b05      	ldr	r3, [sp, #20]
 800701a:	3301      	adds	r3, #1
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	3301      	adds	r3, #1
 8007022:	9306      	str	r3, [sp, #24]
 8007024:	2301      	movs	r3, #1
 8007026:	930a      	str	r3, [sp, #40]	; 0x28
 8007028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800702a:	2b00      	cmp	r3, #0
 800702c:	f47f af6f 	bne.w	8006f0e <_dtoa_r+0x70e>
 8007030:	2001      	movs	r0, #1
 8007032:	e774      	b.n	8006f1e <_dtoa_r+0x71e>
 8007034:	2300      	movs	r3, #0
 8007036:	e7f6      	b.n	8007026 <_dtoa_r+0x826>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	e7f4      	b.n	8007026 <_dtoa_r+0x826>
 800703c:	920a      	str	r2, [sp, #40]	; 0x28
 800703e:	e7f3      	b.n	8007028 <_dtoa_r+0x828>
 8007040:	d081      	beq.n	8006f46 <_dtoa_r+0x746>
 8007042:	4610      	mov	r0, r2
 8007044:	301c      	adds	r0, #28
 8007046:	e777      	b.n	8006f38 <_dtoa_r+0x738>
 8007048:	f1b9 0f00 	cmp.w	r9, #0
 800704c:	dc37      	bgt.n	80070be <_dtoa_r+0x8be>
 800704e:	9b07      	ldr	r3, [sp, #28]
 8007050:	2b02      	cmp	r3, #2
 8007052:	dd34      	ble.n	80070be <_dtoa_r+0x8be>
 8007054:	46ca      	mov	sl, r9
 8007056:	f1ba 0f00 	cmp.w	sl, #0
 800705a:	d10d      	bne.n	8007078 <_dtoa_r+0x878>
 800705c:	4621      	mov	r1, r4
 800705e:	4653      	mov	r3, sl
 8007060:	2205      	movs	r2, #5
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f9ca 	bl	80073fc <__multadd>
 8007068:	4601      	mov	r1, r0
 800706a:	4604      	mov	r4, r0
 800706c:	4628      	mov	r0, r5
 800706e:	f000 fbe1 	bl	8007834 <__mcmp>
 8007072:	2800      	cmp	r0, #0
 8007074:	f73f adde 	bgt.w	8006c34 <_dtoa_r+0x434>
 8007078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707a:	f8dd 8000 	ldr.w	r8, [sp]
 800707e:	ea6f 0b03 	mvn.w	fp, r3
 8007082:	f04f 0900 	mov.w	r9, #0
 8007086:	4621      	mov	r1, r4
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f995 	bl	80073b8 <_Bfree>
 800708e:	2f00      	cmp	r7, #0
 8007090:	f43f aea7 	beq.w	8006de2 <_dtoa_r+0x5e2>
 8007094:	f1b9 0f00 	cmp.w	r9, #0
 8007098:	d005      	beq.n	80070a6 <_dtoa_r+0x8a6>
 800709a:	45b9      	cmp	r9, r7
 800709c:	d003      	beq.n	80070a6 <_dtoa_r+0x8a6>
 800709e:	4649      	mov	r1, r9
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f989 	bl	80073b8 <_Bfree>
 80070a6:	4639      	mov	r1, r7
 80070a8:	4630      	mov	r0, r6
 80070aa:	f000 f985 	bl	80073b8 <_Bfree>
 80070ae:	e698      	b.n	8006de2 <_dtoa_r+0x5e2>
 80070b0:	2400      	movs	r4, #0
 80070b2:	4627      	mov	r7, r4
 80070b4:	e7e0      	b.n	8007078 <_dtoa_r+0x878>
 80070b6:	46bb      	mov	fp, r7
 80070b8:	4604      	mov	r4, r0
 80070ba:	4607      	mov	r7, r0
 80070bc:	e5ba      	b.n	8006c34 <_dtoa_r+0x434>
 80070be:	9b08      	ldr	r3, [sp, #32]
 80070c0:	46ca      	mov	sl, r9
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8100 	beq.w	80072c8 <_dtoa_r+0xac8>
 80070c8:	f1b8 0f00 	cmp.w	r8, #0
 80070cc:	dd05      	ble.n	80070da <_dtoa_r+0x8da>
 80070ce:	4639      	mov	r1, r7
 80070d0:	4642      	mov	r2, r8
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 fb42 	bl	800775c <__lshift>
 80070d8:	4607      	mov	r7, r0
 80070da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d05d      	beq.n	800719c <_dtoa_r+0x99c>
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4630      	mov	r0, r6
 80070e4:	f000 f928 	bl	8007338 <_Balloc>
 80070e8:	4680      	mov	r8, r0
 80070ea:	b928      	cbnz	r0, 80070f8 <_dtoa_r+0x8f8>
 80070ec:	4b82      	ldr	r3, [pc, #520]	; (80072f8 <_dtoa_r+0xaf8>)
 80070ee:	4602      	mov	r2, r0
 80070f0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070f4:	f7ff bb9a 	b.w	800682c <_dtoa_r+0x2c>
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	3202      	adds	r2, #2
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	f107 010c 	add.w	r1, r7, #12
 8007102:	300c      	adds	r0, #12
 8007104:	f000 f90a 	bl	800731c <memcpy>
 8007108:	2201      	movs	r2, #1
 800710a:	4641      	mov	r1, r8
 800710c:	4630      	mov	r0, r6
 800710e:	f000 fb25 	bl	800775c <__lshift>
 8007112:	9b00      	ldr	r3, [sp, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	9305      	str	r3, [sp, #20]
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	4453      	add	r3, sl
 800711c:	9309      	str	r3, [sp, #36]	; 0x24
 800711e:	9b02      	ldr	r3, [sp, #8]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	46b9      	mov	r9, r7
 8007126:	9308      	str	r3, [sp, #32]
 8007128:	4607      	mov	r7, r0
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	4621      	mov	r1, r4
 800712e:	3b01      	subs	r3, #1
 8007130:	4628      	mov	r0, r5
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	f7ff fad6 	bl	80066e4 <quorem>
 8007138:	4603      	mov	r3, r0
 800713a:	3330      	adds	r3, #48	; 0x30
 800713c:	9006      	str	r0, [sp, #24]
 800713e:	4649      	mov	r1, r9
 8007140:	4628      	mov	r0, r5
 8007142:	930a      	str	r3, [sp, #40]	; 0x28
 8007144:	f000 fb76 	bl	8007834 <__mcmp>
 8007148:	463a      	mov	r2, r7
 800714a:	4682      	mov	sl, r0
 800714c:	4621      	mov	r1, r4
 800714e:	4630      	mov	r0, r6
 8007150:	f000 fb8c 	bl	800786c <__mdiff>
 8007154:	68c2      	ldr	r2, [r0, #12]
 8007156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007158:	4680      	mov	r8, r0
 800715a:	bb0a      	cbnz	r2, 80071a0 <_dtoa_r+0x9a0>
 800715c:	4601      	mov	r1, r0
 800715e:	4628      	mov	r0, r5
 8007160:	f000 fb68 	bl	8007834 <__mcmp>
 8007164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007166:	4602      	mov	r2, r0
 8007168:	4641      	mov	r1, r8
 800716a:	4630      	mov	r0, r6
 800716c:	920e      	str	r2, [sp, #56]	; 0x38
 800716e:	930a      	str	r3, [sp, #40]	; 0x28
 8007170:	f000 f922 	bl	80073b8 <_Bfree>
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007178:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800717c:	ea43 0102 	orr.w	r1, r3, r2
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	430b      	orrs	r3, r1
 8007184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007186:	d10d      	bne.n	80071a4 <_dtoa_r+0x9a4>
 8007188:	2b39      	cmp	r3, #57	; 0x39
 800718a:	d029      	beq.n	80071e0 <_dtoa_r+0x9e0>
 800718c:	f1ba 0f00 	cmp.w	sl, #0
 8007190:	dd01      	ble.n	8007196 <_dtoa_r+0x996>
 8007192:	9b06      	ldr	r3, [sp, #24]
 8007194:	3331      	adds	r3, #49	; 0x31
 8007196:	9a02      	ldr	r2, [sp, #8]
 8007198:	7013      	strb	r3, [r2, #0]
 800719a:	e774      	b.n	8007086 <_dtoa_r+0x886>
 800719c:	4638      	mov	r0, r7
 800719e:	e7b8      	b.n	8007112 <_dtoa_r+0x912>
 80071a0:	2201      	movs	r2, #1
 80071a2:	e7e1      	b.n	8007168 <_dtoa_r+0x968>
 80071a4:	f1ba 0f00 	cmp.w	sl, #0
 80071a8:	db06      	blt.n	80071b8 <_dtoa_r+0x9b8>
 80071aa:	9907      	ldr	r1, [sp, #28]
 80071ac:	ea41 0a0a 	orr.w	sl, r1, sl
 80071b0:	9908      	ldr	r1, [sp, #32]
 80071b2:	ea5a 0101 	orrs.w	r1, sl, r1
 80071b6:	d120      	bne.n	80071fa <_dtoa_r+0x9fa>
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	ddec      	ble.n	8007196 <_dtoa_r+0x996>
 80071bc:	4629      	mov	r1, r5
 80071be:	2201      	movs	r2, #1
 80071c0:	4630      	mov	r0, r6
 80071c2:	9305      	str	r3, [sp, #20]
 80071c4:	f000 faca 	bl	800775c <__lshift>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4605      	mov	r5, r0
 80071cc:	f000 fb32 	bl	8007834 <__mcmp>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	9b05      	ldr	r3, [sp, #20]
 80071d4:	dc02      	bgt.n	80071dc <_dtoa_r+0x9dc>
 80071d6:	d1de      	bne.n	8007196 <_dtoa_r+0x996>
 80071d8:	07da      	lsls	r2, r3, #31
 80071da:	d5dc      	bpl.n	8007196 <_dtoa_r+0x996>
 80071dc:	2b39      	cmp	r3, #57	; 0x39
 80071de:	d1d8      	bne.n	8007192 <_dtoa_r+0x992>
 80071e0:	9a02      	ldr	r2, [sp, #8]
 80071e2:	2339      	movs	r3, #57	; 0x39
 80071e4:	7013      	strb	r3, [r2, #0]
 80071e6:	4643      	mov	r3, r8
 80071e8:	4698      	mov	r8, r3
 80071ea:	3b01      	subs	r3, #1
 80071ec:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80071f0:	2a39      	cmp	r2, #57	; 0x39
 80071f2:	d051      	beq.n	8007298 <_dtoa_r+0xa98>
 80071f4:	3201      	adds	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	e745      	b.n	8007086 <_dtoa_r+0x886>
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	dd03      	ble.n	8007206 <_dtoa_r+0xa06>
 80071fe:	2b39      	cmp	r3, #57	; 0x39
 8007200:	d0ee      	beq.n	80071e0 <_dtoa_r+0x9e0>
 8007202:	3301      	adds	r3, #1
 8007204:	e7c7      	b.n	8007196 <_dtoa_r+0x996>
 8007206:	9a05      	ldr	r2, [sp, #20]
 8007208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800720e:	428a      	cmp	r2, r1
 8007210:	d02b      	beq.n	800726a <_dtoa_r+0xa6a>
 8007212:	4629      	mov	r1, r5
 8007214:	2300      	movs	r3, #0
 8007216:	220a      	movs	r2, #10
 8007218:	4630      	mov	r0, r6
 800721a:	f000 f8ef 	bl	80073fc <__multadd>
 800721e:	45b9      	cmp	r9, r7
 8007220:	4605      	mov	r5, r0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	f04f 020a 	mov.w	r2, #10
 800722a:	4649      	mov	r1, r9
 800722c:	4630      	mov	r0, r6
 800722e:	d107      	bne.n	8007240 <_dtoa_r+0xa40>
 8007230:	f000 f8e4 	bl	80073fc <__multadd>
 8007234:	4681      	mov	r9, r0
 8007236:	4607      	mov	r7, r0
 8007238:	9b05      	ldr	r3, [sp, #20]
 800723a:	3301      	adds	r3, #1
 800723c:	9305      	str	r3, [sp, #20]
 800723e:	e774      	b.n	800712a <_dtoa_r+0x92a>
 8007240:	f000 f8dc 	bl	80073fc <__multadd>
 8007244:	4639      	mov	r1, r7
 8007246:	4681      	mov	r9, r0
 8007248:	2300      	movs	r3, #0
 800724a:	220a      	movs	r2, #10
 800724c:	4630      	mov	r0, r6
 800724e:	f000 f8d5 	bl	80073fc <__multadd>
 8007252:	4607      	mov	r7, r0
 8007254:	e7f0      	b.n	8007238 <_dtoa_r+0xa38>
 8007256:	f1ba 0f00 	cmp.w	sl, #0
 800725a:	9a00      	ldr	r2, [sp, #0]
 800725c:	bfcc      	ite	gt
 800725e:	46d0      	movgt	r8, sl
 8007260:	f04f 0801 	movle.w	r8, #1
 8007264:	4490      	add	r8, r2
 8007266:	f04f 0900 	mov.w	r9, #0
 800726a:	4629      	mov	r1, r5
 800726c:	2201      	movs	r2, #1
 800726e:	4630      	mov	r0, r6
 8007270:	9302      	str	r3, [sp, #8]
 8007272:	f000 fa73 	bl	800775c <__lshift>
 8007276:	4621      	mov	r1, r4
 8007278:	4605      	mov	r5, r0
 800727a:	f000 fadb 	bl	8007834 <__mcmp>
 800727e:	2800      	cmp	r0, #0
 8007280:	dcb1      	bgt.n	80071e6 <_dtoa_r+0x9e6>
 8007282:	d102      	bne.n	800728a <_dtoa_r+0xa8a>
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	07db      	lsls	r3, r3, #31
 8007288:	d4ad      	bmi.n	80071e6 <_dtoa_r+0x9e6>
 800728a:	4643      	mov	r3, r8
 800728c:	4698      	mov	r8, r3
 800728e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007292:	2a30      	cmp	r2, #48	; 0x30
 8007294:	d0fa      	beq.n	800728c <_dtoa_r+0xa8c>
 8007296:	e6f6      	b.n	8007086 <_dtoa_r+0x886>
 8007298:	9a00      	ldr	r2, [sp, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d1a4      	bne.n	80071e8 <_dtoa_r+0x9e8>
 800729e:	f10b 0b01 	add.w	fp, fp, #1
 80072a2:	2331      	movs	r3, #49	; 0x31
 80072a4:	e778      	b.n	8007198 <_dtoa_r+0x998>
 80072a6:	4b15      	ldr	r3, [pc, #84]	; (80072fc <_dtoa_r+0xafc>)
 80072a8:	f7ff bb12 	b.w	80068d0 <_dtoa_r+0xd0>
 80072ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f47f aaee 	bne.w	8006890 <_dtoa_r+0x90>
 80072b4:	4b12      	ldr	r3, [pc, #72]	; (8007300 <_dtoa_r+0xb00>)
 80072b6:	f7ff bb0b 	b.w	80068d0 <_dtoa_r+0xd0>
 80072ba:	f1ba 0f00 	cmp.w	sl, #0
 80072be:	dc03      	bgt.n	80072c8 <_dtoa_r+0xac8>
 80072c0:	9b07      	ldr	r3, [sp, #28]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	f73f aec7 	bgt.w	8007056 <_dtoa_r+0x856>
 80072c8:	f8dd 8000 	ldr.w	r8, [sp]
 80072cc:	4621      	mov	r1, r4
 80072ce:	4628      	mov	r0, r5
 80072d0:	f7ff fa08 	bl	80066e4 <quorem>
 80072d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072d8:	f808 3b01 	strb.w	r3, [r8], #1
 80072dc:	9a00      	ldr	r2, [sp, #0]
 80072de:	eba8 0202 	sub.w	r2, r8, r2
 80072e2:	4592      	cmp	sl, r2
 80072e4:	ddb7      	ble.n	8007256 <_dtoa_r+0xa56>
 80072e6:	4629      	mov	r1, r5
 80072e8:	2300      	movs	r3, #0
 80072ea:	220a      	movs	r2, #10
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f885 	bl	80073fc <__multadd>
 80072f2:	4605      	mov	r5, r0
 80072f4:	e7ea      	b.n	80072cc <_dtoa_r+0xacc>
 80072f6:	bf00      	nop
 80072f8:	080087d3 	.word	0x080087d3
 80072fc:	0800872c 	.word	0x0800872c
 8007300:	08008750 	.word	0x08008750

08007304 <_localeconv_r>:
 8007304:	4800      	ldr	r0, [pc, #0]	; (8007308 <_localeconv_r+0x4>)
 8007306:	4770      	bx	lr
 8007308:	20000188 	.word	0x20000188

0800730c <malloc>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <malloc+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f000 bbef 	b.w	8007af4 <_malloc_r>
 8007316:	bf00      	nop
 8007318:	20000034 	.word	0x20000034

0800731c <memcpy>:
 800731c:	440a      	add	r2, r1
 800731e:	4291      	cmp	r1, r2
 8007320:	f100 33ff 	add.w	r3, r0, #4294967295
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	4770      	bx	lr
 8007328:	b510      	push	{r4, lr}
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007332:	4291      	cmp	r1, r2
 8007334:	d1f9      	bne.n	800732a <memcpy+0xe>
 8007336:	bd10      	pop	{r4, pc}

08007338 <_Balloc>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	b976      	cbnz	r6, 8007360 <_Balloc+0x28>
 8007342:	2010      	movs	r0, #16
 8007344:	f7ff ffe2 	bl	800730c <malloc>
 8007348:	4602      	mov	r2, r0
 800734a:	6260      	str	r0, [r4, #36]	; 0x24
 800734c:	b920      	cbnz	r0, 8007358 <_Balloc+0x20>
 800734e:	4b18      	ldr	r3, [pc, #96]	; (80073b0 <_Balloc+0x78>)
 8007350:	4818      	ldr	r0, [pc, #96]	; (80073b4 <_Balloc+0x7c>)
 8007352:	2166      	movs	r1, #102	; 0x66
 8007354:	f000 fc38 	bl	8007bc8 <__assert_func>
 8007358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800735c:	6006      	str	r6, [r0, #0]
 800735e:	60c6      	str	r6, [r0, #12]
 8007360:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007362:	68f3      	ldr	r3, [r6, #12]
 8007364:	b183      	cbz	r3, 8007388 <_Balloc+0x50>
 8007366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800736e:	b9b8      	cbnz	r0, 80073a0 <_Balloc+0x68>
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f605 	lsl.w	r6, r1, r5
 8007376:	1d72      	adds	r2, r6, #5
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fb5a 	bl	8007a34 <_calloc_r>
 8007380:	b160      	cbz	r0, 800739c <_Balloc+0x64>
 8007382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007386:	e00e      	b.n	80073a6 <_Balloc+0x6e>
 8007388:	2221      	movs	r2, #33	; 0x21
 800738a:	2104      	movs	r1, #4
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fb51 	bl	8007a34 <_calloc_r>
 8007392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007394:	60f0      	str	r0, [r6, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e4      	bne.n	8007366 <_Balloc+0x2e>
 800739c:	2000      	movs	r0, #0
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	6802      	ldr	r2, [r0, #0]
 80073a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073a6:	2300      	movs	r3, #0
 80073a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073ac:	e7f7      	b.n	800739e <_Balloc+0x66>
 80073ae:	bf00      	nop
 80073b0:	0800875d 	.word	0x0800875d
 80073b4:	080087e4 	.word	0x080087e4

080073b8 <_Bfree>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b976      	cbnz	r6, 80073e0 <_Bfree+0x28>
 80073c2:	2010      	movs	r0, #16
 80073c4:	f7ff ffa2 	bl	800730c <malloc>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6268      	str	r0, [r5, #36]	; 0x24
 80073cc:	b920      	cbnz	r0, 80073d8 <_Bfree+0x20>
 80073ce:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <_Bfree+0x3c>)
 80073d0:	4809      	ldr	r0, [pc, #36]	; (80073f8 <_Bfree+0x40>)
 80073d2:	218a      	movs	r1, #138	; 0x8a
 80073d4:	f000 fbf8 	bl	8007bc8 <__assert_func>
 80073d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073dc:	6006      	str	r6, [r0, #0]
 80073de:	60c6      	str	r6, [r0, #12]
 80073e0:	b13c      	cbz	r4, 80073f2 <_Bfree+0x3a>
 80073e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e4:	6862      	ldr	r2, [r4, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073ec:	6021      	str	r1, [r4, #0]
 80073ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	0800875d 	.word	0x0800875d
 80073f8:	080087e4 	.word	0x080087e4

080073fc <__multadd>:
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	690e      	ldr	r6, [r1, #16]
 8007402:	4607      	mov	r7, r0
 8007404:	4698      	mov	r8, r3
 8007406:	460c      	mov	r4, r1
 8007408:	f101 0014 	add.w	r0, r1, #20
 800740c:	2300      	movs	r3, #0
 800740e:	6805      	ldr	r5, [r0, #0]
 8007410:	b2a9      	uxth	r1, r5
 8007412:	fb02 8101 	mla	r1, r2, r1, r8
 8007416:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800741a:	0c2d      	lsrs	r5, r5, #16
 800741c:	fb02 c505 	mla	r5, r2, r5, ip
 8007420:	b289      	uxth	r1, r1
 8007422:	3301      	adds	r3, #1
 8007424:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007428:	429e      	cmp	r6, r3
 800742a:	f840 1b04 	str.w	r1, [r0], #4
 800742e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007432:	dcec      	bgt.n	800740e <__multadd+0x12>
 8007434:	f1b8 0f00 	cmp.w	r8, #0
 8007438:	d022      	beq.n	8007480 <__multadd+0x84>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	42b3      	cmp	r3, r6
 800743e:	dc19      	bgt.n	8007474 <__multadd+0x78>
 8007440:	6861      	ldr	r1, [r4, #4]
 8007442:	4638      	mov	r0, r7
 8007444:	3101      	adds	r1, #1
 8007446:	f7ff ff77 	bl	8007338 <_Balloc>
 800744a:	4605      	mov	r5, r0
 800744c:	b928      	cbnz	r0, 800745a <__multadd+0x5e>
 800744e:	4602      	mov	r2, r0
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <__multadd+0x8c>)
 8007452:	480e      	ldr	r0, [pc, #56]	; (800748c <__multadd+0x90>)
 8007454:	21b5      	movs	r1, #181	; 0xb5
 8007456:	f000 fbb7 	bl	8007bc8 <__assert_func>
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	3202      	adds	r2, #2
 800745e:	f104 010c 	add.w	r1, r4, #12
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f7ff ff59 	bl	800731c <memcpy>
 800746a:	4621      	mov	r1, r4
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff ffa3 	bl	80073b8 <_Bfree>
 8007472:	462c      	mov	r4, r5
 8007474:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007478:	3601      	adds	r6, #1
 800747a:	f8c3 8014 	str.w	r8, [r3, #20]
 800747e:	6126      	str	r6, [r4, #16]
 8007480:	4620      	mov	r0, r4
 8007482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007486:	bf00      	nop
 8007488:	080087d3 	.word	0x080087d3
 800748c:	080087e4 	.word	0x080087e4

08007490 <__hi0bits>:
 8007490:	0c03      	lsrs	r3, r0, #16
 8007492:	041b      	lsls	r3, r3, #16
 8007494:	b9d3      	cbnz	r3, 80074cc <__hi0bits+0x3c>
 8007496:	0400      	lsls	r0, r0, #16
 8007498:	2310      	movs	r3, #16
 800749a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800749e:	bf04      	itt	eq
 80074a0:	0200      	lsleq	r0, r0, #8
 80074a2:	3308      	addeq	r3, #8
 80074a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074a8:	bf04      	itt	eq
 80074aa:	0100      	lsleq	r0, r0, #4
 80074ac:	3304      	addeq	r3, #4
 80074ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074b2:	bf04      	itt	eq
 80074b4:	0080      	lsleq	r0, r0, #2
 80074b6:	3302      	addeq	r3, #2
 80074b8:	2800      	cmp	r0, #0
 80074ba:	db05      	blt.n	80074c8 <__hi0bits+0x38>
 80074bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074c0:	f103 0301 	add.w	r3, r3, #1
 80074c4:	bf08      	it	eq
 80074c6:	2320      	moveq	r3, #32
 80074c8:	4618      	mov	r0, r3
 80074ca:	4770      	bx	lr
 80074cc:	2300      	movs	r3, #0
 80074ce:	e7e4      	b.n	800749a <__hi0bits+0xa>

080074d0 <__lo0bits>:
 80074d0:	6803      	ldr	r3, [r0, #0]
 80074d2:	f013 0207 	ands.w	r2, r3, #7
 80074d6:	4601      	mov	r1, r0
 80074d8:	d00b      	beq.n	80074f2 <__lo0bits+0x22>
 80074da:	07da      	lsls	r2, r3, #31
 80074dc:	d424      	bmi.n	8007528 <__lo0bits+0x58>
 80074de:	0798      	lsls	r0, r3, #30
 80074e0:	bf49      	itett	mi
 80074e2:	085b      	lsrmi	r3, r3, #1
 80074e4:	089b      	lsrpl	r3, r3, #2
 80074e6:	2001      	movmi	r0, #1
 80074e8:	600b      	strmi	r3, [r1, #0]
 80074ea:	bf5c      	itt	pl
 80074ec:	600b      	strpl	r3, [r1, #0]
 80074ee:	2002      	movpl	r0, #2
 80074f0:	4770      	bx	lr
 80074f2:	b298      	uxth	r0, r3
 80074f4:	b9b0      	cbnz	r0, 8007524 <__lo0bits+0x54>
 80074f6:	0c1b      	lsrs	r3, r3, #16
 80074f8:	2010      	movs	r0, #16
 80074fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074fe:	bf04      	itt	eq
 8007500:	0a1b      	lsreq	r3, r3, #8
 8007502:	3008      	addeq	r0, #8
 8007504:	071a      	lsls	r2, r3, #28
 8007506:	bf04      	itt	eq
 8007508:	091b      	lsreq	r3, r3, #4
 800750a:	3004      	addeq	r0, #4
 800750c:	079a      	lsls	r2, r3, #30
 800750e:	bf04      	itt	eq
 8007510:	089b      	lsreq	r3, r3, #2
 8007512:	3002      	addeq	r0, #2
 8007514:	07da      	lsls	r2, r3, #31
 8007516:	d403      	bmi.n	8007520 <__lo0bits+0x50>
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f100 0001 	add.w	r0, r0, #1
 800751e:	d005      	beq.n	800752c <__lo0bits+0x5c>
 8007520:	600b      	str	r3, [r1, #0]
 8007522:	4770      	bx	lr
 8007524:	4610      	mov	r0, r2
 8007526:	e7e8      	b.n	80074fa <__lo0bits+0x2a>
 8007528:	2000      	movs	r0, #0
 800752a:	4770      	bx	lr
 800752c:	2020      	movs	r0, #32
 800752e:	4770      	bx	lr

08007530 <__i2b>:
 8007530:	b510      	push	{r4, lr}
 8007532:	460c      	mov	r4, r1
 8007534:	2101      	movs	r1, #1
 8007536:	f7ff feff 	bl	8007338 <_Balloc>
 800753a:	4602      	mov	r2, r0
 800753c:	b928      	cbnz	r0, 800754a <__i2b+0x1a>
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <__i2b+0x24>)
 8007540:	4805      	ldr	r0, [pc, #20]	; (8007558 <__i2b+0x28>)
 8007542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007546:	f000 fb3f 	bl	8007bc8 <__assert_func>
 800754a:	2301      	movs	r3, #1
 800754c:	6144      	str	r4, [r0, #20]
 800754e:	6103      	str	r3, [r0, #16]
 8007550:	bd10      	pop	{r4, pc}
 8007552:	bf00      	nop
 8007554:	080087d3 	.word	0x080087d3
 8007558:	080087e4 	.word	0x080087e4

0800755c <__multiply>:
 800755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	4614      	mov	r4, r2
 8007562:	690a      	ldr	r2, [r1, #16]
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	429a      	cmp	r2, r3
 8007568:	bfb8      	it	lt
 800756a:	460b      	movlt	r3, r1
 800756c:	460d      	mov	r5, r1
 800756e:	bfbc      	itt	lt
 8007570:	4625      	movlt	r5, r4
 8007572:	461c      	movlt	r4, r3
 8007574:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007578:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800757c:	68ab      	ldr	r3, [r5, #8]
 800757e:	6869      	ldr	r1, [r5, #4]
 8007580:	eb0a 0709 	add.w	r7, sl, r9
 8007584:	42bb      	cmp	r3, r7
 8007586:	b085      	sub	sp, #20
 8007588:	bfb8      	it	lt
 800758a:	3101      	addlt	r1, #1
 800758c:	f7ff fed4 	bl	8007338 <_Balloc>
 8007590:	b930      	cbnz	r0, 80075a0 <__multiply+0x44>
 8007592:	4602      	mov	r2, r0
 8007594:	4b42      	ldr	r3, [pc, #264]	; (80076a0 <__multiply+0x144>)
 8007596:	4843      	ldr	r0, [pc, #268]	; (80076a4 <__multiply+0x148>)
 8007598:	f240 115d 	movw	r1, #349	; 0x15d
 800759c:	f000 fb14 	bl	8007bc8 <__assert_func>
 80075a0:	f100 0614 	add.w	r6, r0, #20
 80075a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80075a8:	4633      	mov	r3, r6
 80075aa:	2200      	movs	r2, #0
 80075ac:	4543      	cmp	r3, r8
 80075ae:	d31e      	bcc.n	80075ee <__multiply+0x92>
 80075b0:	f105 0c14 	add.w	ip, r5, #20
 80075b4:	f104 0314 	add.w	r3, r4, #20
 80075b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80075bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	ebac 0205 	sub.w	r2, ip, r5
 80075c6:	3a15      	subs	r2, #21
 80075c8:	f022 0203 	bic.w	r2, r2, #3
 80075cc:	3204      	adds	r2, #4
 80075ce:	f105 0115 	add.w	r1, r5, #21
 80075d2:	458c      	cmp	ip, r1
 80075d4:	bf38      	it	cc
 80075d6:	2204      	movcc	r2, #4
 80075d8:	9201      	str	r2, [sp, #4]
 80075da:	9a02      	ldr	r2, [sp, #8]
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d808      	bhi.n	80075f4 <__multiply+0x98>
 80075e2:	2f00      	cmp	r7, #0
 80075e4:	dc55      	bgt.n	8007692 <__multiply+0x136>
 80075e6:	6107      	str	r7, [r0, #16]
 80075e8:	b005      	add	sp, #20
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	f843 2b04 	str.w	r2, [r3], #4
 80075f2:	e7db      	b.n	80075ac <__multiply+0x50>
 80075f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80075f8:	f1ba 0f00 	cmp.w	sl, #0
 80075fc:	d020      	beq.n	8007640 <__multiply+0xe4>
 80075fe:	f105 0e14 	add.w	lr, r5, #20
 8007602:	46b1      	mov	r9, r6
 8007604:	2200      	movs	r2, #0
 8007606:	f85e 4b04 	ldr.w	r4, [lr], #4
 800760a:	f8d9 b000 	ldr.w	fp, [r9]
 800760e:	b2a1      	uxth	r1, r4
 8007610:	fa1f fb8b 	uxth.w	fp, fp
 8007614:	fb0a b101 	mla	r1, sl, r1, fp
 8007618:	4411      	add	r1, r2
 800761a:	f8d9 2000 	ldr.w	r2, [r9]
 800761e:	0c24      	lsrs	r4, r4, #16
 8007620:	0c12      	lsrs	r2, r2, #16
 8007622:	fb0a 2404 	mla	r4, sl, r4, r2
 8007626:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800762a:	b289      	uxth	r1, r1
 800762c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007630:	45f4      	cmp	ip, lr
 8007632:	f849 1b04 	str.w	r1, [r9], #4
 8007636:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800763a:	d8e4      	bhi.n	8007606 <__multiply+0xaa>
 800763c:	9901      	ldr	r1, [sp, #4]
 800763e:	5072      	str	r2, [r6, r1]
 8007640:	9a03      	ldr	r2, [sp, #12]
 8007642:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007646:	3304      	adds	r3, #4
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	d01f      	beq.n	800768e <__multiply+0x132>
 800764e:	6834      	ldr	r4, [r6, #0]
 8007650:	f105 0114 	add.w	r1, r5, #20
 8007654:	46b6      	mov	lr, r6
 8007656:	f04f 0a00 	mov.w	sl, #0
 800765a:	880a      	ldrh	r2, [r1, #0]
 800765c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007660:	fb09 b202 	mla	r2, r9, r2, fp
 8007664:	4492      	add	sl, r2
 8007666:	b2a4      	uxth	r4, r4
 8007668:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800766c:	f84e 4b04 	str.w	r4, [lr], #4
 8007670:	f851 4b04 	ldr.w	r4, [r1], #4
 8007674:	f8be 2000 	ldrh.w	r2, [lr]
 8007678:	0c24      	lsrs	r4, r4, #16
 800767a:	fb09 2404 	mla	r4, r9, r4, r2
 800767e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007682:	458c      	cmp	ip, r1
 8007684:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007688:	d8e7      	bhi.n	800765a <__multiply+0xfe>
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	50b4      	str	r4, [r6, r2]
 800768e:	3604      	adds	r6, #4
 8007690:	e7a3      	b.n	80075da <__multiply+0x7e>
 8007692:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1a5      	bne.n	80075e6 <__multiply+0x8a>
 800769a:	3f01      	subs	r7, #1
 800769c:	e7a1      	b.n	80075e2 <__multiply+0x86>
 800769e:	bf00      	nop
 80076a0:	080087d3 	.word	0x080087d3
 80076a4:	080087e4 	.word	0x080087e4

080076a8 <__pow5mult>:
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ac:	4615      	mov	r5, r2
 80076ae:	f012 0203 	ands.w	r2, r2, #3
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	d007      	beq.n	80076c8 <__pow5mult+0x20>
 80076b8:	4c25      	ldr	r4, [pc, #148]	; (8007750 <__pow5mult+0xa8>)
 80076ba:	3a01      	subs	r2, #1
 80076bc:	2300      	movs	r3, #0
 80076be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076c2:	f7ff fe9b 	bl	80073fc <__multadd>
 80076c6:	4607      	mov	r7, r0
 80076c8:	10ad      	asrs	r5, r5, #2
 80076ca:	d03d      	beq.n	8007748 <__pow5mult+0xa0>
 80076cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ce:	b97c      	cbnz	r4, 80076f0 <__pow5mult+0x48>
 80076d0:	2010      	movs	r0, #16
 80076d2:	f7ff fe1b 	bl	800730c <malloc>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6270      	str	r0, [r6, #36]	; 0x24
 80076da:	b928      	cbnz	r0, 80076e8 <__pow5mult+0x40>
 80076dc:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <__pow5mult+0xac>)
 80076de:	481e      	ldr	r0, [pc, #120]	; (8007758 <__pow5mult+0xb0>)
 80076e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076e4:	f000 fa70 	bl	8007bc8 <__assert_func>
 80076e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076ec:	6004      	str	r4, [r0, #0]
 80076ee:	60c4      	str	r4, [r0, #12]
 80076f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076f8:	b94c      	cbnz	r4, 800770e <__pow5mult+0x66>
 80076fa:	f240 2171 	movw	r1, #625	; 0x271
 80076fe:	4630      	mov	r0, r6
 8007700:	f7ff ff16 	bl	8007530 <__i2b>
 8007704:	2300      	movs	r3, #0
 8007706:	f8c8 0008 	str.w	r0, [r8, #8]
 800770a:	4604      	mov	r4, r0
 800770c:	6003      	str	r3, [r0, #0]
 800770e:	f04f 0900 	mov.w	r9, #0
 8007712:	07eb      	lsls	r3, r5, #31
 8007714:	d50a      	bpl.n	800772c <__pow5mult+0x84>
 8007716:	4639      	mov	r1, r7
 8007718:	4622      	mov	r2, r4
 800771a:	4630      	mov	r0, r6
 800771c:	f7ff ff1e 	bl	800755c <__multiply>
 8007720:	4639      	mov	r1, r7
 8007722:	4680      	mov	r8, r0
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff fe47 	bl	80073b8 <_Bfree>
 800772a:	4647      	mov	r7, r8
 800772c:	106d      	asrs	r5, r5, #1
 800772e:	d00b      	beq.n	8007748 <__pow5mult+0xa0>
 8007730:	6820      	ldr	r0, [r4, #0]
 8007732:	b938      	cbnz	r0, 8007744 <__pow5mult+0x9c>
 8007734:	4622      	mov	r2, r4
 8007736:	4621      	mov	r1, r4
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff ff0f 	bl	800755c <__multiply>
 800773e:	6020      	str	r0, [r4, #0]
 8007740:	f8c0 9000 	str.w	r9, [r0]
 8007744:	4604      	mov	r4, r0
 8007746:	e7e4      	b.n	8007712 <__pow5mult+0x6a>
 8007748:	4638      	mov	r0, r7
 800774a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800774e:	bf00      	nop
 8007750:	08008938 	.word	0x08008938
 8007754:	0800875d 	.word	0x0800875d
 8007758:	080087e4 	.word	0x080087e4

0800775c <__lshift>:
 800775c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	460c      	mov	r4, r1
 8007762:	6849      	ldr	r1, [r1, #4]
 8007764:	6923      	ldr	r3, [r4, #16]
 8007766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800776a:	68a3      	ldr	r3, [r4, #8]
 800776c:	4607      	mov	r7, r0
 800776e:	4691      	mov	r9, r2
 8007770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007774:	f108 0601 	add.w	r6, r8, #1
 8007778:	42b3      	cmp	r3, r6
 800777a:	db0b      	blt.n	8007794 <__lshift+0x38>
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff fddb 	bl	8007338 <_Balloc>
 8007782:	4605      	mov	r5, r0
 8007784:	b948      	cbnz	r0, 800779a <__lshift+0x3e>
 8007786:	4602      	mov	r2, r0
 8007788:	4b28      	ldr	r3, [pc, #160]	; (800782c <__lshift+0xd0>)
 800778a:	4829      	ldr	r0, [pc, #164]	; (8007830 <__lshift+0xd4>)
 800778c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007790:	f000 fa1a 	bl	8007bc8 <__assert_func>
 8007794:	3101      	adds	r1, #1
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	e7ee      	b.n	8007778 <__lshift+0x1c>
 800779a:	2300      	movs	r3, #0
 800779c:	f100 0114 	add.w	r1, r0, #20
 80077a0:	f100 0210 	add.w	r2, r0, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	4553      	cmp	r3, sl
 80077a8:	db33      	blt.n	8007812 <__lshift+0xb6>
 80077aa:	6920      	ldr	r0, [r4, #16]
 80077ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077b0:	f104 0314 	add.w	r3, r4, #20
 80077b4:	f019 091f 	ands.w	r9, r9, #31
 80077b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077c0:	d02b      	beq.n	800781a <__lshift+0xbe>
 80077c2:	f1c9 0e20 	rsb	lr, r9, #32
 80077c6:	468a      	mov	sl, r1
 80077c8:	2200      	movs	r2, #0
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	fa00 f009 	lsl.w	r0, r0, r9
 80077d0:	4302      	orrs	r2, r0
 80077d2:	f84a 2b04 	str.w	r2, [sl], #4
 80077d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077da:	459c      	cmp	ip, r3
 80077dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80077e0:	d8f3      	bhi.n	80077ca <__lshift+0x6e>
 80077e2:	ebac 0304 	sub.w	r3, ip, r4
 80077e6:	3b15      	subs	r3, #21
 80077e8:	f023 0303 	bic.w	r3, r3, #3
 80077ec:	3304      	adds	r3, #4
 80077ee:	f104 0015 	add.w	r0, r4, #21
 80077f2:	4584      	cmp	ip, r0
 80077f4:	bf38      	it	cc
 80077f6:	2304      	movcc	r3, #4
 80077f8:	50ca      	str	r2, [r1, r3]
 80077fa:	b10a      	cbz	r2, 8007800 <__lshift+0xa4>
 80077fc:	f108 0602 	add.w	r6, r8, #2
 8007800:	3e01      	subs	r6, #1
 8007802:	4638      	mov	r0, r7
 8007804:	612e      	str	r6, [r5, #16]
 8007806:	4621      	mov	r1, r4
 8007808:	f7ff fdd6 	bl	80073b8 <_Bfree>
 800780c:	4628      	mov	r0, r5
 800780e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007812:	f842 0f04 	str.w	r0, [r2, #4]!
 8007816:	3301      	adds	r3, #1
 8007818:	e7c5      	b.n	80077a6 <__lshift+0x4a>
 800781a:	3904      	subs	r1, #4
 800781c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007820:	f841 2f04 	str.w	r2, [r1, #4]!
 8007824:	459c      	cmp	ip, r3
 8007826:	d8f9      	bhi.n	800781c <__lshift+0xc0>
 8007828:	e7ea      	b.n	8007800 <__lshift+0xa4>
 800782a:	bf00      	nop
 800782c:	080087d3 	.word	0x080087d3
 8007830:	080087e4 	.word	0x080087e4

08007834 <__mcmp>:
 8007834:	b530      	push	{r4, r5, lr}
 8007836:	6902      	ldr	r2, [r0, #16]
 8007838:	690c      	ldr	r4, [r1, #16]
 800783a:	1b12      	subs	r2, r2, r4
 800783c:	d10e      	bne.n	800785c <__mcmp+0x28>
 800783e:	f100 0314 	add.w	r3, r0, #20
 8007842:	3114      	adds	r1, #20
 8007844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800784c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007854:	42a5      	cmp	r5, r4
 8007856:	d003      	beq.n	8007860 <__mcmp+0x2c>
 8007858:	d305      	bcc.n	8007866 <__mcmp+0x32>
 800785a:	2201      	movs	r2, #1
 800785c:	4610      	mov	r0, r2
 800785e:	bd30      	pop	{r4, r5, pc}
 8007860:	4283      	cmp	r3, r0
 8007862:	d3f3      	bcc.n	800784c <__mcmp+0x18>
 8007864:	e7fa      	b.n	800785c <__mcmp+0x28>
 8007866:	f04f 32ff 	mov.w	r2, #4294967295
 800786a:	e7f7      	b.n	800785c <__mcmp+0x28>

0800786c <__mdiff>:
 800786c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	460c      	mov	r4, r1
 8007872:	4606      	mov	r6, r0
 8007874:	4611      	mov	r1, r2
 8007876:	4620      	mov	r0, r4
 8007878:	4617      	mov	r7, r2
 800787a:	f7ff ffdb 	bl	8007834 <__mcmp>
 800787e:	1e05      	subs	r5, r0, #0
 8007880:	d110      	bne.n	80078a4 <__mdiff+0x38>
 8007882:	4629      	mov	r1, r5
 8007884:	4630      	mov	r0, r6
 8007886:	f7ff fd57 	bl	8007338 <_Balloc>
 800788a:	b930      	cbnz	r0, 800789a <__mdiff+0x2e>
 800788c:	4b39      	ldr	r3, [pc, #228]	; (8007974 <__mdiff+0x108>)
 800788e:	4602      	mov	r2, r0
 8007890:	f240 2132 	movw	r1, #562	; 0x232
 8007894:	4838      	ldr	r0, [pc, #224]	; (8007978 <__mdiff+0x10c>)
 8007896:	f000 f997 	bl	8007bc8 <__assert_func>
 800789a:	2301      	movs	r3, #1
 800789c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a4:	bfa4      	itt	ge
 80078a6:	463b      	movge	r3, r7
 80078a8:	4627      	movge	r7, r4
 80078aa:	4630      	mov	r0, r6
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	bfa6      	itte	ge
 80078b0:	461c      	movge	r4, r3
 80078b2:	2500      	movge	r5, #0
 80078b4:	2501      	movlt	r5, #1
 80078b6:	f7ff fd3f 	bl	8007338 <_Balloc>
 80078ba:	b920      	cbnz	r0, 80078c6 <__mdiff+0x5a>
 80078bc:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <__mdiff+0x108>)
 80078be:	4602      	mov	r2, r0
 80078c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078c4:	e7e6      	b.n	8007894 <__mdiff+0x28>
 80078c6:	693e      	ldr	r6, [r7, #16]
 80078c8:	60c5      	str	r5, [r0, #12]
 80078ca:	6925      	ldr	r5, [r4, #16]
 80078cc:	f107 0114 	add.w	r1, r7, #20
 80078d0:	f104 0914 	add.w	r9, r4, #20
 80078d4:	f100 0e14 	add.w	lr, r0, #20
 80078d8:	f107 0210 	add.w	r2, r7, #16
 80078dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80078e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80078e4:	46f2      	mov	sl, lr
 80078e6:	2700      	movs	r7, #0
 80078e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078f0:	fa1f f883 	uxth.w	r8, r3
 80078f4:	fa17 f78b 	uxtah	r7, r7, fp
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	eba7 0808 	sub.w	r8, r7, r8
 80078fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007902:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007906:	fa1f f888 	uxth.w	r8, r8
 800790a:	141f      	asrs	r7, r3, #16
 800790c:	454d      	cmp	r5, r9
 800790e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007912:	f84a 3b04 	str.w	r3, [sl], #4
 8007916:	d8e7      	bhi.n	80078e8 <__mdiff+0x7c>
 8007918:	1b2b      	subs	r3, r5, r4
 800791a:	3b15      	subs	r3, #21
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	3304      	adds	r3, #4
 8007922:	3415      	adds	r4, #21
 8007924:	42a5      	cmp	r5, r4
 8007926:	bf38      	it	cc
 8007928:	2304      	movcc	r3, #4
 800792a:	4419      	add	r1, r3
 800792c:	4473      	add	r3, lr
 800792e:	469e      	mov	lr, r3
 8007930:	460d      	mov	r5, r1
 8007932:	4565      	cmp	r5, ip
 8007934:	d30e      	bcc.n	8007954 <__mdiff+0xe8>
 8007936:	f10c 0203 	add.w	r2, ip, #3
 800793a:	1a52      	subs	r2, r2, r1
 800793c:	f022 0203 	bic.w	r2, r2, #3
 8007940:	3903      	subs	r1, #3
 8007942:	458c      	cmp	ip, r1
 8007944:	bf38      	it	cc
 8007946:	2200      	movcc	r2, #0
 8007948:	441a      	add	r2, r3
 800794a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800794e:	b17b      	cbz	r3, 8007970 <__mdiff+0x104>
 8007950:	6106      	str	r6, [r0, #16]
 8007952:	e7a5      	b.n	80078a0 <__mdiff+0x34>
 8007954:	f855 8b04 	ldr.w	r8, [r5], #4
 8007958:	fa17 f488 	uxtah	r4, r7, r8
 800795c:	1422      	asrs	r2, r4, #16
 800795e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007962:	b2a4      	uxth	r4, r4
 8007964:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007968:	f84e 4b04 	str.w	r4, [lr], #4
 800796c:	1417      	asrs	r7, r2, #16
 800796e:	e7e0      	b.n	8007932 <__mdiff+0xc6>
 8007970:	3e01      	subs	r6, #1
 8007972:	e7ea      	b.n	800794a <__mdiff+0xde>
 8007974:	080087d3 	.word	0x080087d3
 8007978:	080087e4 	.word	0x080087e4

0800797c <__d2b>:
 800797c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007980:	4689      	mov	r9, r1
 8007982:	2101      	movs	r1, #1
 8007984:	ec57 6b10 	vmov	r6, r7, d0
 8007988:	4690      	mov	r8, r2
 800798a:	f7ff fcd5 	bl	8007338 <_Balloc>
 800798e:	4604      	mov	r4, r0
 8007990:	b930      	cbnz	r0, 80079a0 <__d2b+0x24>
 8007992:	4602      	mov	r2, r0
 8007994:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <__d2b+0xb0>)
 8007996:	4826      	ldr	r0, [pc, #152]	; (8007a30 <__d2b+0xb4>)
 8007998:	f240 310a 	movw	r1, #778	; 0x30a
 800799c:	f000 f914 	bl	8007bc8 <__assert_func>
 80079a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80079a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079a8:	bb35      	cbnz	r5, 80079f8 <__d2b+0x7c>
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	d028      	beq.n	8007a02 <__d2b+0x86>
 80079b0:	4668      	mov	r0, sp
 80079b2:	9600      	str	r6, [sp, #0]
 80079b4:	f7ff fd8c 	bl	80074d0 <__lo0bits>
 80079b8:	9900      	ldr	r1, [sp, #0]
 80079ba:	b300      	cbz	r0, 80079fe <__d2b+0x82>
 80079bc:	9a01      	ldr	r2, [sp, #4]
 80079be:	f1c0 0320 	rsb	r3, r0, #32
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	430b      	orrs	r3, r1
 80079c8:	40c2      	lsrs	r2, r0
 80079ca:	6163      	str	r3, [r4, #20]
 80079cc:	9201      	str	r2, [sp, #4]
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	61a3      	str	r3, [r4, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	bf14      	ite	ne
 80079d6:	2202      	movne	r2, #2
 80079d8:	2201      	moveq	r2, #1
 80079da:	6122      	str	r2, [r4, #16]
 80079dc:	b1d5      	cbz	r5, 8007a14 <__d2b+0x98>
 80079de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079e2:	4405      	add	r5, r0
 80079e4:	f8c9 5000 	str.w	r5, [r9]
 80079e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079ec:	f8c8 0000 	str.w	r0, [r8]
 80079f0:	4620      	mov	r0, r4
 80079f2:	b003      	add	sp, #12
 80079f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079fc:	e7d5      	b.n	80079aa <__d2b+0x2e>
 80079fe:	6161      	str	r1, [r4, #20]
 8007a00:	e7e5      	b.n	80079ce <__d2b+0x52>
 8007a02:	a801      	add	r0, sp, #4
 8007a04:	f7ff fd64 	bl	80074d0 <__lo0bits>
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	6163      	str	r3, [r4, #20]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	6122      	str	r2, [r4, #16]
 8007a10:	3020      	adds	r0, #32
 8007a12:	e7e3      	b.n	80079dc <__d2b+0x60>
 8007a14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a1c:	f8c9 0000 	str.w	r0, [r9]
 8007a20:	6918      	ldr	r0, [r3, #16]
 8007a22:	f7ff fd35 	bl	8007490 <__hi0bits>
 8007a26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a2a:	e7df      	b.n	80079ec <__d2b+0x70>
 8007a2c:	080087d3 	.word	0x080087d3
 8007a30:	080087e4 	.word	0x080087e4

08007a34 <_calloc_r>:
 8007a34:	b513      	push	{r0, r1, r4, lr}
 8007a36:	434a      	muls	r2, r1
 8007a38:	4611      	mov	r1, r2
 8007a3a:	9201      	str	r2, [sp, #4]
 8007a3c:	f000 f85a 	bl	8007af4 <_malloc_r>
 8007a40:	4604      	mov	r4, r0
 8007a42:	b118      	cbz	r0, 8007a4c <_calloc_r+0x18>
 8007a44:	9a01      	ldr	r2, [sp, #4]
 8007a46:	2100      	movs	r1, #0
 8007a48:	f7fe fa02 	bl	8005e50 <memset>
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	b002      	add	sp, #8
 8007a50:	bd10      	pop	{r4, pc}
	...

08007a54 <_free_r>:
 8007a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a56:	2900      	cmp	r1, #0
 8007a58:	d048      	beq.n	8007aec <_free_r+0x98>
 8007a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5e:	9001      	str	r0, [sp, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f1a1 0404 	sub.w	r4, r1, #4
 8007a66:	bfb8      	it	lt
 8007a68:	18e4      	addlt	r4, r4, r3
 8007a6a:	f000 f8ef 	bl	8007c4c <__malloc_lock>
 8007a6e:	4a20      	ldr	r2, [pc, #128]	; (8007af0 <_free_r+0x9c>)
 8007a70:	9801      	ldr	r0, [sp, #4]
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	4615      	mov	r5, r2
 8007a76:	b933      	cbnz	r3, 8007a86 <_free_r+0x32>
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	6014      	str	r4, [r2, #0]
 8007a7c:	b003      	add	sp, #12
 8007a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a82:	f000 b8e9 	b.w	8007c58 <__malloc_unlock>
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	d90b      	bls.n	8007aa2 <_free_r+0x4e>
 8007a8a:	6821      	ldr	r1, [r4, #0]
 8007a8c:	1862      	adds	r2, r4, r1
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bf04      	itt	eq
 8007a92:	681a      	ldreq	r2, [r3, #0]
 8007a94:	685b      	ldreq	r3, [r3, #4]
 8007a96:	6063      	str	r3, [r4, #4]
 8007a98:	bf04      	itt	eq
 8007a9a:	1852      	addeq	r2, r2, r1
 8007a9c:	6022      	streq	r2, [r4, #0]
 8007a9e:	602c      	str	r4, [r5, #0]
 8007aa0:	e7ec      	b.n	8007a7c <_free_r+0x28>
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	b10b      	cbz	r3, 8007aac <_free_r+0x58>
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d9fa      	bls.n	8007aa2 <_free_r+0x4e>
 8007aac:	6811      	ldr	r1, [r2, #0]
 8007aae:	1855      	adds	r5, r2, r1
 8007ab0:	42a5      	cmp	r5, r4
 8007ab2:	d10b      	bne.n	8007acc <_free_r+0x78>
 8007ab4:	6824      	ldr	r4, [r4, #0]
 8007ab6:	4421      	add	r1, r4
 8007ab8:	1854      	adds	r4, r2, r1
 8007aba:	42a3      	cmp	r3, r4
 8007abc:	6011      	str	r1, [r2, #0]
 8007abe:	d1dd      	bne.n	8007a7c <_free_r+0x28>
 8007ac0:	681c      	ldr	r4, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	6053      	str	r3, [r2, #4]
 8007ac6:	4421      	add	r1, r4
 8007ac8:	6011      	str	r1, [r2, #0]
 8007aca:	e7d7      	b.n	8007a7c <_free_r+0x28>
 8007acc:	d902      	bls.n	8007ad4 <_free_r+0x80>
 8007ace:	230c      	movs	r3, #12
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	e7d3      	b.n	8007a7c <_free_r+0x28>
 8007ad4:	6825      	ldr	r5, [r4, #0]
 8007ad6:	1961      	adds	r1, r4, r5
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	bf04      	itt	eq
 8007adc:	6819      	ldreq	r1, [r3, #0]
 8007ade:	685b      	ldreq	r3, [r3, #4]
 8007ae0:	6063      	str	r3, [r4, #4]
 8007ae2:	bf04      	itt	eq
 8007ae4:	1949      	addeq	r1, r1, r5
 8007ae6:	6021      	streq	r1, [r4, #0]
 8007ae8:	6054      	str	r4, [r2, #4]
 8007aea:	e7c7      	b.n	8007a7c <_free_r+0x28>
 8007aec:	b003      	add	sp, #12
 8007aee:	bd30      	pop	{r4, r5, pc}
 8007af0:	2000022c 	.word	0x2000022c

08007af4 <_malloc_r>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	1ccd      	adds	r5, r1, #3
 8007af8:	f025 0503 	bic.w	r5, r5, #3
 8007afc:	3508      	adds	r5, #8
 8007afe:	2d0c      	cmp	r5, #12
 8007b00:	bf38      	it	cc
 8007b02:	250c      	movcc	r5, #12
 8007b04:	2d00      	cmp	r5, #0
 8007b06:	4606      	mov	r6, r0
 8007b08:	db01      	blt.n	8007b0e <_malloc_r+0x1a>
 8007b0a:	42a9      	cmp	r1, r5
 8007b0c:	d903      	bls.n	8007b16 <_malloc_r+0x22>
 8007b0e:	230c      	movs	r3, #12
 8007b10:	6033      	str	r3, [r6, #0]
 8007b12:	2000      	movs	r0, #0
 8007b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b16:	f000 f899 	bl	8007c4c <__malloc_lock>
 8007b1a:	4921      	ldr	r1, [pc, #132]	; (8007ba0 <_malloc_r+0xac>)
 8007b1c:	680a      	ldr	r2, [r1, #0]
 8007b1e:	4614      	mov	r4, r2
 8007b20:	b99c      	cbnz	r4, 8007b4a <_malloc_r+0x56>
 8007b22:	4f20      	ldr	r7, [pc, #128]	; (8007ba4 <_malloc_r+0xb0>)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	b923      	cbnz	r3, 8007b32 <_malloc_r+0x3e>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f000 f83c 	bl	8007ba8 <_sbrk_r>
 8007b30:	6038      	str	r0, [r7, #0]
 8007b32:	4629      	mov	r1, r5
 8007b34:	4630      	mov	r0, r6
 8007b36:	f000 f837 	bl	8007ba8 <_sbrk_r>
 8007b3a:	1c43      	adds	r3, r0, #1
 8007b3c:	d123      	bne.n	8007b86 <_malloc_r+0x92>
 8007b3e:	230c      	movs	r3, #12
 8007b40:	6033      	str	r3, [r6, #0]
 8007b42:	4630      	mov	r0, r6
 8007b44:	f000 f888 	bl	8007c58 <__malloc_unlock>
 8007b48:	e7e3      	b.n	8007b12 <_malloc_r+0x1e>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	1b5b      	subs	r3, r3, r5
 8007b4e:	d417      	bmi.n	8007b80 <_malloc_r+0x8c>
 8007b50:	2b0b      	cmp	r3, #11
 8007b52:	d903      	bls.n	8007b5c <_malloc_r+0x68>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	441c      	add	r4, r3
 8007b58:	6025      	str	r5, [r4, #0]
 8007b5a:	e004      	b.n	8007b66 <_malloc_r+0x72>
 8007b5c:	6863      	ldr	r3, [r4, #4]
 8007b5e:	42a2      	cmp	r2, r4
 8007b60:	bf0c      	ite	eq
 8007b62:	600b      	streq	r3, [r1, #0]
 8007b64:	6053      	strne	r3, [r2, #4]
 8007b66:	4630      	mov	r0, r6
 8007b68:	f000 f876 	bl	8007c58 <__malloc_unlock>
 8007b6c:	f104 000b 	add.w	r0, r4, #11
 8007b70:	1d23      	adds	r3, r4, #4
 8007b72:	f020 0007 	bic.w	r0, r0, #7
 8007b76:	1ac2      	subs	r2, r0, r3
 8007b78:	d0cc      	beq.n	8007b14 <_malloc_r+0x20>
 8007b7a:	1a1b      	subs	r3, r3, r0
 8007b7c:	50a3      	str	r3, [r4, r2]
 8007b7e:	e7c9      	b.n	8007b14 <_malloc_r+0x20>
 8007b80:	4622      	mov	r2, r4
 8007b82:	6864      	ldr	r4, [r4, #4]
 8007b84:	e7cc      	b.n	8007b20 <_malloc_r+0x2c>
 8007b86:	1cc4      	adds	r4, r0, #3
 8007b88:	f024 0403 	bic.w	r4, r4, #3
 8007b8c:	42a0      	cmp	r0, r4
 8007b8e:	d0e3      	beq.n	8007b58 <_malloc_r+0x64>
 8007b90:	1a21      	subs	r1, r4, r0
 8007b92:	4630      	mov	r0, r6
 8007b94:	f000 f808 	bl	8007ba8 <_sbrk_r>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d1dd      	bne.n	8007b58 <_malloc_r+0x64>
 8007b9c:	e7cf      	b.n	8007b3e <_malloc_r+0x4a>
 8007b9e:	bf00      	nop
 8007ba0:	2000022c 	.word	0x2000022c
 8007ba4:	20000230 	.word	0x20000230

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	; (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 f8c8 	bl	8000d48 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	2000047c 	.word	0x2000047c

08007bc8 <__assert_func>:
 8007bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bca:	4614      	mov	r4, r2
 8007bcc:	461a      	mov	r2, r3
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <__assert_func+0x2c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	68d8      	ldr	r0, [r3, #12]
 8007bd6:	b14c      	cbz	r4, 8007bec <__assert_func+0x24>
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <__assert_func+0x30>)
 8007bda:	9100      	str	r1, [sp, #0]
 8007bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be0:	4906      	ldr	r1, [pc, #24]	; (8007bfc <__assert_func+0x34>)
 8007be2:	462b      	mov	r3, r5
 8007be4:	f000 f80e 	bl	8007c04 <fiprintf>
 8007be8:	f000 fa64 	bl	80080b4 <abort>
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <__assert_func+0x38>)
 8007bee:	461c      	mov	r4, r3
 8007bf0:	e7f3      	b.n	8007bda <__assert_func+0x12>
 8007bf2:	bf00      	nop
 8007bf4:	20000034 	.word	0x20000034
 8007bf8:	08008944 	.word	0x08008944
 8007bfc:	08008951 	.word	0x08008951
 8007c00:	0800897f 	.word	0x0800897f

08007c04 <fiprintf>:
 8007c04:	b40e      	push	{r1, r2, r3}
 8007c06:	b503      	push	{r0, r1, lr}
 8007c08:	4601      	mov	r1, r0
 8007c0a:	ab03      	add	r3, sp, #12
 8007c0c:	4805      	ldr	r0, [pc, #20]	; (8007c24 <fiprintf+0x20>)
 8007c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c12:	6800      	ldr	r0, [r0, #0]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	f000 f84f 	bl	8007cb8 <_vfiprintf_r>
 8007c1a:	b002      	add	sp, #8
 8007c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c20:	b003      	add	sp, #12
 8007c22:	4770      	bx	lr
 8007c24:	20000034 	.word	0x20000034

08007c28 <__ascii_mbtowc>:
 8007c28:	b082      	sub	sp, #8
 8007c2a:	b901      	cbnz	r1, 8007c2e <__ascii_mbtowc+0x6>
 8007c2c:	a901      	add	r1, sp, #4
 8007c2e:	b142      	cbz	r2, 8007c42 <__ascii_mbtowc+0x1a>
 8007c30:	b14b      	cbz	r3, 8007c46 <__ascii_mbtowc+0x1e>
 8007c32:	7813      	ldrb	r3, [r2, #0]
 8007c34:	600b      	str	r3, [r1, #0]
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	1e10      	subs	r0, r2, #0
 8007c3a:	bf18      	it	ne
 8007c3c:	2001      	movne	r0, #1
 8007c3e:	b002      	add	sp, #8
 8007c40:	4770      	bx	lr
 8007c42:	4610      	mov	r0, r2
 8007c44:	e7fb      	b.n	8007c3e <__ascii_mbtowc+0x16>
 8007c46:	f06f 0001 	mvn.w	r0, #1
 8007c4a:	e7f8      	b.n	8007c3e <__ascii_mbtowc+0x16>

08007c4c <__malloc_lock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__malloc_lock+0x8>)
 8007c4e:	f000 bbf1 	b.w	8008434 <__retarget_lock_acquire_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000484 	.word	0x20000484

08007c58 <__malloc_unlock>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__malloc_unlock+0x8>)
 8007c5a:	f000 bbec 	b.w	8008436 <__retarget_lock_release_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20000484 	.word	0x20000484

08007c64 <__sfputc_r>:
 8007c64:	6893      	ldr	r3, [r2, #8]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	b410      	push	{r4}
 8007c6c:	6093      	str	r3, [r2, #8]
 8007c6e:	da08      	bge.n	8007c82 <__sfputc_r+0x1e>
 8007c70:	6994      	ldr	r4, [r2, #24]
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	db01      	blt.n	8007c7a <__sfputc_r+0x16>
 8007c76:	290a      	cmp	r1, #10
 8007c78:	d103      	bne.n	8007c82 <__sfputc_r+0x1e>
 8007c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c7e:	f000 b94b 	b.w	8007f18 <__swbuf_r>
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	1c58      	adds	r0, r3, #1
 8007c86:	6010      	str	r0, [r2, #0]
 8007c88:	7019      	strb	r1, [r3, #0]
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <__sfputs_r>:
 8007c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c94:	4606      	mov	r6, r0
 8007c96:	460f      	mov	r7, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	18d5      	adds	r5, r2, r3
 8007c9c:	42ac      	cmp	r4, r5
 8007c9e:	d101      	bne.n	8007ca4 <__sfputs_r+0x12>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e007      	b.n	8007cb4 <__sfputs_r+0x22>
 8007ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca8:	463a      	mov	r2, r7
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ffda 	bl	8007c64 <__sfputc_r>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d1f3      	bne.n	8007c9c <__sfputs_r+0xa>
 8007cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cb8 <_vfiprintf_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	b09d      	sub	sp, #116	; 0x74
 8007cc0:	4614      	mov	r4, r2
 8007cc2:	4698      	mov	r8, r3
 8007cc4:	4606      	mov	r6, r0
 8007cc6:	b118      	cbz	r0, 8007cd0 <_vfiprintf_r+0x18>
 8007cc8:	6983      	ldr	r3, [r0, #24]
 8007cca:	b90b      	cbnz	r3, 8007cd0 <_vfiprintf_r+0x18>
 8007ccc:	f000 fb14 	bl	80082f8 <__sinit>
 8007cd0:	4b89      	ldr	r3, [pc, #548]	; (8007ef8 <_vfiprintf_r+0x240>)
 8007cd2:	429d      	cmp	r5, r3
 8007cd4:	d11b      	bne.n	8007d0e <_vfiprintf_r+0x56>
 8007cd6:	6875      	ldr	r5, [r6, #4]
 8007cd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cda:	07d9      	lsls	r1, r3, #31
 8007cdc:	d405      	bmi.n	8007cea <_vfiprintf_r+0x32>
 8007cde:	89ab      	ldrh	r3, [r5, #12]
 8007ce0:	059a      	lsls	r2, r3, #22
 8007ce2:	d402      	bmi.n	8007cea <_vfiprintf_r+0x32>
 8007ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ce6:	f000 fba5 	bl	8008434 <__retarget_lock_acquire_recursive>
 8007cea:	89ab      	ldrh	r3, [r5, #12]
 8007cec:	071b      	lsls	r3, r3, #28
 8007cee:	d501      	bpl.n	8007cf4 <_vfiprintf_r+0x3c>
 8007cf0:	692b      	ldr	r3, [r5, #16]
 8007cf2:	b9eb      	cbnz	r3, 8007d30 <_vfiprintf_r+0x78>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 f96e 	bl	8007fd8 <__swsetup_r>
 8007cfc:	b1c0      	cbz	r0, 8007d30 <_vfiprintf_r+0x78>
 8007cfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d00:	07dc      	lsls	r4, r3, #31
 8007d02:	d50e      	bpl.n	8007d22 <_vfiprintf_r+0x6a>
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	b01d      	add	sp, #116	; 0x74
 8007d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0e:	4b7b      	ldr	r3, [pc, #492]	; (8007efc <_vfiprintf_r+0x244>)
 8007d10:	429d      	cmp	r5, r3
 8007d12:	d101      	bne.n	8007d18 <_vfiprintf_r+0x60>
 8007d14:	68b5      	ldr	r5, [r6, #8]
 8007d16:	e7df      	b.n	8007cd8 <_vfiprintf_r+0x20>
 8007d18:	4b79      	ldr	r3, [pc, #484]	; (8007f00 <_vfiprintf_r+0x248>)
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	bf08      	it	eq
 8007d1e:	68f5      	ldreq	r5, [r6, #12]
 8007d20:	e7da      	b.n	8007cd8 <_vfiprintf_r+0x20>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	0598      	lsls	r0, r3, #22
 8007d26:	d4ed      	bmi.n	8007d04 <_vfiprintf_r+0x4c>
 8007d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2a:	f000 fb84 	bl	8008436 <__retarget_lock_release_recursive>
 8007d2e:	e7e9      	b.n	8007d04 <_vfiprintf_r+0x4c>
 8007d30:	2300      	movs	r3, #0
 8007d32:	9309      	str	r3, [sp, #36]	; 0x24
 8007d34:	2320      	movs	r3, #32
 8007d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d3e:	2330      	movs	r3, #48	; 0x30
 8007d40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f04 <_vfiprintf_r+0x24c>
 8007d44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d48:	f04f 0901 	mov.w	r9, #1
 8007d4c:	4623      	mov	r3, r4
 8007d4e:	469a      	mov	sl, r3
 8007d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d54:	b10a      	cbz	r2, 8007d5a <_vfiprintf_r+0xa2>
 8007d56:	2a25      	cmp	r2, #37	; 0x25
 8007d58:	d1f9      	bne.n	8007d4e <_vfiprintf_r+0x96>
 8007d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d5e:	d00b      	beq.n	8007d78 <_vfiprintf_r+0xc0>
 8007d60:	465b      	mov	r3, fp
 8007d62:	4622      	mov	r2, r4
 8007d64:	4629      	mov	r1, r5
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7ff ff93 	bl	8007c92 <__sfputs_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	f000 80aa 	beq.w	8007ec6 <_vfiprintf_r+0x20e>
 8007d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d74:	445a      	add	r2, fp
 8007d76:	9209      	str	r2, [sp, #36]	; 0x24
 8007d78:	f89a 3000 	ldrb.w	r3, [sl]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80a2 	beq.w	8007ec6 <_vfiprintf_r+0x20e>
 8007d82:	2300      	movs	r3, #0
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295
 8007d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d8c:	f10a 0a01 	add.w	sl, sl, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d98:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9a:	4654      	mov	r4, sl
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da2:	4858      	ldr	r0, [pc, #352]	; (8007f04 <_vfiprintf_r+0x24c>)
 8007da4:	f7f8 fa54 	bl	8000250 <memchr>
 8007da8:	9a04      	ldr	r2, [sp, #16]
 8007daa:	b9d8      	cbnz	r0, 8007de4 <_vfiprintf_r+0x12c>
 8007dac:	06d1      	lsls	r1, r2, #27
 8007dae:	bf44      	itt	mi
 8007db0:	2320      	movmi	r3, #32
 8007db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db6:	0713      	lsls	r3, r2, #28
 8007db8:	bf44      	itt	mi
 8007dba:	232b      	movmi	r3, #43	; 0x2b
 8007dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc6:	d015      	beq.n	8007df4 <_vfiprintf_r+0x13c>
 8007dc8:	9a07      	ldr	r2, [sp, #28]
 8007dca:	4654      	mov	r4, sl
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f04f 0c0a 	mov.w	ip, #10
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd8:	3b30      	subs	r3, #48	; 0x30
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d94e      	bls.n	8007e7c <_vfiprintf_r+0x1c4>
 8007dde:	b1b0      	cbz	r0, 8007e0e <_vfiprintf_r+0x156>
 8007de0:	9207      	str	r2, [sp, #28]
 8007de2:	e014      	b.n	8007e0e <_vfiprintf_r+0x156>
 8007de4:	eba0 0308 	sub.w	r3, r0, r8
 8007de8:	fa09 f303 	lsl.w	r3, r9, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	46a2      	mov	sl, r4
 8007df2:	e7d2      	b.n	8007d9a <_vfiprintf_r+0xe2>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	1d19      	adds	r1, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	9103      	str	r1, [sp, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bfbb      	ittet	lt
 8007e00:	425b      	neglt	r3, r3
 8007e02:	f042 0202 	orrlt.w	r2, r2, #2
 8007e06:	9307      	strge	r3, [sp, #28]
 8007e08:	9307      	strlt	r3, [sp, #28]
 8007e0a:	bfb8      	it	lt
 8007e0c:	9204      	strlt	r2, [sp, #16]
 8007e0e:	7823      	ldrb	r3, [r4, #0]
 8007e10:	2b2e      	cmp	r3, #46	; 0x2e
 8007e12:	d10c      	bne.n	8007e2e <_vfiprintf_r+0x176>
 8007e14:	7863      	ldrb	r3, [r4, #1]
 8007e16:	2b2a      	cmp	r3, #42	; 0x2a
 8007e18:	d135      	bne.n	8007e86 <_vfiprintf_r+0x1ce>
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	1d1a      	adds	r2, r3, #4
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	9203      	str	r2, [sp, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfb8      	it	lt
 8007e26:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e2a:	3402      	adds	r4, #2
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f14 <_vfiprintf_r+0x25c>
 8007e32:	7821      	ldrb	r1, [r4, #0]
 8007e34:	2203      	movs	r2, #3
 8007e36:	4650      	mov	r0, sl
 8007e38:	f7f8 fa0a 	bl	8000250 <memchr>
 8007e3c:	b140      	cbz	r0, 8007e50 <_vfiprintf_r+0x198>
 8007e3e:	2340      	movs	r3, #64	; 0x40
 8007e40:	eba0 000a 	sub.w	r0, r0, sl
 8007e44:	fa03 f000 	lsl.w	r0, r3, r0
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	4303      	orrs	r3, r0
 8007e4c:	3401      	adds	r4, #1
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	482c      	ldr	r0, [pc, #176]	; (8007f08 <_vfiprintf_r+0x250>)
 8007e56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e5a:	2206      	movs	r2, #6
 8007e5c:	f7f8 f9f8 	bl	8000250 <memchr>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d03f      	beq.n	8007ee4 <_vfiprintf_r+0x22c>
 8007e64:	4b29      	ldr	r3, [pc, #164]	; (8007f0c <_vfiprintf_r+0x254>)
 8007e66:	bb1b      	cbnz	r3, 8007eb0 <_vfiprintf_r+0x1f8>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	3307      	adds	r3, #7
 8007e6c:	f023 0307 	bic.w	r3, r3, #7
 8007e70:	3308      	adds	r3, #8
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e76:	443b      	add	r3, r7
 8007e78:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7a:	e767      	b.n	8007d4c <_vfiprintf_r+0x94>
 8007e7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e80:	460c      	mov	r4, r1
 8007e82:	2001      	movs	r0, #1
 8007e84:	e7a5      	b.n	8007dd2 <_vfiprintf_r+0x11a>
 8007e86:	2300      	movs	r3, #0
 8007e88:	3401      	adds	r4, #1
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	f04f 0c0a 	mov.w	ip, #10
 8007e92:	4620      	mov	r0, r4
 8007e94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e98:	3a30      	subs	r2, #48	; 0x30
 8007e9a:	2a09      	cmp	r2, #9
 8007e9c:	d903      	bls.n	8007ea6 <_vfiprintf_r+0x1ee>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0c5      	beq.n	8007e2e <_vfiprintf_r+0x176>
 8007ea2:	9105      	str	r1, [sp, #20]
 8007ea4:	e7c3      	b.n	8007e2e <_vfiprintf_r+0x176>
 8007ea6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eaa:	4604      	mov	r4, r0
 8007eac:	2301      	movs	r3, #1
 8007eae:	e7f0      	b.n	8007e92 <_vfiprintf_r+0x1da>
 8007eb0:	ab03      	add	r3, sp, #12
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4b16      	ldr	r3, [pc, #88]	; (8007f10 <_vfiprintf_r+0x258>)
 8007eb8:	a904      	add	r1, sp, #16
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7fe f860 	bl	8005f80 <_printf_float>
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	1c78      	adds	r0, r7, #1
 8007ec4:	d1d6      	bne.n	8007e74 <_vfiprintf_r+0x1bc>
 8007ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ec8:	07d9      	lsls	r1, r3, #31
 8007eca:	d405      	bmi.n	8007ed8 <_vfiprintf_r+0x220>
 8007ecc:	89ab      	ldrh	r3, [r5, #12]
 8007ece:	059a      	lsls	r2, r3, #22
 8007ed0:	d402      	bmi.n	8007ed8 <_vfiprintf_r+0x220>
 8007ed2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed4:	f000 faaf 	bl	8008436 <__retarget_lock_release_recursive>
 8007ed8:	89ab      	ldrh	r3, [r5, #12]
 8007eda:	065b      	lsls	r3, r3, #25
 8007edc:	f53f af12 	bmi.w	8007d04 <_vfiprintf_r+0x4c>
 8007ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee2:	e711      	b.n	8007d08 <_vfiprintf_r+0x50>
 8007ee4:	ab03      	add	r3, sp, #12
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <_vfiprintf_r+0x258>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7fe fad2 	bl	8006498 <_printf_i>
 8007ef4:	e7e4      	b.n	8007ec0 <_vfiprintf_r+0x208>
 8007ef6:	bf00      	nop
 8007ef8:	08008abc 	.word	0x08008abc
 8007efc:	08008adc 	.word	0x08008adc
 8007f00:	08008a9c 	.word	0x08008a9c
 8007f04:	0800898a 	.word	0x0800898a
 8007f08:	08008994 	.word	0x08008994
 8007f0c:	08005f81 	.word	0x08005f81
 8007f10:	08007c93 	.word	0x08007c93
 8007f14:	08008990 	.word	0x08008990

08007f18 <__swbuf_r>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	460e      	mov	r6, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	4605      	mov	r5, r0
 8007f20:	b118      	cbz	r0, 8007f2a <__swbuf_r+0x12>
 8007f22:	6983      	ldr	r3, [r0, #24]
 8007f24:	b90b      	cbnz	r3, 8007f2a <__swbuf_r+0x12>
 8007f26:	f000 f9e7 	bl	80082f8 <__sinit>
 8007f2a:	4b21      	ldr	r3, [pc, #132]	; (8007fb0 <__swbuf_r+0x98>)
 8007f2c:	429c      	cmp	r4, r3
 8007f2e:	d12b      	bne.n	8007f88 <__swbuf_r+0x70>
 8007f30:	686c      	ldr	r4, [r5, #4]
 8007f32:	69a3      	ldr	r3, [r4, #24]
 8007f34:	60a3      	str	r3, [r4, #8]
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	071a      	lsls	r2, r3, #28
 8007f3a:	d52f      	bpl.n	8007f9c <__swbuf_r+0x84>
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	b36b      	cbz	r3, 8007f9c <__swbuf_r+0x84>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	1ac0      	subs	r0, r0, r3
 8007f46:	6963      	ldr	r3, [r4, #20]
 8007f48:	b2f6      	uxtb	r6, r6
 8007f4a:	4283      	cmp	r3, r0
 8007f4c:	4637      	mov	r7, r6
 8007f4e:	dc04      	bgt.n	8007f5a <__swbuf_r+0x42>
 8007f50:	4621      	mov	r1, r4
 8007f52:	4628      	mov	r0, r5
 8007f54:	f000 f93c 	bl	80081d0 <_fflush_r>
 8007f58:	bb30      	cbnz	r0, 8007fa8 <__swbuf_r+0x90>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	6022      	str	r2, [r4, #0]
 8007f66:	701e      	strb	r6, [r3, #0]
 8007f68:	6963      	ldr	r3, [r4, #20]
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	4283      	cmp	r3, r0
 8007f6e:	d004      	beq.n	8007f7a <__swbuf_r+0x62>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	07db      	lsls	r3, r3, #31
 8007f74:	d506      	bpl.n	8007f84 <__swbuf_r+0x6c>
 8007f76:	2e0a      	cmp	r6, #10
 8007f78:	d104      	bne.n	8007f84 <__swbuf_r+0x6c>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 f927 	bl	80081d0 <_fflush_r>
 8007f82:	b988      	cbnz	r0, 8007fa8 <__swbuf_r+0x90>
 8007f84:	4638      	mov	r0, r7
 8007f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <__swbuf_r+0x9c>)
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	d101      	bne.n	8007f92 <__swbuf_r+0x7a>
 8007f8e:	68ac      	ldr	r4, [r5, #8]
 8007f90:	e7cf      	b.n	8007f32 <__swbuf_r+0x1a>
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <__swbuf_r+0xa0>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	bf08      	it	eq
 8007f98:	68ec      	ldreq	r4, [r5, #12]
 8007f9a:	e7ca      	b.n	8007f32 <__swbuf_r+0x1a>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f81a 	bl	8007fd8 <__swsetup_r>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d0cb      	beq.n	8007f40 <__swbuf_r+0x28>
 8007fa8:	f04f 37ff 	mov.w	r7, #4294967295
 8007fac:	e7ea      	b.n	8007f84 <__swbuf_r+0x6c>
 8007fae:	bf00      	nop
 8007fb0:	08008abc 	.word	0x08008abc
 8007fb4:	08008adc 	.word	0x08008adc
 8007fb8:	08008a9c 	.word	0x08008a9c

08007fbc <__ascii_wctomb>:
 8007fbc:	b149      	cbz	r1, 8007fd2 <__ascii_wctomb+0x16>
 8007fbe:	2aff      	cmp	r2, #255	; 0xff
 8007fc0:	bf85      	ittet	hi
 8007fc2:	238a      	movhi	r3, #138	; 0x8a
 8007fc4:	6003      	strhi	r3, [r0, #0]
 8007fc6:	700a      	strbls	r2, [r1, #0]
 8007fc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8007fcc:	bf98      	it	ls
 8007fce:	2001      	movls	r0, #1
 8007fd0:	4770      	bx	lr
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4770      	bx	lr
	...

08007fd8 <__swsetup_r>:
 8007fd8:	4b32      	ldr	r3, [pc, #200]	; (80080a4 <__swsetup_r+0xcc>)
 8007fda:	b570      	push	{r4, r5, r6, lr}
 8007fdc:	681d      	ldr	r5, [r3, #0]
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	b125      	cbz	r5, 8007fee <__swsetup_r+0x16>
 8007fe4:	69ab      	ldr	r3, [r5, #24]
 8007fe6:	b913      	cbnz	r3, 8007fee <__swsetup_r+0x16>
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 f985 	bl	80082f8 <__sinit>
 8007fee:	4b2e      	ldr	r3, [pc, #184]	; (80080a8 <__swsetup_r+0xd0>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d10f      	bne.n	8008014 <__swsetup_r+0x3c>
 8007ff4:	686c      	ldr	r4, [r5, #4]
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ffc:	0719      	lsls	r1, r3, #28
 8007ffe:	d42c      	bmi.n	800805a <__swsetup_r+0x82>
 8008000:	06dd      	lsls	r5, r3, #27
 8008002:	d411      	bmi.n	8008028 <__swsetup_r+0x50>
 8008004:	2309      	movs	r3, #9
 8008006:	6033      	str	r3, [r6, #0]
 8008008:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	e03e      	b.n	8008092 <__swsetup_r+0xba>
 8008014:	4b25      	ldr	r3, [pc, #148]	; (80080ac <__swsetup_r+0xd4>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d101      	bne.n	800801e <__swsetup_r+0x46>
 800801a:	68ac      	ldr	r4, [r5, #8]
 800801c:	e7eb      	b.n	8007ff6 <__swsetup_r+0x1e>
 800801e:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <__swsetup_r+0xd8>)
 8008020:	429c      	cmp	r4, r3
 8008022:	bf08      	it	eq
 8008024:	68ec      	ldreq	r4, [r5, #12]
 8008026:	e7e6      	b.n	8007ff6 <__swsetup_r+0x1e>
 8008028:	0758      	lsls	r0, r3, #29
 800802a:	d512      	bpl.n	8008052 <__swsetup_r+0x7a>
 800802c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800802e:	b141      	cbz	r1, 8008042 <__swsetup_r+0x6a>
 8008030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008034:	4299      	cmp	r1, r3
 8008036:	d002      	beq.n	800803e <__swsetup_r+0x66>
 8008038:	4630      	mov	r0, r6
 800803a:	f7ff fd0b 	bl	8007a54 <_free_r>
 800803e:	2300      	movs	r3, #0
 8008040:	6363      	str	r3, [r4, #52]	; 0x34
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	2300      	movs	r3, #0
 800804c:	6063      	str	r3, [r4, #4]
 800804e:	6923      	ldr	r3, [r4, #16]
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f043 0308 	orr.w	r3, r3, #8
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	b94b      	cbnz	r3, 8008072 <__swsetup_r+0x9a>
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008068:	d003      	beq.n	8008072 <__swsetup_r+0x9a>
 800806a:	4621      	mov	r1, r4
 800806c:	4630      	mov	r0, r6
 800806e:	f000 fa07 	bl	8008480 <__smakebuf_r>
 8008072:	89a0      	ldrh	r0, [r4, #12]
 8008074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008078:	f010 0301 	ands.w	r3, r0, #1
 800807c:	d00a      	beq.n	8008094 <__swsetup_r+0xbc>
 800807e:	2300      	movs	r3, #0
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6963      	ldr	r3, [r4, #20]
 8008084:	425b      	negs	r3, r3
 8008086:	61a3      	str	r3, [r4, #24]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b943      	cbnz	r3, 800809e <__swsetup_r+0xc6>
 800808c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008090:	d1ba      	bne.n	8008008 <__swsetup_r+0x30>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	0781      	lsls	r1, r0, #30
 8008096:	bf58      	it	pl
 8008098:	6963      	ldrpl	r3, [r4, #20]
 800809a:	60a3      	str	r3, [r4, #8]
 800809c:	e7f4      	b.n	8008088 <__swsetup_r+0xb0>
 800809e:	2000      	movs	r0, #0
 80080a0:	e7f7      	b.n	8008092 <__swsetup_r+0xba>
 80080a2:	bf00      	nop
 80080a4:	20000034 	.word	0x20000034
 80080a8:	08008abc 	.word	0x08008abc
 80080ac:	08008adc 	.word	0x08008adc
 80080b0:	08008a9c 	.word	0x08008a9c

080080b4 <abort>:
 80080b4:	b508      	push	{r3, lr}
 80080b6:	2006      	movs	r0, #6
 80080b8:	f000 fa4a 	bl	8008550 <raise>
 80080bc:	2001      	movs	r0, #1
 80080be:	f7f8 fdcb 	bl	8000c58 <_exit>
	...

080080c4 <__sflush_r>:
 80080c4:	898a      	ldrh	r2, [r1, #12]
 80080c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ca:	4605      	mov	r5, r0
 80080cc:	0710      	lsls	r0, r2, #28
 80080ce:	460c      	mov	r4, r1
 80080d0:	d458      	bmi.n	8008184 <__sflush_r+0xc0>
 80080d2:	684b      	ldr	r3, [r1, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dc05      	bgt.n	80080e4 <__sflush_r+0x20>
 80080d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dc02      	bgt.n	80080e4 <__sflush_r+0x20>
 80080de:	2000      	movs	r0, #0
 80080e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d0f9      	beq.n	80080de <__sflush_r+0x1a>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080f0:	682f      	ldr	r7, [r5, #0]
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	d032      	beq.n	800815c <__sflush_r+0x98>
 80080f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	075a      	lsls	r2, r3, #29
 80080fc:	d505      	bpl.n	800810a <__sflush_r+0x46>
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	1ac0      	subs	r0, r0, r3
 8008102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008104:	b10b      	cbz	r3, 800810a <__sflush_r+0x46>
 8008106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008108:	1ac0      	subs	r0, r0, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4602      	mov	r2, r0
 800810e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008110:	6a21      	ldr	r1, [r4, #32]
 8008112:	4628      	mov	r0, r5
 8008114:	47b0      	blx	r6
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	d106      	bne.n	800812a <__sflush_r+0x66>
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	291d      	cmp	r1, #29
 8008120:	d82c      	bhi.n	800817c <__sflush_r+0xb8>
 8008122:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <__sflush_r+0x108>)
 8008124:	40ca      	lsrs	r2, r1
 8008126:	07d6      	lsls	r6, r2, #31
 8008128:	d528      	bpl.n	800817c <__sflush_r+0xb8>
 800812a:	2200      	movs	r2, #0
 800812c:	6062      	str	r2, [r4, #4]
 800812e:	04d9      	lsls	r1, r3, #19
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	d504      	bpl.n	8008140 <__sflush_r+0x7c>
 8008136:	1c42      	adds	r2, r0, #1
 8008138:	d101      	bne.n	800813e <__sflush_r+0x7a>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	b903      	cbnz	r3, 8008140 <__sflush_r+0x7c>
 800813e:	6560      	str	r0, [r4, #84]	; 0x54
 8008140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008142:	602f      	str	r7, [r5, #0]
 8008144:	2900      	cmp	r1, #0
 8008146:	d0ca      	beq.n	80080de <__sflush_r+0x1a>
 8008148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800814c:	4299      	cmp	r1, r3
 800814e:	d002      	beq.n	8008156 <__sflush_r+0x92>
 8008150:	4628      	mov	r0, r5
 8008152:	f7ff fc7f 	bl	8007a54 <_free_r>
 8008156:	2000      	movs	r0, #0
 8008158:	6360      	str	r0, [r4, #52]	; 0x34
 800815a:	e7c1      	b.n	80080e0 <__sflush_r+0x1c>
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	2301      	movs	r3, #1
 8008160:	4628      	mov	r0, r5
 8008162:	47b0      	blx	r6
 8008164:	1c41      	adds	r1, r0, #1
 8008166:	d1c7      	bne.n	80080f8 <__sflush_r+0x34>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0c4      	beq.n	80080f8 <__sflush_r+0x34>
 800816e:	2b1d      	cmp	r3, #29
 8008170:	d001      	beq.n	8008176 <__sflush_r+0xb2>
 8008172:	2b16      	cmp	r3, #22
 8008174:	d101      	bne.n	800817a <__sflush_r+0xb6>
 8008176:	602f      	str	r7, [r5, #0]
 8008178:	e7b1      	b.n	80080de <__sflush_r+0x1a>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	e7ad      	b.n	80080e0 <__sflush_r+0x1c>
 8008184:	690f      	ldr	r7, [r1, #16]
 8008186:	2f00      	cmp	r7, #0
 8008188:	d0a9      	beq.n	80080de <__sflush_r+0x1a>
 800818a:	0793      	lsls	r3, r2, #30
 800818c:	680e      	ldr	r6, [r1, #0]
 800818e:	bf08      	it	eq
 8008190:	694b      	ldreq	r3, [r1, #20]
 8008192:	600f      	str	r7, [r1, #0]
 8008194:	bf18      	it	ne
 8008196:	2300      	movne	r3, #0
 8008198:	eba6 0807 	sub.w	r8, r6, r7
 800819c:	608b      	str	r3, [r1, #8]
 800819e:	f1b8 0f00 	cmp.w	r8, #0
 80081a2:	dd9c      	ble.n	80080de <__sflush_r+0x1a>
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081a8:	4643      	mov	r3, r8
 80081aa:	463a      	mov	r2, r7
 80081ac:	4628      	mov	r0, r5
 80081ae:	47b0      	blx	r6
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dc06      	bgt.n	80081c2 <__sflush_r+0xfe>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	e78e      	b.n	80080e0 <__sflush_r+0x1c>
 80081c2:	4407      	add	r7, r0
 80081c4:	eba8 0800 	sub.w	r8, r8, r0
 80081c8:	e7e9      	b.n	800819e <__sflush_r+0xda>
 80081ca:	bf00      	nop
 80081cc:	20400001 	.word	0x20400001

080081d0 <_fflush_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	690b      	ldr	r3, [r1, #16]
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	b913      	cbnz	r3, 80081e0 <_fflush_r+0x10>
 80081da:	2500      	movs	r5, #0
 80081dc:	4628      	mov	r0, r5
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	b118      	cbz	r0, 80081ea <_fflush_r+0x1a>
 80081e2:	6983      	ldr	r3, [r0, #24]
 80081e4:	b90b      	cbnz	r3, 80081ea <_fflush_r+0x1a>
 80081e6:	f000 f887 	bl	80082f8 <__sinit>
 80081ea:	4b14      	ldr	r3, [pc, #80]	; (800823c <_fflush_r+0x6c>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	d11b      	bne.n	8008228 <_fflush_r+0x58>
 80081f0:	686c      	ldr	r4, [r5, #4]
 80081f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0ef      	beq.n	80081da <_fflush_r+0xa>
 80081fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081fc:	07d0      	lsls	r0, r2, #31
 80081fe:	d404      	bmi.n	800820a <_fflush_r+0x3a>
 8008200:	0599      	lsls	r1, r3, #22
 8008202:	d402      	bmi.n	800820a <_fflush_r+0x3a>
 8008204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008206:	f000 f915 	bl	8008434 <__retarget_lock_acquire_recursive>
 800820a:	4628      	mov	r0, r5
 800820c:	4621      	mov	r1, r4
 800820e:	f7ff ff59 	bl	80080c4 <__sflush_r>
 8008212:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008214:	07da      	lsls	r2, r3, #31
 8008216:	4605      	mov	r5, r0
 8008218:	d4e0      	bmi.n	80081dc <_fflush_r+0xc>
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	059b      	lsls	r3, r3, #22
 800821e:	d4dd      	bmi.n	80081dc <_fflush_r+0xc>
 8008220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008222:	f000 f908 	bl	8008436 <__retarget_lock_release_recursive>
 8008226:	e7d9      	b.n	80081dc <_fflush_r+0xc>
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <_fflush_r+0x70>)
 800822a:	429c      	cmp	r4, r3
 800822c:	d101      	bne.n	8008232 <_fflush_r+0x62>
 800822e:	68ac      	ldr	r4, [r5, #8]
 8008230:	e7df      	b.n	80081f2 <_fflush_r+0x22>
 8008232:	4b04      	ldr	r3, [pc, #16]	; (8008244 <_fflush_r+0x74>)
 8008234:	429c      	cmp	r4, r3
 8008236:	bf08      	it	eq
 8008238:	68ec      	ldreq	r4, [r5, #12]
 800823a:	e7da      	b.n	80081f2 <_fflush_r+0x22>
 800823c:	08008abc 	.word	0x08008abc
 8008240:	08008adc 	.word	0x08008adc
 8008244:	08008a9c 	.word	0x08008a9c

08008248 <std>:
 8008248:	2300      	movs	r3, #0
 800824a:	b510      	push	{r4, lr}
 800824c:	4604      	mov	r4, r0
 800824e:	e9c0 3300 	strd	r3, r3, [r0]
 8008252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008256:	6083      	str	r3, [r0, #8]
 8008258:	8181      	strh	r1, [r0, #12]
 800825a:	6643      	str	r3, [r0, #100]	; 0x64
 800825c:	81c2      	strh	r2, [r0, #14]
 800825e:	6183      	str	r3, [r0, #24]
 8008260:	4619      	mov	r1, r3
 8008262:	2208      	movs	r2, #8
 8008264:	305c      	adds	r0, #92	; 0x5c
 8008266:	f7fd fdf3 	bl	8005e50 <memset>
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <std+0x38>)
 800826c:	6263      	str	r3, [r4, #36]	; 0x24
 800826e:	4b05      	ldr	r3, [pc, #20]	; (8008284 <std+0x3c>)
 8008270:	62a3      	str	r3, [r4, #40]	; 0x28
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <std+0x40>)
 8008274:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <std+0x44>)
 8008278:	6224      	str	r4, [r4, #32]
 800827a:	6323      	str	r3, [r4, #48]	; 0x30
 800827c:	bd10      	pop	{r4, pc}
 800827e:	bf00      	nop
 8008280:	08008589 	.word	0x08008589
 8008284:	080085ab 	.word	0x080085ab
 8008288:	080085e3 	.word	0x080085e3
 800828c:	08008607 	.word	0x08008607

08008290 <_cleanup_r>:
 8008290:	4901      	ldr	r1, [pc, #4]	; (8008298 <_cleanup_r+0x8>)
 8008292:	f000 b8af 	b.w	80083f4 <_fwalk_reent>
 8008296:	bf00      	nop
 8008298:	080081d1 	.word	0x080081d1

0800829c <__sfmoreglue>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	1e4a      	subs	r2, r1, #1
 80082a0:	2568      	movs	r5, #104	; 0x68
 80082a2:	4355      	muls	r5, r2
 80082a4:	460e      	mov	r6, r1
 80082a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082aa:	f7ff fc23 	bl	8007af4 <_malloc_r>
 80082ae:	4604      	mov	r4, r0
 80082b0:	b140      	cbz	r0, 80082c4 <__sfmoreglue+0x28>
 80082b2:	2100      	movs	r1, #0
 80082b4:	e9c0 1600 	strd	r1, r6, [r0]
 80082b8:	300c      	adds	r0, #12
 80082ba:	60a0      	str	r0, [r4, #8]
 80082bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082c0:	f7fd fdc6 	bl	8005e50 <memset>
 80082c4:	4620      	mov	r0, r4
 80082c6:	bd70      	pop	{r4, r5, r6, pc}

080082c8 <__sfp_lock_acquire>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__sfp_lock_acquire+0x8>)
 80082ca:	f000 b8b3 	b.w	8008434 <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	20000488 	.word	0x20000488

080082d4 <__sfp_lock_release>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__sfp_lock_release+0x8>)
 80082d6:	f000 b8ae 	b.w	8008436 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	20000488 	.word	0x20000488

080082e0 <__sinit_lock_acquire>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__sinit_lock_acquire+0x8>)
 80082e2:	f000 b8a7 	b.w	8008434 <__retarget_lock_acquire_recursive>
 80082e6:	bf00      	nop
 80082e8:	20000483 	.word	0x20000483

080082ec <__sinit_lock_release>:
 80082ec:	4801      	ldr	r0, [pc, #4]	; (80082f4 <__sinit_lock_release+0x8>)
 80082ee:	f000 b8a2 	b.w	8008436 <__retarget_lock_release_recursive>
 80082f2:	bf00      	nop
 80082f4:	20000483 	.word	0x20000483

080082f8 <__sinit>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	4604      	mov	r4, r0
 80082fc:	f7ff fff0 	bl	80082e0 <__sinit_lock_acquire>
 8008300:	69a3      	ldr	r3, [r4, #24]
 8008302:	b11b      	cbz	r3, 800830c <__sinit+0x14>
 8008304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008308:	f7ff bff0 	b.w	80082ec <__sinit_lock_release>
 800830c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008310:	6523      	str	r3, [r4, #80]	; 0x50
 8008312:	4b13      	ldr	r3, [pc, #76]	; (8008360 <__sinit+0x68>)
 8008314:	4a13      	ldr	r2, [pc, #76]	; (8008364 <__sinit+0x6c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	62a2      	str	r2, [r4, #40]	; 0x28
 800831a:	42a3      	cmp	r3, r4
 800831c:	bf04      	itt	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	61a3      	streq	r3, [r4, #24]
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f820 	bl	8008368 <__sfp>
 8008328:	6060      	str	r0, [r4, #4]
 800832a:	4620      	mov	r0, r4
 800832c:	f000 f81c 	bl	8008368 <__sfp>
 8008330:	60a0      	str	r0, [r4, #8]
 8008332:	4620      	mov	r0, r4
 8008334:	f000 f818 	bl	8008368 <__sfp>
 8008338:	2200      	movs	r2, #0
 800833a:	60e0      	str	r0, [r4, #12]
 800833c:	2104      	movs	r1, #4
 800833e:	6860      	ldr	r0, [r4, #4]
 8008340:	f7ff ff82 	bl	8008248 <std>
 8008344:	68a0      	ldr	r0, [r4, #8]
 8008346:	2201      	movs	r2, #1
 8008348:	2109      	movs	r1, #9
 800834a:	f7ff ff7d 	bl	8008248 <std>
 800834e:	68e0      	ldr	r0, [r4, #12]
 8008350:	2202      	movs	r2, #2
 8008352:	2112      	movs	r1, #18
 8008354:	f7ff ff78 	bl	8008248 <std>
 8008358:	2301      	movs	r3, #1
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	e7d2      	b.n	8008304 <__sinit+0xc>
 800835e:	bf00      	nop
 8008360:	08008718 	.word	0x08008718
 8008364:	08008291 	.word	0x08008291

08008368 <__sfp>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	4607      	mov	r7, r0
 800836c:	f7ff ffac 	bl	80082c8 <__sfp_lock_acquire>
 8008370:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <__sfp+0x84>)
 8008372:	681e      	ldr	r6, [r3, #0]
 8008374:	69b3      	ldr	r3, [r6, #24]
 8008376:	b913      	cbnz	r3, 800837e <__sfp+0x16>
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff ffbd 	bl	80082f8 <__sinit>
 800837e:	3648      	adds	r6, #72	; 0x48
 8008380:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008384:	3b01      	subs	r3, #1
 8008386:	d503      	bpl.n	8008390 <__sfp+0x28>
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	b30b      	cbz	r3, 80083d0 <__sfp+0x68>
 800838c:	6836      	ldr	r6, [r6, #0]
 800838e:	e7f7      	b.n	8008380 <__sfp+0x18>
 8008390:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008394:	b9d5      	cbnz	r5, 80083cc <__sfp+0x64>
 8008396:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <__sfp+0x88>)
 8008398:	60e3      	str	r3, [r4, #12]
 800839a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800839e:	6665      	str	r5, [r4, #100]	; 0x64
 80083a0:	f000 f847 	bl	8008432 <__retarget_lock_init_recursive>
 80083a4:	f7ff ff96 	bl	80082d4 <__sfp_lock_release>
 80083a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083b0:	6025      	str	r5, [r4, #0]
 80083b2:	61a5      	str	r5, [r4, #24]
 80083b4:	2208      	movs	r2, #8
 80083b6:	4629      	mov	r1, r5
 80083b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083bc:	f7fd fd48 	bl	8005e50 <memset>
 80083c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083c8:	4620      	mov	r0, r4
 80083ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083cc:	3468      	adds	r4, #104	; 0x68
 80083ce:	e7d9      	b.n	8008384 <__sfp+0x1c>
 80083d0:	2104      	movs	r1, #4
 80083d2:	4638      	mov	r0, r7
 80083d4:	f7ff ff62 	bl	800829c <__sfmoreglue>
 80083d8:	4604      	mov	r4, r0
 80083da:	6030      	str	r0, [r6, #0]
 80083dc:	2800      	cmp	r0, #0
 80083de:	d1d5      	bne.n	800838c <__sfp+0x24>
 80083e0:	f7ff ff78 	bl	80082d4 <__sfp_lock_release>
 80083e4:	230c      	movs	r3, #12
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	e7ee      	b.n	80083c8 <__sfp+0x60>
 80083ea:	bf00      	nop
 80083ec:	08008718 	.word	0x08008718
 80083f0:	ffff0001 	.word	0xffff0001

080083f4 <_fwalk_reent>:
 80083f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f8:	4606      	mov	r6, r0
 80083fa:	4688      	mov	r8, r1
 80083fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008400:	2700      	movs	r7, #0
 8008402:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008406:	f1b9 0901 	subs.w	r9, r9, #1
 800840a:	d505      	bpl.n	8008418 <_fwalk_reent+0x24>
 800840c:	6824      	ldr	r4, [r4, #0]
 800840e:	2c00      	cmp	r4, #0
 8008410:	d1f7      	bne.n	8008402 <_fwalk_reent+0xe>
 8008412:	4638      	mov	r0, r7
 8008414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008418:	89ab      	ldrh	r3, [r5, #12]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d907      	bls.n	800842e <_fwalk_reent+0x3a>
 800841e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008422:	3301      	adds	r3, #1
 8008424:	d003      	beq.n	800842e <_fwalk_reent+0x3a>
 8008426:	4629      	mov	r1, r5
 8008428:	4630      	mov	r0, r6
 800842a:	47c0      	blx	r8
 800842c:	4307      	orrs	r7, r0
 800842e:	3568      	adds	r5, #104	; 0x68
 8008430:	e7e9      	b.n	8008406 <_fwalk_reent+0x12>

08008432 <__retarget_lock_init_recursive>:
 8008432:	4770      	bx	lr

08008434 <__retarget_lock_acquire_recursive>:
 8008434:	4770      	bx	lr

08008436 <__retarget_lock_release_recursive>:
 8008436:	4770      	bx	lr

08008438 <__swhatbuf_r>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	460e      	mov	r6, r1
 800843c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008440:	2900      	cmp	r1, #0
 8008442:	b096      	sub	sp, #88	; 0x58
 8008444:	4614      	mov	r4, r2
 8008446:	461d      	mov	r5, r3
 8008448:	da07      	bge.n	800845a <__swhatbuf_r+0x22>
 800844a:	2300      	movs	r3, #0
 800844c:	602b      	str	r3, [r5, #0]
 800844e:	89b3      	ldrh	r3, [r6, #12]
 8008450:	061a      	lsls	r2, r3, #24
 8008452:	d410      	bmi.n	8008476 <__swhatbuf_r+0x3e>
 8008454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008458:	e00e      	b.n	8008478 <__swhatbuf_r+0x40>
 800845a:	466a      	mov	r2, sp
 800845c:	f000 f8fa 	bl	8008654 <_fstat_r>
 8008460:	2800      	cmp	r0, #0
 8008462:	dbf2      	blt.n	800844a <__swhatbuf_r+0x12>
 8008464:	9a01      	ldr	r2, [sp, #4]
 8008466:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800846a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800846e:	425a      	negs	r2, r3
 8008470:	415a      	adcs	r2, r3
 8008472:	602a      	str	r2, [r5, #0]
 8008474:	e7ee      	b.n	8008454 <__swhatbuf_r+0x1c>
 8008476:	2340      	movs	r3, #64	; 0x40
 8008478:	2000      	movs	r0, #0
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	b016      	add	sp, #88	; 0x58
 800847e:	bd70      	pop	{r4, r5, r6, pc}

08008480 <__smakebuf_r>:
 8008480:	898b      	ldrh	r3, [r1, #12]
 8008482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008484:	079d      	lsls	r5, r3, #30
 8008486:	4606      	mov	r6, r0
 8008488:	460c      	mov	r4, r1
 800848a:	d507      	bpl.n	800849c <__smakebuf_r+0x1c>
 800848c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	2301      	movs	r3, #1
 8008496:	6163      	str	r3, [r4, #20]
 8008498:	b002      	add	sp, #8
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	ab01      	add	r3, sp, #4
 800849e:	466a      	mov	r2, sp
 80084a0:	f7ff ffca 	bl	8008438 <__swhatbuf_r>
 80084a4:	9900      	ldr	r1, [sp, #0]
 80084a6:	4605      	mov	r5, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fb23 	bl	8007af4 <_malloc_r>
 80084ae:	b948      	cbnz	r0, 80084c4 <__smakebuf_r+0x44>
 80084b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b4:	059a      	lsls	r2, r3, #22
 80084b6:	d4ef      	bmi.n	8008498 <__smakebuf_r+0x18>
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	f043 0302 	orr.w	r3, r3, #2
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	e7e3      	b.n	800848c <__smakebuf_r+0xc>
 80084c4:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <__smakebuf_r+0x7c>)
 80084c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	6020      	str	r0, [r4, #0]
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	6163      	str	r3, [r4, #20]
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	6120      	str	r0, [r4, #16]
 80084da:	b15b      	cbz	r3, 80084f4 <__smakebuf_r+0x74>
 80084dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e0:	4630      	mov	r0, r6
 80084e2:	f000 f8c9 	bl	8008678 <_isatty_r>
 80084e6:	b128      	cbz	r0, 80084f4 <__smakebuf_r+0x74>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f023 0303 	bic.w	r3, r3, #3
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	89a0      	ldrh	r0, [r4, #12]
 80084f6:	4305      	orrs	r5, r0
 80084f8:	81a5      	strh	r5, [r4, #12]
 80084fa:	e7cd      	b.n	8008498 <__smakebuf_r+0x18>
 80084fc:	08008291 	.word	0x08008291

08008500 <_raise_r>:
 8008500:	291f      	cmp	r1, #31
 8008502:	b538      	push	{r3, r4, r5, lr}
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	d904      	bls.n	8008514 <_raise_r+0x14>
 800850a:	2316      	movs	r3, #22
 800850c:	6003      	str	r3, [r0, #0]
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008516:	b112      	cbz	r2, 800851e <_raise_r+0x1e>
 8008518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800851c:	b94b      	cbnz	r3, 8008532 <_raise_r+0x32>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f830 	bl	8008584 <_getpid_r>
 8008524:	462a      	mov	r2, r5
 8008526:	4601      	mov	r1, r0
 8008528:	4620      	mov	r0, r4
 800852a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800852e:	f000 b817 	b.w	8008560 <_kill_r>
 8008532:	2b01      	cmp	r3, #1
 8008534:	d00a      	beq.n	800854c <_raise_r+0x4c>
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	d103      	bne.n	8008542 <_raise_r+0x42>
 800853a:	2316      	movs	r3, #22
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	2001      	movs	r0, #1
 8008540:	e7e7      	b.n	8008512 <_raise_r+0x12>
 8008542:	2400      	movs	r4, #0
 8008544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008548:	4628      	mov	r0, r5
 800854a:	4798      	blx	r3
 800854c:	2000      	movs	r0, #0
 800854e:	e7e0      	b.n	8008512 <_raise_r+0x12>

08008550 <raise>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <raise+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f7ff bfd3 	b.w	8008500 <_raise_r>
 800855a:	bf00      	nop
 800855c:	20000034 	.word	0x20000034

08008560 <_kill_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_kill_r+0x20>)
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	602b      	str	r3, [r5, #0]
 800856e:	f7f8 fb63 	bl	8000c38 <_kill>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	d102      	bne.n	800857c <_kill_r+0x1c>
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	b103      	cbz	r3, 800857c <_kill_r+0x1c>
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	bd38      	pop	{r3, r4, r5, pc}
 800857e:	bf00      	nop
 8008580:	2000047c 	.word	0x2000047c

08008584 <_getpid_r>:
 8008584:	f7f8 bb50 	b.w	8000c28 <_getpid>

08008588 <__sread>:
 8008588:	b510      	push	{r4, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008590:	f000 f894 	bl	80086bc <_read_r>
 8008594:	2800      	cmp	r0, #0
 8008596:	bfab      	itete	ge
 8008598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800859a:	89a3      	ldrhlt	r3, [r4, #12]
 800859c:	181b      	addge	r3, r3, r0
 800859e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085a2:	bfac      	ite	ge
 80085a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085a6:	81a3      	strhlt	r3, [r4, #12]
 80085a8:	bd10      	pop	{r4, pc}

080085aa <__swrite>:
 80085aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ae:	461f      	mov	r7, r3
 80085b0:	898b      	ldrh	r3, [r1, #12]
 80085b2:	05db      	lsls	r3, r3, #23
 80085b4:	4605      	mov	r5, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4616      	mov	r6, r2
 80085ba:	d505      	bpl.n	80085c8 <__swrite+0x1e>
 80085bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c0:	2302      	movs	r3, #2
 80085c2:	2200      	movs	r2, #0
 80085c4:	f000 f868 	bl	8008698 <_lseek_r>
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085d2:	81a3      	strh	r3, [r4, #12]
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085de:	f000 b817 	b.w	8008610 <_write_r>

080085e2 <__sseek>:
 80085e2:	b510      	push	{r4, lr}
 80085e4:	460c      	mov	r4, r1
 80085e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ea:	f000 f855 	bl	8008698 <_lseek_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	89a3      	ldrh	r3, [r4, #12]
 80085f2:	bf15      	itete	ne
 80085f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80085f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085fe:	81a3      	strheq	r3, [r4, #12]
 8008600:	bf18      	it	ne
 8008602:	81a3      	strhne	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__sclose>:
 8008606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860a:	f000 b813 	b.w	8008634 <_close_r>
	...

08008610 <_write_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_write_r+0x20>)
 8008614:	4604      	mov	r4, r0
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	2200      	movs	r2, #0
 800861c:	602a      	str	r2, [r5, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f7f8 fb41 	bl	8000ca6 <_write>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d102      	bne.n	800862e <_write_r+0x1e>
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	b103      	cbz	r3, 800862e <_write_r+0x1e>
 800862c:	6023      	str	r3, [r4, #0]
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	2000047c 	.word	0x2000047c

08008634 <_close_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_close_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f8 fb4d 	bl	8000cde <_close>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_close_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_close_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	2000047c 	.word	0x2000047c

08008654 <_fstat_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	; (8008674 <_fstat_r+0x20>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	f7f8 fb48 	bl	8000cf6 <_fstat>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d102      	bne.n	8008670 <_fstat_r+0x1c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	b103      	cbz	r3, 8008670 <_fstat_r+0x1c>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd38      	pop	{r3, r4, r5, pc}
 8008672:	bf00      	nop
 8008674:	2000047c 	.word	0x2000047c

08008678 <_isatty_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d06      	ldr	r5, [pc, #24]	; (8008694 <_isatty_r+0x1c>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	f7f8 fb47 	bl	8000d16 <_isatty>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_isatty_r+0x1a>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_isatty_r+0x1a>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	2000047c 	.word	0x2000047c

08008698 <_lseek_r>:
 8008698:	b538      	push	{r3, r4, r5, lr}
 800869a:	4d07      	ldr	r5, [pc, #28]	; (80086b8 <_lseek_r+0x20>)
 800869c:	4604      	mov	r4, r0
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	602a      	str	r2, [r5, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f7f8 fb40 	bl	8000d2c <_lseek>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_lseek_r+0x1e>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_lseek_r+0x1e>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	2000047c 	.word	0x2000047c

080086bc <_read_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	; (80086dc <_read_r+0x20>)
 80086c0:	4604      	mov	r4, r0
 80086c2:	4608      	mov	r0, r1
 80086c4:	4611      	mov	r1, r2
 80086c6:	2200      	movs	r2, #0
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f7f8 face 	bl	8000c6c <_read>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_read_r+0x1e>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_read_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	2000047c 	.word	0x2000047c

080086e0 <_init>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	bf00      	nop
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr

080086ec <_fini>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr
