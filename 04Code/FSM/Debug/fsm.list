
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc28  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800be28  0800be28  0001be28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c344  0800c344  0002038c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c34c  0800c34c  0002038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c34c  0800c34c  0001c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c350  0800c350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000038c  20000000  0800c354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  2000038c  0800c6e0  0002038c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800c6e0  00020864  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002461c  00000000  00000000  000203ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea9  00000000  00000000  000449d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00049880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  0004ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db04  00000000  00000000  0004c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec64  00000000  00000000  00079d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001068fa  00000000  00000000  000989d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f2ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  0019f320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000038c 	.word	0x2000038c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800be10 	.word	0x0800be10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000390 	.word	0x20000390
 800023c:	0800be10 	.word	0x0800be10

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC2_Init+0x98>)
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_ADC2_Init+0x9c>)
 800061e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000622:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000626:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC2_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC2_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC2_Init+0x98>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_ADC2_Init+0xa0>)
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000656:	2201      	movs	r2, #1
 8000658:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ADC2_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_ADC2_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_ADC2_Init+0x98>)
 800066a:	f002 fd23 	bl	80030b4 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 feca 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000678:	2303      	movs	r3, #3
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	2301      	movs	r3, #1
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000680:	2307      	movs	r3, #7
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_ADC2_Init+0x98>)
 800068a:	f003 f815 	bl	80036b8 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000694:	f000 feba 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200003f0 	.word	0x200003f0
 80006a4:	40012100 	.word	0x40012100
 80006a8:	0f000001 	.word	0x0f000001

080006ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006c0:	4a46      	ldr	r2, [pc, #280]	; (80007dc <MX_ADC3_Init+0x130>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006ca:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006cc:	4b42      	ldr	r3, [pc, #264]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006d2:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006d8:	4b3f      	ldr	r3, [pc, #252]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006da:	2201      	movs	r2, #1
 80006dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006de:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006ee:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <MX_ADC3_Init+0x134>)
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80006fa:	2206      	movs	r2, #6
 80006fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000700:	2201      	movs	r2, #1
 8000702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000708:	2201      	movs	r2, #1
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800070c:	4832      	ldr	r0, [pc, #200]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800070e:	f002 fcd1 	bl	80030b4 <HAL_ADC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000718:	f000 fe78 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800071c:	230a      	movs	r3, #10
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2301      	movs	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000724:	2307      	movs	r3, #7
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	482a      	ldr	r0, [pc, #168]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800072e:	f002 ffc3 	bl	80036b8 <HAL_ADC_ConfigChannel>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000738:	f000 fe68 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073c:	230d      	movs	r3, #13
 800073e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000740:	2302      	movs	r3, #2
 8000742:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4619      	mov	r1, r3
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800074a:	f002 ffb5 	bl	80036b8 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000754:	f000 fe5a 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000758:	2309      	movs	r3, #9
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800075c:	2303      	movs	r3, #3
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	481b      	ldr	r0, [pc, #108]	; (80007d8 <MX_ADC3_Init+0x12c>)
 800076a:	f002 ffa5 	bl	80036b8 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8000774:	f000 fe4a 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000778:	230f      	movs	r3, #15
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800077c:	2304      	movs	r3, #4
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_ADC3_Init+0x12c>)
 8000786:	f002 ff97 	bl	80036b8 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8000790:	f000 fe3c 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000794:	2308      	movs	r3, #8
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000798:	2305      	movs	r3, #5
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800079c:	2307      	movs	r3, #7
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80007a6:	f002 ff87 	bl	80036b8 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x108>
  {
    Error_Handler();
 80007b0:	f000 fe2c 	bl	800140c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b4:	2306      	movs	r3, #6
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b8:	2306      	movs	r3, #6
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC3_Init+0x12c>)
 80007c2:	f002 ff79 	bl	80036b8 <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 80007cc:	f000 fe1e 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000498 	.word	0x20000498
 80007dc:	40012200 	.word	0x40012200
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a7c      	ldr	r2, [pc, #496]	; (80009f4 <HAL_ADC_MspInit+0x210>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d15d      	bne.n	80008c2 <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a7b      	ldr	r2, [pc, #492]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800080c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b79      	ldr	r3, [pc, #484]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b76      	ldr	r3, [pc, #472]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a75      	ldr	r2, [pc, #468]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b73      	ldr	r3, [pc, #460]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	486c      	ldr	r0, [pc, #432]	; (80009fc <HAL_ADC_MspInit+0x218>)
 800084a:	f003 ff21 	bl	8004690 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800084e:	4b6c      	ldr	r3, [pc, #432]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000850:	4a6c      	ldr	r2, [pc, #432]	; (8000a04 <HAL_ADC_MspInit+0x220>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000854:	4b6a      	ldr	r3, [pc, #424]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000856:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800085a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085c:	4b68      	ldr	r3, [pc, #416]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b65      	ldr	r3, [pc, #404]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000876:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000878:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800087a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800087e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000886:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b5d      	ldr	r3, [pc, #372]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 8000896:	f003 faf1 	bl	8003e7c <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80008a0:	f000 fdb4 	bl	800140c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a56      	ldr	r2, [pc, #344]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 80008a8:	639a      	str	r2, [r3, #56]	; 0x38
 80008aa:	4a55      	ldr	r2, [pc, #340]	; (8000a00 <HAL_ADC_MspInit+0x21c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2012      	movs	r0, #18
 80008b6:	f003 faaa 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008ba:	2012      	movs	r0, #18
 80008bc:	f003 fac3 	bl	8003e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80008c0:	e093      	b.n	80009ea <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <HAL_ADC_MspInit+0x224>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	f040 808e 	bne.w	80009ea <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008ce:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a49      	ldr	r2, [pc, #292]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b47      	ldr	r3, [pc, #284]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a43      	ldr	r2, [pc, #268]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b41      	ldr	r3, [pc, #260]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0320 	and.w	r3, r3, #32
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b3e      	ldr	r3, [pc, #248]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a3d      	ldr	r2, [pc, #244]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <HAL_ADC_MspInit+0x214>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 800092e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4832      	ldr	r0, [pc, #200]	; (8000a0c <HAL_ADC_MspInit+0x228>)
 8000944:	f003 fea4 	bl	8004690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000948:	2309      	movs	r3, #9
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	482d      	ldr	r0, [pc, #180]	; (8000a10 <HAL_ADC_MspInit+0x22c>)
 800095c:	f003 fe98 	bl	8004690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000960:	2308      	movs	r3, #8
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4822      	ldr	r0, [pc, #136]	; (80009fc <HAL_ADC_MspInit+0x218>)
 8000974:	f003 fe8c 	bl	8004690 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800097a:	4a27      	ldr	r2, [pc, #156]	; (8000a18 <HAL_ADC_MspInit+0x234>)
 800097c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000984:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 800099c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b8:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009be:	4815      	ldr	r0, [pc, #84]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009c0:	f003 fa5c 	bl	8003e7c <HAL_DMA_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009ca:	f000 fd1f 	bl	800140c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a10      	ldr	r2, [pc, #64]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009d2:	639a      	str	r2, [r3, #56]	; 0x38
 80009d4:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_ADC_MspInit+0x230>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2012      	movs	r0, #18
 80009e0:	f003 fa15 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009e4:	2012      	movs	r0, #18
 80009e6:	f003 fa2e 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 80009ea:	bf00      	nop
 80009ec:	3738      	adds	r7, #56	; 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40012100 	.word	0x40012100
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	200004e0 	.word	0x200004e0
 8000a04:	40026440 	.word	0x40026440
 8000a08:	40012200 	.word	0x40012200
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40020800 	.word	0x40020800
 8000a14:	20000438 	.word	0x20000438
 8000a18:	40026428 	.word	0x40026428

08000a1c <bluet_receive>:
#include "commands.h"

bluet_state_t bluet_status = BLUET_N_INIT;

void bluet_receive(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	char err;

	if(bluet_status != BLUET_READY)
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <bluet_receive+0x6c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d002      	beq.n	8000a30 <bluet_receive+0x14>
		Rx_UART_init(&bluet_uart);
 8000a2a:	4818      	ldr	r0, [pc, #96]	; (8000a8c <bluet_receive+0x70>)
 8000a2c:	f002 fa32 	bl	8002e94 <Rx_UART_init>

	// any byte received by bluetooth?
	if(bluet_uart.Rx_flag)
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <bluet_receive+0x70>)
 8000a32:	7d5b      	ldrb	r3, [r3, #21]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <bluet_receive+0x30>
	{
		UART_Receive(&bluet_uart);
 8000a3a:	4814      	ldr	r0, [pc, #80]	; (8000a8c <bluet_receive+0x70>)
 8000a3c:	f002 f9e6 	bl	8002e0c <UART_Receive>
		bluet_uart.Rx_flag = 0;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <bluet_receive+0x70>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	755a      	strb	r2, [r3, #21]
		bluet_status = BLUET_RECEIVING;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <bluet_receive+0x6c>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	701a      	strb	r2, [r3, #0]
	}
	// command received?
	if(cmd_received)
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <bluet_receive+0x74>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d013      	beq.n	8000a7e <bluet_receive+0x62>
	{
		// parses and executes the command - returns 0 if valid
		err = exec_cmd((char *) bluet_uart.Rx_Buffer);
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <bluet_receive+0x78>)
 8000a58:	f000 f81e 	bl	8000a98 <exec_cmd>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]

		// command executed -> bluet_st = BLUET_OK
		// command not executed -> BLUET_READY
		bluet_status = (err == 0) ? BLUET_OK : BLUET_READY;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	bf14      	ite	ne
 8000a66:	2301      	movne	r3, #1
 8000a68:	2300      	moveq	r3, #0
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <bluet_receive+0x6c>)
 8000a70:	701a      	strb	r2, [r3, #0]

		cmd_received = 0;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <bluet_receive+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
		// prepares bluetooth to receive again
		Rx_UART_init(&bluet_uart);
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <bluet_receive+0x70>)
 8000a7a:	f002 fa0b 	bl	8002e94 <Rx_UART_init>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	2000011c 	.word	0x2000011c
 8000a90:	200003e5 	.word	0x200003e5
 8000a94:	20000120 	.word	0x20000120

08000a98 <exec_cmd>:
@function  exec_cmd
@param		 String inserted by user
@brief	 	 Parses string, executes commands and prints error message.
******************************************************************************/
char exec_cmd(const char *str)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	char err;
	
	err = parse_cmd(cmd_list, str);
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <exec_cmd+0x20>)
 8000aa4:	f000 fe1e 	bl	80016e4 <parse_cmd>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]
//			UART_puts("No operation in progress.\n\r");
//
//	}
	

	return err;
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	0800beac 	.word	0x0800beac

08000abc <help_cb>:
@usage		 ?

@brief	 	 Print a list of the valid commands
******************************************************************************/
char help_cb(uint8_t argc, char** argv)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0a6      	sub	sp, #152	; 0x98
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
	const Command_t *p = cmd_list;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <help_cb+0x6c>)
 8000aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char str[128]; // Output message. Max message len is the same as buffer used in UART_puts
	
	if(argc != 1) // number of arguments invalid?
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d001      	beq.n	8000ad8 <help_cb+0x1c>
		//return (char)(-EINVARG);
		return (-1);
 8000ad4:	23ff      	movs	r3, #255	; 0xff
 8000ad6:	e023      	b.n	8000b20 <help_cb+0x64>
	
	UART_puts(&bluet_uart, "List of valid commands:\n\n\r");
 8000ad8:	4914      	ldr	r1, [pc, #80]	; (8000b2c <help_cb+0x70>)
 8000ada:	4815      	ldr	r0, [pc, #84]	; (8000b30 <help_cb+0x74>)
 8000adc:	f002 fa10 	bl	8002f00 <UART_puts>
	while(p->cmd)			
 8000ae0:	e018      	b.n	8000b14 <help_cb+0x58>
	{
		snprintf(str, sizeof(str), "%4s - %s\n\n\r", p->cmd, p->help);		// send the formated string to 'str' limiting the size to the size alocated for the string 'str'
 8000ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f107 000c 	add.w	r0, r7, #12
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	4613      	mov	r3, r2
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <help_cb+0x78>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	f009 f817 	bl	8009b2c <sniprintf>
		UART_puts(&bluet_uart, str);
 8000afe:	f107 030c 	add.w	r3, r7, #12
 8000b02:	4619      	mov	r1, r3
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <help_cb+0x74>)
 8000b06:	f002 f9fb 	bl	8002f00 <UART_puts>
		p++;
 8000b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b0e:	330c      	adds	r3, #12
 8000b10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(p->cmd)			
 8000b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e1      	bne.n	8000ae2 <help_cb+0x26>
	}
	
	return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3790      	adds	r7, #144	; 0x90
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	0800beac 	.word	0x0800beac
 8000b2c:	0800be68 	.word	0x0800be68
 8000b30:	2000011c 	.word	0x2000011c
 8000b34:	0800be84 	.word	0x0800be84

08000b38 <route_sel_cb>:
@usage		RT

@brief	 	Selects a route for the robot to take
******************************************************************************/
char route_sel_cb(uint8_t argc, char** argv)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
	//char str[32]; // Output message. Max message len is the same as buffer used in UART_puts

	if(argc != 2) // number of arguments invalid?
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d001      	beq.n	8000b4e <route_sel_cb+0x16>
		//return (char)(-EINVARG);
		return (-1);
 8000b4a:	23ff      	movs	r3, #255	; 0xff
 8000b4c:	e000      	b.n	8000b50 <route_sel_cb+0x18>

	// ...select route... do something

//	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);

	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <debounce_start>:
@brief
@param
@retval	none
******************************************************************************/
void debounce_start(ST_debounce *s, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80fb      	strh	r3, [r7, #6]
	// initialize sliding window
	s->window = 0xf;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	701a      	strb	r2, [r3, #0]
	s->count1s = 4;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2204      	movs	r2, #4
 8000b74:	705a      	strb	r2, [r3, #1]

	s->GPIOx = GPIOx;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	605a      	str	r2, [r3, #4]
	s->GPIO_Pin = GPIO_Pin;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	88fa      	ldrh	r2, [r7, #6]
 8000b80:	811a      	strh	r2, [r3, #8]

	s->pin_output = 0;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	729a      	strb	r2, [r3, #10]

	// start Timer to interrupt
	HAL_TIM_Base_Start_IT(&TIM_DEBOUNCE);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <debounce_start+0x3c>)
 8000b8a:	f005 ff79 	bl	8006a80 <HAL_TIM_Base_Start_IT>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200006ac 	.word	0x200006ac

08000b9c <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	891b      	ldrh	r3, [r3, #8]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f003 ff1a 	bl	80049e8 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	785a      	ldrb	r2, [r3, #1]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	11db      	asrs	r3, r3, #7
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	785a      	ldrb	r2, [r3, #1]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	785b      	ldrb	r3, [r3, #1]
 8000bfc:	f1c3 0304 	rsb	r3, r3, #4
 8000c00:	11db      	asrs	r3, r3, #7
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <debounce_isr>:

void debounce_isr(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <debounce_isr+0x4c>)
 8000c20:	f7ff ffbc 	bl	8000b9c <debounce>
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
	// determine button output
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 0;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 1;
	if((pre_state == 0) && (state == 1))
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <debounce_isr+0x50>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d105      	bne.n	8000c3c <debounce_isr+0x28>
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d102      	bne.n	8000c3c <debounce_isr+0x28>
		button.pin_output = 1;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <debounce_isr+0x4c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	729a      	strb	r2, [r3, #10]
	if((pre_state == 1) && (state == 0))
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <debounce_isr+0x50>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d105      	bne.n	8000c50 <debounce_isr+0x3c>
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <debounce_isr+0x3c>
		button.pin_output = 0;
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <debounce_isr+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	729a      	strb	r2, [r3, #10]

	//button.pin_output = (state * ((~pre_state) & 0x01));

	// update previous button state
	pre_state = state;
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <debounce_isr+0x50>)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	7013      	strb	r3, [r2, #0]
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000540 	.word	0x20000540
 8000c64:	200003a8 	.word	0x200003a8

08000c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_DMA_Init+0x48>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <MX_DMA_Init+0x48>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <MX_DMA_Init+0x48>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2039      	movs	r0, #57	; 0x39
 8000c8c:	f003 f8bf 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c90:	2039      	movs	r0, #57	; 0x39
 8000c92:	f003 f8d8 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	203a      	movs	r0, #58	; 0x3a
 8000c9c:	f003 f8b7 	bl	8003e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ca0:	203a      	movs	r0, #58	; 0x3a
 8000ca2:	f003 f8d0 	bl	8003e46 <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <s_stopped>:

/******************************************************************************
State Stopped
******************************************************************************/
static void s_stopped(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	write_led(LRED,0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4823      	ldr	r0, [pc, #140]	; (8000d4c <s_stopped+0x98>)
 8000cc0:	f003 feaa 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4820      	ldr	r0, [pc, #128]	; (8000d4c <s_stopped+0x98>)
 8000cca:	f003 fea5 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	481e      	ldr	r0, [pc, #120]	; (8000d4c <s_stopped+0x98>)
 8000cd4:	f003 fea0 	bl	8004a18 <HAL_GPIO_WritePin>

	// stop movement
	motion_stop();
 8000cd8:	f000 fbbe 	bl	8001458 <motion_stop>

	if(route_finished)
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <s_stopped+0x9c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d009      	beq.n	8000cf8 <s_stopped+0x44>
	{
		bluet_receive();
 8000ce4:	f7ff fe9a 	bl	8000a1c <bluet_receive>
		if(bluet_status == BLUET_RECEIVING)
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <s_stopped+0xa0>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d12a      	bne.n	8000d46 <s_stopped+0x92>
			// route finished and receiving new route
			nstate = S_RECEIVE;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <s_stopped+0xa4>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
		// or robot has been waiting too much time for user to pick up his goods.
		// Restart movement.
		nstate = S_FLW_LINE;

	// Else, continue in S_STOPPED
}
 8000cf6:	e026      	b.n	8000d46 <s_stopped+0x92>
	else if((motion_status != MOT_HOLD) && (motion_status != MOT_TIMEOUT))
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <s_stopped+0xa8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d007      	beq.n	8000d10 <s_stopped+0x5c>
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <s_stopped+0xa8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d003      	beq.n	8000d10 <s_stopped+0x5c>
		nstate = S_FLW_LINE;
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <s_stopped+0xa4>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	701a      	strb	r2, [r3, #0]
}
 8000d0e:	e01a      	b.n	8000d46 <s_stopped+0x92>
	else if(motion_status == MOT_HOLD)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <s_stopped+0xa8>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b03      	cmp	r3, #3
 8000d16:	d103      	bne.n	8000d20 <s_stopped+0x6c>
		nstate = S_ERROR;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <s_stopped+0xa4>)
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	e012      	b.n	8000d46 <s_stopped+0x92>
	else if((!route_finished) && ((button.pin_output == 1) || (motion_status == MOT_OFF && timeout_flag)))
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <s_stopped+0x9c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10e      	bne.n	8000d46 <s_stopped+0x92>
 8000d28:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <s_stopped+0xac>)
 8000d2a:	7a9b      	ldrb	r3, [r3, #10]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d007      	beq.n	8000d40 <s_stopped+0x8c>
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <s_stopped+0xa8>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d106      	bne.n	8000d46 <s_stopped+0x92>
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <s_stopped+0xb0>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <s_stopped+0x92>
		nstate = S_FLW_LINE;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <s_stopped+0xa4>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000000 	.word	0x20000000
 8000d58:	200003aa 	.word	0x200003aa
 8000d5c:	20000054 	.word	0x20000054
 8000d60:	20000540 	.word	0x20000540
 8000d64:	200003e4 	.word	0x200003e4

08000d68 <s_receive>:

/******************************************************************************
State Receive
******************************************************************************/
static void s_receive(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	write_led(LRED,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d72:	4812      	ldr	r0, [pc, #72]	; (8000dbc <s_receive+0x54>)
 8000d74:	f003 fe50 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	480f      	ldr	r0, [pc, #60]	; (8000dbc <s_receive+0x54>)
 8000d7e:	f003 fe4b 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <s_receive+0x54>)
 8000d88:	f003 fe46 	bl	8004a18 <HAL_GPIO_WritePin>


	bluet_receive();
 8000d8c:	f7ff fe46 	bl	8000a1c <bluet_receive>

	if(bluet_status == BLUET_OK)
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <s_receive+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10e      	bne.n	8000db6 <s_receive+0x4e>
	{
		// route received
		route_finished = 0;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <s_receive+0x5c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		bluet_status = BLUET_READY;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <s_receive+0x58>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]

		// initialize debounce button and start timer it used in S_STOPPED
		debounce_start(&button, USER_BTN_PORT, USER_BTN_PIN);
 8000da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <s_receive+0x60>)
 8000daa:	4808      	ldr	r0, [pc, #32]	; (8000dcc <s_receive+0x64>)
 8000dac:	f7ff fed6 	bl	8000b5c <debounce_start>

		nstate = S_STOPPED;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <s_receive+0x68>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
//			route_finished = 0;
//			bluet_st = BLUET_READY;
//			nstate = S_STOPPED;
//		}
//	}
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000020 	.word	0x20000020
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	20000540 	.word	0x20000540
 8000dd0:	200003aa 	.word	0x200003aa

08000dd4 <s_flw_line>:

/******************************************************************************
State Follow Line
******************************************************************************/
static void s_flw_line(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	write_led(LRED,0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dde:	4814      	ldr	r0, [pc, #80]	; (8000e30 <s_flw_line+0x5c>)
 8000de0:	f003 fe1a 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	4811      	ldr	r0, [pc, #68]	; (8000e30 <s_flw_line+0x5c>)
 8000dea:	f003 fe15 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2101      	movs	r1, #1
 8000df2:	480f      	ldr	r0, [pc, #60]	; (8000e30 <s_flw_line+0x5c>)
 8000df4:	f003 fe10 	bl	8004a18 <HAL_GPIO_WritePin>
	// start movement
	motion_start();
 8000df8:	f000 fb0e 	bl	8001418 <motion_start>

	switch((uint8_t)motion_status)
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <s_flw_line+0x60>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d00e      	beq.n	8000e22 <s_flw_line+0x4e>
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	dc10      	bgt.n	8000e2a <s_flw_line+0x56>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d002      	beq.n	8000e12 <s_flw_line+0x3e>
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d004      	beq.n	8000e1a <s_flw_line+0x46>
			// out of route
			nstate = S_ERROR;
	}

	// Else, continue following line
}
 8000e10:	e00b      	b.n	8000e2a <s_flw_line+0x56>
			nstate = S_RD_RFID;
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <s_flw_line+0x64>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	701a      	strb	r2, [r3, #0]
			break;
 8000e18:	e007      	b.n	8000e2a <s_flw_line+0x56>
			nstate = S_STOPPED;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <s_flw_line+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
			break;
 8000e20:	e003      	b.n	8000e2a <s_flw_line+0x56>
			nstate = S_ERROR;
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <s_flw_line+0x64>)
 8000e24:	2206      	movs	r2, #6
 8000e26:	701a      	strb	r2, [r3, #0]
}
 8000e28:	e7ff      	b.n	8000e2a <s_flw_line+0x56>
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020400 	.word	0x40020400
 8000e34:	20000054 	.word	0x20000054
 8000e38:	200003aa 	.word	0x200003aa

08000e3c <s_rd_rfid>:
		.result = 0,
		.type = 0
};

static void s_rd_rfid(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	uint8_t err;

	write_led(LRED,0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e48:	4811      	ldr	r0, [pc, #68]	; (8000e90 <s_rd_rfid+0x54>)
 8000e4a:	f003 fde5 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,1);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <s_rd_rfid+0x54>)
 8000e54:	f003 fde0 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,1);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	480c      	ldr	r0, [pc, #48]	; (8000e90 <s_rd_rfid+0x54>)
 8000e5e:	f003 fddb 	bl	8004a18 <HAL_GPIO_WritePin>

	// start movement
	// wait for RFID read or timeout (POLLING MODE)
	err = RFID_read(&rfid, RFID_TIMEOUT);
 8000e62:	2102      	movs	r1, #2
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <s_rd_rfid+0x58>)
 8000e66:	f000 fdf5 	bl	8001a54 <RFID_read>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	// stop movement
	motion_stop();
 8000e6e:	f000 faf3 	bl	8001458 <motion_stop>

	// read RFID correctly?
	if(err == MI_OK)
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <s_rd_rfid+0x44>
	{
		// calculate next movement on the route
		nstate = S_NEXT_MOV;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <s_rd_rfid+0x5c>)
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	701a      	strb	r2, [r3, #0]
	}
	else
		// RFID timeout
		// continue to error state
		nstate = S_ERROR;
}
 8000e7e:	e002      	b.n	8000e86 <s_rd_rfid+0x4a>
		nstate = S_ERROR;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <s_rd_rfid+0x5c>)
 8000e82:	2206      	movs	r2, #6
 8000e84:	701a      	strb	r2, [r3, #0]
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020400 	.word	0x40020400
 8000e94:	200003ac 	.word	0x200003ac
 8000e98:	200003aa 	.word	0x200003aa

08000e9c <s_next_mov>:
//		cross_found_func,
//		room_found_func
//};

static void s_next_mov(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	write_led(LRED,1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <s_next_mov+0x34>)
 8000ea8:	f003 fdb6 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	4807      	ldr	r0, [pc, #28]	; (8000ed0 <s_next_mov+0x34>)
 8000eb2:	f003 fdb1 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <s_next_mov+0x34>)
 8000ebc:	f003 fdac 	bl	8004a18 <HAL_GPIO_WritePin>
//	nstate = S_STOPPED;
//
	//-----------------------------


	next_move_dir = MOVE_LEFT;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <s_next_mov+0x38>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]

	nstate = S_ROTATE;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <s_next_mov+0x3c>)
 8000ec8:	2205      	movs	r2, #5
 8000eca:	701a      	strb	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	200003ab 	.word	0x200003ab
 8000ed8:	200003aa 	.word	0x200003aa

08000edc <s_rotate>:

/******************************************************************************
State Rotate
******************************************************************************/
static void s_rotate(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
	uint8_t err;

	write_led(LRED,1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <s_rotate+0x54>)
 8000eea:	f003 fd95 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	480f      	ldr	r0, [pc, #60]	; (8000f30 <s_rotate+0x54>)
 8000ef4:	f003 fd90 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <s_rotate+0x54>)
 8000efe:	f003 fd8b 	bl	8004a18 <HAL_GPIO_WritePin>

	// rotate to direction 'next_move_dir' (POLLING MODE)
	err = lfollower_rotate(next_move_dir, ROTATE_TIMEOUT);
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <s_rotate+0x58>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	2104      	movs	r1, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f960 	bl	80011d0 <lfollower_rotate>
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]

	// rotate has returned error?
	if(err)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <s_rotate+0x46>
		// rotate TIMEOUT
		// rotate was not successfull
		nstate = S_ERROR;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <s_rotate+0x5c>)
 8000f1c:	2206      	movs	r2, #6
 8000f1e:	701a      	strb	r2, [r3, #0]
	else
		// turn completed. Restart following line
		nstate = S_FLW_LINE;
}
 8000f20:	e002      	b.n	8000f28 <s_rotate+0x4c>
		nstate = S_FLW_LINE;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <s_rotate+0x5c>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	701a      	strb	r2, [r3, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020400 	.word	0x40020400
 8000f34:	200003ab 	.word	0x200003ab
 8000f38:	200003aa 	.word	0x200003aa

08000f3c <s_error>:

/******************************************************************************
State Error
******************************************************************************/
static void s_error(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	write_led(LRED,1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <s_error+0x28>)
 8000f48:	f003 fd66 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LBLUE,1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <s_error+0x28>)
 8000f52:	f003 fd61 	bl	8004a18 <HAL_GPIO_WritePin>
	write_led(LGREEN,0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4802      	ldr	r0, [pc, #8]	; (8000f64 <s_error+0x28>)
 8000f5c:	f003 fd5c 	bl	8004a18 <HAL_GPIO_WritePin>
//	if(error_timeout)
//	{
//		// shutdown robot
//		// ????
//	}
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40020400 	.word	0x40020400

08000f68 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a4a      	ldr	r2, [pc, #296]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b48      	ldr	r3, [pc, #288]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b45      	ldr	r3, [pc, #276]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a44      	ldr	r2, [pc, #272]	; (80010ac <MX_GPIO_Init+0x144>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a38      	ldr	r2, [pc, #224]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b30      	ldr	r3, [pc, #192]	; (80010ac <MX_GPIO_Init+0x144>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2160      	movs	r1, #96	; 0x60
 8000ffa:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x148>)
 8000ffc:	f003 fd0c 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f244 2181 	movw	r1, #17025	; 0x4281
 8001006:	482b      	ldr	r0, [pc, #172]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8001008:	f003 fd06 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f244 0104 	movw	r1, #16388	; 0x4004
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <MX_GPIO_Init+0x150>)
 8001014:	f003 fd00 	bl	8004a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <MX_GPIO_Init+0x154>)
 800102c:	f003 fb30 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8001030:	2360      	movs	r3, #96	; 0x60
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	481a      	ldr	r0, [pc, #104]	; (80010b0 <MX_GPIO_Init+0x148>)
 8001048:	f003 fb22 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 800104c:	f244 2381 	movw	r3, #17025	; 0x4281
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_GPIO_Init+0x14c>)
 8001066:	f003 fb13 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 800106a:	f244 0304 	movw	r3, #16388	; 0x4004
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_GPIO_Init+0x150>)
 8001084:	f003 fb04 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_GPIO_Init+0x154>)
 800109e:	f003 faf7 	bl	8004690 <HAL_GPIO_Init>

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020c00 	.word	0x40020c00
 80010bc:	40020800 	.word	0x40020800

080010c0 <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <lfollower_start+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d007      	beq.n	80010dc <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 80010cc:	f000 fc20 	bl	8001910 <qtr_init>
	// start movement
	move_start();
 80010d0:	f000 fa70 	bl	80015b4 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <lfollower_start+0x20>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e000      	b.n	80010de <lfollower_start+0x1e>
		return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200003b8 	.word	0x200003b8

080010e4 <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <lfollower_stop+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 80010f0:	f000 fc1c 	bl	800192c <qtr_kill>
	// stop movement
	move_stop();
 80010f4:	f000 fa72 	bl	80015dc <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <lfollower_stop+0x20>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	e000      	b.n	8001102 <lfollower_stop+0x1e>
		return;
 8001100:	bf00      	nop
}
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200003b8 	.word	0x200003b8

08001108 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	ed2d 8b02 	vpush	{d8}
 800110e:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8001110:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <lfollower_isr+0xb8>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8001118:	2301      	movs	r3, #1
 800111a:	e04b      	b.n	80011b4 <lfollower_isr+0xac>

	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 800111c:	2002      	movs	r0, #2
 800111e:	f000 fc0f 	bl	8001940 <qtr_get_digital>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d115      	bne.n	8001154 <lfollower_isr+0x4c>
		(qtr_get_digital(LF_SENSOR_CTR_L) == 0) &&
 8001128:	2003      	movs	r0, #3
 800112a:	f000 fc09 	bl	8001940 <qtr_get_digital>
 800112e:	4603      	mov	r3, r0
	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <lfollower_isr+0x4c>
		(qtr_get_digital(LF_SENSOR_L) == 0) &&
 8001134:	2004      	movs	r0, #4
 8001136:	f000 fc03 	bl	8001940 <qtr_get_digital>
 800113a:	4603      	mov	r3, r0
		(qtr_get_digital(LF_SENSOR_CTR_L) == 0) &&
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <lfollower_isr+0x4c>
		(qtr_get_digital(LF_SENSOR_R) == 0))
 8001140:	2001      	movs	r0, #1
 8001142:	f000 fbfd 	bl	8001940 <qtr_get_digital>
 8001146:	4603      	mov	r3, r0
		(qtr_get_digital(LF_SENSOR_L) == 0) &&
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <lfollower_isr+0x4c>
	{
		// robot is not over the line
		// stop line follower
		lfollower_stop();
 800114c:	f7ff ffca 	bl	80010e4 <lfollower_stop>
		// send error: no line to follow
		return E_LF_NO_LINE;
 8001150:	2305      	movs	r3, #5
 8001152:	e02f      	b.n	80011b4 <lfollower_isr+0xac>
	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8001154:	2004      	movs	r0, #4
 8001156:	f000 fc2b 	bl	80019b0 <qtr_get_analog>
 800115a:	eeb0 8a40 	vmov.f32	s16, s0
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fc26 	bl	80019b0 <qtr_get_analog>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	eef0 0a67 	vmov.f32	s1, s15
 800116c:	eeb0 0a48 	vmov.f32	s0, s16
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <lfollower_isr+0xbc>)
 8001172:	f000 fb41 	bl	80017f8 <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <lfollower_isr+0xbc>)
 8001178:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800117c:	eef1 7a67 	vneg.f32	s15, s15
 8001180:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011c8 <lfollower_isr+0xc0>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80011cc <lfollower_isr+0xc4>
 800118c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <lfollower_isr+0xbc>)
 8001192:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001196:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80011c8 <lfollower_isr+0xc0>
 800119a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800119e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011cc <lfollower_isr+0xc4>
 80011a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011a6:	eef0 0a67 	vmov.f32	s1, s15
 80011aa:	eeb0 0a47 	vmov.f32	s0, s14
 80011ae:	f000 fa2b 	bl	8001608 <move_control>

	return EXIT_SUCCESS;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	ecbd 8b02 	vpop	{d8}
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200003b8 	.word	0x200003b8
 80011c4:	20000024 	.word	0x20000024
 80011c8:	3e99999a 	.word	0x3e99999a
 80011cc:	3f333333 	.word	0x3f333333

080011d0 <lfollower_rotate>:
@brief 	Rotates the robot to 'dir' direction, stopping when sensor founds the line
@param	dir - direction to rotate
@retval '1' if timeout occured
******************************************************************************/
uint8_t lfollower_rotate(move_dir_e dir, uint8_t timeout)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
	// start movement and rotate to 'dir' at speed equal to TURN_SPEED
	move_rotate(dir, TURN_SPEED);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	425b      	negs	r3, r3
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ee:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80011f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	eef6 6a08 	vmov.f32	s13, #104	; 0x3f400000  0.750
 8001206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800120a:	eef0 0a67 	vmov.f32	s1, s15
 800120e:	eeb0 0a47 	vmov.f32	s0, s14
 8001212:	f000 f9f9 	bl	8001608 <move_control>
	// start rotate 4second timeout
	timeout_start(timeout);
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	4618      	mov	r0, r3
 800121a:	f001 fcb7 	bl	8002b8c <timeout_start>
	// start storing QTR sensor values
	qtr_init();
 800121e:	f000 fb77 	bl	8001910 <qtr_init>

	// if dir == MOVE_RIGHT, check when SENSOR1 is over the line
	// if dir == MOVE_LEFT, check when SENSOR8 is over the line

	// dir can be -1 (MOVE_RIGHT) or +1 (MOVE_LEFT)
	dir += 1;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	3301      	adds	r3, #1
 8001226:	b2db      	uxtb	r3, r3
 8001228:	71fb      	strb	r3, [r7, #7]
	// dir is now 0 or 2
	dir >>= 1;
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	105b      	asrs	r3, r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
	// dir is now 0 (MOVE_RIGHT) or 1 (MOVE_LEFT)
	// so, if: 	dir = 0 					-> SENSOR1
	//			dir = 1* (QTR_SENS_NUM - 1) -> SENSOR8 (last sensor)
	while((qtr_get_digital(dir * (QTR_SENS_NUM - 1)) == 0) && (timeout_flag == 0))
 8001232:	bf00      	nop
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	461a      	mov	r2, r3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4413      	add	r3, r2
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fb7e 	bl	8001940 <qtr_get_digital>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <lfollower_rotate+0x82>
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <lfollower_rotate+0xa4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <lfollower_rotate+0x64>
		;

	// stop rotating
	move_stop();
 8001252:	f000 f9c3 	bl	80015dc <move_stop>
	// stop storing QTR sensor values
	qtr_kill();
 8001256:	f000 fb69 	bl	800192c <qtr_kill>

	// if timeout occured, then we must return an error code, signaling a
	// non successful rotate
	//if(num_timeout_2sec < TIMEOUT_4SEC)
	if(timeout_flag)
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <lfollower_rotate+0xa4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <lfollower_rotate+0x96>
		return E_TIMEOUT;
 8001262:	2304      	movs	r3, #4
 8001264:	e002      	b.n	800126c <lfollower_rotate+0x9c>

	// stop timeout
	timeout_stop();
 8001266:	f001 fcc3 	bl	8002bf0 <timeout_stop>
	// if timeout didnt occurred then rotate was completed
	return EXIT_SUCCESS;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200003e4 	.word	0x200003e4

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127e:	f001 fe98 	bl	8002fb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001282:	f000 f831 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001286:	f7ff fe6f 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 800128a:	f7ff fced 	bl	8000c68 <MX_DMA_Init>
  MX_SPI3_Init();
 800128e:	f000 ffa5 	bl	80021dc <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001292:	f001 fcf3 	bl	8002c7c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001296:	f001 fae7 	bl	8002868 <MX_TIM6_Init>
  MX_ADC3_Init();
 800129a:	f7ff fa07 	bl	80006ac <MX_ADC3_Init>
  MX_TIM4_Init();
 800129e:	f001 fa7f 	bl	80027a0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80012a2:	f001 fcbb 	bl	8002c1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80012a6:	f001 fa2b 	bl	8002700 <MX_TIM3_Init>
  MX_ADC2_Init();
 80012aa:	f7ff f9ad 	bl	8000608 <MX_ADC2_Init>
  MX_TIM13_Init();
 80012ae:	f001 fb11 	bl	80028d4 <MX_TIM13_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <main+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <main+0x68>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]

  int err = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
//	}
//
//	while(1)
//		;

	  fsm_func_ptr[state]();
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <main+0x64>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <main+0x6c>)
 80012ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ce:	4798      	blx	r3
	  state = nstate;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <main+0x68>)
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	4b01      	ldr	r3, [pc, #4]	; (80012dc <main+0x64>)
 80012d6:	701a      	strb	r2, [r3, #0]
	  fsm_func_ptr[state]();
 80012d8:	e7f3      	b.n	80012c2 <main+0x4a>
 80012da:	bf00      	nop
 80012dc:	200003a9 	.word	0x200003a9
 80012e0:	200003aa 	.word	0x200003aa
 80012e4:	20000004 	.word	0x20000004

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0b8      	sub	sp, #224	; 0xe0
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012f2:	2234      	movs	r2, #52	; 0x34
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 ff0a 	bl	8009110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	2290      	movs	r2, #144	; 0x90
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fefb 	bl	8009110 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <SystemClock_Config+0x11c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a39      	ldr	r2, [pc, #228]	; (8001404 <SystemClock_Config+0x11c>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b37      	ldr	r3, [pc, #220]	; (8001404 <SystemClock_Config+0x11c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <SystemClock_Config+0x120>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <SystemClock_Config+0x120>)
 8001338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <SystemClock_Config+0x120>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001350:	2301      	movs	r3, #1
 8001352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001356:	2310      	movs	r3, #16
 8001358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001368:	2308      	movs	r3, #8
 800136a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800136e:	23d8      	movs	r3, #216	; 0xd8
 8001370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fbcb 	bl	8004b20 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001390:	f000 f83c 	bl	800140c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001394:	f003 fb74 	bl	8004a80 <HAL_PWREx_EnableOverDrive>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800139e:	f000 f835 	bl	800140c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013c8:	2107      	movs	r1, #7
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fe56 	bl	800507c <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80013d6:	f000 f819 	bl	800140c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 80013da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013de:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 f81b 	bl	8005428 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x114>
  {
    Error_Handler();
 80013f8:	f000 f808 	bl	800140c <Error_Handler>
  }
}
 80013fc:	bf00      	nop
 80013fe:	37e0      	adds	r7, #224	; 0xe0
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40007000 	.word	0x40007000

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <motion_start+0x38>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d012      	beq.n	800144a <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8001424:	f7ff fe4c 	bl	80010c0 <lfollower_start>

	//HAL_Delay(500);

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <motion_start+0x38>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d103      	bne.n	8001438 <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <motion_start+0x38>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
		return;
 8001436:	e009      	b.n	800144c <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <motion_start+0x38>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 800143e:	f001 f819 	bl	8002474 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <motion_start+0x3c>)
 8001444:	f005 fb1c 	bl	8006a80 <HAL_TIM_Base_Start_IT>
 8001448:	e000      	b.n	800144c <motion_start+0x34>
		return;
 800144a:	bf00      	nop
	//TIM_MOTION.Instance->EGR = TIM_EGR_UG;
}
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000054 	.word	0x20000054
 8001454:	200006f8 	.word	0x200006f8

08001458 <motion_stop>:

void motion_stop(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 800145c:	f7ff fe42 	bl	80010e4 <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <motion_stop+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d005      	beq.n	8001474 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <motion_stop+0x24>)
 800146a:	f005 fb81 	bl	8006b70 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 800146e:	f001 f813 	bl	8002498 <stop_detector_deInit>
 8001472:	e000      	b.n	8001476 <motion_stop+0x1e>
		return;
 8001474:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000054 	.word	0x20000054
 800147c:	200006f8 	.word	0x200006f8

08001480 <motion_isr>:

void motion_isr(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8001486:	f001 f815 	bl	80024b4 <stop_detector_isr>
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <motion_isr+0x80>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d111      	bne.n	80014ba <motion_isr+0x3a>
	{
		if(timeout_flag)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <motion_isr+0x84>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <motion_isr+0x80>)
 80014a0:	2205      	movs	r2, #5
 80014a2:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 80014a4:	f7ff ffd8 	bl	8001458 <motion_stop>
			// motion timeout occured
//			motion_status = MOT_TIMEOUT;
			return;
 80014a8:	e027      	b.n	80014fa <motion_isr+0x7a>
		}
		if(err == 0)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d123      	bne.n	80014f8 <motion_isr+0x78>
		{
			// obstacle has been moved
			// stop timeout
			timeout_stop();
 80014b0:	f001 fb9e 	bl	8002bf0 <timeout_stop>
			// restart movement
			motion_start();
 80014b4:	f7ff ffb0 	bl	8001418 <motion_start>
 80014b8:	e011      	b.n	80014de <motion_isr+0x5e>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00e      	beq.n	80014de <motion_isr+0x5e>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	3301      	adds	r3, #1
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <motion_isr+0x80>)
 80014c8:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <motion_isr+0x80>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d105      	bne.n	80014de <motion_isr+0x5e>
		{
			timeout_start(HOLD_TIMEOUT);
 80014d2:	201e      	movs	r0, #30
 80014d4:	f001 fb5a 	bl	8002b8c <timeout_start>
			motion_stop();
 80014d8:	f7ff ffbe 	bl	8001458 <motion_stop>
			return;
 80014dc:	e00d      	b.n	80014fa <motion_isr+0x7a>
//		return;
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 80014de:	f7ff fe13 	bl	8001108 <lfollower_isr>
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	if(err)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <motion_isr+0x7a>
	{
		// signal motion error
		motion_status = MOT_ERR;
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <motion_isr+0x80>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 80014f2:	f7ff ffb1 	bl	8001458 <motion_stop>
 80014f6:	e000      	b.n	80014fa <motion_isr+0x7a>
			return;
 80014f8:	bf00      	nop
	}
//	else
//		motion_start();
}
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000054 	.word	0x20000054
 8001504:	200003e4 	.word	0x200003e4

08001508 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <motor_init+0x1c>)
 8001518:	f005 fbb0 	bl	8006c7c <HAL_TIM_PWM_Start>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000614 	.word	0x20000614

08001528 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <motor_kill+0x28>)
 8001538:	f005 fc9a 	bl	8006e70 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 800153c:	2202      	movs	r2, #2
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f807 	bl	8001554 <motor_control>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000614 	.word	0x20000614

08001554 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
 8001560:	4613      	mov	r3, r2
 8001562:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6858      	ldr	r0, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8919      	ldrh	r1, [r3, #8]
 800156c:	78bb      	ldrb	r3, [r7, #2]
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <motor_control+0x58>)
 8001570:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001574:	461a      	mov	r2, r3
 8001576:	f003 fa4f 	bl	8004a18 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68d8      	ldr	r0, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	8a19      	ldrh	r1, [r3, #16]
 8001582:	78bb      	ldrb	r3, [r7, #2]
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <motor_control+0x58>)
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	461a      	mov	r2, r3
 800158e:	f003 fa43 	bl	8004a18 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	b292      	uxth	r2, r2
 800159c:	4619      	mov	r1, r3
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <motor_control+0x5c>)
 80015a0:	f001 fa98 	bl	8002ad4 <set_pwm>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0800bed0 	.word	0x0800bed0
 80015b0:	20000614 	.word	0x20000614

080015b4 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <move_start+0x1c>)
 80015ba:	f7ff ffa5 	bl	8001508 <motor_init>
	motor_init(&motor_left);
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <move_start+0x20>)
 80015c0:	f7ff ffa2 	bl	8001508 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <move_start+0x24>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000058 	.word	0x20000058
 80015d4:	2000006c 	.word	0x2000006c
 80015d8:	200003b9 	.word	0x200003b9

080015dc <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <move_stop+0x1c>)
 80015e2:	f7ff ffa1 	bl	8001528 <motor_kill>
	motor_kill(&motor_left);
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <move_stop+0x20>)
 80015e8:	f7ff ff9e 	bl	8001528 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <move_stop+0x24>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000058 	.word	0x20000058
 80015fc:	2000006c 	.word	0x2000006c
 8001600:	200003b9 	.word	0x200003b9
 8001604:	00000000 	.word	0x00000000

08001608 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001612:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <move_control+0xd0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 800161e:	f7ff ffc9 	bl	80015b4 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 8001622:	edd7 7a03 	vldr	s15, [r7, #12]
 8001626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80016c8 <move_control+0xc0>
 800162e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001632:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001636:	edc7 7a01 	vstr	s15, [r7, #4]
 800163a:	793b      	ldrb	r3, [r7, #4]
 800163c:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 800163e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001646:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80016c8 <move_control+0xc0>
 800164a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800164e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001652:	edc7 7a01 	vstr	s15, [r7, #4]
 8001656:	793b      	ldrb	r3, [r7, #4]
 8001658:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 800165a:	edd7 7a02 	vldr	s15, [r7, #8]
 800165e:	eef0 7ae7 	vabs.f32	s15, s15
 8001662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001666:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80016d0 <move_control+0xc8>
 800166a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800166e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001672:	edc7 7a01 	vstr	s15, [r7, #4]
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	b2d9      	uxtb	r1, r3
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	4815      	ldr	r0, [pc, #84]	; (80016dc <move_control+0xd4>)
 8001686:	f7ff ff65 	bl	8001554 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 800168a:	edd7 7a03 	vldr	s15, [r7, #12]
 800168e:	eef0 7ae7 	vabs.f32	s15, s15
 8001692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001696:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80016d0 <move_control+0xc8>
 800169a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800169e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80016a6:	793b      	ldrb	r3, [r7, #4]
 80016a8:	b2d9      	uxtb	r1, r3
 80016aa:	7dfb      	ldrb	r3, [r7, #23]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	480a      	ldr	r0, [pc, #40]	; (80016e0 <move_control+0xd8>)
 80016b6:	f7ff ff4d 	bl	8001554 <motor_control>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	7ae147ae 	.word	0x7ae147ae
 80016cc:	3fefae14 	.word	0x3fefae14
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40590000 	.word	0x40590000
 80016d8:	200003b9 	.word	0x200003b9
 80016dc:	20000058 	.word	0x20000058
 80016e0:	2000006c 	.word	0x2000006c

080016e4 <parse_cmd>:

/*
	Analyses the command sent in str_in and execute its callback
*/
char parse_cmd(const Command_t cmd_list[], const char *str_in)
{		
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	char **argv = NULL; // List of arguments
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
	char *arg; // aux variable. Holds latest found argument
	char *s; // copy of received command. Necessary to use strtok
	
	uint8_t len;
	uint8_t argc = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
	char retval = (-1);//(char)(-ECMDNF);
 80016f6:	23ff      	movs	r3, #255	; 0xff
 80016f8:	75bb      	strb	r3, [r7, #22]
	
	if ((str_in == NULL) || (strlen(str_in) == 0)) // empty command
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <parse_cmd+0x24>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <parse_cmd+0x28>
		return (-1);//(char)(-ENOCMD);
 8001708:	23ff      	movs	r3, #255	; 0xff
 800170a:	e06f      	b.n	80017ec <parse_cmd+0x108>
	//if (cmd_list == NULL) // no list
		//return (-ENOLIST);   

	len = strlen(str_in) + 1;
 800170c:	6838      	ldr	r0, [r7, #0]
 800170e:	f7fe fda1 	bl	8000254 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
	s = malloc(len);                 // just in case str_in is const
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	4618      	mov	r0, r3
 800171e:	f007 fce7 	bl	80090f0 <malloc>
 8001722:	4603      	mov	r3, r0
 8001724:	60bb      	str	r3, [r7, #8]
	
	if(s == NULL)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <parse_cmd+0x4c>
		return (-1);//(char)(-ENOMEM);
 800172c:	23ff      	movs	r3, #255	; 0xff
 800172e:	e05d      	b.n	80017ec <parse_cmd+0x108>
	
	strcpy(s, str_in);
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	68b8      	ldr	r0, [r7, #8]
 8001734:	f008 fa2e 	bl	8009b94 <strcpy>
	arg = strtok(s, DELIMETER);
 8001738:	492e      	ldr	r1, [pc, #184]	; (80017f4 <parse_cmd+0x110>)
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f008 fa32 	bl	8009ba4 <strtok>
 8001740:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001742:	e025      	b.n	8001790 <parse_cmd+0xac>
	{
		argc++;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	3301      	adds	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
		len = sizeof (argv);
 800174a:	2304      	movs	r3, #4
 800174c:	73fb      	strb	r3, [r7, #15]
		if(argc == 1)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d106      	bne.n	8001762 <parse_cmd+0x7e>
				argv = malloc(len);
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4618      	mov	r0, r3
 8001758:	f007 fcca 	bl	80090f0 <malloc>
 800175c:	4603      	mov	r3, r0
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	e008      	b.n	8001774 <parse_cmd+0x90>
		else
				argv = realloc(argv, argc * len);
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4619      	mov	r1, r3
 800176c:	69f8      	ldr	r0, [r7, #28]
 800176e:	f008 f9c5 	bl	8009afc <realloc>
 8001772:	61f8      	str	r0, [r7, #28]

		argv[argc-1] = arg;
 8001774:	7dfa      	ldrb	r2, [r7, #23]
 8001776:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	601a      	str	r2, [r3, #0]
		arg = strtok(NULL, DELIMETER);
 8001786:	491b      	ldr	r1, [pc, #108]	; (80017f4 <parse_cmd+0x110>)
 8001788:	2000      	movs	r0, #0
 800178a:	f008 fa0b 	bl	8009ba4 <strtok>
 800178e:	61b8      	str	r0, [r7, #24]
	while (arg)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1d6      	bne.n	8001744 <parse_cmd+0x60>
	}

	if (argc)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01d      	beq.n	80017d8 <parse_cmd+0xf4>
	{
		const Command_t *p;

		for(p = cmd_list; p->cmd; p++)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	e016      	b.n	80017d0 <parse_cmd+0xec>
		{
			if(strcmp(p->cmd, argv[0]) == 0)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7fe fd47 	bl	8000240 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <parse_cmd+0xe6>
			{
				retval = (p->fn(argc, argv)); // Execute func
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	7dfa      	ldrb	r2, [r7, #23]
 80017be:	69f9      	ldr	r1, [r7, #28]
 80017c0:	4610      	mov	r0, r2
 80017c2:	4798      	blx	r3
 80017c4:	4603      	mov	r3, r0
 80017c6:	75bb      	strb	r3, [r7, #22]
				break;
 80017c8:	e006      	b.n	80017d8 <parse_cmd+0xf4>
		for(p = cmd_list; p->cmd; p++)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	330c      	adds	r3, #12
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1e4      	bne.n	80017a2 <parse_cmd+0xbe>
			}
		}
	}

	// command not found
	if(argv)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <parse_cmd+0x100>
		free(argv);
 80017de:	69f8      	ldr	r0, [r7, #28]
 80017e0:	f007 fc8e 	bl	8009100 <free>

	free(s);
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	f007 fc8b 	bl	8009100 <free>

	return retval;
 80017ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800be90 	.word	0x0800be90

080017f8 <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	ed87 0a02 	vstr	s0, [r7, #8]
 8001804:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 8001808:	ed97 7a02 	vldr	s14, [r7, #8]
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	ed93 7a05 	vldr	s14, [r3, #20]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	edd3 7a04 	vldr	s15, [r3, #16]
 800182e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	ed93 7a02 	vldr	s14, [r3, #8]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	edd3 6a03 	vldr	s13, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	edd3 7a04 	vldr	s15, [r3, #16]
 800184a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	edd3 7a08 	vldr	s15, [r3, #32]
 8001858:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800190c <pid_calcule+0x114>
 800185c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 7a03 	vldr	s15, [r3, #12]
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 7a05 	vldr	s15, [r3, #20]
 8001886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	edd3 7a07 	vldr	s15, [r3, #28]
 8001894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	dd08      	ble.n	80018d6 <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	699a      	ldr	r2, [r3, #24]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 80018d4:	e013      	b.n	80018fe <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80018e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d400      	bmi.n	80018ee <pid_calcule+0xf6>
}
 80018ec:	e007      	b.n	80018fe <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	615a      	str	r2, [r3, #20]
}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	3e99999a 	.word	0x3e99999a

08001910 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001914:	2206      	movs	r2, #6
 8001916:	4903      	ldr	r1, [pc, #12]	; (8001924 <qtr_init+0x14>)
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <qtr_init+0x18>)
 800191a:	f001 fd51 	bl	80033c0 <HAL_ADC_Start_DMA>
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003bc 	.word	0x200003bc
 8001928:	20000498 	.word	0x20000498

0800192c <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <qtr_kill+0x10>)
 8001932:	f001 fe3f 	bl	80035b4 <HAL_ADC_Stop_DMA>
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000498 	.word	0x20000498

08001940 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT) & 0x01;
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4a16      	ldr	r2, [pc, #88]	; (80019a8 <qtr_get_digital+0x68>)
 800194e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800195a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001990 <qtr_get_digital+0x50>
 800195e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001962:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001998 <qtr_get_digital+0x58>
 8001966:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800196a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80019a0 <qtr_get_digital+0x60>
 800196e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	bfcc      	ite	gt
 8001978:	2301      	movgt	r3, #1
 800197a:	2300      	movle	r3, #0
 800197c:	b2db      	uxtb	r3, r3
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	f3af 8000 	nop.w
 8001990:	66666666 	.word	0x66666666
 8001994:	400a6666 	.word	0x400a6666
 8001998:	00000000 	.word	0x00000000
 800199c:	40affe00 	.word	0x40affe00
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	40039999 	.word	0x40039999
 80019a8:	200003bc 	.word	0x200003bc
 80019ac:	00000000 	.word	0x00000000

080019b0 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <qtr_get_analog+0x50>)
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019ca:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80019f0 <qtr_get_analog+0x40>
 80019ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80019d2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80019f8 <qtr_get_analog+0x48>
 80019d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80019de:	eeb0 0a67 	vmov.f32	s0, s15
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	f3af 8000 	nop.w
 80019f0:	66666666 	.word	0x66666666
 80019f4:	400a6666 	.word	0x400a6666
 80019f8:	00000000 	.word	0x00000000
 80019fc:	40affe00 	.word	0x40affe00
 8001a00:	200003bc 	.word	0x200003bc

08001a04 <RFID_RC522_Init>:
#include "tim.h"
#include "timeout.h"

//SPI_HandleTypeDef SpiHandle = hspi1;

void RFID_RC522_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f000 fb71 	bl	80020f0 <TM_MFRC522_CS_Write>

	TM_MFRC522_Reset();
 8001a0e:	f000 f946 	bl	8001c9e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 8001a12:	218d      	movs	r1, #141	; 0x8d
 8001a14:	202a      	movs	r0, #42	; 0x2a
 8001a16:	f000 f87f 	bl	8001b18 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001a1a:	213e      	movs	r1, #62	; 0x3e
 8001a1c:	202b      	movs	r0, #43	; 0x2b
 8001a1e:	f000 f87b 	bl	8001b18 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 8001a22:	2103      	movs	r1, #3
 8001a24:	202c      	movs	r0, #44	; 0x2c
 8001a26:	f000 f877 	bl	8001b18 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 8001a2a:	21e8      	movs	r1, #232	; 0xe8
 8001a2c:	202d      	movs	r0, #45	; 0x2d
 8001a2e:	f000 f873 	bl	8001b18 <TM_MFRC522_WriteRegister>

	// 48dB gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001a32:	2170      	movs	r1, #112	; 0x70
 8001a34:	2026      	movs	r0, #38	; 0x26
 8001a36:	f000 f86f 	bl	8001b18 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	2015      	movs	r0, #21
 8001a3e:	f000 f86b 	bl	8001b18 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(ModeReg, 0x3D);
 8001a42:	213d      	movs	r1, #61	; 0x3d
 8001a44:	2011      	movs	r0, #17
 8001a46:	f000 f867 	bl	8001b18 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8001a4a:	f000 f913 	bl	8001c74 <TM_MFRC522_AntennaOn>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <RFID_read>:
@brief 	Reads RFID card
@para 	rfid struct
@retval rfid status
******************************************************************************/
uint8_t RFID_read(rfid_t *rfid, uint8_t timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
	// RFID status reading
	uint8_t status = -1;
 8001a60:	23ff      	movs	r3, #255	; 0xff
 8001a62:	73fb      	strb	r3, [r7, #15]

  	// enable RFID reader
  	RFID_RC522_Init();
 8001a64:	f7ff ffce 	bl	8001a04 <RFID_RC522_Init>
  	// start 2sec timeout
  	timeout_start(timeout);
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f88e 	bl	8002b8c <timeout_start>

	do
	{
		// check if rfid was read
		status = TM_MFRC522_Check(rfid->CardID, &rfid->type);
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3304      	adds	r3, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4610      	mov	r0, r2
 8001a7a:	f000 f823 	bl	8001ac4 <TM_MFRC522_Check>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	73fb      	strb	r3, [r7, #15]

		if(status == MI_OK)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <RFID_read+0x42>
			// rfid read
			// converts CardID to an hexadecimal string
			bin_to_strhex((unsigned char *)rfid->CardID, sizeof(rfid->CardID), &rfid->result);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2104      	movs	r1, #4
 8001a92:	f000 fb3f 	bl	8002114 <bin_to_strhex>

	} while((status != MI_OK) && (timeout_flag == 0));
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <RFID_read+0x50>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <RFID_read+0x6c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0e5      	beq.n	8001a70 <RFID_read+0x1c>

	if(timeout_flag)
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <RFID_read+0x6c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <RFID_read+0x5c>
		return MI_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e002      	b.n	8001ab6 <RFID_read+0x62>

	// else, stop timeout
	timeout_stop();
 8001ab0:	f001 f89e 	bl	8002bf0 <timeout_stop>
	// return Read status
	return status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200003e4 	.word	0x200003e4

08001ac4 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id, uint8_t* type) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	// REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
	status = TM_MFRC522_Request(PICC_REQIDL, id);
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	2026      	movs	r0, #38	; 0x26
 8001ad2:	f000 f8ef 	bl	8001cb4 <TM_MFRC522_Request>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <TM_MFRC522_Check+0x32>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f9fe 	bl	8001ee2 <TM_MFRC522_Anticoll>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
		//select, return sak and crc
		status = TM_MFRC522_SelectTag(id, type);
 8001aea:	6839      	ldr	r1, [r7, #0]
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fa89 	bl	8002004 <TM_MFRC522_SelectTag>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
	}

	TM_MFRC522_Halt();			//Command card into hibernation
 8001af6:	f000 fadf 	bl	80020b8 <TM_MFRC522_Halt>

	return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <handleError>:
		}
	}
	return MI_OK;
}

void handleError() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	while(1) {
		//BSP_LED_On(LED_RED);
		HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f001 faaf 	bl	800306c <HAL_Delay>
		//BSP_LED_Off(LED_RED);
		HAL_Delay(100);
 8001b0e:	2064      	movs	r0, #100	; 0x64
 8001b10:	f001 faac 	bl	800306c <HAL_Delay>
		HAL_Delay(100);
 8001b14:	e7f8      	b.n	8001b08 <handleError+0x4>
	...

08001b18 <TM_MFRC522_WriteRegister>:
	}
}

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	460a      	mov	r2, r1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71bb      	strb	r3, [r7, #6]
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f000 fae1 	bl	80020f0 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	
	//Send address ## HAL_MAX_DELAY --> infinite poll until process is successful
	addr = (addr << 1) & 0x7E;
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 8001b3c:	1df9      	adds	r1, r7, #7
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	2201      	movs	r2, #1
 8001b44:	480f      	ldr	r0, [pc, #60]	; (8001b84 <TM_MFRC522_WriteRegister+0x6c>)
 8001b46:	f004 f942 	bl	8005dce <HAL_SPI_Transmit>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <TM_MFRC522_WriteRegister+0x40>
		handleError();
 8001b54:	f7ff ffd6 	bl	8001b04 <handleError>
	}
	//Send data
	transmitStatus = HAL_SPI_Transmit(&hspi3, &val, 1, HAL_MAX_DELAY);
 8001b58:	1db9      	adds	r1, r7, #6
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <TM_MFRC522_WriteRegister+0x6c>)
 8001b62:	f004 f934 	bl	8005dce <HAL_SPI_Transmit>
 8001b66:	4603      	mov	r3, r0
 8001b68:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <TM_MFRC522_WriteRegister+0x5c>
		handleError();
 8001b70:	f7ff ffc8 	bl	8001b04 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f000 fabb 	bl	80020f0 <TM_MFRC522_CS_Write>
}
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000054c 	.word	0x2000054c

08001b88 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73bb      	strb	r3, [r7, #14]
//	uint8_t retval = 0x00;
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 faaa 	bl	80020f0 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	addr = (addr << 1) | 0x80;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 8001bac:	1df9      	adds	r1, r7, #7
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <TM_MFRC522_ReadRegister+0x78>)
 8001bb6:	f004 f90a 	bl	8005dce <HAL_SPI_Transmit>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <TM_MFRC522_ReadRegister+0x40>
		handleError();
 8001bc4:	f7ff ff9e 	bl	8001b04 <handleError>
	}

	uint8_t dummy = MFRC522_DUMMY;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	737b      	strb	r3, [r7, #13]
	transmitStatus = HAL_SPI_TransmitReceive(&hspi3, &dummy, &val, 1, HAL_MAX_DELAY);
 8001bcc:	f107 020e 	add.w	r2, r7, #14
 8001bd0:	f107 010d 	add.w	r1, r7, #13
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <TM_MFRC522_ReadRegister+0x78>)
 8001bde:	f004 fa64 	bl	80060aa <HAL_SPI_TransmitReceive>
 8001be2:	4603      	mov	r3, r0
 8001be4:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <TM_MFRC522_ReadRegister+0x68>
		handleError();
 8001bec:	f7ff ff8a 	bl	8001b04 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 fa7d 	bl	80020f0 <TM_MFRC522_CS_Write>

	return val;
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000054c 	.word	0x2000054c

08001c04 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ffb6 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79bb      	ldrb	r3, [r7, #6]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff74 	bl	8001b18 <TM_MFRC522_WriteRegister>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff9c 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b25a      	sxtb	r2, r3
 8001c54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff56 	bl	8001b18 <TM_MFRC522_WriteRegister>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001c7a:	2014      	movs	r0, #20
 8001c7c:	f7ff ff84 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001c8e:	2103      	movs	r1, #3
 8001c90:	2014      	movs	r0, #20
 8001c92:	f7ff ffb7 	bl	8001c04 <TM_MFRC522_SetBitMask>
	}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff ff37 	bl	8001b18 <TM_MFRC522_WriteRegister>
	HAL_Delay(50);
 8001caa:	2032      	movs	r0, #50	; 0x32
 8001cac:	f001 f9de 	bl	800306c <HAL_Delay>
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001cc0:	2107      	movs	r1, #7
 8001cc2:	200d      	movs	r0, #13
 8001cc4:	f7ff ff28 	bl	8001b18 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	200c      	movs	r0, #12
 8001cdc:	f000 f80f 	bl	8001cfe <TM_MFRC522_ToCard>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK && backBits != 0x10) {
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d104      	bne.n	8001cf4 <TM_MFRC522_Request+0x40>
 8001cea:	89bb      	ldrh	r3, [r7, #12]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d001      	beq.n	8001cf4 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <TM_MFRC522_ToCard>:
TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, // the command to execute - one of the PCD_Command enums
										uint8_t* sendData, // pointer to the data to transfer to the FIFO
										uint8_t sendLen, // number of bytes to transfer to the FIFO
										uint8_t* backData, // NULL or pointer to buffer if data should be read back after executing the command
										uint16_t* backLen // in: max number of bytes to write to *backData, out: the number of bytes returned
									) {
 8001cfe:	b590      	push	{r4, r7, lr}
 8001d00:	b087      	sub	sp, #28
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001d10:	2302      	movs	r3, #2
 8001d12:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b0c      	cmp	r3, #12
 8001d20:	d006      	beq.n	8001d30 <TM_MFRC522_ToCard+0x32>
 8001d22:	2b0e      	cmp	r3, #14
 8001d24:	d109      	bne.n	8001d3a <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001d26:	2312      	movs	r3, #18
 8001d28:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10; // bit 4
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	757b      	strb	r3, [r7, #21]
			break;
 8001d2e:	e005      	b.n	8001d3c <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77; //
 8001d30:	2377      	movs	r3, #119	; 0x77
 8001d32:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30; // bit 4 IdleIRq, 5 RxIRq
 8001d34:	2330      	movs	r3, #48	; 0x30
 8001d36:	757b      	strb	r3, [r7, #21]
			break;
 8001d38:	e000      	b.n	8001d3c <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001d3a:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	2002      	movs	r0, #2
 8001d48:	f7ff fee6 	bl	8001b18 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff fee2 	bl	8001b18 <TM_MFRC522_WriteRegister>

	TM_MFRC522_ClearBitMask(MFRC522_REG_COLL, 0x80); // clear collision register
 8001d54:	2180      	movs	r1, #128	; 0x80
 8001d56:	200e      	movs	r0, #14
 8001d58:	f7ff ff6e 	bl	8001c38 <TM_MFRC522_ClearBitMask>

	//TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80); // Clear all seven interrupt request bits
	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IRQ, 0x7F); // Clear all seven interrupt request bits via ComIrqReg[7] - Set1, when 0, clear interrupts
 8001d5c:	217f      	movs	r1, #127	; 0x7f
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f7ff feda 	bl	8001b18 <TM_MFRC522_WriteRegister>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80); // FlushBuffer = 1, FIFO initialization
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	200a      	movs	r0, #10
 8001d68:	f7ff ff4c 	bl	8001c04 <TM_MFRC522_SetBitMask>
	//TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00); // make sure to clear bit adjustments (should be calculated though, missing some parameters)

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	827b      	strh	r3, [r7, #18]
 8001d70:	e00a      	b.n	8001d88 <TM_MFRC522_ToCard+0x8a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001d72:	8a7b      	ldrh	r3, [r7, #18]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	4413      	add	r3, r2
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	2009      	movs	r0, #9
 8001d7e:	f7ff fecb 	bl	8001b18 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 8001d82:	8a7b      	ldrh	r3, [r7, #18]
 8001d84:	3301      	adds	r3, #1
 8001d86:	827b      	strh	r3, [r7, #18]
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	8a7a      	ldrh	r2, [r7, #18]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3ef      	bcc.n	8001d72 <TM_MFRC522_ToCard+0x74>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	4619      	mov	r1, r3
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff febe 	bl	8001b18 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d103      	bne.n	8001daa <TM_MFRC522_ToCard+0xac>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	200d      	movs	r0, #13
 8001da6:	f7ff ff2d 	bl	8001c04 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 36000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001daa:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 8001dae:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001db0:	2004      	movs	r0, #4
 8001db2:	f7ff fee9 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001db6:	4603      	mov	r3, r0
 8001db8:	753b      	strb	r3, [r7, #20]
		i--;
 8001dba:	8a7b      	ldrh	r3, [r7, #18]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) // i=0 is timeout
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
			);
 8001dc0:	8a7b      	ldrh	r3, [r7, #18]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <TM_MFRC522_ToCard+0xde>
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
 8001dc6:	7d3b      	ldrb	r3, [r7, #20]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <TM_MFRC522_ToCard+0xde>
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
 8001dd0:	7d3a      	ldrb	r2, [r7, #20]
 8001dd2:	7d7b      	ldrb	r3, [r7, #21]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0e9      	beq.n	8001db0 <TM_MFRC522_ToCard+0xb2>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	200d      	movs	r0, #13
 8001de0:	f7ff ff2a 	bl	8001c38 <TM_MFRC522_ClearBitMask>

	uint8_t errorRegValue = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	747b      	strb	r3, [r7, #17]
	errorRegValue = TM_MFRC522_ReadRegister(MFRC522_REG_ERROR);
 8001de8:	2006      	movs	r0, #6
 8001dea:	f7ff fecd 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001dee:	4603      	mov	r3, r0
 8001df0:	747b      	strb	r3, [r7, #17]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr	
 8001df2:	7c7b      	ldrb	r3, [r7, #17]
 8001df4:	f003 0313 	and.w	r3, r3, #19
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <TM_MFRC522_ToCard+0x106>
		status = MI_ERR;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	75fb      	strb	r3, [r7, #23]
		return status;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	e06a      	b.n	8001eda <TM_MFRC522_ToCard+0x1dc>
	}

	if (i == 0) {
 8001e04:	8a7b      	ldrh	r3, [r7, #18]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <TM_MFRC522_ToCard+0x110>
		return MI_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e065      	b.n	8001eda <TM_MFRC522_ToCard+0x1dc>
	}

	if (n & 0x01 && !(n&waitIRq)) {
 8001e0e:	7d3b      	ldrb	r3, [r7, #20]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <TM_MFRC522_ToCard+0x12a>
 8001e18:	7d3a      	ldrb	r2, [r7, #20]
 8001e1a:	7d7b      	ldrb	r3, [r7, #21]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <TM_MFRC522_ToCard+0x12a>
		return MI_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e058      	b.n	8001eda <TM_MFRC522_ToCard+0x1dc>
	}

	if (i != 0)  {
 8001e28:	8a7b      	ldrh	r3, [r7, #18]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d04d      	beq.n	8001eca <TM_MFRC522_ToCard+0x1cc>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001e2e:	2006      	movs	r0, #6
 8001e30:	f7ff feaa 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 031b 	and.w	r3, r3, #27
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d143      	bne.n	8001ec6 <TM_MFRC522_ToCard+0x1c8>


			status = MI_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]

			if (command == PCD_TRANSCEIVE) {
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b0c      	cmp	r3, #12
 8001e46:	d140      	bne.n	8001eca <TM_MFRC522_ToCard+0x1cc>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f7ff fe9d 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001e52:	200c      	movs	r0, #12
 8001e54:	f7ff fe98 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	743b      	strb	r3, [r7, #16]

				if (n == 0) {
 8001e60:	7d3b      	ldrb	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <TM_MFRC522_ToCard+0x16c>
					n = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	753b      	strb	r3, [r7, #20]
				}

				if (lastBits) {
 8001e6a:	7c3b      	ldrb	r3, [r7, #16]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <TM_MFRC522_ToCard+0x18a>
					*backLen = (n - 1) * 8 + lastBits;
 8001e70:	7d3b      	ldrb	r3, [r7, #20]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	7c3b      	ldrb	r3, [r7, #16]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	801a      	strh	r2, [r3, #0]
 8001e86:	e005      	b.n	8001e94 <TM_MFRC522_ToCard+0x196>
				} else {
					*backLen = n * 8;
 8001e88:	7d3b      	ldrb	r3, [r7, #20]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e92:	801a      	strh	r2, [r3, #0]
				}

				if (n > MFRC522_MAX_LEN) {
 8001e94:	7d3b      	ldrb	r3, [r7, #20]
 8001e96:	2b10      	cmp	r3, #16
 8001e98:	d901      	bls.n	8001e9e <TM_MFRC522_ToCard+0x1a0>
					n = MFRC522_MAX_LEN;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	827b      	strh	r3, [r7, #18]
 8001ea2:	e00a      	b.n	8001eba <TM_MFRC522_ToCard+0x1bc>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 8001ea4:	8a7b      	ldrh	r3, [r7, #18]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	18d4      	adds	r4, r2, r3
 8001eaa:	2009      	movs	r0, #9
 8001eac:	f7ff fe6c 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 8001eb4:	8a7b      	ldrh	r3, [r7, #18]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	827b      	strh	r3, [r7, #18]
 8001eba:	7d3b      	ldrb	r3, [r7, #20]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	8a7a      	ldrh	r2, [r7, #18]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3ef      	bcc.n	8001ea4 <TM_MFRC522_ToCard+0x1a6>
 8001ec4:	e001      	b.n	8001eca <TM_MFRC522_ToCard+0x1cc>
				}
			}
		} else {
			return MI_ERR;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e007      	b.n	8001eda <TM_MFRC522_ToCard+0x1dc>
		}
	} else {

	}

	if (errorRegValue & 0x08) {		// CollErr
 8001eca:	7c7b      	ldrb	r3, [r7, #17]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <TM_MFRC522_ToCard+0x1da>
		return MI_ERR;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e000      	b.n	8001eda <TM_MFRC522_ToCard+0x1dc>
	}

	return status;
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}

08001ee2 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f7ff fe11 	bl	8001b18 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2293      	movs	r2, #147	; 0x93
 8001efa:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3301      	adds	r3, #1
 8001f00:	2220      	movs	r2, #32
 8001f02:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001f04:	f107 030a 	add.w	r3, r7, #10
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	200c      	movs	r0, #12
 8001f12:	f7ff fef4 	bl	8001cfe <TM_MFRC522_ToCard>
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d118      	bne.n	8001f52 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	73bb      	strb	r3, [r7, #14]
 8001f24:	e009      	b.n	8001f3a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	4053      	eors	r3, r2
 8001f32:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	3301      	adds	r3, #1
 8001f38:	73bb      	strb	r3, [r7, #14]
 8001f3a:	7bbb      	ldrb	r3, [r7, #14]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d9f2      	bls.n	8001f26 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	7b7a      	ldrb	r2, [r7, #13]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <TM_MFRC522_CalculateCRC>:

TM_MFRC522_Status_t TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	460b      	mov	r3, r1
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	2005      	movs	r0, #5
 8001f6e:	f7ff fe63 	bl	8001c38 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	200a      	movs	r0, #10
 8001f76:	f7ff fe45 	bl	8001c04 <TM_MFRC522_SetBitMask>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff fdcb 	bl	8001b18 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	75fb      	strb	r3, [r7, #23]
 8001f86:	e00a      	b.n	8001f9e <TM_MFRC522_CalculateCRC+0x42>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	2009      	movs	r0, #9
 8001f94:	f7ff fdc0 	bl	8001b18 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
 8001f9e:	7dfa      	ldrb	r2, [r7, #23]
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3f0      	bcc.n	8001f88 <TM_MFRC522_CalculateCRC+0x2c>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fdb5 	bl	8001b18 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001fae:	23ff      	movs	r3, #255	; 0xff
 8001fb0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001fb2:	2005      	movs	r0, #5
 8001fb4:	f7ff fde8 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]
		i--;
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <TM_MFRC522_CalculateCRC+0x76>
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ef      	beq.n	8001fb2 <TM_MFRC522_CalculateCRC+0x56>

	if (i == 0) {
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <TM_MFRC522_CalculateCRC+0x80>
		return MI_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e00e      	b.n	8001ffa <TM_MFRC522_CalculateCRC+0x9e>
	}

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001fdc:	2022      	movs	r0, #34	; 0x22
 8001fde:	f7ff fdd3 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1c5c      	adds	r4, r3, #1
 8001fee:	2021      	movs	r0, #33	; 0x21
 8001ff0:	f7ff fdca 	bl	8001b88 <TM_MFRC522_ReadRegister>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	7023      	strb	r3, [r4, #0]

	return MI_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}
	...

08002004 <TM_MFRC522_SelectTag>:

TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af02      	add	r7, sp, #8
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_MFRC522_Status_t status;
//	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9];
	uint8_t sak[3] = {0};
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <TM_MFRC522_SelectTag+0xb0>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	81bb      	strh	r3, [r7, #12]
 8002014:	2300      	movs	r3, #0
 8002016:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PICC_SElECTTAG;
 8002018:	2393      	movs	r3, #147	; 0x93
 800201a:	743b      	strb	r3, [r7, #16]
	buffer[1] = 0x70;
 800201c:	2370      	movs	r3, #112	; 0x70
 800201e:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 4; i++) {
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
 8002024:	e00d      	b.n	8002042 <TM_MFRC522_SelectTag+0x3e>
		buffer[i+2] = *(serNum+i);
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	441a      	add	r2, r3
 800202c:	7ffb      	ldrb	r3, [r7, #31]
 800202e:	3302      	adds	r3, #2
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	f107 0120 	add.w	r1, r7, #32
 8002036:	440b      	add	r3, r1
 8002038:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < 4; i++) {
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	3301      	adds	r3, #1
 8002040:	77fb      	strb	r3, [r7, #31]
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d9ee      	bls.n	8002026 <TM_MFRC522_SelectTag+0x22>
	}
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 8002048:	7cba      	ldrb	r2, [r7, #18]
 800204a:	7cfb      	ldrb	r3, [r7, #19]
 800204c:	4053      	eors	r3, r2
 800204e:	b2da      	uxtb	r2, r3
 8002050:	7d3b      	ldrb	r3, [r7, #20]
 8002052:	4053      	eors	r3, r2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	7d7b      	ldrb	r3, [r7, #21]
 8002058:	4053      	eors	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	75bb      	strb	r3, [r7, #22]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800205e:	f107 0310 	add.w	r3, r7, #16
 8002062:	1dda      	adds	r2, r3, #7
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	2107      	movs	r1, #7
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ff76 	bl	8001f5c <TM_MFRC522_CalculateCRC>
 8002070:	4603      	mov	r3, r0
 8002072:	77bb      	strb	r3, [r7, #30]

	if (status != MI_OK) {
 8002074:	7fbb      	ldrb	r3, [r7, #30]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <TM_MFRC522_SelectTag+0x7a>
		return status;
 800207a:	7fbb      	ldrb	r3, [r7, #30]
 800207c:	e016      	b.n	80020ac <TM_MFRC522_SelectTag+0xa8>
	}

	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, sak, &recvBits);
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	f107 0110 	add.w	r1, r7, #16
 8002086:	f107 031c 	add.w	r3, r7, #28
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	2209      	movs	r2, #9
 8002090:	200c      	movs	r0, #12
 8002092:	f7ff fe34 	bl	8001cfe <TM_MFRC522_ToCard>
 8002096:	4603      	mov	r3, r0
 8002098:	77bb      	strb	r3, [r7, #30]
//		size = buffer[0];
//	} else {
//		size = 0;
//	}

	if (recvBits != 24) { // SAK must be exactly 24 bits (1 byte + CRC_A).
 800209a:	8bbb      	ldrh	r3, [r7, #28]
 800209c:	2b18      	cmp	r3, #24
 800209e:	d001      	beq.n	80020a4 <TM_MFRC522_SelectTag+0xa0>
		return MI_ERR;
 80020a0:	2302      	movs	r3, #2
 80020a2:	e003      	b.n	80020ac <TM_MFRC522_SelectTag+0xa8>
	}

	*type = sak[0];
 80020a4:	7b3a      	ldrb	r2, [r7, #12]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	701a      	strb	r2, [r3, #0]

	return status;
 80020aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	0800be94 	.word	0x0800be94

080020b8 <TM_MFRC522_Halt>:

void TM_MFRC522_Halt(void) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80020be:	2350      	movs	r3, #80	; 0x50
 80020c0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80020c6:	463b      	mov	r3, r7
 80020c8:	1c9a      	adds	r2, r3, #2
 80020ca:	463b      	mov	r3, r7
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff ff44 	bl	8001f5c <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80020d4:	463a      	mov	r2, r7
 80020d6:	4639      	mov	r1, r7
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	2204      	movs	r2, #4
 80020e0:	200c      	movs	r0, #12
 80020e2:	f7ff fe0c 	bl	8001cfe <TM_MFRC522_ToCard>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <TM_MFRC522_CS_Write>:

void TM_MFRC522_CS_Write(uint8_t val) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPIx_CS_GPIO_PORT, SPIx_CS_PIN, val);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	461a      	mov	r2, r3
 80020fe:	2104      	movs	r1, #4
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <TM_MFRC522_CS_Write+0x20>)
 8002102:	f002 fc89 	bl	8004a18 <HAL_GPIO_WritePin>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020c00 	.word	0x40020c00

08002114 <bin_to_strhex>:

void bin_to_strhex(unsigned char *bin, unsigned int binsz, char **result)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  char          hex_str[]= "0123456789abcdef";
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <bin_to_strhex+0xc4>)
 8002122:	f107 0410 	add.w	r4, r7, #16
 8002126:	461d      	mov	r5, r3
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	7023      	strb	r3, [r4, #0]
  unsigned int  i;

  *result = (char *)malloc(binsz * 2 + 3);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	3303      	adds	r3, #3
 8002136:	4618      	mov	r0, r3
 8002138:	f006 ffda 	bl	80090f0 <malloc>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
  (*result)[binsz * 2 + 2] = 0;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]

  if (!binsz)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d039      	beq.n	80021ce <bin_to_strhex+0xba>
    return;

  (*result)[0] = '0';
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2230      	movs	r2, #48	; 0x30
 8002160:	701a      	strb	r2, [r3, #0]
  (*result)[1] = 'x';
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	2278      	movs	r2, #120	; 0x78
 800216a:	701a      	strb	r2, [r3, #0]

  for (i = 0; i < binsz; i++)
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
 8002170:	e028      	b.n	80021c4 <bin_to_strhex+0xb0>
    {
      (*result)[i * 2 + 2] = hex_str[(bin[i] >> 4) & 0x0F];
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	440b      	add	r3, r1
 800218e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002192:	440a      	add	r2, r1
 8002194:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002198:	701a      	strb	r2, [r3, #0]
      (*result)[i * 2 + 3] = hex_str[(bin[i]     ) & 0x0F];
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	f003 020f 	and.w	r2, r3, #15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	3303      	adds	r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021b6:	440a      	add	r2, r1
 80021b8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80021bc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < binsz; i++)
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	3301      	adds	r3, #1
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d3d2      	bcc.n	8002172 <bin_to_strhex+0x5e>
 80021cc:	e000      	b.n	80021d0 <bin_to_strhex+0xbc>
    return;
 80021ce:	bf00      	nop
    }  
}
 80021d0:	3728      	adds	r7, #40	; 0x28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	0800be98 	.word	0x0800be98

080021dc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_SPI3_Init+0x74>)
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <MX_SPI3_Init+0x78>)
 80021e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_SPI3_Init+0x74>)
 80021e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_SPI3_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_SPI3_Init+0x74>)
 80021f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_SPI3_Init+0x74>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <MX_SPI3_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_SPI3_Init+0x74>)
 800220a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_SPI3_Init+0x74>)
 8002212:	2218      	movs	r2, #24
 8002214:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <MX_SPI3_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <MX_SPI3_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <MX_SPI3_Init+0x74>)
 8002224:	2200      	movs	r2, #0
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <MX_SPI3_Init+0x74>)
 800222a:	2207      	movs	r2, #7
 800222c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <MX_SPI3_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <MX_SPI3_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_SPI3_Init+0x74>)
 800223c:	f003 fd1c 	bl	8005c78 <HAL_SPI_Init>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002246:	f7ff f8e1 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000054c 	.word	0x2000054c
 8002254:	40003c00 	.word	0x40003c00

08002258 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <HAL_SPI_MspInit+0x8c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d130      	bne.n	80022dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a1a      	ldr	r2, [pc, #104]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 8002280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_SPI_MspInit+0x90>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022bc:	2306      	movs	r3, #6
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4809      	ldr	r0, [pc, #36]	; (80022ec <HAL_SPI_MspInit+0x94>)
 80022c8:	f002 f9e2 	bl	8004690 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2033      	movs	r0, #51	; 0x33
 80022d2:	f001 fd9c 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80022d6:	2033      	movs	r0, #51	; 0x33
 80022d8:	f001 fdb5 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40003c00 	.word	0x40003c00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020800 	.word	0x40020800

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <HAL_MspInit+0x44>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a0e      	ldr	r2, [pc, #56]	; (8002334 <HAL_MspInit+0x44>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_MspInit+0x44>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_MspInit+0x44>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_MspInit+0x44>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_MspInit+0x44>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800

08002338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800233c:	e7fe      	b.n	800233c <NMI_Handler+0x4>
	...

08002340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <HardFault_Handler+0x18>)
 800234a:	f002 fb7e 	bl	8004a4a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800234e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002352:	f000 fe8b 	bl	800306c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002356:	e7f5      	b.n	8002344 <HardFault_Handler+0x4>
 8002358:	40020400 	.word	0x40020400

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler+0x4>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler+0x4>

0800236e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800239c:	f000 fe46 	bl	800302c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <ADC_IRQHandler+0x14>)
 80023aa:	f000 fec7 	bl	800313c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80023ae:	4803      	ldr	r0, [pc, #12]	; (80023bc <ADC_IRQHandler+0x18>)
 80023b0:	f000 fec4 	bl	800313c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200003f0 	.word	0x200003f0
 80023bc:	20000498 	.word	0x20000498

080023c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM3_IRQHandler+0x10>)
 80023c6:	f004 fdd3 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000660 	.word	0x20000660

080023d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM4_IRQHandler+0x10>)
 80023da:	f004 fdc9 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000614 	.word	0x20000614

080023e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <USART1_IRQHandler+0x10>)
 80023ee:	f005 fe2f 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200007c8 	.word	0x200007c8

080023fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART3_IRQHandler+0x10>)
 8002402:	f005 fe25 	bl	8008050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000744 	.word	0x20000744

08002410 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002416:	f004 fdab 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200006ac 	.word	0x200006ac

08002424 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <SPI3_IRQHandler+0x10>)
 800242a:	f004 f851 	bl	80064d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000054c 	.word	0x2000054c

08002438 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <TIM6_DAC_IRQHandler+0x10>)
 800243e:	f004 fd97 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200006f8 	.word	0x200006f8

0800244c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <DMA2_Stream1_IRQHandler+0x10>)
 8002452:	f001 feb3 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000438 	.word	0x20000438

08002460 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <DMA2_Stream2_IRQHandler+0x10>)
 8002466:	f001 fea9 	bl	80041bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200004e0 	.word	0x200004e0

08002474 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 8002478:	2201      	movs	r2, #1
 800247a:	4904      	ldr	r1, [pc, #16]	; (800248c <stop_detector_init+0x18>)
 800247c:	4804      	ldr	r0, [pc, #16]	; (8002490 <stop_detector_init+0x1c>)
 800247e:	f000 ff9f 	bl	80033c0 <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <stop_detector_init+0x20>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200003d4 	.word	0x200003d4
 8002490:	200003f0 	.word	0x200003f0
 8002494:	200003d8 	.word	0x200003d8

08002498 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <stop_detector_deInit+0x14>)
 800249e:	f001 f889 	bl	80035b4 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <stop_detector_deInit+0x18>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200003f0 	.word	0x200003f0
 80024b0:	200003d8 	.word	0x200003d8

080024b4 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 80024c2:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <stop_detector_isr+0x8c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e034      	b.n	8002538 <stop_detector_isr+0x84>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 80024ce:	2005      	movs	r0, #5
 80024d0:	f7ff fa36 	bl	8001940 <qtr_get_digital>
 80024d4:	4603      	mov	r3, r0
 80024d6:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 80024de:	2000      	movs	r0, #0
 80024e0:	f7ff fa2e 	bl	8001940 <qtr_get_digital>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4413      	add	r3, r2
 80024ec:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if((sens == sens_prev) && (sens == 3))
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <stop_detector_isr+0x90>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	79fa      	ldrb	r2, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d104      	bne.n	8002502 <stop_detector_isr+0x4e>
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d101      	bne.n	8002502 <stop_detector_isr+0x4e>
		// return cross found error
		return E_ST_CROSS_FOUND;
 80024fe:	2301      	movs	r3, #1
 8002500:	e01a      	b.n	8002538 <stop_detector_isr+0x84>
//		// return room found error
//		return E_ST_ROOM_FOUND;

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <stop_detector_isr+0x94>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800250a:	d306      	bcc.n	800251a <stop_detector_isr+0x66>
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <stop_detector_isr+0x98>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002514:	d301      	bcc.n	800251a <stop_detector_isr+0x66>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <stop_detector_isr+0x68>
 800251a:	2300      	movs	r3, #0
 800251c:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <stop_detector_isr+0x94>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a0a      	ldr	r2, [pc, #40]	; (800254c <stop_detector_isr+0x98>)
 8002524:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <stop_detector_isr+0x7c>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 800252c:	2303      	movs	r3, #3
 800252e:	e003      	b.n	8002538 <stop_detector_isr+0x84>
//		return 0;

	// update sensors value
	sens_prev = sens;
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <stop_detector_isr+0x90>)
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200003d8 	.word	0x200003d8
 8002544:	200003d9 	.word	0x200003d9
 8002548:	200003d4 	.word	0x200003d4
 800254c:	200003dc 	.word	0x200003dc

08002550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_kill>:

int _kill(int pid, int sig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800256a:	f006 fd97 	bl	800909c <__errno>
 800256e:	4603      	mov	r3, r0
 8002570:	2216      	movs	r2, #22
 8002572:	601a      	str	r2, [r3, #0]
	return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <_exit>:

void _exit (int status)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ffe7 	bl	8002560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002592:	e7fe      	b.n	8002592 <_exit+0x12>

08002594 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e00a      	b.n	80025bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025a6:	f3af 8000 	nop.w
 80025aa:	4601      	mov	r1, r0
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	60ba      	str	r2, [r7, #8]
 80025b2:	b2ca      	uxtb	r2, r1
 80025b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dbf0      	blt.n	80025a6 <_read+0x12>
	}

return len;
 80025c4:	687b      	ldr	r3, [r7, #4]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b086      	sub	sp, #24
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	e009      	b.n	80025f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	dbf1      	blt.n	80025e0 <_write+0x12>
	}
	return len;
 80025fc:	687b      	ldr	r3, [r7, #4]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <_close>:

int _close(int file)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
	return -1;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800262e:	605a      	str	r2, [r3, #4]
	return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <_isatty>:

int _isatty(int file)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	return 0;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f006 fcfc 	bl	800909c <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20080000 	.word	0x20080000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	200003e0 	.word	0x200003e0
 80026d8:	20000868 	.word	0x20000868

080026dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim13;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0310 	add.w	r3, r7, #16
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <MX_TIM3_Init+0x98>)
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <MX_TIM3_Init+0x9c>)
 8002722:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 8002724:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_TIM3_Init+0x98>)
 8002726:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800272a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_TIM3_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <MX_TIM3_Init+0x98>)
 8002734:	f240 7207 	movw	r2, #1799	; 0x707
 8002738:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <MX_TIM3_Init+0x98>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_TIM3_Init+0x98>)
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002746:	4814      	ldr	r0, [pc, #80]	; (8002798 <MX_TIM3_Init+0x98>)
 8002748:	f004 f942 	bl	80069d0 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002752:	f7fe fe5b 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	480d      	ldr	r0, [pc, #52]	; (8002798 <MX_TIM3_Init+0x98>)
 8002764:	f004 fe34 	bl	80073d0 <HAL_TIM_ConfigClockSource>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800276e:	f7fe fe4d 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002772:	2320      	movs	r3, #32
 8002774:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4806      	ldr	r0, [pc, #24]	; (8002798 <MX_TIM3_Init+0x98>)
 8002780:	f005 fad2 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800278a:	f7fe fe3f 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000660 	.word	0x20000660
 800279c:	40000400 	.word	0x40000400

080027a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b2:	463b      	mov	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	615a      	str	r2, [r3, #20]
 80027c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027c6:	4a27      	ldr	r2, [pc, #156]	; (8002864 <MX_TIM4_Init+0xc4>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 80027ca:	4b25      	ldr	r3, [pc, #148]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027cc:	226b      	movs	r2, #107	; 0x6b
 80027ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027d8:	2264      	movs	r2, #100	; 0x64
 80027da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027e8:	481d      	ldr	r0, [pc, #116]	; (8002860 <MX_TIM4_Init+0xc0>)
 80027ea:	f004 f9f0 	bl	8006bce <HAL_TIM_PWM_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80027f4:	f7fe fe0a 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4816      	ldr	r0, [pc, #88]	; (8002860 <MX_TIM4_Init+0xc0>)
 8002808:	f005 fa8e 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002812:	f7fe fdfb 	bl	800140c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002816:	2360      	movs	r3, #96	; 0x60
 8002818:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002826:	463b      	mov	r3, r7
 8002828:	2208      	movs	r2, #8
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <MX_TIM4_Init+0xc0>)
 800282e:	f004 fcbf 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002838:	f7fe fde8 	bl	800140c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	220c      	movs	r2, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <MX_TIM4_Init+0xc0>)
 8002844:	f004 fcb4 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800284e:	f7fe fddd 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002852:	4803      	ldr	r0, [pc, #12]	; (8002860 <MX_TIM4_Init+0xc0>)
 8002854:	f000 f8e6 	bl	8002a24 <HAL_TIM_MspPostInit>

}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000614 	.word	0x20000614
 8002864:	40000800 	.word	0x40000800

08002868 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002878:	4b14      	ldr	r3, [pc, #80]	; (80028cc <MX_TIM6_Init+0x64>)
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <MX_TIM6_Init+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <MX_TIM6_Init+0x64>)
 8002880:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002884:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_TIM6_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MX_TIM6_Init+0x64>)
 800288e:	2263      	movs	r2, #99	; 0x63
 8002890:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_TIM6_Init+0x64>)
 8002894:	2280      	movs	r2, #128	; 0x80
 8002896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <MX_TIM6_Init+0x64>)
 800289a:	f004 f899 	bl	80069d0 <HAL_TIM_Base_Init>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028a4:	f7fe fdb2 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028a8:	2320      	movs	r3, #32
 80028aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_TIM6_Init+0x64>)
 80028b6:	f005 fa37 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028c0:	f7fe fda4 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200006f8 	.word	0x200006f8
 80028d0:	40001000 	.word	0x40001000

080028d4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_TIM13_Init+0x40>)
 80028da:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <MX_TIM13_Init+0x44>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10800-1;
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <MX_TIM13_Init+0x40>)
 80028e0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80028e4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_TIM13_Init+0x40>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 500-1;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_TIM13_Init+0x40>)
 80028ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80028f2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <MX_TIM13_Init+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_TIM13_Init+0x40>)
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_TIM13_Init+0x40>)
 8002902:	f004 f865 	bl	80069d0 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800290c:	f7fe fd7e 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200006ac 	.word	0x200006ac
 8002918:	40001c00 	.word	0x40001c00

0800291c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_TIM_Base_MspInit+0xac>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d114      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a26      	ldr	r2, [pc, #152]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	201d      	movs	r0, #29
 800294c:	f001 fa5f 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002950:	201d      	movs	r0, #29
 8002952:	f001 fa78 	bl	8003e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002956:	e032      	b.n	80029be <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Base_MspInit+0xb4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d114      	bne.n	800298c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002962:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002968:	f043 0310 	orr.w	r3, r3, #16
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	2036      	movs	r0, #54	; 0x36
 8002980:	f001 fa45 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002984:	2036      	movs	r0, #54	; 0x36
 8002986:	f001 fa5e 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 800298a:	e018      	b.n	80029be <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM13)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_TIM_Base_MspInit+0xb8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_TIM_Base_MspInit+0xb0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	f001 fa2b 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80029b8:	202c      	movs	r0, #44	; 0x2c
 80029ba:	f001 fa44 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40001000 	.word	0x40001000
 80029d4:	40001c00 	.word	0x40001c00

080029d8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_TIM_PWM_MspInit+0x44>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d113      	bne.n	8002a12 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_TIM_PWM_MspInit+0x48>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a0c      	ldr	r2, [pc, #48]	; (8002a20 <HAL_TIM_PWM_MspInit+0x48>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <HAL_TIM_PWM_MspInit+0x48>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	201e      	movs	r0, #30
 8002a08:	f001 fa01 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a0c:	201e      	movs	r0, #30
 8002a0e:	f001 fa1a 	bl	8003e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_TIM_MspPostInit+0xa0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d139      	bne.n	8002aba <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a4c:	f043 0308 	orr.w	r3, r3, #8
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a64:	f043 0302 	orr.w	r3, r3, #2
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_TIM_MspPostInit+0xa4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8002a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	480e      	ldr	r0, [pc, #56]	; (8002acc <HAL_TIM_MspPostInit+0xa8>)
 8002a94:	f001 fdfc 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8002a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <HAL_TIM_MspPostInit+0xac>)
 8002ab6:	f001 fdeb 	bl	8004690 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40020400 	.word	0x40020400

08002ad4 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d104      	bne.n	8002af4 <set_pwm+0x20>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	883a      	ldrh	r2, [r7, #0]
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002af2:	e023      	b.n	8002b3c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d104      	bne.n	8002b04 <set_pwm+0x30>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	883b      	ldrh	r3, [r7, #0]
 8002b00:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b02:	e01b      	b.n	8002b3c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002b04:	887b      	ldrh	r3, [r7, #2]
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d104      	bne.n	8002b14 <set_pwm+0x40>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	883b      	ldrh	r3, [r7, #0]
 8002b10:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002b12:	e013      	b.n	8002b3c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	2b0c      	cmp	r3, #12
 8002b18:	d104      	bne.n	8002b24 <set_pwm+0x50>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	883b      	ldrh	r3, [r7, #0]
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002b22:	e00b      	b.n	8002b3c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d104      	bne.n	8002b34 <set_pwm+0x60>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	883b      	ldrh	r3, [r7, #0]
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002b32:	e003      	b.n	8002b3c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	883b      	ldrh	r3, [r7, #0]
 8002b3a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8002b58:	f7fe fc92 	bl	8001480 <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{// user button debounce
		debounce_isr();
	}
}
 8002b5c:	e00c      	b.n	8002b78 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_TIMEOUTS)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x24>
		timeout_isr();
 8002b66:	f000 f84d 	bl	8002c04 <timeout_isr>
}
 8002b6a:	e005      	b.n	8002b78 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_DEBOUNCE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_PeriodElapsedCallback+0x30>
		debounce_isr();
 8002b74:	f7fe f84e 	bl	8000c14 <debounce_isr>
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200006f8 	.word	0x200006f8
 8002b84:	20000660 	.word	0x20000660
 8002b88:	200006ac 	.word	0x200006ac

08002b8c <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(int time_sec)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b24      	cmp	r3, #36	; 0x24
 8002b98:	dd04      	ble.n	8002ba4 <timeout_start+0x18>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <timeout_start+0x5c>)
 8002b9c:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e008      	b.n	8002bb6 <timeout_start+0x2a>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec) - 1; // >>>>>>>>>>>>> check this
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <timeout_start+0x5c>)
 8002bb4:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <timeout_start+0x5c>)
 8002bb8:	f003 ff0a 	bl	80069d0 <HAL_TIM_Base_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <timeout_start+0x3c>
		// init error
		Error_Handler();
 8002bc2:	f7fe fc23 	bl	800140c <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8002bc6:	e00a      	b.n	8002bde <timeout_start+0x52>
		timeout_flag = 0;
 8002bc8:	4b08      	ldr	r3, [pc, #32]	; (8002bec <timeout_start+0x60>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <timeout_start+0x5c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0201 	mvn.w	r2, #1
 8002bd6:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8002bd8:	4803      	ldr	r0, [pc, #12]	; (8002be8 <timeout_start+0x5c>)
 8002bda:	f003 ff51 	bl	8006a80 <HAL_TIM_Base_Start_IT>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000660 	.word	0x20000660
 8002bec:	200003e4 	.word	0x200003e4

08002bf0 <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <timeout_stop+0x10>)
 8002bf6:	f003 ffbb 	bl	8006b70 <HAL_TIM_Base_Stop_IT>
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000660 	.word	0x20000660

08002c04 <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	// set timeout flag
	timeout_flag = 1;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <timeout_isr+0x14>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8002c0e:	f7ff ffef 	bl	8002bf0 <timeout_stop>
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200003e4 	.word	0x200003e4

08002c1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <MX_USART1_UART_Init+0x5c>)
 8002c24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c5e:	4805      	ldr	r0, [pc, #20]	; (8002c74 <MX_USART1_UART_Init+0x58>)
 8002c60:	f005 f90e 	bl	8007e80 <HAL_UART_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002c6a:	f7fe fbcf 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200007c8 	.word	0x200007c8
 8002c78:	40011000 	.word	0x40011000

08002c7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <MX_USART3_UART_Init+0x5c>)
 8002c84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <MX_USART3_UART_Init+0x58>)
 8002cc0:	f005 f8de 	bl	8007e80 <HAL_UART_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002cca:	f7fe fb9f 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000744 	.word	0x20000744
 8002cd8:	40004800 	.word	0x40004800

08002cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08c      	sub	sp, #48	; 0x30
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 031c 	add.w	r3, r7, #28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3f      	ldr	r2, [pc, #252]	; (8002df8 <HAL_UART_MspInit+0x11c>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d141      	bne.n	8002d82 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a3e      	ldr	r2, [pc, #248]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d16:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a38      	ldr	r2, [pc, #224]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002d40:	2304      	movs	r3, #4
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8002d44:	f107 031c 	add.w	r3, r7, #28
 8002d48:	4619      	mov	r1, r3
 8002d4a:	482d      	ldr	r0, [pc, #180]	; (8002e00 <HAL_UART_MspInit+0x124>)
 8002d4c:	f001 fca0 	bl	8004690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d60:	2307      	movs	r3, #7
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8002d64:	f107 031c 	add.w	r3, r7, #28
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4825      	ldr	r0, [pc, #148]	; (8002e00 <HAL_UART_MspInit+0x124>)
 8002d6c:	f001 fc90 	bl	8004690 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2025      	movs	r0, #37	; 0x25
 8002d76:	f001 f84a 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d7a:	2025      	movs	r0, #37	; 0x25
 8002d7c:	f001 f863 	bl	8003e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002d80:	e035      	b.n	8002dee <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_UART_MspInit+0x128>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d130      	bne.n	8002dee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d96:	6413      	str	r3, [r2, #64]	; 0x40
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002daa:	f043 0308 	orr.w	r3, r3, #8
 8002dae:	6313      	str	r3, [r2, #48]	; 0x30
 8002db0:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_UART_MspInit+0x120>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002dce:	2307      	movs	r3, #7
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd2:	f107 031c 	add.w	r3, r7, #28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <HAL_UART_MspInit+0x12c>)
 8002dda:	f001 fc59 	bl	8004690 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2027      	movs	r0, #39	; 0x27
 8002de4:	f001 f813 	bl	8003e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002de8:	2027      	movs	r0, #39	; 0x27
 8002dea:	f001 f82c 	bl	8003e46 <HAL_NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3730      	adds	r7, #48	; 0x30
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40011000 	.word	0x40011000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020400 	.word	0x40020400
 8002e04:	40004800 	.word	0x40004800
 8002e08:	40020c00 	.word	0x40020c00

08002e0c <UART_Receive>:

/******************************************************************************
@brief	 	 Receives a char by UART serial port
******************************************************************************/
char UART_Receive(uart_t *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	if(c != NEW_LINE) // Is this the end of reception?
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <UART_Receive+0x44>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b0d      	cmp	r3, #13
 8002e1c:	d003      	beq.n	8002e26 <UART_Receive+0x1a>
		Rx_UART_init(huart); // prepare for next character
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f838 	bl	8002e94 <Rx_UART_init>
 8002e24:	e002      	b.n	8002e2c <UART_Receive+0x20>
	else
		cmd_received = 1;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <UART_Receive+0x48>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]

	if(huart->Rx_index == (RX_BUFF_LEN - 1)) // Is the buffer full?
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7d1b      	ldrb	r3, [r3, #20]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	d102      	bne.n	8002e3c <UART_Receive+0x30>
		// Treat as 'CR'
		c = NEW_LINE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <UART_Receive+0x44>)
 8002e38:	220d      	movs	r2, #13
 8002e3a:	701a      	strb	r2, [r3, #0]
	
	//if(process_as_control() == 0) // Is the received char a control char?
	//	return (char)(-1);
	
	// Its not a special character
	process_as_data(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f80b 	bl	8002e58 <process_as_data>

	return c;
 8002e42:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <UART_Receive+0x44>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	2000084c 	.word	0x2000084c
 8002e54:	200003e5 	.word	0x200003e5

08002e58 <process_as_data>:

@brief	 	 process the char received as a data character
******************************************************************************/

static void process_as_data(uart_t *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	// add received char to Rx_Buffer
	huart->Rx_Buffer[huart->Rx_index] = c;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7d1b      	ldrb	r3, [r3, #20]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <process_as_data+0x38>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	440b      	add	r3, r1
 8002e72:	711a      	strb	r2, [r3, #4]
	huart->Rx_index++;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7d1b      	ldrb	r3, [r3, #20]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	751a      	strb	r2, [r3, #20]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000084c 	.word	0x2000084c

08002e94 <Rx_UART_init>:

// set the interrupt for UART
void Rx_UART_init(uart_t *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart->uart, (uint8_t*)&c, 1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <Rx_UART_init+0x20>)
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 f895 	bl	8007fd4 <HAL_UART_Receive_IT>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000084c 	.word	0x2000084c

08002eb8 <HAL_UART_RxCpltCallback>:

//implementation of UART ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	// debug uart
	if (huart->Instance == debug_uart.uart->Instance)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_UART_RxCpltCallback+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d103      	bne.n	8002ed6 <HAL_UART_RxCpltCallback+0x1e>
		debug_uart.Rx_flag = 1;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_UART_RxCpltCallback+0x40>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	755a      	strb	r2, [r3, #21]
	// bluetooth uart
	else if (huart->Instance == bluet_uart.uart->Instance)
		bluet_uart.Rx_flag = 1;

//	HAL_UART_Receive_IT(huart, (uint8_t*)&c, 1);
}
 8002ed4:	e009      	b.n	8002eea <HAL_UART_RxCpltCallback+0x32>
	else if (huart->Instance == bluet_uart.uart->Instance)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_UART_RxCpltCallback+0x44>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d102      	bne.n	8002eea <HAL_UART_RxCpltCallback+0x32>
		bluet_uart.Rx_flag = 1;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_UART_RxCpltCallback+0x44>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	755a      	strb	r2, [r3, #21]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000084 	.word	0x20000084
 8002efc:	2000011c 	.word	0x2000011c

08002f00 <UART_puts>:
@brief	 	 Sends a string by UART - Polling (Waits for UART_Tx to transmit
							queued data
@param  	 String to be transmitted
******************************************************************************/
void UART_puts(uart_t *huart, const char *str)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	if((str == NULL) || (str[0] == 0))	// string empty?
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d021      	beq.n	8002f54 <UART_puts+0x54>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01d      	beq.n	8002f54 <UART_puts+0x54>
		return;
	
	int len = strlen(str);
 8002f18:	6838      	ldr	r0, [r7, #0]
 8002f1a:	f7fd f99b 	bl	8000254 <strlen>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	60fb      	str	r3, [r7, #12]
	if(len > TX_BUFF_LEN)		// string size bigger than the max size of Tx_Buffer?
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b80      	cmp	r3, #128	; 0x80
 8002f26:	dc17      	bgt.n	8002f58 <UART_puts+0x58>
		return;

	while(huart->uart->gState == HAL_UART_STATE_BUSY_TX) // Waits for UART_Tx to transmit queued data
 8002f28:	bf00      	nop
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f30:	2b21      	cmp	r3, #33	; 0x21
 8002f32:	d0fa      	beq.n	8002f2a <UART_puts+0x2a>
		;
	
	strcpy((char *)huart->Tx_Buffer, str);	// send string 'str' to 'TX_Buffer'
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3316      	adds	r3, #22
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f006 fe2a 	bl	8009b94 <strcpy>
	HAL_UART_Transmit_IT(huart->uart, (uint8_t*)huart->Tx_Buffer, len);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3316      	adds	r3, #22
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	f004 ffe5 	bl	8007f1c <HAL_UART_Transmit_IT>
 8002f52:	e002      	b.n	8002f5a <UART_puts+0x5a>
		return;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <UART_puts+0x5a>
		return;
 8002f58:	bf00      	nop
}
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f64:	480d      	ldr	r0, [pc, #52]	; (8002f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f6c:	e002      	b.n	8002f74 <LoopCopyDataInit>

08002f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f72:	3304      	adds	r3, #4

08002f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f78:	d3f9      	bcc.n	8002f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f7c:	4c0b      	ldr	r4, [pc, #44]	; (8002fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f80:	e001      	b.n	8002f86 <LoopFillZerobss>

08002f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f84:	3204      	adds	r2, #4

08002f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f88:	d3fb      	bcc.n	8002f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f8a:	f7ff fba7 	bl	80026dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f8e:	f006 f88b 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f92:	f7fe f971 	bl	8001278 <main>
  bx  lr    
 8002f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa0:	2000038c 	.word	0x2000038c
  ldr r2, =_sidata
 8002fa4:	0800c354 	.word	0x0800c354
  ldr r2, =_sbss
 8002fa8:	2000038c 	.word	0x2000038c
  ldr r4, =_ebss
 8002fac:	20000864 	.word	0x20000864

08002fb0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb0:	e7fe      	b.n	8002fb0 <CAN1_RX0_IRQHandler>

08002fb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb6:	2003      	movs	r0, #3
 8002fb8:	f000 ff1e 	bl	8003df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f000 f805 	bl	8002fcc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fc2:	f7ff f995 	bl	80022f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_InitTick+0x54>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_InitTick+0x58>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 ff39 	bl	8003e62 <HAL_SYSTICK_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00e      	b.n	8003018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	d80a      	bhi.n	8003016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003000:	2200      	movs	r2, #0
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	f04f 30ff 	mov.w	r0, #4294967295
 8003008:	f000 ff01 	bl	8003e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800300c:	4a06      	ldr	r2, [pc, #24]	; (8003028 <HAL_InitTick+0x5c>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000080 	.word	0x20000080
 8003024:	200001b8 	.word	0x200001b8
 8003028:	200001b4 	.word	0x200001b4

0800302c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200001b8 	.word	0x200001b8
 8003050:	20000850 	.word	0x20000850

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000850 	.word	0x20000850

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200001b8 	.word	0x200001b8

080030b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e031      	b.n	800312e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fb86 	bl	80007e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d116      	bne.n	8003120 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_ADC_Init+0x84>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fc22 	bl	800394c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
 800311e:	e001      	b.n	8003124 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	ffffeefd 	.word	0xffffeefd

0800313c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b20      	cmp	r3, #32
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d049      	beq.n	8003212 <HAL_ADC_IRQHandler+0xd6>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d046      	beq.n	8003212 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d12b      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d127      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d006      	beq.n	80031ce <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d119      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0220 	bic.w	r2, r2, #32
 80031dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fa30 	bl	8003668 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0212 	mvn.w	r2, #18
 8003210:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d057      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x1b8>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d054      	beq.n	80032f4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d139      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800327a:	2b00      	cmp	r3, #0
 800327c:	d006      	beq.n	800328c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003288:	2b00      	cmp	r3, #0
 800328a:	d12b      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d124      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d11d      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d119      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fcad 	bl	8003c44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 020c 	mvn.w	r2, #12
 80032f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf0c      	ite	eq
 8003302:	2301      	moveq	r3, #1
 8003304:	2300      	movne	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_ADC_IRQHandler+0x21a>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d014      	beq.n	8003356 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10d      	bne.n	8003356 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f9a2 	bl	8003690 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0201 	mvn.w	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b20      	cmp	r3, #32
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x27a>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0220 	mvn.w	r2, #32
 80033a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f97c 	bl	80036a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0220 	mvn.w	r2, #32
 80033b4:	601a      	str	r2, [r3, #0]
  }
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Start_DMA+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0d4      	b.n	8003588 <HAL_ADC_Start_DMA+0x1c8>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d018      	beq.n	8003426 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003404:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_ADC_Start_DMA+0x1d0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a62      	ldr	r2, [pc, #392]	; (8003594 <HAL_ADC_Start_DMA+0x1d4>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0c9a      	lsrs	r2, r3, #18
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003418:	e002      	b.n	8003420 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3b01      	subs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f9      	bne.n	800341a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 809c 	bne.w	800356e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343a:	4b57      	ldr	r3, [pc, #348]	; (8003598 <HAL_ADC_Start_DMA+0x1d8>)
 800343c:	4013      	ands	r3, r2
 800343e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800345c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d106      	bne.n	8003480 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f023 0206 	bic.w	r2, r3, #6
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
 800347e:	e002      	b.n	8003486 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4a42      	ldr	r2, [pc, #264]	; (800359c <HAL_ADC_Start_DMA+0x1dc>)
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <HAL_ADC_Start_DMA+0x1e0>)
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <HAL_ADC_Start_DMA+0x1e4>)
 80034a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	334c      	adds	r3, #76	; 0x4c
 80034da:	4619      	mov	r1, r3
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f000 fd7a 	bl	8003fd8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80034e4:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <HAL_ADC_Start_DMA+0x1e8>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d143      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	e03a      	b.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a25      	ldr	r2, [pc, #148]	; (80035ac <HAL_ADC_Start_DMA+0x1ec>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d10e      	bne.n	8003538 <HAL_ADC_Start_DMA+0x178>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d107      	bne.n	8003538 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003536:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_ADC_Start_DMA+0x1e8>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d120      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_ADC_Start_DMA+0x1f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d11b      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d114      	bne.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e00b      	b.n	8003586 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0210 	orr.w	r2, r3, #16
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000080 	.word	0x20000080
 8003594:	431bde83 	.word	0x431bde83
 8003598:	fffff8fe 	.word	0xfffff8fe
 800359c:	08003b41 	.word	0x08003b41
 80035a0:	08003bfb 	.word	0x08003bfb
 80035a4:	08003c17 	.word	0x08003c17
 80035a8:	40012300 	.word	0x40012300
 80035ac:	40012000 	.word	0x40012000
 80035b0:	40012200 	.word	0x40012200

080035b4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_Stop_DMA+0x1a>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e046      	b.n	800365c <HAL_ADC_Stop_DMA+0xa8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d12e      	bne.n	8003652 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003602:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d10f      	bne.n	8003632 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd3e 	bl	8004098 <HAL_DMA_Abort>
 800361c:	4603      	mov	r3, r0
 800361e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003640:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003646:	4b07      	ldr	r3, [pc, #28]	; (8003664 <HAL_ADC_Stop_DMA+0xb0>)
 8003648:	4013      	ands	r3, r2
 800364a:	f043 0201 	orr.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	ffffeefe 	.word	0xffffeefe

08003668 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x1c>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e12a      	b.n	800392a <HAL_ADC_ConfigChannel+0x272>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	d93a      	bls.n	800375a <HAL_ADC_ConfigChannel+0xa2>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ec:	d035      	beq.n	800375a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	3b1e      	subs	r3, #30
 8003704:	2207      	movs	r2, #7
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	400a      	ands	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a87      	ldr	r2, [pc, #540]	; (8003938 <HAL_ADC_ConfigChannel+0x280>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10a      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68d9      	ldr	r1, [r3, #12]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	061a      	lsls	r2, r3, #24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003732:	e035      	b.n	80037a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68d9      	ldr	r1, [r3, #12]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	4618      	mov	r0, r3
 8003746:	4603      	mov	r3, r0
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4403      	add	r3, r0
 800374c:	3b1e      	subs	r3, #30
 800374e:	409a      	lsls	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003758:	e022      	b.n	80037a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6919      	ldr	r1, [r3, #16]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	4613      	mov	r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4413      	add	r3, r2
 800376e:	2207      	movs	r2, #7
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43da      	mvns	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	400a      	ands	r2, r1
 800377c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6919      	ldr	r1, [r3, #16]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	4618      	mov	r0, r3
 8003790:	4603      	mov	r3, r0
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4403      	add	r3, r0
 8003796:	409a      	lsls	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b06      	cmp	r3, #6
 80037a6:	d824      	bhi.n	80037f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	3b05      	subs	r3, #5
 80037ba:	221f      	movs	r2, #31
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43da      	mvns	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	400a      	ands	r2, r1
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	3b05      	subs	r3, #5
 80037e4:	fa00 f203 	lsl.w	r2, r0, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	635a      	str	r2, [r3, #52]	; 0x34
 80037f0:	e04c      	b.n	800388c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d824      	bhi.n	8003844 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	3b23      	subs	r3, #35	; 0x23
 800380c:	221f      	movs	r2, #31
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	400a      	ands	r2, r1
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	4618      	mov	r0, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	3b23      	subs	r3, #35	; 0x23
 8003836:	fa00 f203 	lsl.w	r2, r0, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
 8003842:	e023      	b.n	800388c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	3b41      	subs	r3, #65	; 0x41
 8003856:	221f      	movs	r2, #31
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43da      	mvns	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	400a      	ands	r2, r1
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	4618      	mov	r0, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	3b41      	subs	r3, #65	; 0x41
 8003880:	fa00 f203 	lsl.w	r2, r0, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_ADC_ConfigChannel+0x284>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1f4>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800389e:	d105      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a26      	ldr	r2, [pc, #152]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_ADC_ConfigChannel+0x284>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d109      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x212>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b12      	cmp	r3, #18
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1b      	ldr	r2, [pc, #108]	; (800393c <HAL_ADC_ConfigChannel+0x284>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d125      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x268>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <HAL_ADC_ConfigChannel+0x280>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x22e>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b11      	cmp	r3, #17
 80038e4:	d11c      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <HAL_ADC_ConfigChannel+0x288>)
 80038ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_ADC_ConfigChannel+0x280>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d111      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_ADC_ConfigChannel+0x28c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a11      	ldr	r2, [pc, #68]	; (8003948 <HAL_ADC_ConfigChannel+0x290>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9a      	lsrs	r2, r3, #18
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003912:	e002      	b.n	800391a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3b01      	subs	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f9      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	10000012 	.word	0x10000012
 800393c:	40012000 	.word	0x40012000
 8003940:	40012300 	.word	0x40012300
 8003944:	20000080 	.word	0x20000080
 8003948:	431bde83 	.word	0x431bde83

0800394c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003954:	4b78      	ldr	r3, [pc, #480]	; (8003b38 <ADC_Init+0x1ec>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a77      	ldr	r2, [pc, #476]	; (8003b38 <ADC_Init+0x1ec>)
 800395a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800395e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003960:	4b75      	ldr	r3, [pc, #468]	; (8003b38 <ADC_Init+0x1ec>)
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4973      	ldr	r1, [pc, #460]	; (8003b38 <ADC_Init+0x1ec>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	021a      	lsls	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6899      	ldr	r1, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68da      	ldr	r2, [r3, #12]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <ADC_Init+0x1f0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6899      	ldr	r1, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	e00f      	b.n	8003a46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0202 	bic.w	r2, r2, #2
 8003a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6899      	ldr	r1, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	005a      	lsls	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01b      	beq.n	8003aac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	035a      	lsls	r2, r3, #13
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	e007      	b.n	8003abc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	051a      	lsls	r2, r3, #20
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003afe:	025a      	lsls	r2, r3, #9
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	029a      	lsls	r2, r3, #10
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012300 	.word	0x40012300
 8003b3c:	0f000001 	.word	0x0f000001

08003b40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d13c      	bne.n	8003bd4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d12b      	bne.n	8003bcc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d127      	bne.n	8003bcc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d119      	bne.n	8003bcc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0220 	bic.w	r2, r2, #32
 8003ba6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fd4b 	bl	8003668 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bd2:	e00e      	b.n	8003bf2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff fd5f 	bl	80036a4 <HAL_ADC_ErrorCallback>
}
 8003be6:	e004      	b.n	8003bf2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd37 	bl	800367c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f043 0204 	orr.w	r2, r3, #4
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff fd34 	bl	80036a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <__NVIC_SetPriorityGrouping+0x40>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c74:	4013      	ands	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <__NVIC_SetPriorityGrouping+0x44>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <__NVIC_SetPriorityGrouping+0x40>)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	60d3      	str	r3, [r2, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000ed00 	.word	0xe000ed00
 8003c9c:	05fa0000 	.word	0x05fa0000

08003ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	f003 0307 	and.w	r3, r3, #7
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db0b      	blt.n	8003ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	f003 021f 	and.w	r2, r3, #31
 8003cd4:	4907      	ldr	r1, [pc, #28]	; (8003cf4 <__NVIC_EnableIRQ+0x38>)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	2001      	movs	r0, #1
 8003cde:	fa00 f202 	lsl.w	r2, r0, r2
 8003ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000e100 	.word	0xe000e100

08003cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	db0a      	blt.n	8003d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	490c      	ldr	r1, [pc, #48]	; (8003d44 <__NVIC_SetPriority+0x4c>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	0112      	lsls	r2, r2, #4
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d20:	e00a      	b.n	8003d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	4908      	ldr	r1, [pc, #32]	; (8003d48 <__NVIC_SetPriority+0x50>)
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	3b04      	subs	r3, #4
 8003d30:	0112      	lsls	r2, r2, #4
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	440b      	add	r3, r1
 8003d36:	761a      	strb	r2, [r3, #24]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000e100 	.word	0xe000e100
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b089      	sub	sp, #36	; 0x24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f1c3 0307 	rsb	r3, r3, #7
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	bf28      	it	cs
 8003d6a:	2304      	movcs	r3, #4
 8003d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2b06      	cmp	r3, #6
 8003d74:	d902      	bls.n	8003d7c <NVIC_EncodePriority+0x30>
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3b03      	subs	r3, #3
 8003d7a:	e000      	b.n	8003d7e <NVIC_EncodePriority+0x32>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	401a      	ands	r2, r3
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d94:	f04f 31ff 	mov.w	r1, #4294967295
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	43d9      	mvns	r1, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da4:	4313      	orrs	r3, r2
         );
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3724      	adds	r7, #36	; 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc4:	d301      	bcc.n	8003dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e00f      	b.n	8003dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <SysTick_Config+0x40>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dd2:	210f      	movs	r1, #15
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	f7ff ff8e 	bl	8003cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <SysTick_Config+0x40>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <SysTick_Config+0x40>)
 8003de4:	2207      	movs	r2, #7
 8003de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	e000e010 	.word	0xe000e010

08003df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff29 	bl	8003c58 <__NVIC_SetPriorityGrouping>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e20:	f7ff ff3e 	bl	8003ca0 <__NVIC_GetPriorityGrouping>
 8003e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	6978      	ldr	r0, [r7, #20]
 8003e2c:	f7ff ff8e 	bl	8003d4c <NVIC_EncodePriority>
 8003e30:	4602      	mov	r2, r0
 8003e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff5d 	bl	8003cf8 <__NVIC_SetPriority>
}
 8003e3e:	bf00      	nop
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b082      	sub	sp, #8
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff31 	bl	8003cbc <__NVIC_EnableIRQ>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff ffa2 	bl	8003db4 <SysTick_Config>
 8003e70:	4603      	mov	r3, r0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e88:	f7ff f8e4 	bl	8003054 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e099      	b.n	8003fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb8:	e00f      	b.n	8003eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eba:	f7ff f8cb 	bl	8003054 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d908      	bls.n	8003eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e078      	b.n	8003fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e8      	bne.n	8003eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_DMA_Init+0x158>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d107      	bne.n	8003f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0307 	bic.w	r3, r3, #7
 8003f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d117      	bne.n	8003f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fb09 	bl	8004598 <DMA_CheckFifoParam>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e016      	b.n	8003fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fac0 	bl	800452c <DMA_CalcBaseAndBitshift>
 8003fac:	4603      	mov	r3, r0
 8003fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	223f      	movs	r2, #63	; 0x3f
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	e010803f 	.word	0xe010803f

08003fd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_DMA_Start_IT+0x26>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e048      	b.n	8004090 <HAL_DMA_Start_IT+0xb8>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b01      	cmp	r3, #1
 8004010:	d137      	bne.n	8004082 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	68b9      	ldr	r1, [r7, #8]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa52 	bl	80044d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	223f      	movs	r2, #63	; 0x3f
 8004032:	409a      	lsls	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0216 	orr.w	r2, r2, #22
 8004046:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004056:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0208 	orr.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e005      	b.n	800408e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800408a:	2302      	movs	r3, #2
 800408c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800408e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040a6:	f7fe ffd5 	bl	8003054 <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d008      	beq.n	80040ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e052      	b.n	8004170 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_Abort+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411a:	e013      	b.n	8004144 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411c:	f7fe ff9a 	bl	8003054 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b05      	cmp	r3, #5
 8004128:	d90c      	bls.n	8004144 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2203      	movs	r2, #3
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e015      	b.n	8004170 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e4      	bne.n	800411c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	223f      	movs	r2, #63	; 0x3f
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d004      	beq.n	8004196 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2280      	movs	r2, #128	; 0x80
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00c      	b.n	80041b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2205      	movs	r2, #5
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041c8:	4b92      	ldr	r3, [pc, #584]	; (8004414 <HAL_DMA_IRQHandler+0x258>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a92      	ldr	r2, [pc, #584]	; (8004418 <HAL_DMA_IRQHandler+0x25c>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	0a9b      	lsrs	r3, r3, #10
 80041d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2208      	movs	r2, #8
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01a      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d013      	beq.n	8004228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	2201      	movs	r2, #1
 800424c:	409a      	lsls	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f043 0202 	orr.w	r2, r3, #2
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2204      	movs	r2, #4
 8004264:	409a      	lsls	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d012      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2204      	movs	r2, #4
 8004282:	409a      	lsls	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2210      	movs	r2, #16
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d043      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03c      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2210      	movs	r2, #16
 80042b8:	409a      	lsls	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d024      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e01f      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e016      	b.n	800432c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d107      	bne.n	800431c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0208 	bic.w	r2, r2, #8
 800431a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2220      	movs	r2, #32
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 808e 	beq.w	800445a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8086 	beq.w	800445a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	2220      	movs	r2, #32
 8004354:	409a      	lsls	r2, r3
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b05      	cmp	r3, #5
 8004364:	d136      	bne.n	80043d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0216 	bic.w	r2, r2, #22
 8004374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <HAL_DMA_IRQHandler+0x1da>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	223f      	movs	r2, #63	; 0x3f
 80043ac:	409a      	lsls	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d07d      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
        }
        return;
 80043d2:	e078      	b.n	80044c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01c      	beq.n	800441c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d108      	bne.n	8004402 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d030      	beq.n	800445a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e02b      	b.n	800445a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d027      	beq.n	800445a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
 8004412:	e022      	b.n	800445a <HAL_DMA_IRQHandler+0x29e>
 8004414:	20000080 	.word	0x20000080
 8004418:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0210 	bic.w	r2, r2, #16
 8004438:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	2b00      	cmp	r3, #0
 8004460:	d032      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2205      	movs	r2, #5
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0201 	bic.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3301      	adds	r3, #1
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d307      	bcc.n	80044a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f2      	bne.n	8004486 <HAL_DMA_IRQHandler+0x2ca>
 80044a0:	e000      	b.n	80044a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e000      	b.n	80044c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044c6:	bf00      	nop
    }
  }
}
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop

080044d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d108      	bne.n	8004510 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800450e:	e007      	b.n	8004520 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3b10      	subs	r3, #16
 800453c:	4a13      	ldr	r2, [pc, #76]	; (800458c <DMA_CalcBaseAndBitshift+0x60>)
 800453e:	fba2 2303 	umull	r2, r3, r2, r3
 8004542:	091b      	lsrs	r3, r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <DMA_CalcBaseAndBitshift+0x64>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d908      	bls.n	800456c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <DMA_CalcBaseAndBitshift+0x68>)
 8004562:	4013      	ands	r3, r2
 8004564:	1d1a      	adds	r2, r3, #4
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	659a      	str	r2, [r3, #88]	; 0x58
 800456a:	e006      	b.n	800457a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <DMA_CalcBaseAndBitshift+0x68>)
 8004574:	4013      	ands	r3, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	aaaaaaab 	.word	0xaaaaaaab
 8004590:	0800bef0 	.word	0x0800bef0
 8004594:	fffffc00 	.word	0xfffffc00

08004598 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11f      	bne.n	80045f2 <DMA_CheckFifoParam+0x5a>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d856      	bhi.n	8004666 <DMA_CheckFifoParam+0xce>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <DMA_CheckFifoParam+0x28>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045e3 	.word	0x080045e3
 80045c8:	080045d1 	.word	0x080045d1
 80045cc:	08004667 	.word	0x08004667
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d046      	beq.n	800466a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e043      	b.n	800466a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ea:	d140      	bne.n	800466e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f0:	e03d      	b.n	800466e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fa:	d121      	bne.n	8004640 <DMA_CheckFifoParam+0xa8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d837      	bhi.n	8004672 <DMA_CheckFifoParam+0xda>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <DMA_CheckFifoParam+0x70>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	0800461f 	.word	0x0800461f
 8004610:	08004619 	.word	0x08004619
 8004614:	08004631 	.word	0x08004631
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e030      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d025      	beq.n	8004676 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462e:	e022      	b.n	8004676 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004638:	d11f      	bne.n	800467a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800463e:	e01c      	b.n	800467a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d903      	bls.n	800464e <DMA_CheckFifoParam+0xb6>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d003      	beq.n	8004654 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800464c:	e018      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      break;
 8004652:	e015      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00e      	beq.n	800467e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	73fb      	strb	r3, [r7, #15]
      break;
 8004664:	e00b      	b.n	800467e <DMA_CheckFifoParam+0xe6>
      break;
 8004666:	bf00      	nop
 8004668:	e00a      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466a:	bf00      	nop
 800466c:	e008      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;   
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <DMA_CheckFifoParam+0xe8>
      break;
 800467e:	bf00      	nop
    }
  } 
  
  return status; 
 8004680:	7bfb      	ldrb	r3, [r7, #15]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e175      	b.n	800499c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046b0:	2201      	movs	r2, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f040 8164 	bne.w	8004996 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d00b      	beq.n	80046ee <HAL_GPIO_Init+0x5e>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d007      	beq.n	80046ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e2:	2b11      	cmp	r3, #17
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b12      	cmp	r3, #18
 80046ec:	d130      	bne.n	8004750 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004724:	2201      	movs	r2, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 0201 	and.w	r2, r3, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x100>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b12      	cmp	r3, #18
 800478e:	d123      	bne.n	80047d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80be 	beq.w	8004996 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	4b66      	ldr	r3, [pc, #408]	; (80049b4 <HAL_GPIO_Init+0x324>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	4a65      	ldr	r2, [pc, #404]	; (80049b4 <HAL_GPIO_Init+0x324>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004824:	6453      	str	r3, [r2, #68]	; 0x44
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_GPIO_Init+0x324>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004832:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <HAL_GPIO_Init+0x328>)
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a58      	ldr	r2, [pc, #352]	; (80049bc <HAL_GPIO_Init+0x32c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d037      	beq.n	80048ce <HAL_GPIO_Init+0x23e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <HAL_GPIO_Init+0x330>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_GPIO_Init+0x23a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a56      	ldr	r2, [pc, #344]	; (80049c4 <HAL_GPIO_Init+0x334>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02b      	beq.n	80048c6 <HAL_GPIO_Init+0x236>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a55      	ldr	r2, [pc, #340]	; (80049c8 <HAL_GPIO_Init+0x338>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d025      	beq.n	80048c2 <HAL_GPIO_Init+0x232>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a54      	ldr	r2, [pc, #336]	; (80049cc <HAL_GPIO_Init+0x33c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01f      	beq.n	80048be <HAL_GPIO_Init+0x22e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a53      	ldr	r2, [pc, #332]	; (80049d0 <HAL_GPIO_Init+0x340>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_Init+0x22a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_GPIO_Init+0x344>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_Init+0x226>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_GPIO_Init+0x348>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_Init+0x222>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a50      	ldr	r2, [pc, #320]	; (80049dc <HAL_GPIO_Init+0x34c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_Init+0x21e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_GPIO_Init+0x350>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_Init+0x21a>
 80048a6:	2309      	movs	r3, #9
 80048a8:	e012      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048aa:	230a      	movs	r3, #10
 80048ac:	e010      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ae:	2308      	movs	r3, #8
 80048b0:	e00e      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00c      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e00a      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e008      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048be:	2304      	movs	r3, #4
 80048c0:	e006      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e004      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e002      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_GPIO_Init+0x240>
 80048ce:	2300      	movs	r3, #0
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	f002 0203 	and.w	r2, r2, #3
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4093      	lsls	r3, r2
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048e0:	4935      	ldr	r1, [pc, #212]	; (80049b8 <HAL_GPIO_Init+0x328>)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3302      	adds	r3, #2
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ee:	4b3d      	ldr	r3, [pc, #244]	; (80049e4 <HAL_GPIO_Init+0x354>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4013      	ands	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004912:	4a34      	ldr	r2, [pc, #208]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800493c:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004942:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	43db      	mvns	r3, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4013      	ands	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_GPIO_Init+0x354>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_GPIO_Init+0x354>)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3301      	adds	r3, #1
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	f67f ae86 	bls.w	80046b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800
 80049b8:	40013800 	.word	0x40013800
 80049bc:	40020000 	.word	0x40020000
 80049c0:	40020400 	.word	0x40020400
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020c00 	.word	0x40020c00
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40021400 	.word	0x40021400
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40021c00 	.word	0x40021c00
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022400 	.word	0x40022400
 80049e4:	40013c00 	.word	0x40013c00

080049e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	887b      	ldrh	r3, [r7, #2]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
 8004a04:	e001      	b.n	8004a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	807b      	strh	r3, [r7, #2]
 8004a24:	4613      	mov	r3, r2
 8004a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a28:	787b      	ldrb	r3, [r7, #1]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a34:	e003      	b.n	8004a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	041a      	lsls	r2, r3, #16
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	619a      	str	r2, [r3, #24]
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a5c:	887a      	ldrh	r2, [r7, #2]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4013      	ands	r3, r2
 8004a62:	041a      	lsls	r2, r3, #16
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	43d9      	mvns	r1, r3
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	400b      	ands	r3, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	619a      	str	r2, [r3, #24]
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a22      	ldr	r2, [pc, #136]	; (8004b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b20      	ldr	r3, [pc, #128]	; (8004b18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004aa2:	4b1e      	ldr	r3, [pc, #120]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aae:	f7fe fad1 	bl	8003054 <HAL_GetTick>
 8004ab2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ab4:	e009      	b.n	8004aca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ab6:	f7fe facd 	bl	8003054 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ac4:	d901      	bls.n	8004aca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e022      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aca:	4b14      	ldr	r3, [pc, #80]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d1ee      	bne.n	8004ab6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a0f      	ldr	r2, [pc, #60]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae4:	f7fe fab6 	bl	8003054 <HAL_GetTick>
 8004ae8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004aea:	e009      	b.n	8004b00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aec:	f7fe fab2 	bl	8003054 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004afa:	d901      	bls.n	8004b00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e007      	b.n	8004b10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d1ee      	bne.n	8004aec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	40007000 	.word	0x40007000

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e29b      	b.n	800506e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8087 	beq.w	8004c52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b44:	4b96      	ldr	r3, [pc, #600]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d00c      	beq.n	8004b6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b50:	4b93      	ldr	r3, [pc, #588]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 030c 	and.w	r3, r3, #12
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d112      	bne.n	8004b82 <HAL_RCC_OscConfig+0x62>
 8004b5c:	4b90      	ldr	r3, [pc, #576]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4b8d      	ldr	r3, [pc, #564]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d06c      	beq.n	8004c50 <HAL_RCC_OscConfig+0x130>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d168      	bne.n	8004c50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e275      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x7a>
 8004b8c:	4b84      	ldr	r3, [pc, #528]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a83      	ldr	r2, [pc, #524]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e02e      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x9c>
 8004ba2:	4b7f      	ldr	r3, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a7e      	ldr	r2, [pc, #504]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b7c      	ldr	r3, [pc, #496]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a7b      	ldr	r2, [pc, #492]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e01d      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0xc0>
 8004bc6:	4b76      	ldr	r3, [pc, #472]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	4b73      	ldr	r3, [pc, #460]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a72      	ldr	r2, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0xd8>
 8004be0:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a6b      	ldr	r2, [pc, #428]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fe fa28 	bl	8003054 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fe fa24 	bl	8003054 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b64      	cmp	r3, #100	; 0x64
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e229      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1a:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0f0      	beq.n	8004c08 <HAL_RCC_OscConfig+0xe8>
 8004c26:	e014      	b.n	8004c52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fe fa14 	bl	8003054 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fe fa10 	bl	8003054 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e215      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c42:	4b57      	ldr	r3, [pc, #348]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1f0      	bne.n	8004c30 <HAL_RCC_OscConfig+0x110>
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d069      	beq.n	8004d32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c5e:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c6a:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d11c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x190>
 8004c76:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d116      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d005      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1e9      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	493d      	ldr	r1, [pc, #244]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cae:	e040      	b.n	8004d32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb8:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a38      	ldr	r2, [pc, #224]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fe f9c6 	bl	8003054 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fe f9c2 	bl	8003054 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e1c7      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cea:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4929      	ldr	r1, [pc, #164]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
 8004cfe:	e018      	b.n	8004d32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d00:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fe f9a2 	bl	8003054 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d14:	f7fe f99e 	bl	8003054 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e1a3      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d26:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d038      	beq.n	8004db0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d019      	beq.n	8004d7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d46:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4a:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fe f97f 	bl	8003054 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fe f97b 	bl	8003054 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e180      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x23a>
 8004d78:	e01a      	b.n	8004db0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <HAL_RCC_OscConfig+0x280>)
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d86:	f7fe f965 	bl	8003054 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fe f961 	bl	8003054 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d903      	bls.n	8004da4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e166      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
 8004da0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da4:	4b92      	ldr	r3, [pc, #584]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ee      	bne.n	8004d8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80a4 	beq.w	8004f06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbe:	4b8c      	ldr	r3, [pc, #560]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b89      	ldr	r3, [pc, #548]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a88      	ldr	r2, [pc, #544]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b86      	ldr	r3, [pc, #536]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de6:	4b83      	ldr	r3, [pc, #524]	; (8004ff4 <HAL_RCC_OscConfig+0x4d4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004df2:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x4d4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a7f      	ldr	r2, [pc, #508]	; (8004ff4 <HAL_RCC_OscConfig+0x4d4>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fe f929 	bl	8003054 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fe f925 	bl	8003054 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e12a      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e18:	4b76      	ldr	r3, [pc, #472]	; (8004ff4 <HAL_RCC_OscConfig+0x4d4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x31a>
 8004e2c:	4b70      	ldr	r3, [pc, #448]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	4a6f      	ldr	r2, [pc, #444]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6713      	str	r3, [r2, #112]	; 0x70
 8004e38:	e02d      	b.n	8004e96 <HAL_RCC_OscConfig+0x376>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x33c>
 8004e42:	4b6b      	ldr	r3, [pc, #428]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a6a      	ldr	r2, [pc, #424]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	4b68      	ldr	r3, [pc, #416]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a67      	ldr	r2, [pc, #412]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	e01c      	b.n	8004e96 <HAL_RCC_OscConfig+0x376>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d10c      	bne.n	8004e7e <HAL_RCC_OscConfig+0x35e>
 8004e64:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	4a61      	ldr	r2, [pc, #388]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e70:	4b5f      	ldr	r3, [pc, #380]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e74:	4a5e      	ldr	r2, [pc, #376]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7c:	e00b      	b.n	8004e96 <HAL_RCC_OscConfig+0x376>
 8004e7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	4a5b      	ldr	r2, [pc, #364]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8a:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8e:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d015      	beq.n	8004eca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9e:	f7fe f8d9 	bl	8003054 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fe f8d5 	bl	8003054 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0d8      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	4b4c      	ldr	r3, [pc, #304]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ee      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x386>
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fe f8c3 	bl	8003054 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fe f8bf 	bl	8003054 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e0c2      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	4b41      	ldr	r3, [pc, #260]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ee      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efa:	4b3d      	ldr	r3, [pc, #244]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a3c      	ldr	r2, [pc, #240]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80ae 	beq.w	800506c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f10:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d06d      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d14b      	bne.n	8004fbc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a31      	ldr	r2, [pc, #196]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe f890 	bl	8003054 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fe f88c 	bl	8003054 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e091      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	061b      	lsls	r3, r3, #24
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	491b      	ldr	r1, [pc, #108]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a18      	ldr	r2, [pc, #96]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fe f85e 	bl	8003054 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fe f85a 	bl	8003054 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e05f      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x47c>
 8004fba:	e057      	b.n	800506c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a0b      	ldr	r2, [pc, #44]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f844 	bl	8003054 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe f840 	bl	8003054 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e045      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_OscConfig+0x4d0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x4b0>
 8004fee:	e03d      	b.n	800506c <HAL_RCC_OscConfig+0x54c>
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ff8:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <HAL_RCC_OscConfig+0x558>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d030      	beq.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005010:	429a      	cmp	r2, r3
 8005012:	d129      	bne.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d122      	bne.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800502e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005030:	4293      	cmp	r3, r2
 8005032:	d119      	bne.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	3b01      	subs	r3, #1
 8005042:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d10f      	bne.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800

0800507c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e0d0      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005094:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d910      	bls.n	80050c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f023 020f 	bic.w	r2, r3, #15
 80050aa:	4965      	ldr	r1, [pc, #404]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b63      	ldr	r3, [pc, #396]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0b8      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d020      	beq.n	8005112 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050dc:	4b59      	ldr	r3, [pc, #356]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a58      	ldr	r2, [pc, #352]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80050e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050f4:	4b53      	ldr	r3, [pc, #332]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	4a52      	ldr	r2, [pc, #328]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80050fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005100:	4b50      	ldr	r3, [pc, #320]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	494d      	ldr	r1, [pc, #308]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d040      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d107      	bne.n	8005136 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	4b47      	ldr	r3, [pc, #284]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d115      	bne.n	800515e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e07f      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d107      	bne.n	800514e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513e:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e073      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514e:	4b3d      	ldr	r3, [pc, #244]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06b      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800515e:	4b39      	ldr	r3, [pc, #228]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f023 0203 	bic.w	r2, r3, #3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4936      	ldr	r1, [pc, #216]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005170:	f7fd ff70 	bl	8003054 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005176:	e00a      	b.n	800518e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fd ff6c 	bl	8003054 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e053      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518e:	4b2d      	ldr	r3, [pc, #180]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 020c 	and.w	r2, r3, #12
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	429a      	cmp	r2, r3
 800519e:	d1eb      	bne.n	8005178 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d210      	bcs.n	80051d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	4922      	ldr	r1, [pc, #136]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e032      	b.n	8005236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051dc:	4b19      	ldr	r3, [pc, #100]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4916      	ldr	r1, [pc, #88]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051fa:	4b12      	ldr	r3, [pc, #72]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	490e      	ldr	r1, [pc, #56]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800520e:	f000 f821 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 8005212:	4602      	mov	r2, r0
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_ClockConfig+0x1c8>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	490a      	ldr	r1, [pc, #40]	; (8005248 <HAL_RCC_ClockConfig+0x1cc>)
 8005220:	5ccb      	ldrb	r3, [r1, r3]
 8005222:	fa22 f303 	lsr.w	r3, r2, r3
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <HAL_RCC_ClockConfig+0x1d0>)
 8005228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCC_ClockConfig+0x1d4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd fecc 	bl	8002fcc <HAL_InitTick>

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023c00 	.word	0x40023c00
 8005244:	40023800 	.word	0x40023800
 8005248:	0800bed8 	.word	0x0800bed8
 800524c:	20000080 	.word	0x20000080
 8005250:	200001b4 	.word	0x200001b4

08005254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800525a:	2100      	movs	r1, #0
 800525c:	6079      	str	r1, [r7, #4]
 800525e:	2100      	movs	r1, #0
 8005260:	60f9      	str	r1, [r7, #12]
 8005262:	2100      	movs	r1, #0
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005266:	2100      	movs	r1, #0
 8005268:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800526a:	4952      	ldr	r1, [pc, #328]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800526c:	6889      	ldr	r1, [r1, #8]
 800526e:	f001 010c 	and.w	r1, r1, #12
 8005272:	2908      	cmp	r1, #8
 8005274:	d00d      	beq.n	8005292 <HAL_RCC_GetSysClockFreq+0x3e>
 8005276:	2908      	cmp	r1, #8
 8005278:	f200 8094 	bhi.w	80053a4 <HAL_RCC_GetSysClockFreq+0x150>
 800527c:	2900      	cmp	r1, #0
 800527e:	d002      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x32>
 8005280:	2904      	cmp	r1, #4
 8005282:	d003      	beq.n	800528c <HAL_RCC_GetSysClockFreq+0x38>
 8005284:	e08e      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005286:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005288:	60bb      	str	r3, [r7, #8]
      break;
 800528a:	e08e      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800528c:	4b4b      	ldr	r3, [pc, #300]	; (80053bc <HAL_RCC_GetSysClockFreq+0x168>)
 800528e:	60bb      	str	r3, [r7, #8]
      break;
 8005290:	e08b      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005292:	4948      	ldr	r1, [pc, #288]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005294:	6849      	ldr	r1, [r1, #4]
 8005296:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800529a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800529c:	4945      	ldr	r1, [pc, #276]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800529e:	6849      	ldr	r1, [r1, #4]
 80052a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d024      	beq.n	80052f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a8:	4942      	ldr	r1, [pc, #264]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052aa:	6849      	ldr	r1, [r1, #4]
 80052ac:	0989      	lsrs	r1, r1, #6
 80052ae:	4608      	mov	r0, r1
 80052b0:	f04f 0100 	mov.w	r1, #0
 80052b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052b8:	f04f 0500 	mov.w	r5, #0
 80052bc:	ea00 0204 	and.w	r2, r0, r4
 80052c0:	ea01 0305 	and.w	r3, r1, r5
 80052c4:	493d      	ldr	r1, [pc, #244]	; (80053bc <HAL_RCC_GetSysClockFreq+0x168>)
 80052c6:	fb01 f003 	mul.w	r0, r1, r3
 80052ca:	2100      	movs	r1, #0
 80052cc:	fb01 f102 	mul.w	r1, r1, r2
 80052d0:	1844      	adds	r4, r0, r1
 80052d2:	493a      	ldr	r1, [pc, #232]	; (80053bc <HAL_RCC_GetSysClockFreq+0x168>)
 80052d4:	fba2 0101 	umull	r0, r1, r2, r1
 80052d8:	1863      	adds	r3, r4, r1
 80052da:	4619      	mov	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	461a      	mov	r2, r3
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	f7fb f814 	bl	8000310 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4613      	mov	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e04a      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f2:	4b30      	ldr	r3, [pc, #192]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	461a      	mov	r2, r3
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	ea02 0400 	and.w	r4, r2, r0
 800530a:	ea03 0501 	and.w	r5, r3, r1
 800530e:	4620      	mov	r0, r4
 8005310:	4629      	mov	r1, r5
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	014b      	lsls	r3, r1, #5
 800531c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005320:	0142      	lsls	r2, r0, #5
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	1b00      	subs	r0, r0, r4
 8005328:	eb61 0105 	sbc.w	r1, r1, r5
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	018b      	lsls	r3, r1, #6
 8005336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800533a:	0182      	lsls	r2, r0, #6
 800533c:	1a12      	subs	r2, r2, r0
 800533e:	eb63 0301 	sbc.w	r3, r3, r1
 8005342:	f04f 0000 	mov.w	r0, #0
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	00d9      	lsls	r1, r3, #3
 800534c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005350:	00d0      	lsls	r0, r2, #3
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	1912      	adds	r2, r2, r4
 8005358:	eb45 0303 	adc.w	r3, r5, r3
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	0299      	lsls	r1, r3, #10
 8005366:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800536a:	0290      	lsls	r0, r2, #10
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4610      	mov	r0, r2
 8005372:	4619      	mov	r1, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	461a      	mov	r2, r3
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f7fa ffc8 	bl	8000310 <__aeabi_uldivmod>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4613      	mov	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	0c1b      	lsrs	r3, r3, #16
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	3301      	adds	r3, #1
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	60bb      	str	r3, [r7, #8]
      break;
 80053a2:	e002      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80053a6:	60bb      	str	r3, [r7, #8]
      break;
 80053a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053aa:	68bb      	ldr	r3, [r7, #8]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdb0      	pop	{r4, r5, r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	00f42400 	.word	0x00f42400
 80053bc:	017d7840 	.word	0x017d7840

080053c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053c6:	681b      	ldr	r3, [r3, #0]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000080 	.word	0x20000080

080053d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053dc:	f7ff fff0 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4903      	ldr	r1, [pc, #12]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40023800 	.word	0x40023800
 80053fc:	0800bee8 	.word	0x0800bee8

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005404:	f7ff ffdc 	bl	80053c0 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	0b5b      	lsrs	r3, r3, #13
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4903      	ldr	r1, [pc, #12]	; (8005424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40023800 	.word	0x40023800
 8005424:	0800bee8 	.word	0x0800bee8

08005428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d012      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4a68      	ldr	r2, [pc, #416]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005456:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800545a:	6093      	str	r3, [r2, #8]
 800545c:	4b66      	ldr	r3, [pc, #408]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	4964      	ldr	r1, [pc, #400]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005466:	4313      	orrs	r3, r2
 8005468:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d017      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005482:	4b5d      	ldr	r3, [pc, #372]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	4959      	ldr	r1, [pc, #356]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a0:	d101      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d017      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054be:	4b4e      	ldr	r3, [pc, #312]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	494a      	ldr	r1, [pc, #296]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 808b 	beq.w	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800550c:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	4a39      	ldr	r2, [pc, #228]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005516:	6413      	str	r3, [r2, #64]	; 0x40
 8005518:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005524:	4b35      	ldr	r3, [pc, #212]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a34      	ldr	r2, [pc, #208]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005530:	f7fd fd90 	bl	8003054 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fd fd8c 	bl	8003054 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e38f      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800554a:	4b2c      	ldr	r3, [pc, #176]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005556:	4b28      	ldr	r3, [pc, #160]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d035      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d02e      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005574:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800557e:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005594:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005596:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d114      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fd fd54 	bl	8003054 <HAL_GetTick>
 80055ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ae:	e00a      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	f7fd fd50 	bl	8003054 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e351      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c6:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0ee      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055de:	d111      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055ee:	400b      	ands	r3, r1
 80055f0:	4901      	ldr	r1, [pc, #4]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
 80055f6:	e00b      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055f8:	40023800 	.word	0x40023800
 80055fc:	40007000 	.word	0x40007000
 8005600:	0ffffcff 	.word	0x0ffffcff
 8005604:	4bb3      	ldr	r3, [pc, #716]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4ab2      	ldr	r2, [pc, #712]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800560a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800560e:	6093      	str	r3, [r2, #8]
 8005610:	4bb0      	ldr	r3, [pc, #704]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005612:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561c:	49ad      	ldr	r1, [pc, #692]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561e:	4313      	orrs	r3, r2
 8005620:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d010      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800562e:	4ba9      	ldr	r3, [pc, #676]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005634:	4aa7      	ldr	r2, [pc, #668]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800563e:	4ba5      	ldr	r3, [pc, #660]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005640:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	49a2      	ldr	r1, [pc, #648]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800565c:	4b9d      	ldr	r3, [pc, #628]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566a:	499a      	ldr	r1, [pc, #616]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800567e:	4b95      	ldr	r3, [pc, #596]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568c:	4991      	ldr	r1, [pc, #580]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056a0:	4b8c      	ldr	r3, [pc, #560]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ae:	4989      	ldr	r1, [pc, #548]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056c2:	4b84      	ldr	r3, [pc, #528]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4980      	ldr	r1, [pc, #512]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e4:	4b7b      	ldr	r3, [pc, #492]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	f023 0203 	bic.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	4978      	ldr	r1, [pc, #480]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005706:	4b73      	ldr	r3, [pc, #460]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f023 020c 	bic.w	r2, r3, #12
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005714:	496f      	ldr	r1, [pc, #444]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005728:	4b6a      	ldr	r3, [pc, #424]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4967      	ldr	r1, [pc, #412]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800574a:	4b62      	ldr	r3, [pc, #392]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005750:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005758:	495e      	ldr	r1, [pc, #376]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800576c:	4b59      	ldr	r3, [pc, #356]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	4956      	ldr	r1, [pc, #344]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800578e:	4b51      	ldr	r3, [pc, #324]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005794:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579c:	494d      	ldr	r1, [pc, #308]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057b0:	4b48      	ldr	r3, [pc, #288]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057be:	4945      	ldr	r1, [pc, #276]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057d2:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e0:	493c      	ldr	r1, [pc, #240]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057f4:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005802:	4934      	ldr	r1, [pc, #208]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005816:	4b2f      	ldr	r3, [pc, #188]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005824:	492b      	ldr	r1, [pc, #172]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005834:	d101      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005836:	2301      	movs	r3, #1
 8005838:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005856:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005864:	491b      	ldr	r1, [pc, #108]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005878:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005888:	4912      	ldr	r1, [pc, #72]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800589c:	4b0d      	ldr	r3, [pc, #52]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ac:	4909      	ldr	r1, [pc, #36]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	e002      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80058d2:	bf00      	nop
 80058d4:	40023800 	.word	0x40023800
 80058d8:	4986      	ldr	r1, [pc, #536]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80058ec:	4b81      	ldr	r3, [pc, #516]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fc:	497d      	ldr	r1, [pc, #500]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d006      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 80d6 	beq.w	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005918:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a75      	ldr	r2, [pc, #468]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005924:	f7fd fb96 	bl	8003054 <HAL_GetTick>
 8005928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800592a:	e008      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800592c:	f7fd fb92 	bl	8003054 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e195      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800593e:	4b6d      	ldr	r3, [pc, #436]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d021      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11d      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800595e:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800596c:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005972:	0e1b      	lsrs	r3, r3, #24
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	019a      	lsls	r2, r3, #6
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	071b      	lsls	r3, r3, #28
 8005992:	4958      	ldr	r1, [pc, #352]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d004      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ae:	d00a      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02e      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c4:	d129      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059c6:	4b4b      	ldr	r3, [pc, #300]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059cc:	0c1b      	lsrs	r3, r3, #16
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059d4:	4b47      	ldr	r3, [pc, #284]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059da:	0f1b      	lsrs	r3, r3, #28
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	019a      	lsls	r2, r3, #6
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	061b      	lsls	r3, r3, #24
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	071b      	lsls	r3, r3, #28
 80059fa:	493e      	ldr	r1, [pc, #248]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a02:	4b3c      	ldr	r3, [pc, #240]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a08:	f023 021f 	bic.w	r2, r3, #31
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	3b01      	subs	r3, #1
 8005a12:	4938      	ldr	r1, [pc, #224]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01d      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a26:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2c:	0e1b      	lsrs	r3, r3, #24
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a34:	4b2f      	ldr	r3, [pc, #188]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3a:	0f1b      	lsrs	r3, r3, #28
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	019a      	lsls	r2, r3, #6
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	061b      	lsls	r3, r3, #24
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	071b      	lsls	r3, r3, #28
 8005a5a:	4926      	ldr	r1, [pc, #152]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	019a      	lsls	r2, r3, #6
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	041b      	lsls	r3, r3, #16
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	061b      	lsls	r3, r3, #24
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	071b      	lsls	r3, r3, #28
 8005a8a:	491a      	ldr	r1, [pc, #104]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a92:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9e:	f7fd fad9 	bl	8003054 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aa6:	f7fd fad5 	bl	8003054 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b64      	cmp	r3, #100	; 0x64
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e0d8      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	f040 80ce 	bne.w	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad8:	f7fd fabc 	bl	8003054 <HAL_GetTick>
 8005adc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ade:	e00b      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ae0:	f7fd fab8 	bl	8003054 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b64      	cmp	r3, #100	; 0x64
 8005aec:	d904      	bls.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0bb      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005af8:	4b5e      	ldr	r3, [pc, #376]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b04:	d0ec      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02e      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d12a      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b2e:	4b51      	ldr	r3, [pc, #324]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b3c:	4b4d      	ldr	r3, [pc, #308]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b42:	0f1b      	lsrs	r3, r3, #28
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	019a      	lsls	r2, r3, #6
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	061b      	lsls	r3, r3, #24
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	071b      	lsls	r3, r3, #28
 8005b62:	4944      	ldr	r1, [pc, #272]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b6a:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	493d      	ldr	r1, [pc, #244]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d022      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b98:	d11d      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b9a:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	0e1b      	lsrs	r3, r3, #24
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ba8:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	0f1b      	lsrs	r3, r3, #28
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	019a      	lsls	r2, r3, #6
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	041b      	lsls	r3, r3, #16
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	071b      	lsls	r3, r3, #28
 8005bce:	4929      	ldr	r1, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d028      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005be2:	4b24      	ldr	r3, [pc, #144]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bf0:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	019a      	lsls	r2, r3, #6
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	4917      	ldr	r1, [pc, #92]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c1e:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4911      	ldr	r1, [pc, #68]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0e      	ldr	r2, [pc, #56]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c40:	f7fd fa08 	bl	8003054 <HAL_GetTick>
 8005c44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c48:	f7fd fa04 	bl	8003054 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	; 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e007      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c66:	d1ef      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40023800 	.word	0x40023800

08005c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e09d      	b.n	8005dc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d009      	beq.n	8005cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]
 8005ca2:	e005      	b.n	8005cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fc fac4 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf0:	d902      	bls.n	8005cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e002      	b.n	8005cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d06:	d007      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	ea42 0103 	orr.w	r1, r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	0c1b      	lsrs	r3, r3, #16
 8005d74:	f003 0204 	and.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	f003 0310 	and.w	r3, r3, #16
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f003 0308 	and.w	r3, r3, #8
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	603b      	str	r3, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_SPI_Transmit+0x22>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e158      	b.n	80060a2 <HAL_SPI_Transmit+0x2d4>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005df8:	f7fd f92c 	bl	8003054 <HAL_GetTick>
 8005dfc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e0e:	2302      	movs	r3, #2
 8005e10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e12:	e13d      	b.n	8006090 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0x52>
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e24:	e134      	b.n	8006090 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2203      	movs	r2, #3
 8005e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	88fa      	ldrh	r2, [r7, #6]
 8005e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	88fa      	ldrh	r2, [r7, #6]
 8005e44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e70:	d10f      	bne.n	8005e92 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d007      	beq.n	8005eb0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb8:	d94b      	bls.n	8005f52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_SPI_Transmit+0xfa>
 8005ec2:	8afb      	ldrh	r3, [r7, #22]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d13e      	bne.n	8005f46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eec:	e02b      	b.n	8005f46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d112      	bne.n	8005f22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0c:	1c9a      	adds	r2, r3, #2
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f20:	e011      	b.n	8005f46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f22:	f7fd f897 	bl	8003054 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d803      	bhi.n	8005f3a <HAL_SPI_Transmit+0x16c>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_Transmit+0x172>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d102      	bne.n	8005f46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f44:	e0a4      	b.n	8006090 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ce      	bne.n	8005eee <HAL_SPI_Transmit+0x120>
 8005f50:	e07c      	b.n	800604c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0x192>
 8005f5a:	8afb      	ldrh	r3, [r7, #22]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d170      	bne.n	8006042 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d912      	bls.n	8005f90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b02      	subs	r3, #2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f8e:	e058      	b.n	8006042 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fb6:	e044      	b.n	8006042 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d12b      	bne.n	800601e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d912      	bls.n	8005ff6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b02      	subs	r3, #2
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ff4:	e025      	b.n	8006042 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800601c:	e011      	b.n	8006042 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601e:	f7fd f819 	bl	8003054 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d803      	bhi.n	8006036 <HAL_SPI_Transmit+0x268>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d102      	bne.n	800603c <HAL_SPI_Transmit+0x26e>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006040:	e026      	b.n	8006090 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1b5      	bne.n	8005fb8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fc77 	bl	8006944 <SPI_EndRxTxTransaction>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e000      	b.n	8006090 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800608e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08a      	sub	sp, #40	; 0x28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060b8:	2301      	movs	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x26>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e1fb      	b.n	80064c8 <HAL_SPI_TransmitReceive+0x41e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d8:	f7fc ffbc 	bl	8003054 <HAL_GetTick>
 80060dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060ec:	887b      	ldrh	r3, [r7, #2]
 80060ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060f0:	887b      	ldrh	r3, [r7, #2]
 80060f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060f4:	7efb      	ldrb	r3, [r7, #27]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d00e      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x6e>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006100:	d106      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d102      	bne.n	8006110 <HAL_SPI_TransmitReceive+0x66>
 800610a:	7efb      	ldrb	r3, [r7, #27]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d003      	beq.n	8006118 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006110:	2302      	movs	r3, #2
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006116:	e1cd      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d005      	beq.n	800612a <HAL_SPI_TransmitReceive+0x80>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_TransmitReceive+0x80>
 8006124:	887b      	ldrh	r3, [r7, #2]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006130:	e1c0      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b04      	cmp	r3, #4
 800613c:	d003      	beq.n	8006146 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2205      	movs	r2, #5
 8006142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	887a      	ldrh	r2, [r7, #2]
 8006156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	887a      	ldrh	r2, [r7, #2]
 800615e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	887a      	ldrh	r2, [r7, #2]
 800616c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	887a      	ldrh	r2, [r7, #2]
 8006172:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006188:	d802      	bhi.n	8006190 <HAL_SPI_TransmitReceive+0xe6>
 800618a:	8a3b      	ldrh	r3, [r7, #16]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d908      	bls.n	80061a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	e007      	b.n	80061b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d007      	beq.n	80061d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061d8:	d97c      	bls.n	80062d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x13e>
 80061e2:	8a7b      	ldrh	r3, [r7, #18]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d169      	bne.n	80062bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800620c:	e056      	b.n	80062bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b02      	cmp	r3, #2
 800621a:	d11b      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1aa>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <HAL_SPI_TransmitReceive+0x1aa>
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	2b01      	cmp	r3, #1
 800622a:	d113      	bne.n	8006254 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	3b01      	subs	r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b01      	cmp	r3, #1
 8006260:	d11c      	bne.n	800629c <HAL_SPI_TransmitReceive+0x1f2>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	b292      	uxth	r2, r2
 800627a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	1c9a      	adds	r2, r3, #2
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006298:	2301      	movs	r3, #1
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800629c:	f7fc feda 	bl	8003054 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d807      	bhi.n	80062bc <HAL_SPI_TransmitReceive+0x212>
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d003      	beq.n	80062bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062ba:	e0fb      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1a3      	bne.n	800620e <HAL_SPI_TransmitReceive+0x164>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d19d      	bne.n	800620e <HAL_SPI_TransmitReceive+0x164>
 80062d2:	e0df      	b.n	8006494 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <HAL_SPI_TransmitReceive+0x23a>
 80062dc:	8a7b      	ldrh	r3, [r7, #18]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	f040 80cb 	bne.w	800647a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d912      	bls.n	8006314 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	881a      	ldrh	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	1c9a      	adds	r2, r3, #2
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b02      	subs	r3, #2
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006312:	e0b2      	b.n	800647a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800633a:	e09e      	b.n	800647a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d134      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x30a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02f      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x30a>
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	2b01      	cmp	r3, #1
 8006358:	d12c      	bne.n	80063b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800635e:	b29b      	uxth	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	d912      	bls.n	800638a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b02      	subs	r3, #2
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006388:	e012      	b.n	80063b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d148      	bne.n	8006454 <HAL_SPI_TransmitReceive+0x3aa>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d042      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d923      	bls.n	8006422 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	b292      	uxth	r2, r2
 80063e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	1c9a      	adds	r2, r3, #2
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b02      	subs	r3, #2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d81f      	bhi.n	8006450 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	e016      	b.n	8006450 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f103 020c 	add.w	r2, r3, #12
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006450:	2301      	movs	r3, #1
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006454:	f7fc fdfe 	bl	8003054 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	429a      	cmp	r2, r3
 8006462:	d803      	bhi.n	800646c <HAL_SPI_TransmitReceive+0x3c2>
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d102      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x3c8>
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d103      	bne.n	800647a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006478:	e01c      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	f47f af5b 	bne.w	800633c <HAL_SPI_TransmitReceive+0x292>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	f47f af54 	bne.w	800633c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006494:	69fa      	ldr	r2, [r7, #28]
 8006496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fa53 	bl	8006944 <SPI_EndRxTxTransaction>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
 80064b0:	e000      	b.n	80064b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80064b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	; 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	099b      	lsrs	r3, r3, #6
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10f      	bne.n	8006514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	4798      	blx	r3
    return;
 8006512:	e0d7      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_SPI_IRQHandler+0x66>
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
    return;
 8006534:	e0c6      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <HAL_SPI_IRQHandler+0x8c>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	0a1b      	lsrs	r3, r3, #8
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80b4 	beq.w	80066c4 <HAL_SPI_IRQHandler+0x1f4>
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80ad 	beq.w	80066c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	099b      	lsrs	r3, r3, #6
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d023      	beq.n	80065be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b03      	cmp	r3, #3
 8006580:	d011      	beq.n	80065a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	e00b      	b.n	80065be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a6:	2300      	movs	r3, #0
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	693b      	ldr	r3, [r7, #16]
        return;
 80065bc:	e082      	b.n	80066c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d014      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	0a1b      	lsrs	r3, r3, #8
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00c      	beq.n	800661a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	f043 0208 	orr.w	r2, r3, #8
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800660c:	2300      	movs	r3, #0
 800660e:	60bb      	str	r3, [r7, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661e:	2b00      	cmp	r3, #0
 8006620:	d04f      	beq.n	80066c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006630:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b00      	cmp	r3, #0
 8006642:	d104      	bne.n	800664e <HAL_SPI_IRQHandler+0x17e>
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d034      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0203 	bic.w	r2, r2, #3
 800665c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006662:	2b00      	cmp	r3, #0
 8006664:	d011      	beq.n	800668a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800666a:	4a18      	ldr	r2, [pc, #96]	; (80066cc <HAL_SPI_IRQHandler+0x1fc>)
 800666c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006672:	4618      	mov	r0, r3
 8006674:	f7fd fd80 	bl	8004178 <HAL_DMA_Abort_IT>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	2b00      	cmp	r3, #0
 8006690:	d016      	beq.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <HAL_SPI_IRQHandler+0x1fc>)
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fd fd6a 	bl	8004178 <HAL_DMA_Abort_IT>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80066b6:	e003      	b.n	80066c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f809 	bl	80066d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066be:	e000      	b.n	80066c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80066c0:	bf00      	nop
    return;
 80066c2:	bf00      	nop
  }
}
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	080066e5 	.word	0x080066e5

080066d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ffe5 	bl	80066d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006720:	f7fc fc98 	bl	8003054 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	4413      	add	r3, r2
 800672e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006730:	f7fc fc90 	bl	8003054 <HAL_GetTick>
 8006734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006736:	4b39      	ldr	r3, [pc, #228]	; (800681c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	015b      	lsls	r3, r3, #5
 800673c:	0d1b      	lsrs	r3, r3, #20
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006746:	e054      	b.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d050      	beq.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006750:	f7fc fc80 	bl	8003054 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	429a      	cmp	r2, r3
 800675e:	d902      	bls.n	8006766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d13d      	bne.n	80067e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800677e:	d111      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d004      	beq.n	8006794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006792:	d107      	bne.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ac:	d10f      	bne.n	80067ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e017      	b.n	8006812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4013      	ands	r3, r2
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	429a      	cmp	r2, r3
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	429a      	cmp	r2, r3
 800680e:	d19b      	bne.n	8006748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3720      	adds	r7, #32
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000080 	.word	0x20000080

08006820 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800682e:	f7fc fc11 	bl	8003054 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	4413      	add	r3, r2
 800683c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800683e:	f7fc fc09 	bl	8003054 <HAL_GetTick>
 8006842:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006844:	4b3e      	ldr	r3, [pc, #248]	; (8006940 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	00da      	lsls	r2, r3, #3
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	0d1b      	lsrs	r3, r3, #20
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800685c:	e062      	b.n	8006924 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006864:	d109      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d106      	bne.n	800687a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006878:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d050      	beq.n	8006924 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006882:	f7fc fbe7 	bl	8003054 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	429a      	cmp	r2, r3
 8006890:	d902      	bls.n	8006898 <SPI_WaitFifoStateUntilTimeout+0x78>
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d13d      	bne.n	8006914 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068b0:	d111      	bne.n	80068d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ba:	d004      	beq.n	80068c6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c4:	d107      	bne.n	80068d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d10f      	bne.n	8006900 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e010      	b.n	8006936 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3b01      	subs	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	4013      	ands	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d194      	bne.n	800685e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000080 	.word	0x20000080

08006944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2200      	movs	r2, #0
 8006958:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff ff5f 	bl	8006820 <SPI_WaitFifoStateUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696c:	f043 0220 	orr.w	r2, r3, #32
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e027      	b.n	80069c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	2180      	movs	r1, #128	; 0x80
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fec4 	bl	8006710 <SPI_WaitFlagStateUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e014      	b.n	80069c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff ff38 	bl	8006820 <SPI_WaitFifoStateUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e000      	b.n	80069c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e049      	b.n	8006a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fb ff90 	bl	800291c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f000 fdcc 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d001      	beq.n	8006a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e054      	b.n	8006b42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac2:	d01d      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_TIM_Base_Start_IT+0xe4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIM_Base_Start_IT+0x80>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_TIM_Base_Start_IT+0xe8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d115      	bne.n	8006b2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	4b19      	ldr	r3, [pc, #100]	; (8006b6c <HAL_TIM_Base_Start_IT+0xec>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b06      	cmp	r3, #6
 8006b10:	d015      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0xbe>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b18:	d011      	beq.n	8006b3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2a:	e008      	b.n	8006b3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f042 0201 	orr.w	r2, r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	e000      	b.n	8006b40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40010400 	.word	0x40010400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40001800 	.word	0x40001800
 8006b6c:	00010007 	.word	0x00010007

08006b70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10f      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	f240 4344 	movw	r3, #1092	; 0x444
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_Base_Stop_IT+0x48>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e049      	b.n	8006c74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7fb feef 	bl	80029d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	f000 fccd 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <HAL_TIM_PWM_Start+0x24>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	bf14      	ite	ne
 8006c98:	2301      	movne	r3, #1
 8006c9a:	2300      	moveq	r3, #0
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	e03c      	b.n	8006d1a <HAL_TIM_PWM_Start+0x9e>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d109      	bne.n	8006cba <HAL_TIM_PWM_Start+0x3e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	e02f      	b.n	8006d1a <HAL_TIM_PWM_Start+0x9e>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d109      	bne.n	8006cd4 <HAL_TIM_PWM_Start+0x58>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e022      	b.n	8006d1a <HAL_TIM_PWM_Start+0x9e>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d109      	bne.n	8006cee <HAL_TIM_PWM_Start+0x72>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	bf14      	ite	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	2300      	moveq	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e015      	b.n	8006d1a <HAL_TIM_PWM_Start+0x9e>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d109      	bne.n	8006d08 <HAL_TIM_PWM_Start+0x8c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e008      	b.n	8006d1a <HAL_TIM_PWM_Start+0x9e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	bf14      	ite	ne
 8006d14:	2301      	movne	r3, #1
 8006d16:	2300      	moveq	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e092      	b.n	8006e48 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d104      	bne.n	8006d32 <HAL_TIM_PWM_Start+0xb6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d30:	e023      	b.n	8006d7a <HAL_TIM_PWM_Start+0xfe>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d104      	bne.n	8006d42 <HAL_TIM_PWM_Start+0xc6>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d40:	e01b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xfe>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d104      	bne.n	8006d52 <HAL_TIM_PWM_Start+0xd6>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d50:	e013      	b.n	8006d7a <HAL_TIM_PWM_Start+0xfe>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	d104      	bne.n	8006d62 <HAL_TIM_PWM_Start+0xe6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d60:	e00b      	b.n	8006d7a <HAL_TIM_PWM_Start+0xfe>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b10      	cmp	r3, #16
 8006d66:	d104      	bne.n	8006d72 <HAL_TIM_PWM_Start+0xf6>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d70:	e003      	b.n	8006d7a <HAL_TIM_PWM_Start+0xfe>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ffaa 	bl	8007cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_TIM_PWM_Start+0x1d4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_TIM_PWM_Start+0x120>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <HAL_TIM_PWM_Start+0x1d8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIM_PWM_Start+0x124>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <HAL_TIM_PWM_Start+0x126>
 8006da0:	2300      	movs	r3, #0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006db4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a25      	ldr	r2, [pc, #148]	; (8006e50 <HAL_TIM_PWM_Start+0x1d4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d01d      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <HAL_TIM_PWM_Start+0x1dc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <HAL_TIM_PWM_Start+0x1e0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <HAL_TIM_PWM_Start+0x1e4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <HAL_TIM_PWM_Start+0x1d8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <HAL_TIM_PWM_Start+0x1e8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x18a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <HAL_TIM_PWM_Start+0x1ec>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d115      	bne.n	8006e32 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <HAL_TIM_PWM_Start+0x1f0>)
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b06      	cmp	r3, #6
 8006e16:	d015      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x1c8>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1e:	d011      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e30:	e008      	b.n	8006e44 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f042 0201 	orr.w	r2, r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e000      	b.n	8006e46 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40010000 	.word	0x40010000
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40014000 	.word	0x40014000
 8006e68:	40001800 	.word	0x40001800
 8006e6c:	00010007 	.word	0x00010007

08006e70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 ff2a 	bl	8007cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a36      	ldr	r2, [pc, #216]	; (8006f68 <HAL_TIM_PWM_Stop+0xf8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_PWM_Stop+0x2c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a35      	ldr	r2, [pc, #212]	; (8006f6c <HAL_TIM_PWM_Stop+0xfc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_PWM_Stop+0x30>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_TIM_PWM_Stop+0x32>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_TIM_PWM_Stop+0x66>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6a1a      	ldr	r2, [r3, #32]
 8006ebc:	f240 4344 	movw	r3, #1092	; 0x444
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d107      	bne.n	8006ed6 <HAL_TIM_PWM_Stop+0x66>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10f      	bne.n	8006f06 <HAL_TIM_PWM_Stop+0x96>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	f240 4344 	movw	r3, #1092	; 0x444
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d107      	bne.n	8006f06 <HAL_TIM_PWM_Stop+0x96>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <HAL_TIM_PWM_Stop+0xa6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f14:	e023      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xee>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	2b04      	cmp	r3, #4
 8006f1a:	d104      	bne.n	8006f26 <HAL_TIM_PWM_Stop+0xb6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f24:	e01b      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xee>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_PWM_Stop+0xc6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f34:	e013      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xee>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b0c      	cmp	r3, #12
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_PWM_Stop+0xd6>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f44:	e00b      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xee>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_PWM_Stop+0xe6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f54:	e003      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xee>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0202 	mvn.w	r2, #2
 8006f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fadc 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 face 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fadf 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0204 	mvn.w	r2, #4
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fab2 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 faa4 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fab5 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b08      	cmp	r3, #8
 800702c:	d122      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d11b      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0208 	mvn.w	r2, #8
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2204      	movs	r2, #4
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa88 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa7a 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa8b 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d122      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b10      	cmp	r3, #16
 800708e:	d11b      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0210 	mvn.w	r2, #16
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2208      	movs	r2, #8
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa5e 	bl	8007570 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa50 	bl	800755c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa61 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0201 	mvn.w	r2, #1
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fb fd2a 	bl	8002b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fe9c 	bl	8007e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712e:	d10e      	bne.n	800714e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713a:	2b80      	cmp	r3, #128	; 0x80
 800713c:	d107      	bne.n	800714e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fe8f 	bl	8007e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d10e      	bne.n	800717a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007166:	2b40      	cmp	r3, #64	; 0x40
 8007168:	d107      	bne.n	800717a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fa0f 	bl	8007598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b20      	cmp	r3, #32
 8007186:	d10e      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d107      	bne.n	80071a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0220 	mvn.w	r2, #32
 800719e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fe4f 	bl	8007e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e0fd      	b.n	80073c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b14      	cmp	r3, #20
 80071d6:	f200 80f0 	bhi.w	80073ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007235 	.word	0x08007235
 80071e4:	080073bb 	.word	0x080073bb
 80071e8:	080073bb 	.word	0x080073bb
 80071ec:	080073bb 	.word	0x080073bb
 80071f0:	08007275 	.word	0x08007275
 80071f4:	080073bb 	.word	0x080073bb
 80071f8:	080073bb 	.word	0x080073bb
 80071fc:	080073bb 	.word	0x080073bb
 8007200:	080072b7 	.word	0x080072b7
 8007204:	080073bb 	.word	0x080073bb
 8007208:	080073bb 	.word	0x080073bb
 800720c:	080073bb 	.word	0x080073bb
 8007210:	080072f7 	.word	0x080072f7
 8007214:	080073bb 	.word	0x080073bb
 8007218:	080073bb 	.word	0x080073bb
 800721c:	080073bb 	.word	0x080073bb
 8007220:	08007339 	.word	0x08007339
 8007224:	080073bb 	.word	0x080073bb
 8007228:	080073bb 	.word	0x080073bb
 800722c:	080073bb 	.word	0x080073bb
 8007230:	08007379 	.word	0x08007379
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68b9      	ldr	r1, [r7, #8]
 800723a:	4618      	mov	r0, r3
 800723c:	f000 fa56 	bl	80076ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0208 	orr.w	r2, r2, #8
 800724e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0204 	bic.w	r2, r2, #4
 800725e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6999      	ldr	r1, [r3, #24]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	430a      	orrs	r2, r1
 8007270:	619a      	str	r2, [r3, #24]
      break;
 8007272:	e0a3      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 faa8 	bl	80077d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800728e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800729e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6999      	ldr	r1, [r3, #24]
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	021a      	lsls	r2, r3, #8
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	619a      	str	r2, [r3, #24]
      break;
 80072b4:	e082      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 faff 	bl	80078c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69da      	ldr	r2, [r3, #28]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0208 	orr.w	r2, r2, #8
 80072d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69da      	ldr	r2, [r3, #28]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0204 	bic.w	r2, r2, #4
 80072e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69d9      	ldr	r1, [r3, #28]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	691a      	ldr	r2, [r3, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	61da      	str	r2, [r3, #28]
      break;
 80072f4:	e062      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 fb55 	bl	80079ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69d9      	ldr	r1, [r3, #28]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	021a      	lsls	r2, r3, #8
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	61da      	str	r2, [r3, #28]
      break;
 8007336:	e041      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fb8c 	bl	8007a5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0204 	bic.w	r2, r2, #4
 8007362:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691a      	ldr	r2, [r3, #16]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007376:	e021      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fbbe 	bl	8007b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	021a      	lsls	r2, r3, #8
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073b8:	e000      	b.n	80073bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80073ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop

080073d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d101      	bne.n	80073e8 <HAL_TIM_ConfigClockSource+0x18>
 80073e4:	2302      	movs	r3, #2
 80073e6:	e0b3      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x180>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4b55      	ldr	r3, [pc, #340]	; (8007558 <HAL_TIM_ConfigClockSource+0x188>)
 8007404:	4013      	ands	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800740e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007420:	d03e      	beq.n	80074a0 <HAL_TIM_ConfigClockSource+0xd0>
 8007422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007426:	f200 8087 	bhi.w	8007538 <HAL_TIM_ConfigClockSource+0x168>
 800742a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800742e:	f000 8085 	beq.w	800753c <HAL_TIM_ConfigClockSource+0x16c>
 8007432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007436:	d87f      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007438:	2b70      	cmp	r3, #112	; 0x70
 800743a:	d01a      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0xa2>
 800743c:	2b70      	cmp	r3, #112	; 0x70
 800743e:	d87b      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007440:	2b60      	cmp	r3, #96	; 0x60
 8007442:	d050      	beq.n	80074e6 <HAL_TIM_ConfigClockSource+0x116>
 8007444:	2b60      	cmp	r3, #96	; 0x60
 8007446:	d877      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007448:	2b50      	cmp	r3, #80	; 0x50
 800744a:	d03c      	beq.n	80074c6 <HAL_TIM_ConfigClockSource+0xf6>
 800744c:	2b50      	cmp	r3, #80	; 0x50
 800744e:	d873      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d058      	beq.n	8007506 <HAL_TIM_ConfigClockSource+0x136>
 8007454:	2b40      	cmp	r3, #64	; 0x40
 8007456:	d86f      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007458:	2b30      	cmp	r3, #48	; 0x30
 800745a:	d064      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x156>
 800745c:	2b30      	cmp	r3, #48	; 0x30
 800745e:	d86b      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007460:	2b20      	cmp	r3, #32
 8007462:	d060      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x156>
 8007464:	2b20      	cmp	r3, #32
 8007466:	d867      	bhi.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
 8007468:	2b00      	cmp	r3, #0
 800746a:	d05c      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x156>
 800746c:	2b10      	cmp	r3, #16
 800746e:	d05a      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007470:	e062      	b.n	8007538 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6899      	ldr	r1, [r3, #8]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f000 fc0b 	bl	8007c9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007494:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	609a      	str	r2, [r3, #8]
      break;
 800749e:	e04e      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	6899      	ldr	r1, [r3, #8]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f000 fbf4 	bl	8007c9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074c2:	609a      	str	r2, [r3, #8]
      break;
 80074c4:	e03b      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	6859      	ldr	r1, [r3, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f000 fb68 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2150      	movs	r1, #80	; 0x50
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fbc1 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 80074e4:	e02b      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f000 fb87 	bl	8007c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2160      	movs	r1, #96	; 0x60
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fbb1 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 8007504:	e01b      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6859      	ldr	r1, [r3, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	461a      	mov	r2, r3
 8007514:	f000 fb48 	bl	8007ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2140      	movs	r1, #64	; 0x40
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fba1 	bl	8007c66 <TIM_ITRx_SetConfig>
      break;
 8007524:	e00b      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 fb98 	bl	8007c66 <TIM_ITRx_SetConfig>
        break;
 8007536:	e002      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800753c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	fffeff88 	.word	0xfffeff88

0800755c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a40      	ldr	r2, [pc, #256]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d013      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d00f      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <TIM_Base_SetConfig+0x118>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00b      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a3c      	ldr	r2, [pc, #240]	; (80076c8 <TIM_Base_SetConfig+0x11c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a3b      	ldr	r2, [pc, #236]	; (80076cc <TIM_Base_SetConfig+0x120>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a3a      	ldr	r2, [pc, #232]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d108      	bne.n	80075fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2f      	ldr	r2, [pc, #188]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d02b      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d027      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2c      	ldr	r2, [pc, #176]	; (80076c4 <TIM_Base_SetConfig+0x118>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d023      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2b      	ldr	r2, [pc, #172]	; (80076c8 <TIM_Base_SetConfig+0x11c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01f      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <TIM_Base_SetConfig+0x120>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d01b      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d017      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a28      	ldr	r2, [pc, #160]	; (80076d4 <TIM_Base_SetConfig+0x128>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <TIM_Base_SetConfig+0x12c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00f      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a26      	ldr	r2, [pc, #152]	; (80076dc <TIM_Base_SetConfig+0x130>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00b      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a25      	ldr	r2, [pc, #148]	; (80076e0 <TIM_Base_SetConfig+0x134>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d007      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <TIM_Base_SetConfig+0x138>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d003      	beq.n	800765e <TIM_Base_SetConfig+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a23      	ldr	r2, [pc, #140]	; (80076e8 <TIM_Base_SetConfig+0x13c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d108      	bne.n	8007670 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_Base_SetConfig+0xf8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a0c      	ldr	r2, [pc, #48]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d103      	bne.n	80076ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	615a      	str	r2, [r3, #20]
}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40010400 	.word	0x40010400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800
 80076e0:	40001800 	.word	0x40001800
 80076e4:	40001c00 	.word	0x40001c00
 80076e8:	40002000 	.word	0x40002000

080076ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f023 0201 	bic.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <TIM_OC1_SetConfig+0xd8>)
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f023 0302 	bic.w	r3, r3, #2
 8007734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a21      	ldr	r2, [pc, #132]	; (80077c8 <TIM_OC1_SetConfig+0xdc>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC1_SetConfig+0x64>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a20      	ldr	r2, [pc, #128]	; (80077cc <TIM_OC1_SetConfig+0xe0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d10c      	bne.n	800776a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0308 	bic.w	r3, r3, #8
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f023 0304 	bic.w	r3, r3, #4
 8007768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a16      	ldr	r2, [pc, #88]	; (80077c8 <TIM_OC1_SetConfig+0xdc>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_OC1_SetConfig+0x8e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a15      	ldr	r2, [pc, #84]	; (80077cc <TIM_OC1_SetConfig+0xe0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d111      	bne.n	800779e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	621a      	str	r2, [r3, #32]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	fffeff8f 	.word	0xfffeff8f
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400

080077d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f023 0210 	bic.w	r2, r3, #16
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <TIM_OC2_SetConfig+0xe4>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	4313      	orrs	r3, r2
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0320 	bic.w	r3, r3, #32
 800781a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a23      	ldr	r2, [pc, #140]	; (80078b8 <TIM_OC2_SetConfig+0xe8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC2_SetConfig+0x68>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <TIM_OC2_SetConfig+0xec>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d10d      	bne.n	8007854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800783e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a18      	ldr	r2, [pc, #96]	; (80078b8 <TIM_OC2_SetConfig+0xe8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d003      	beq.n	8007864 <TIM_OC2_SetConfig+0x94>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a17      	ldr	r2, [pc, #92]	; (80078bc <TIM_OC2_SetConfig+0xec>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d113      	bne.n	800788c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800786a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	feff8fff 	.word	0xfeff8fff
 80078b8:	40010000 	.word	0x40010000
 80078bc:	40010400 	.word	0x40010400

080078c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4b2d      	ldr	r3, [pc, #180]	; (80079a0 <TIM_OC3_SetConfig+0xe0>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0303 	bic.w	r3, r3, #3
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	021b      	lsls	r3, r3, #8
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <TIM_OC3_SetConfig+0xe4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d003      	beq.n	8007926 <TIM_OC3_SetConfig+0x66>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <TIM_OC3_SetConfig+0xe8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d10d      	bne.n	8007942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800792c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a17      	ldr	r2, [pc, #92]	; (80079a4 <TIM_OC3_SetConfig+0xe4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <TIM_OC3_SetConfig+0x92>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a16      	ldr	r2, [pc, #88]	; (80079a8 <TIM_OC3_SetConfig+0xe8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d113      	bne.n	800797a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4313      	orrs	r3, r2
 800796c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	621a      	str	r2, [r3, #32]
}
 8007994:	bf00      	nop
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	fffeff8f 	.word	0xfffeff8f
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40010400 	.word	0x40010400

080079ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <TIM_OC4_SetConfig+0xa4>)
 80079d8:	4013      	ands	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <TIM_OC4_SetConfig+0xa8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC4_SetConfig+0x68>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <TIM_OC4_SetConfig+0xac>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d109      	bne.n	8007a28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	019b      	lsls	r3, r3, #6
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	621a      	str	r2, [r3, #32]
}
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	feff8fff 	.word	0xfeff8fff
 8007a54:	40010000 	.word	0x40010000
 8007a58:	40010400 	.word	0x40010400

08007a5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <TIM_OC5_SetConfig+0x98>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a12      	ldr	r2, [pc, #72]	; (8007af8 <TIM_OC5_SetConfig+0x9c>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC5_SetConfig+0x5e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a11      	ldr	r2, [pc, #68]	; (8007afc <TIM_OC5_SetConfig+0xa0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d109      	bne.n	8007ace <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	021b      	lsls	r3, r3, #8
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	621a      	str	r2, [r3, #32]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	fffeff8f 	.word	0xfffeff8f
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40010400 	.word	0x40010400

08007b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <TIM_OC6_SetConfig+0x9c>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	051b      	lsls	r3, r3, #20
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <TIM_OC6_SetConfig+0xa0>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d003      	beq.n	8007b60 <TIM_OC6_SetConfig+0x60>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a12      	ldr	r2, [pc, #72]	; (8007ba4 <TIM_OC6_SetConfig+0xa4>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d109      	bne.n	8007b74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	029b      	lsls	r3, r3, #10
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	feff8fff 	.word	0xfeff8fff
 8007ba0:	40010000 	.word	0x40010000
 8007ba4:	40010400 	.word	0x40010400

08007ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f023 0201 	bic.w	r2, r3, #1
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f023 030a 	bic.w	r3, r3, #10
 8007be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b087      	sub	sp, #28
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f023 0210 	bic.w	r2, r3, #16
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	031b      	lsls	r3, r3, #12
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f043 0307 	orr.w	r3, r3, #7
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	021a      	lsls	r2, r3, #8
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	609a      	str	r2, [r3, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	2201      	movs	r2, #1
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	401a      	ands	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1a      	ldr	r2, [r3, #32]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	fa01 f303 	lsl.w	r3, r1, r3
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e06d      	b.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a30      	ldr	r2, [pc, #192]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a2f      	ldr	r2, [pc, #188]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d108      	bne.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a20      	ldr	r2, [pc, #128]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d022      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007db2:	d01d      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d018      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1a      	ldr	r2, [pc, #104]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00e      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a15      	ldr	r2, [pc, #84]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10c      	bne.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	40010000 	.word	0x40010000
 8007e2c:	40010400 	.word	0x40010400
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40001800 	.word	0x40001800

08007e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e040      	b.n	8007f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fa ff1a 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2224      	movs	r2, #36	; 0x24
 8007eac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0201 	bic.w	r2, r2, #1
 8007ebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 faf0 	bl	80084a4 <UART_SetConfig>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e022      	b.n	8007f14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fd46 	bl	8008968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fdcd 	bl	8008aac <UART_CheckIdleState>
 8007f12:	4603      	mov	r3, r0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d145      	bne.n	8007fbe <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <HAL_UART_Transmit_IT+0x22>
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e03e      	b.n	8007fc0 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_UART_Transmit_IT+0x34>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e037      	b.n	8007fc0 <HAL_UART_Transmit_IT+0xa4>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	88fa      	ldrh	r2, [r7, #6]
 8007f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2221      	movs	r2, #33	; 0x21
 8007f80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8a:	d107      	bne.n	8007f9c <HAL_UART_Transmit_IT+0x80>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d103      	bne.n	8007f9c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a0d      	ldr	r2, [pc, #52]	; (8007fcc <HAL_UART_Transmit_IT+0xb0>)
 8007f98:	669a      	str	r2, [r3, #104]	; 0x68
 8007f9a:	e002      	b.n	8007fa2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <HAL_UART_Transmit_IT+0xb4>)
 8007fa0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fb8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e000      	b.n	8007fc0 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	08008e45 	.word	0x08008e45
 8007fd0:	08008dd3 	.word	0x08008dd3

08007fd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d12c      	bne.n	8008044 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_UART_Receive_IT+0x22>
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e025      	b.n	8008046 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UART_Receive_IT+0x34>
 8008004:	2302      	movs	r3, #2
 8008006:	e01e      	b.n	8008046 <HAL_UART_Receive_IT+0x72>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008032:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	461a      	mov	r2, r3
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fdfc 	bl	8008c38 <UART_Start_Receive_IT>
 8008040:	4603      	mov	r3, r0
 8008042:	e000      	b.n	8008046 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008044:	2302      	movs	r3, #2
  }
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008070:	69fa      	ldr	r2, [r7, #28]
 8008072:	f640 030f 	movw	r3, #2063	; 0x80f
 8008076:	4013      	ands	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d113      	bne.n	80080a8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00e      	beq.n	80080a8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 81cc 	beq.w	8008436 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
      }
      return;
 80080a6:	e1c6      	b.n	8008436 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80e3 	beq.w	8008276 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4ba5      	ldr	r3, [pc, #660]	; (8008354 <HAL_UART_IRQHandler+0x304>)
 80080be:	4013      	ands	r3, r2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80d8 	beq.w	8008276 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d010      	beq.n	80080f2 <HAL_UART_IRQHandler+0xa2>
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2201      	movs	r2, #1
 80080e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e8:	f043 0201 	orr.w	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d010      	beq.n	800811e <HAL_UART_IRQHandler+0xce>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00b      	beq.n	800811e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2202      	movs	r2, #2
 800810c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008114:	f043 0204 	orr.w	r2, r3, #4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d010      	beq.n	800814a <HAL_UART_IRQHandler+0xfa>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008140:	f043 0202 	orr.w	r2, r3, #2
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f003 0308 	and.w	r3, r3, #8
 8008150:	2b00      	cmp	r3, #0
 8008152:	d015      	beq.n	8008180 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2208      	movs	r2, #8
 800816e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008176:	f043 0208 	orr.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008186:	2b00      	cmp	r3, #0
 8008188:	d011      	beq.n	80081ae <HAL_UART_IRQHandler+0x15e>
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00c      	beq.n	80081ae <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800819c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 8140 	beq.w	800843a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00c      	beq.n	80081de <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	f003 0320 	and.w	r3, r3, #32
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d004      	beq.n	80081fe <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d031      	beq.n	8008262 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fda2 	bl	8008d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d123      	bne.n	800825a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008220:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008226:	2b00      	cmp	r3, #0
 8008228:	d013      	beq.n	8008252 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	4a4a      	ldr	r2, [pc, #296]	; (8008358 <HAL_UART_IRQHandler+0x308>)
 8008230:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008236:	4618      	mov	r0, r3
 8008238:	f7fb ff9e 	bl	8004178 <HAL_DMA_Abort_IT>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d017      	beq.n	8008272 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008250:	e00f      	b.n	8008272 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f906 	bl	8008464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008258:	e00b      	b.n	8008272 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f902 	bl	8008464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008260:	e007      	b.n	8008272 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f8fe 	bl	8008464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008270:	e0e3      	b.n	800843a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008272:	bf00      	nop
    return;
 8008274:	e0e1      	b.n	800843a <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827a:	2b01      	cmp	r3, #1
 800827c:	f040 80a7 	bne.w	80083ce <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 80a1 	beq.w	80083ce <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 809b 	beq.w	80083ce <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2210      	movs	r2, #16
 800829e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b40      	cmp	r3, #64	; 0x40
 80082ac:	d156      	bne.n	800835c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80082b8:	893b      	ldrh	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 80bf 	beq.w	800843e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082c6:	893a      	ldrh	r2, [r7, #8]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	f080 80b8 	bcs.w	800843e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	893a      	ldrh	r2, [r7, #8]
 80082d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082e0:	d02a      	beq.n	8008338 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f022 0201 	bic.w	r2, r2, #1
 8008300:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008310:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0210 	bic.w	r2, r2, #16
 800832c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008332:	4618      	mov	r0, r3
 8008334:	f7fb feb0 	bl	8004098 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008344:	b29b      	uxth	r3, r3
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	b29b      	uxth	r3, r3
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f893 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008352:	e074      	b.n	800843e <HAL_UART_IRQHandler+0x3ee>
 8008354:	04000120 	.word	0x04000120
 8008358:	08008da7 	.word	0x08008da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008368:	b29b      	uxth	r3, r3
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d063      	beq.n	8008442 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800837a:	897b      	ldrh	r3, [r7, #10]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d060      	beq.n	8008442 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800838e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0201 	bic.w	r2, r2, #1
 800839e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f022 0210 	bic.w	r2, r2, #16
 80083c0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083c2:	897b      	ldrh	r3, [r7, #10]
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f856 	bl	8008478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083cc:	e039      	b.n	8008442 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00d      	beq.n	80083f4 <HAL_UART_IRQHandler+0x3a4>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80083ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f84f 	bl	8008490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083f2:	e029      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00d      	beq.n	800841a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01a      	beq.n	8008446 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
    }
    return;
 8008418:	e015      	b.n	8008446 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d011      	beq.n	8008448 <HAL_UART_IRQHandler+0x3f8>
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00c      	beq.n	8008448 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fd46 	bl	8008ec0 <UART_EndTransmit_IT>
    return;
 8008434:	e008      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
      return;
 8008436:	bf00      	nop
 8008438:	e006      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
    return;
 800843a:	bf00      	nop
 800843c:	e004      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
      return;
 800843e:	bf00      	nop
 8008440:	e002      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
      return;
 8008442:	bf00      	nop
 8008444:	e000      	b.n	8008448 <HAL_UART_IRQHandler+0x3f8>
    return;
 8008446:	bf00      	nop
  }

}
 8008448:	3720      	adds	r7, #32
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop

08008450 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	4ba7      	ldr	r3, [pc, #668]	; (800876c <UART_SetConfig+0x2c8>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	6979      	ldr	r1, [r7, #20]
 80084d8:	430b      	orrs	r3, r1
 80084da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	430a      	orrs	r2, r1
 8008514:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a95      	ldr	r2, [pc, #596]	; (8008770 <UART_SetConfig+0x2cc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d120      	bne.n	8008562 <UART_SetConfig+0xbe>
 8008520:	4b94      	ldr	r3, [pc, #592]	; (8008774 <UART_SetConfig+0x2d0>)
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b03      	cmp	r3, #3
 800852c:	d816      	bhi.n	800855c <UART_SetConfig+0xb8>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0x90>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008545 	.word	0x08008545
 8008538:	08008551 	.word	0x08008551
 800853c:	0800854b 	.word	0x0800854b
 8008540:	08008557 	.word	0x08008557
 8008544:	2301      	movs	r3, #1
 8008546:	77fb      	strb	r3, [r7, #31]
 8008548:	e14f      	b.n	80087ea <UART_SetConfig+0x346>
 800854a:	2302      	movs	r3, #2
 800854c:	77fb      	strb	r3, [r7, #31]
 800854e:	e14c      	b.n	80087ea <UART_SetConfig+0x346>
 8008550:	2304      	movs	r3, #4
 8008552:	77fb      	strb	r3, [r7, #31]
 8008554:	e149      	b.n	80087ea <UART_SetConfig+0x346>
 8008556:	2308      	movs	r3, #8
 8008558:	77fb      	strb	r3, [r7, #31]
 800855a:	e146      	b.n	80087ea <UART_SetConfig+0x346>
 800855c:	2310      	movs	r3, #16
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e143      	b.n	80087ea <UART_SetConfig+0x346>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a84      	ldr	r2, [pc, #528]	; (8008778 <UART_SetConfig+0x2d4>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d132      	bne.n	80085d2 <UART_SetConfig+0x12e>
 800856c:	4b81      	ldr	r3, [pc, #516]	; (8008774 <UART_SetConfig+0x2d0>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	f003 030c 	and.w	r3, r3, #12
 8008576:	2b0c      	cmp	r3, #12
 8008578:	d828      	bhi.n	80085cc <UART_SetConfig+0x128>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <UART_SetConfig+0xdc>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085b5 	.word	0x080085b5
 8008584:	080085cd 	.word	0x080085cd
 8008588:	080085cd 	.word	0x080085cd
 800858c:	080085cd 	.word	0x080085cd
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085cd 	.word	0x080085cd
 8008598:	080085cd 	.word	0x080085cd
 800859c:	080085cd 	.word	0x080085cd
 80085a0:	080085bb 	.word	0x080085bb
 80085a4:	080085cd 	.word	0x080085cd
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085cd 	.word	0x080085cd
 80085b0:	080085c7 	.word	0x080085c7
 80085b4:	2300      	movs	r3, #0
 80085b6:	77fb      	strb	r3, [r7, #31]
 80085b8:	e117      	b.n	80087ea <UART_SetConfig+0x346>
 80085ba:	2302      	movs	r3, #2
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	e114      	b.n	80087ea <UART_SetConfig+0x346>
 80085c0:	2304      	movs	r3, #4
 80085c2:	77fb      	strb	r3, [r7, #31]
 80085c4:	e111      	b.n	80087ea <UART_SetConfig+0x346>
 80085c6:	2308      	movs	r3, #8
 80085c8:	77fb      	strb	r3, [r7, #31]
 80085ca:	e10e      	b.n	80087ea <UART_SetConfig+0x346>
 80085cc:	2310      	movs	r3, #16
 80085ce:	77fb      	strb	r3, [r7, #31]
 80085d0:	e10b      	b.n	80087ea <UART_SetConfig+0x346>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a69      	ldr	r2, [pc, #420]	; (800877c <UART_SetConfig+0x2d8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d120      	bne.n	800861e <UART_SetConfig+0x17a>
 80085dc:	4b65      	ldr	r3, [pc, #404]	; (8008774 <UART_SetConfig+0x2d0>)
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085e6:	2b30      	cmp	r3, #48	; 0x30
 80085e8:	d013      	beq.n	8008612 <UART_SetConfig+0x16e>
 80085ea:	2b30      	cmp	r3, #48	; 0x30
 80085ec:	d814      	bhi.n	8008618 <UART_SetConfig+0x174>
 80085ee:	2b20      	cmp	r3, #32
 80085f0:	d009      	beq.n	8008606 <UART_SetConfig+0x162>
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d810      	bhi.n	8008618 <UART_SetConfig+0x174>
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <UART_SetConfig+0x15c>
 80085fa:	2b10      	cmp	r3, #16
 80085fc:	d006      	beq.n	800860c <UART_SetConfig+0x168>
 80085fe:	e00b      	b.n	8008618 <UART_SetConfig+0x174>
 8008600:	2300      	movs	r3, #0
 8008602:	77fb      	strb	r3, [r7, #31]
 8008604:	e0f1      	b.n	80087ea <UART_SetConfig+0x346>
 8008606:	2302      	movs	r3, #2
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e0ee      	b.n	80087ea <UART_SetConfig+0x346>
 800860c:	2304      	movs	r3, #4
 800860e:	77fb      	strb	r3, [r7, #31]
 8008610:	e0eb      	b.n	80087ea <UART_SetConfig+0x346>
 8008612:	2308      	movs	r3, #8
 8008614:	77fb      	strb	r3, [r7, #31]
 8008616:	e0e8      	b.n	80087ea <UART_SetConfig+0x346>
 8008618:	2310      	movs	r3, #16
 800861a:	77fb      	strb	r3, [r7, #31]
 800861c:	e0e5      	b.n	80087ea <UART_SetConfig+0x346>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a57      	ldr	r2, [pc, #348]	; (8008780 <UART_SetConfig+0x2dc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d120      	bne.n	800866a <UART_SetConfig+0x1c6>
 8008628:	4b52      	ldr	r3, [pc, #328]	; (8008774 <UART_SetConfig+0x2d0>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008632:	2bc0      	cmp	r3, #192	; 0xc0
 8008634:	d013      	beq.n	800865e <UART_SetConfig+0x1ba>
 8008636:	2bc0      	cmp	r3, #192	; 0xc0
 8008638:	d814      	bhi.n	8008664 <UART_SetConfig+0x1c0>
 800863a:	2b80      	cmp	r3, #128	; 0x80
 800863c:	d009      	beq.n	8008652 <UART_SetConfig+0x1ae>
 800863e:	2b80      	cmp	r3, #128	; 0x80
 8008640:	d810      	bhi.n	8008664 <UART_SetConfig+0x1c0>
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <UART_SetConfig+0x1a8>
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d006      	beq.n	8008658 <UART_SetConfig+0x1b4>
 800864a:	e00b      	b.n	8008664 <UART_SetConfig+0x1c0>
 800864c:	2300      	movs	r3, #0
 800864e:	77fb      	strb	r3, [r7, #31]
 8008650:	e0cb      	b.n	80087ea <UART_SetConfig+0x346>
 8008652:	2302      	movs	r3, #2
 8008654:	77fb      	strb	r3, [r7, #31]
 8008656:	e0c8      	b.n	80087ea <UART_SetConfig+0x346>
 8008658:	2304      	movs	r3, #4
 800865a:	77fb      	strb	r3, [r7, #31]
 800865c:	e0c5      	b.n	80087ea <UART_SetConfig+0x346>
 800865e:	2308      	movs	r3, #8
 8008660:	77fb      	strb	r3, [r7, #31]
 8008662:	e0c2      	b.n	80087ea <UART_SetConfig+0x346>
 8008664:	2310      	movs	r3, #16
 8008666:	77fb      	strb	r3, [r7, #31]
 8008668:	e0bf      	b.n	80087ea <UART_SetConfig+0x346>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a45      	ldr	r2, [pc, #276]	; (8008784 <UART_SetConfig+0x2e0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d125      	bne.n	80086c0 <UART_SetConfig+0x21c>
 8008674:	4b3f      	ldr	r3, [pc, #252]	; (8008774 <UART_SetConfig+0x2d0>)
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008682:	d017      	beq.n	80086b4 <UART_SetConfig+0x210>
 8008684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008688:	d817      	bhi.n	80086ba <UART_SetConfig+0x216>
 800868a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800868e:	d00b      	beq.n	80086a8 <UART_SetConfig+0x204>
 8008690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008694:	d811      	bhi.n	80086ba <UART_SetConfig+0x216>
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <UART_SetConfig+0x1fe>
 800869a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869e:	d006      	beq.n	80086ae <UART_SetConfig+0x20a>
 80086a0:	e00b      	b.n	80086ba <UART_SetConfig+0x216>
 80086a2:	2300      	movs	r3, #0
 80086a4:	77fb      	strb	r3, [r7, #31]
 80086a6:	e0a0      	b.n	80087ea <UART_SetConfig+0x346>
 80086a8:	2302      	movs	r3, #2
 80086aa:	77fb      	strb	r3, [r7, #31]
 80086ac:	e09d      	b.n	80087ea <UART_SetConfig+0x346>
 80086ae:	2304      	movs	r3, #4
 80086b0:	77fb      	strb	r3, [r7, #31]
 80086b2:	e09a      	b.n	80087ea <UART_SetConfig+0x346>
 80086b4:	2308      	movs	r3, #8
 80086b6:	77fb      	strb	r3, [r7, #31]
 80086b8:	e097      	b.n	80087ea <UART_SetConfig+0x346>
 80086ba:	2310      	movs	r3, #16
 80086bc:	77fb      	strb	r3, [r7, #31]
 80086be:	e094      	b.n	80087ea <UART_SetConfig+0x346>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a30      	ldr	r2, [pc, #192]	; (8008788 <UART_SetConfig+0x2e4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d125      	bne.n	8008716 <UART_SetConfig+0x272>
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <UART_SetConfig+0x2d0>)
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086d8:	d017      	beq.n	800870a <UART_SetConfig+0x266>
 80086da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086de:	d817      	bhi.n	8008710 <UART_SetConfig+0x26c>
 80086e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e4:	d00b      	beq.n	80086fe <UART_SetConfig+0x25a>
 80086e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ea:	d811      	bhi.n	8008710 <UART_SetConfig+0x26c>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <UART_SetConfig+0x254>
 80086f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f4:	d006      	beq.n	8008704 <UART_SetConfig+0x260>
 80086f6:	e00b      	b.n	8008710 <UART_SetConfig+0x26c>
 80086f8:	2301      	movs	r3, #1
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e075      	b.n	80087ea <UART_SetConfig+0x346>
 80086fe:	2302      	movs	r3, #2
 8008700:	77fb      	strb	r3, [r7, #31]
 8008702:	e072      	b.n	80087ea <UART_SetConfig+0x346>
 8008704:	2304      	movs	r3, #4
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e06f      	b.n	80087ea <UART_SetConfig+0x346>
 800870a:	2308      	movs	r3, #8
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e06c      	b.n	80087ea <UART_SetConfig+0x346>
 8008710:	2310      	movs	r3, #16
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e069      	b.n	80087ea <UART_SetConfig+0x346>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1c      	ldr	r2, [pc, #112]	; (800878c <UART_SetConfig+0x2e8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d137      	bne.n	8008790 <UART_SetConfig+0x2ec>
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <UART_SetConfig+0x2d0>)
 8008722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008726:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800872a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800872e:	d017      	beq.n	8008760 <UART_SetConfig+0x2bc>
 8008730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008734:	d817      	bhi.n	8008766 <UART_SetConfig+0x2c2>
 8008736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873a:	d00b      	beq.n	8008754 <UART_SetConfig+0x2b0>
 800873c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008740:	d811      	bhi.n	8008766 <UART_SetConfig+0x2c2>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <UART_SetConfig+0x2aa>
 8008746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874a:	d006      	beq.n	800875a <UART_SetConfig+0x2b6>
 800874c:	e00b      	b.n	8008766 <UART_SetConfig+0x2c2>
 800874e:	2300      	movs	r3, #0
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e04a      	b.n	80087ea <UART_SetConfig+0x346>
 8008754:	2302      	movs	r3, #2
 8008756:	77fb      	strb	r3, [r7, #31]
 8008758:	e047      	b.n	80087ea <UART_SetConfig+0x346>
 800875a:	2304      	movs	r3, #4
 800875c:	77fb      	strb	r3, [r7, #31]
 800875e:	e044      	b.n	80087ea <UART_SetConfig+0x346>
 8008760:	2308      	movs	r3, #8
 8008762:	77fb      	strb	r3, [r7, #31]
 8008764:	e041      	b.n	80087ea <UART_SetConfig+0x346>
 8008766:	2310      	movs	r3, #16
 8008768:	77fb      	strb	r3, [r7, #31]
 800876a:	e03e      	b.n	80087ea <UART_SetConfig+0x346>
 800876c:	efff69f3 	.word	0xefff69f3
 8008770:	40011000 	.word	0x40011000
 8008774:	40023800 	.word	0x40023800
 8008778:	40004400 	.word	0x40004400
 800877c:	40004800 	.word	0x40004800
 8008780:	40004c00 	.word	0x40004c00
 8008784:	40005000 	.word	0x40005000
 8008788:	40011400 	.word	0x40011400
 800878c:	40007800 	.word	0x40007800
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a71      	ldr	r2, [pc, #452]	; (800895c <UART_SetConfig+0x4b8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d125      	bne.n	80087e6 <UART_SetConfig+0x342>
 800879a:	4b71      	ldr	r3, [pc, #452]	; (8008960 <UART_SetConfig+0x4bc>)
 800879c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80087a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087a8:	d017      	beq.n	80087da <UART_SetConfig+0x336>
 80087aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087ae:	d817      	bhi.n	80087e0 <UART_SetConfig+0x33c>
 80087b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b4:	d00b      	beq.n	80087ce <UART_SetConfig+0x32a>
 80087b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087ba:	d811      	bhi.n	80087e0 <UART_SetConfig+0x33c>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <UART_SetConfig+0x324>
 80087c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087c4:	d006      	beq.n	80087d4 <UART_SetConfig+0x330>
 80087c6:	e00b      	b.n	80087e0 <UART_SetConfig+0x33c>
 80087c8:	2300      	movs	r3, #0
 80087ca:	77fb      	strb	r3, [r7, #31]
 80087cc:	e00d      	b.n	80087ea <UART_SetConfig+0x346>
 80087ce:	2302      	movs	r3, #2
 80087d0:	77fb      	strb	r3, [r7, #31]
 80087d2:	e00a      	b.n	80087ea <UART_SetConfig+0x346>
 80087d4:	2304      	movs	r3, #4
 80087d6:	77fb      	strb	r3, [r7, #31]
 80087d8:	e007      	b.n	80087ea <UART_SetConfig+0x346>
 80087da:	2308      	movs	r3, #8
 80087dc:	77fb      	strb	r3, [r7, #31]
 80087de:	e004      	b.n	80087ea <UART_SetConfig+0x346>
 80087e0:	2310      	movs	r3, #16
 80087e2:	77fb      	strb	r3, [r7, #31]
 80087e4:	e001      	b.n	80087ea <UART_SetConfig+0x346>
 80087e6:	2310      	movs	r3, #16
 80087e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f2:	d15b      	bne.n	80088ac <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80087f4:	7ffb      	ldrb	r3, [r7, #31]
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	d827      	bhi.n	800884a <UART_SetConfig+0x3a6>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x35c>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008825 	.word	0x08008825
 8008804:	0800882d 	.word	0x0800882d
 8008808:	08008835 	.word	0x08008835
 800880c:	0800884b 	.word	0x0800884b
 8008810:	0800883b 	.word	0x0800883b
 8008814:	0800884b 	.word	0x0800884b
 8008818:	0800884b 	.word	0x0800884b
 800881c:	0800884b 	.word	0x0800884b
 8008820:	08008843 	.word	0x08008843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008824:	f7fc fdd8 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 8008828:	61b8      	str	r0, [r7, #24]
        break;
 800882a:	e013      	b.n	8008854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800882c:	f7fc fde8 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8008830:	61b8      	str	r0, [r7, #24]
        break;
 8008832:	e00f      	b.n	8008854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008834:	4b4b      	ldr	r3, [pc, #300]	; (8008964 <UART_SetConfig+0x4c0>)
 8008836:	61bb      	str	r3, [r7, #24]
        break;
 8008838:	e00c      	b.n	8008854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800883a:	f7fc fd0b 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 800883e:	61b8      	str	r0, [r7, #24]
        break;
 8008840:	e008      	b.n	8008854 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008846:	61bb      	str	r3, [r7, #24]
        break;
 8008848:	e004      	b.n	8008854 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	77bb      	strb	r3, [r7, #30]
        break;
 8008852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d074      	beq.n	8008944 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	005a      	lsls	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	b29b      	uxth	r3, r3
 8008870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b0f      	cmp	r3, #15
 8008876:	d916      	bls.n	80088a6 <UART_SetConfig+0x402>
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887e:	d212      	bcs.n	80088a6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	b29b      	uxth	r3, r3
 8008884:	f023 030f 	bic.w	r3, r3, #15
 8008888:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	b29b      	uxth	r3, r3
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	b29a      	uxth	r2, r3
 8008896:	89fb      	ldrh	r3, [r7, #14]
 8008898:	4313      	orrs	r3, r2
 800889a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	89fa      	ldrh	r2, [r7, #14]
 80088a2:	60da      	str	r2, [r3, #12]
 80088a4:	e04e      	b.n	8008944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	77bb      	strb	r3, [r7, #30]
 80088aa:	e04b      	b.n	8008944 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088ac:	7ffb      	ldrb	r3, [r7, #31]
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	d827      	bhi.n	8008902 <UART_SetConfig+0x45e>
 80088b2:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <UART_SetConfig+0x414>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088dd 	.word	0x080088dd
 80088bc:	080088e5 	.word	0x080088e5
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	08008903 	.word	0x08008903
 80088c8:	080088f3 	.word	0x080088f3
 80088cc:	08008903 	.word	0x08008903
 80088d0:	08008903 	.word	0x08008903
 80088d4:	08008903 	.word	0x08008903
 80088d8:	080088fb 	.word	0x080088fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088dc:	f7fc fd7c 	bl	80053d8 <HAL_RCC_GetPCLK1Freq>
 80088e0:	61b8      	str	r0, [r7, #24]
        break;
 80088e2:	e013      	b.n	800890c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088e4:	f7fc fd8c 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 80088e8:	61b8      	str	r0, [r7, #24]
        break;
 80088ea:	e00f      	b.n	800890c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088ec:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <UART_SetConfig+0x4c0>)
 80088ee:	61bb      	str	r3, [r7, #24]
        break;
 80088f0:	e00c      	b.n	800890c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088f2:	f7fc fcaf 	bl	8005254 <HAL_RCC_GetSysClockFreq>
 80088f6:	61b8      	str	r0, [r7, #24]
        break;
 80088f8:	e008      	b.n	800890c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088fe:	61bb      	str	r3, [r7, #24]
        break;
 8008900:	e004      	b.n	800890c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	77bb      	strb	r3, [r7, #30]
        break;
 800890a:	bf00      	nop
    }

    if (pclk != 0U)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d018      	beq.n	8008944 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085a      	lsrs	r2, r3, #1
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	441a      	add	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	fbb2 f3f3 	udiv	r3, r2, r3
 8008924:	b29b      	uxth	r3, r3
 8008926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b0f      	cmp	r3, #15
 800892c:	d908      	bls.n	8008940 <UART_SetConfig+0x49c>
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008934:	d204      	bcs.n	8008940 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e001      	b.n	8008944 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008950:	7fbb      	ldrb	r3, [r7, #30]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3720      	adds	r7, #32
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	40007c00 	.word	0x40007c00
 8008960:	40023800 	.word	0x40023800
 8008964:	00f42400 	.word	0x00f42400

08008968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	f003 0304 	and.w	r3, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	f003 0308 	and.w	r3, r3, #8
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00a      	beq.n	8008a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01a      	beq.n	8008a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a66:	d10a      	bne.n	8008a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00a      	beq.n	8008aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	605a      	str	r2, [r3, #4]
  }
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008abc:	f7fa faca 	bl	8003054 <HAL_GetTick>
 8008ac0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d10e      	bne.n	8008aee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f82d 	bl	8008b3e <UART_WaitOnFlagUntilTimeout>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e023      	b.n	8008b36 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b04      	cmp	r3, #4
 8008afa:	d10e      	bne.n	8008b1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f817 	bl	8008b3e <UART_WaitOnFlagUntilTimeout>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e00d      	b.n	8008b36 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2220      	movs	r2, #32
 8008b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	603b      	str	r3, [r7, #0]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4e:	e05e      	b.n	8008c0e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d05a      	beq.n	8008c0e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b58:	f7fa fa7c 	bl	8003054 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11b      	bne.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f022 0201 	bic.w	r2, r2, #1
 8008b8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2220      	movs	r2, #32
 8008b92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e043      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d02c      	beq.n	8008c0e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69db      	ldr	r3, [r3, #28]
 8008bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc2:	d124      	bne.n	8008c0e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bdc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0201 	bic.w	r2, r2, #1
 8008bec:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2220      	movs	r2, #32
 8008bf8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e00f      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4013      	ands	r3, r2
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	bf0c      	ite	eq
 8008c1e:	2301      	moveq	r3, #1
 8008c20:	2300      	movne	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d091      	beq.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	88fa      	ldrh	r2, [r7, #6]
 8008c58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6a:	d10e      	bne.n	8008c8a <UART_Start_Receive_IT+0x52>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d105      	bne.n	8008c80 <UART_Start_Receive_IT+0x48>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c7e:	e02d      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	22ff      	movs	r2, #255	; 0xff
 8008c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c88:	e028      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10d      	bne.n	8008cae <UART_Start_Receive_IT+0x76>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d104      	bne.n	8008ca4 <UART_Start_Receive_IT+0x6c>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	22ff      	movs	r2, #255	; 0xff
 8008c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ca2:	e01b      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	227f      	movs	r2, #127	; 0x7f
 8008ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cac:	e016      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb6:	d10d      	bne.n	8008cd4 <UART_Start_Receive_IT+0x9c>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d104      	bne.n	8008cca <UART_Start_Receive_IT+0x92>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	227f      	movs	r2, #127	; 0x7f
 8008cc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cc8:	e008      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	223f      	movs	r2, #63	; 0x3f
 8008cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008cd2:	e003      	b.n	8008cdc <UART_Start_Receive_IT+0xa4>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2222      	movs	r2, #34	; 0x22
 8008ce8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0201 	orr.w	r2, r2, #1
 8008cf8:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d02:	d107      	bne.n	8008d14 <UART_Start_Receive_IT+0xdc>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a0c      	ldr	r2, [pc, #48]	; (8008d40 <UART_Start_Receive_IT+0x108>)
 8008d10:	665a      	str	r2, [r3, #100]	; 0x64
 8008d12:	e002      	b.n	8008d1a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a0b      	ldr	r2, [pc, #44]	; (8008d44 <UART_Start_Receive_IT+0x10c>)
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008d30:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	08008fc7 	.word	0x08008fc7
 8008d44:	08008ef3 	.word	0x08008ef3

08008d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f022 0201 	bic.w	r2, r2, #1
 8008d6e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d107      	bne.n	8008d88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0210 	bic.w	r2, r2, #16
 8008d86:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	f7ff fb4d 	bl	8008464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dca:	bf00      	nop
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dde:	2b21      	cmp	r3, #33	; 0x21
 8008de0:	d12a      	bne.n	8008e38 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d110      	bne.n	8008e10 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dfc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e0c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008e0e:	e013      	b.n	8008e38 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e50:	2b21      	cmp	r3, #33	; 0x21
 8008e52:	d12f      	bne.n	8008eb4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d110      	bne.n	8008e82 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e6e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e7e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008e80:	e018      	b.n	8008eb4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e86:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7ff fab3 	bl	8008450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b084      	sub	sp, #16
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f00:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f06:	2b22      	cmp	r3, #34	; 0x22
 8008f08:	d151      	bne.n	8008fae <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f12:	89bb      	ldrh	r3, [r7, #12]
 8008f14:	b2d9      	uxtb	r1, r3
 8008f16:	89fb      	ldrh	r3, [r7, #14]
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1e:	400a      	ands	r2, r1
 8008f20:	b2d2      	uxtb	r2, r2
 8008f22:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	3b01      	subs	r3, #1
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d138      	bne.n	8008fbe <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f5a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689a      	ldr	r2, [r3, #8]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0201 	bic.w	r2, r2, #1
 8008f6a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10f      	bne.n	8008fa0 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0210 	bic.w	r2, r2, #16
 8008f8e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff fa6d 	bl	8008478 <HAL_UARTEx_RxEventCallback>
 8008f9e:	e002      	b.n	8008fa6 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7f9 ff89 	bl	8002eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fac:	e007      	b.n	8008fbe <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699a      	ldr	r2, [r3, #24]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0208 	orr.w	r2, r2, #8
 8008fbc:	619a      	str	r2, [r3, #24]
}
 8008fbe:	bf00      	nop
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fd4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fda:	2b22      	cmp	r3, #34	; 0x22
 8008fdc:	d151      	bne.n	8009082 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fea:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fec:	89ba      	ldrh	r2, [r7, #12]
 8008fee:	89fb      	ldrh	r3, [r7, #14]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d138      	bne.n	8009092 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800902e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689a      	ldr	r2, [r3, #8]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0201 	bic.w	r2, r2, #1
 800903e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2220      	movs	r2, #32
 8009044:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10f      	bne.n	8009074 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0210 	bic.w	r2, r2, #16
 8009062:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f7ff fa03 	bl	8008478 <HAL_UARTEx_RxEventCallback>
 8009072:	e002      	b.n	800907a <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7f9 ff1f 	bl	8002eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009080:	e007      	b.n	8009092 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699a      	ldr	r2, [r3, #24]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 0208 	orr.w	r2, r2, #8
 8009090:	619a      	str	r2, [r3, #24]
}
 8009092:	bf00      	nop
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
	...

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	200001bc 	.word	0x200001bc

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4d0d      	ldr	r5, [pc, #52]	; (80090e0 <__libc_init_array+0x38>)
 80090ac:	4c0d      	ldr	r4, [pc, #52]	; (80090e4 <__libc_init_array+0x3c>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	2600      	movs	r6, #0
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	4d0b      	ldr	r5, [pc, #44]	; (80090e8 <__libc_init_array+0x40>)
 80090ba:	4c0c      	ldr	r4, [pc, #48]	; (80090ec <__libc_init_array+0x44>)
 80090bc:	f002 fea8 	bl	800be10 <_init>
 80090c0:	1b64      	subs	r4, r4, r5
 80090c2:	10a4      	asrs	r4, r4, #2
 80090c4:	2600      	movs	r6, #0
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d0:	4798      	blx	r3
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090da:	4798      	blx	r3
 80090dc:	3601      	adds	r6, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	0800c34c 	.word	0x0800c34c
 80090e4:	0800c34c 	.word	0x0800c34c
 80090e8:	0800c34c 	.word	0x0800c34c
 80090ec:	0800c350 	.word	0x0800c350

080090f0 <malloc>:
 80090f0:	4b02      	ldr	r3, [pc, #8]	; (80090fc <malloc+0xc>)
 80090f2:	4601      	mov	r1, r0
 80090f4:	6818      	ldr	r0, [r3, #0]
 80090f6:	f000 b863 	b.w	80091c0 <_malloc_r>
 80090fa:	bf00      	nop
 80090fc:	200001bc 	.word	0x200001bc

08009100 <free>:
 8009100:	4b02      	ldr	r3, [pc, #8]	; (800910c <free+0xc>)
 8009102:	4601      	mov	r1, r0
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	f000 b80b 	b.w	8009120 <_free_r>
 800910a:	bf00      	nop
 800910c:	200001bc 	.word	0x200001bc

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <_free_r>:
 8009120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009122:	2900      	cmp	r1, #0
 8009124:	d048      	beq.n	80091b8 <_free_r+0x98>
 8009126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800912a:	9001      	str	r0, [sp, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f1a1 0404 	sub.w	r4, r1, #4
 8009132:	bfb8      	it	lt
 8009134:	18e4      	addlt	r4, r4, r3
 8009136:	f001 fbe1 	bl	800a8fc <__malloc_lock>
 800913a:	4a20      	ldr	r2, [pc, #128]	; (80091bc <_free_r+0x9c>)
 800913c:	9801      	ldr	r0, [sp, #4]
 800913e:	6813      	ldr	r3, [r2, #0]
 8009140:	4615      	mov	r5, r2
 8009142:	b933      	cbnz	r3, 8009152 <_free_r+0x32>
 8009144:	6063      	str	r3, [r4, #4]
 8009146:	6014      	str	r4, [r2, #0]
 8009148:	b003      	add	sp, #12
 800914a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800914e:	f001 bbdb 	b.w	800a908 <__malloc_unlock>
 8009152:	42a3      	cmp	r3, r4
 8009154:	d90b      	bls.n	800916e <_free_r+0x4e>
 8009156:	6821      	ldr	r1, [r4, #0]
 8009158:	1862      	adds	r2, r4, r1
 800915a:	4293      	cmp	r3, r2
 800915c:	bf04      	itt	eq
 800915e:	681a      	ldreq	r2, [r3, #0]
 8009160:	685b      	ldreq	r3, [r3, #4]
 8009162:	6063      	str	r3, [r4, #4]
 8009164:	bf04      	itt	eq
 8009166:	1852      	addeq	r2, r2, r1
 8009168:	6022      	streq	r2, [r4, #0]
 800916a:	602c      	str	r4, [r5, #0]
 800916c:	e7ec      	b.n	8009148 <_free_r+0x28>
 800916e:	461a      	mov	r2, r3
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	b10b      	cbz	r3, 8009178 <_free_r+0x58>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d9fa      	bls.n	800916e <_free_r+0x4e>
 8009178:	6811      	ldr	r1, [r2, #0]
 800917a:	1855      	adds	r5, r2, r1
 800917c:	42a5      	cmp	r5, r4
 800917e:	d10b      	bne.n	8009198 <_free_r+0x78>
 8009180:	6824      	ldr	r4, [r4, #0]
 8009182:	4421      	add	r1, r4
 8009184:	1854      	adds	r4, r2, r1
 8009186:	42a3      	cmp	r3, r4
 8009188:	6011      	str	r1, [r2, #0]
 800918a:	d1dd      	bne.n	8009148 <_free_r+0x28>
 800918c:	681c      	ldr	r4, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	6053      	str	r3, [r2, #4]
 8009192:	4421      	add	r1, r4
 8009194:	6011      	str	r1, [r2, #0]
 8009196:	e7d7      	b.n	8009148 <_free_r+0x28>
 8009198:	d902      	bls.n	80091a0 <_free_r+0x80>
 800919a:	230c      	movs	r3, #12
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	e7d3      	b.n	8009148 <_free_r+0x28>
 80091a0:	6825      	ldr	r5, [r4, #0]
 80091a2:	1961      	adds	r1, r4, r5
 80091a4:	428b      	cmp	r3, r1
 80091a6:	bf04      	itt	eq
 80091a8:	6819      	ldreq	r1, [r3, #0]
 80091aa:	685b      	ldreq	r3, [r3, #4]
 80091ac:	6063      	str	r3, [r4, #4]
 80091ae:	bf04      	itt	eq
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	6054      	str	r4, [r2, #4]
 80091b6:	e7c7      	b.n	8009148 <_free_r+0x28>
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	200003e8 	.word	0x200003e8

080091c0 <_malloc_r>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	1ccd      	adds	r5, r1, #3
 80091c4:	f025 0503 	bic.w	r5, r5, #3
 80091c8:	3508      	adds	r5, #8
 80091ca:	2d0c      	cmp	r5, #12
 80091cc:	bf38      	it	cc
 80091ce:	250c      	movcc	r5, #12
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	4606      	mov	r6, r0
 80091d4:	db01      	blt.n	80091da <_malloc_r+0x1a>
 80091d6:	42a9      	cmp	r1, r5
 80091d8:	d903      	bls.n	80091e2 <_malloc_r+0x22>
 80091da:	230c      	movs	r3, #12
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	2000      	movs	r0, #0
 80091e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e2:	f001 fb8b 	bl	800a8fc <__malloc_lock>
 80091e6:	4921      	ldr	r1, [pc, #132]	; (800926c <_malloc_r+0xac>)
 80091e8:	680a      	ldr	r2, [r1, #0]
 80091ea:	4614      	mov	r4, r2
 80091ec:	b99c      	cbnz	r4, 8009216 <_malloc_r+0x56>
 80091ee:	4f20      	ldr	r7, [pc, #128]	; (8009270 <_malloc_r+0xb0>)
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	b923      	cbnz	r3, 80091fe <_malloc_r+0x3e>
 80091f4:	4621      	mov	r1, r4
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 fc88 	bl	8009b0c <_sbrk_r>
 80091fc:	6038      	str	r0, [r7, #0]
 80091fe:	4629      	mov	r1, r5
 8009200:	4630      	mov	r0, r6
 8009202:	f000 fc83 	bl	8009b0c <_sbrk_r>
 8009206:	1c43      	adds	r3, r0, #1
 8009208:	d123      	bne.n	8009252 <_malloc_r+0x92>
 800920a:	230c      	movs	r3, #12
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	4630      	mov	r0, r6
 8009210:	f001 fb7a 	bl	800a908 <__malloc_unlock>
 8009214:	e7e3      	b.n	80091de <_malloc_r+0x1e>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	1b5b      	subs	r3, r3, r5
 800921a:	d417      	bmi.n	800924c <_malloc_r+0x8c>
 800921c:	2b0b      	cmp	r3, #11
 800921e:	d903      	bls.n	8009228 <_malloc_r+0x68>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	441c      	add	r4, r3
 8009224:	6025      	str	r5, [r4, #0]
 8009226:	e004      	b.n	8009232 <_malloc_r+0x72>
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	42a2      	cmp	r2, r4
 800922c:	bf0c      	ite	eq
 800922e:	600b      	streq	r3, [r1, #0]
 8009230:	6053      	strne	r3, [r2, #4]
 8009232:	4630      	mov	r0, r6
 8009234:	f001 fb68 	bl	800a908 <__malloc_unlock>
 8009238:	f104 000b 	add.w	r0, r4, #11
 800923c:	1d23      	adds	r3, r4, #4
 800923e:	f020 0007 	bic.w	r0, r0, #7
 8009242:	1ac2      	subs	r2, r0, r3
 8009244:	d0cc      	beq.n	80091e0 <_malloc_r+0x20>
 8009246:	1a1b      	subs	r3, r3, r0
 8009248:	50a3      	str	r3, [r4, r2]
 800924a:	e7c9      	b.n	80091e0 <_malloc_r+0x20>
 800924c:	4622      	mov	r2, r4
 800924e:	6864      	ldr	r4, [r4, #4]
 8009250:	e7cc      	b.n	80091ec <_malloc_r+0x2c>
 8009252:	1cc4      	adds	r4, r0, #3
 8009254:	f024 0403 	bic.w	r4, r4, #3
 8009258:	42a0      	cmp	r0, r4
 800925a:	d0e3      	beq.n	8009224 <_malloc_r+0x64>
 800925c:	1a21      	subs	r1, r4, r0
 800925e:	4630      	mov	r0, r6
 8009260:	f000 fc54 	bl	8009b0c <_sbrk_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d1dd      	bne.n	8009224 <_malloc_r+0x64>
 8009268:	e7cf      	b.n	800920a <_malloc_r+0x4a>
 800926a:	bf00      	nop
 800926c:	200003e8 	.word	0x200003e8
 8009270:	200003ec 	.word	0x200003ec

08009274 <__cvt>:
 8009274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009276:	ed2d 8b02 	vpush	{d8}
 800927a:	eeb0 8b40 	vmov.f64	d8, d0
 800927e:	b085      	sub	sp, #20
 8009280:	4617      	mov	r7, r2
 8009282:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009284:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009286:	ee18 2a90 	vmov	r2, s17
 800928a:	f025 0520 	bic.w	r5, r5, #32
 800928e:	2a00      	cmp	r2, #0
 8009290:	bfb6      	itet	lt
 8009292:	222d      	movlt	r2, #45	; 0x2d
 8009294:	2200      	movge	r2, #0
 8009296:	eeb1 8b40 	vneglt.f64	d8, d0
 800929a:	2d46      	cmp	r5, #70	; 0x46
 800929c:	460c      	mov	r4, r1
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	d004      	beq.n	80092ac <__cvt+0x38>
 80092a2:	2d45      	cmp	r5, #69	; 0x45
 80092a4:	d100      	bne.n	80092a8 <__cvt+0x34>
 80092a6:	3401      	adds	r4, #1
 80092a8:	2102      	movs	r1, #2
 80092aa:	e000      	b.n	80092ae <__cvt+0x3a>
 80092ac:	2103      	movs	r1, #3
 80092ae:	ab03      	add	r3, sp, #12
 80092b0:	9301      	str	r3, [sp, #4]
 80092b2:	ab02      	add	r3, sp, #8
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	4622      	mov	r2, r4
 80092b8:	4633      	mov	r3, r6
 80092ba:	eeb0 0b48 	vmov.f64	d0, d8
 80092be:	f000 fd77 	bl	8009db0 <_dtoa_r>
 80092c2:	2d47      	cmp	r5, #71	; 0x47
 80092c4:	d109      	bne.n	80092da <__cvt+0x66>
 80092c6:	07fb      	lsls	r3, r7, #31
 80092c8:	d407      	bmi.n	80092da <__cvt+0x66>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ce:	1a1b      	subs	r3, r3, r0
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	b005      	add	sp, #20
 80092d4:	ecbd 8b02 	vpop	{d8}
 80092d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092da:	2d46      	cmp	r5, #70	; 0x46
 80092dc:	eb00 0204 	add.w	r2, r0, r4
 80092e0:	d10c      	bne.n	80092fc <__cvt+0x88>
 80092e2:	7803      	ldrb	r3, [r0, #0]
 80092e4:	2b30      	cmp	r3, #48	; 0x30
 80092e6:	d107      	bne.n	80092f8 <__cvt+0x84>
 80092e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80092ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f0:	bf1c      	itt	ne
 80092f2:	f1c4 0401 	rsbne	r4, r4, #1
 80092f6:	6034      	strne	r4, [r6, #0]
 80092f8:	6833      	ldr	r3, [r6, #0]
 80092fa:	441a      	add	r2, r3
 80092fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	bf08      	it	eq
 8009306:	9203      	streq	r2, [sp, #12]
 8009308:	2130      	movs	r1, #48	; 0x30
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	4293      	cmp	r3, r2
 800930e:	d2dc      	bcs.n	80092ca <__cvt+0x56>
 8009310:	1c5c      	adds	r4, r3, #1
 8009312:	9403      	str	r4, [sp, #12]
 8009314:	7019      	strb	r1, [r3, #0]
 8009316:	e7f8      	b.n	800930a <__cvt+0x96>

08009318 <__exponent>:
 8009318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800931a:	4603      	mov	r3, r0
 800931c:	2900      	cmp	r1, #0
 800931e:	bfb8      	it	lt
 8009320:	4249      	neglt	r1, r1
 8009322:	f803 2b02 	strb.w	r2, [r3], #2
 8009326:	bfb4      	ite	lt
 8009328:	222d      	movlt	r2, #45	; 0x2d
 800932a:	222b      	movge	r2, #43	; 0x2b
 800932c:	2909      	cmp	r1, #9
 800932e:	7042      	strb	r2, [r0, #1]
 8009330:	dd2a      	ble.n	8009388 <__exponent+0x70>
 8009332:	f10d 0407 	add.w	r4, sp, #7
 8009336:	46a4      	mov	ip, r4
 8009338:	270a      	movs	r7, #10
 800933a:	46a6      	mov	lr, r4
 800933c:	460a      	mov	r2, r1
 800933e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009342:	fb07 1516 	mls	r5, r7, r6, r1
 8009346:	3530      	adds	r5, #48	; 0x30
 8009348:	2a63      	cmp	r2, #99	; 0x63
 800934a:	f104 34ff 	add.w	r4, r4, #4294967295
 800934e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009352:	4631      	mov	r1, r6
 8009354:	dcf1      	bgt.n	800933a <__exponent+0x22>
 8009356:	3130      	adds	r1, #48	; 0x30
 8009358:	f1ae 0502 	sub.w	r5, lr, #2
 800935c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009360:	1c44      	adds	r4, r0, #1
 8009362:	4629      	mov	r1, r5
 8009364:	4561      	cmp	r1, ip
 8009366:	d30a      	bcc.n	800937e <__exponent+0x66>
 8009368:	f10d 0209 	add.w	r2, sp, #9
 800936c:	eba2 020e 	sub.w	r2, r2, lr
 8009370:	4565      	cmp	r5, ip
 8009372:	bf88      	it	hi
 8009374:	2200      	movhi	r2, #0
 8009376:	4413      	add	r3, r2
 8009378:	1a18      	subs	r0, r3, r0
 800937a:	b003      	add	sp, #12
 800937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800937e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009382:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009386:	e7ed      	b.n	8009364 <__exponent+0x4c>
 8009388:	2330      	movs	r3, #48	; 0x30
 800938a:	3130      	adds	r1, #48	; 0x30
 800938c:	7083      	strb	r3, [r0, #2]
 800938e:	70c1      	strb	r1, [r0, #3]
 8009390:	1d03      	adds	r3, r0, #4
 8009392:	e7f1      	b.n	8009378 <__exponent+0x60>
 8009394:	0000      	movs	r0, r0
	...

08009398 <_printf_float>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	b08b      	sub	sp, #44	; 0x2c
 800939e:	460c      	mov	r4, r1
 80093a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80093a4:	4616      	mov	r6, r2
 80093a6:	461f      	mov	r7, r3
 80093a8:	4605      	mov	r5, r0
 80093aa:	f001 fa95 	bl	800a8d8 <_localeconv_r>
 80093ae:	f8d0 b000 	ldr.w	fp, [r0]
 80093b2:	4658      	mov	r0, fp
 80093b4:	f7f6 ff4e 	bl	8000254 <strlen>
 80093b8:	2300      	movs	r3, #0
 80093ba:	9308      	str	r3, [sp, #32]
 80093bc:	f8d8 3000 	ldr.w	r3, [r8]
 80093c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80093c4:	6822      	ldr	r2, [r4, #0]
 80093c6:	3307      	adds	r3, #7
 80093c8:	f023 0307 	bic.w	r3, r3, #7
 80093cc:	f103 0108 	add.w	r1, r3, #8
 80093d0:	f8c8 1000 	str.w	r1, [r8]
 80093d4:	4682      	mov	sl, r0
 80093d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80093de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009640 <_printf_float+0x2a8>
 80093e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80093e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80093ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80093ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f2:	dd24      	ble.n	800943e <_printf_float+0xa6>
 80093f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80093f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fc:	d502      	bpl.n	8009404 <_printf_float+0x6c>
 80093fe:	232d      	movs	r3, #45	; 0x2d
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009404:	4b90      	ldr	r3, [pc, #576]	; (8009648 <_printf_float+0x2b0>)
 8009406:	4891      	ldr	r0, [pc, #580]	; (800964c <_printf_float+0x2b4>)
 8009408:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800940c:	bf94      	ite	ls
 800940e:	4698      	movls	r8, r3
 8009410:	4680      	movhi	r8, r0
 8009412:	2303      	movs	r3, #3
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	f022 0204 	bic.w	r2, r2, #4
 800941a:	2300      	movs	r3, #0
 800941c:	6022      	str	r2, [r4, #0]
 800941e:	9304      	str	r3, [sp, #16]
 8009420:	9700      	str	r7, [sp, #0]
 8009422:	4633      	mov	r3, r6
 8009424:	aa09      	add	r2, sp, #36	; 0x24
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f000 f9d3 	bl	80097d4 <_printf_common>
 800942e:	3001      	adds	r0, #1
 8009430:	f040 808a 	bne.w	8009548 <_printf_float+0x1b0>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	b00b      	add	sp, #44	; 0x2c
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009446:	d709      	bvc.n	800945c <_printf_float+0xc4>
 8009448:	ee10 3a90 	vmov	r3, s1
 800944c:	2b00      	cmp	r3, #0
 800944e:	bfbc      	itt	lt
 8009450:	232d      	movlt	r3, #45	; 0x2d
 8009452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009456:	487e      	ldr	r0, [pc, #504]	; (8009650 <_printf_float+0x2b8>)
 8009458:	4b7e      	ldr	r3, [pc, #504]	; (8009654 <_printf_float+0x2bc>)
 800945a:	e7d5      	b.n	8009408 <_printf_float+0x70>
 800945c:	6863      	ldr	r3, [r4, #4]
 800945e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009462:	9104      	str	r1, [sp, #16]
 8009464:	1c59      	adds	r1, r3, #1
 8009466:	d13c      	bne.n	80094e2 <_printf_float+0x14a>
 8009468:	2306      	movs	r3, #6
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	2300      	movs	r3, #0
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	ab08      	add	r3, sp, #32
 8009472:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009476:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800947a:	ab07      	add	r3, sp, #28
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	6022      	str	r2, [r4, #0]
 8009482:	f10d 031b 	add.w	r3, sp, #27
 8009486:	4628      	mov	r0, r5
 8009488:	f7ff fef4 	bl	8009274 <__cvt>
 800948c:	9b04      	ldr	r3, [sp, #16]
 800948e:	9907      	ldr	r1, [sp, #28]
 8009490:	2b47      	cmp	r3, #71	; 0x47
 8009492:	4680      	mov	r8, r0
 8009494:	d108      	bne.n	80094a8 <_printf_float+0x110>
 8009496:	1cc8      	adds	r0, r1, #3
 8009498:	db02      	blt.n	80094a0 <_printf_float+0x108>
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	4299      	cmp	r1, r3
 800949e:	dd41      	ble.n	8009524 <_printf_float+0x18c>
 80094a0:	f1a9 0902 	sub.w	r9, r9, #2
 80094a4:	fa5f f989 	uxtb.w	r9, r9
 80094a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80094ac:	d820      	bhi.n	80094f0 <_printf_float+0x158>
 80094ae:	3901      	subs	r1, #1
 80094b0:	464a      	mov	r2, r9
 80094b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094b6:	9107      	str	r1, [sp, #28]
 80094b8:	f7ff ff2e 	bl	8009318 <__exponent>
 80094bc:	9a08      	ldr	r2, [sp, #32]
 80094be:	9004      	str	r0, [sp, #16]
 80094c0:	1813      	adds	r3, r2, r0
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	dc02      	bgt.n	80094ce <_printf_float+0x136>
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	07d2      	lsls	r2, r2, #31
 80094cc:	d501      	bpl.n	80094d2 <_printf_float+0x13a>
 80094ce:	3301      	adds	r3, #1
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0a2      	beq.n	8009420 <_printf_float+0x88>
 80094da:	232d      	movs	r3, #45	; 0x2d
 80094dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e0:	e79e      	b.n	8009420 <_printf_float+0x88>
 80094e2:	9904      	ldr	r1, [sp, #16]
 80094e4:	2947      	cmp	r1, #71	; 0x47
 80094e6:	d1c1      	bne.n	800946c <_printf_float+0xd4>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1bf      	bne.n	800946c <_printf_float+0xd4>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e7bc      	b.n	800946a <_printf_float+0xd2>
 80094f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80094f4:	d118      	bne.n	8009528 <_printf_float+0x190>
 80094f6:	2900      	cmp	r1, #0
 80094f8:	6863      	ldr	r3, [r4, #4]
 80094fa:	dd0b      	ble.n	8009514 <_printf_float+0x17c>
 80094fc:	6121      	str	r1, [r4, #16]
 80094fe:	b913      	cbnz	r3, 8009506 <_printf_float+0x16e>
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	07d0      	lsls	r0, r2, #31
 8009504:	d502      	bpl.n	800950c <_printf_float+0x174>
 8009506:	3301      	adds	r3, #1
 8009508:	440b      	add	r3, r1
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	2300      	movs	r3, #0
 800950e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	e7de      	b.n	80094d2 <_printf_float+0x13a>
 8009514:	b913      	cbnz	r3, 800951c <_printf_float+0x184>
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	07d2      	lsls	r2, r2, #31
 800951a:	d501      	bpl.n	8009520 <_printf_float+0x188>
 800951c:	3302      	adds	r3, #2
 800951e:	e7f4      	b.n	800950a <_printf_float+0x172>
 8009520:	2301      	movs	r3, #1
 8009522:	e7f2      	b.n	800950a <_printf_float+0x172>
 8009524:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009528:	9b08      	ldr	r3, [sp, #32]
 800952a:	4299      	cmp	r1, r3
 800952c:	db05      	blt.n	800953a <_printf_float+0x1a2>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	6121      	str	r1, [r4, #16]
 8009532:	07d8      	lsls	r0, r3, #31
 8009534:	d5ea      	bpl.n	800950c <_printf_float+0x174>
 8009536:	1c4b      	adds	r3, r1, #1
 8009538:	e7e7      	b.n	800950a <_printf_float+0x172>
 800953a:	2900      	cmp	r1, #0
 800953c:	bfd4      	ite	le
 800953e:	f1c1 0202 	rsble	r2, r1, #2
 8009542:	2201      	movgt	r2, #1
 8009544:	4413      	add	r3, r2
 8009546:	e7e0      	b.n	800950a <_printf_float+0x172>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	055a      	lsls	r2, r3, #21
 800954c:	d407      	bmi.n	800955e <_printf_float+0x1c6>
 800954e:	6923      	ldr	r3, [r4, #16]
 8009550:	4642      	mov	r2, r8
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	d12a      	bne.n	80095b2 <_printf_float+0x21a>
 800955c:	e76a      	b.n	8009434 <_printf_float+0x9c>
 800955e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009562:	f240 80e2 	bls.w	800972a <_printf_float+0x392>
 8009566:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800956a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009572:	d133      	bne.n	80095dc <_printf_float+0x244>
 8009574:	4a38      	ldr	r2, [pc, #224]	; (8009658 <_printf_float+0x2c0>)
 8009576:	2301      	movs	r3, #1
 8009578:	4631      	mov	r1, r6
 800957a:	4628      	mov	r0, r5
 800957c:	47b8      	blx	r7
 800957e:	3001      	adds	r0, #1
 8009580:	f43f af58 	beq.w	8009434 <_printf_float+0x9c>
 8009584:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009588:	429a      	cmp	r2, r3
 800958a:	db02      	blt.n	8009592 <_printf_float+0x1fa>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	07d8      	lsls	r0, r3, #31
 8009590:	d50f      	bpl.n	80095b2 <_printf_float+0x21a>
 8009592:	4653      	mov	r3, sl
 8009594:	465a      	mov	r2, fp
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	47b8      	blx	r7
 800959c:	3001      	adds	r0, #1
 800959e:	f43f af49 	beq.w	8009434 <_printf_float+0x9c>
 80095a2:	f04f 0800 	mov.w	r8, #0
 80095a6:	f104 091a 	add.w	r9, r4, #26
 80095aa:	9b08      	ldr	r3, [sp, #32]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	4543      	cmp	r3, r8
 80095b0:	dc09      	bgt.n	80095c6 <_printf_float+0x22e>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	079b      	lsls	r3, r3, #30
 80095b6:	f100 8108 	bmi.w	80097ca <_printf_float+0x432>
 80095ba:	68e0      	ldr	r0, [r4, #12]
 80095bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095be:	4298      	cmp	r0, r3
 80095c0:	bfb8      	it	lt
 80095c2:	4618      	movlt	r0, r3
 80095c4:	e738      	b.n	8009438 <_printf_float+0xa0>
 80095c6:	2301      	movs	r3, #1
 80095c8:	464a      	mov	r2, r9
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	f43f af2f 	beq.w	8009434 <_printf_float+0x9c>
 80095d6:	f108 0801 	add.w	r8, r8, #1
 80095da:	e7e6      	b.n	80095aa <_printf_float+0x212>
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dc3c      	bgt.n	800965c <_printf_float+0x2c4>
 80095e2:	4a1d      	ldr	r2, [pc, #116]	; (8009658 <_printf_float+0x2c0>)
 80095e4:	2301      	movs	r3, #1
 80095e6:	4631      	mov	r1, r6
 80095e8:	4628      	mov	r0, r5
 80095ea:	47b8      	blx	r7
 80095ec:	3001      	adds	r0, #1
 80095ee:	f43f af21 	beq.w	8009434 <_printf_float+0x9c>
 80095f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	d102      	bne.n	8009600 <_printf_float+0x268>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	07d9      	lsls	r1, r3, #31
 80095fe:	d5d8      	bpl.n	80095b2 <_printf_float+0x21a>
 8009600:	4653      	mov	r3, sl
 8009602:	465a      	mov	r2, fp
 8009604:	4631      	mov	r1, r6
 8009606:	4628      	mov	r0, r5
 8009608:	47b8      	blx	r7
 800960a:	3001      	adds	r0, #1
 800960c:	f43f af12 	beq.w	8009434 <_printf_float+0x9c>
 8009610:	f04f 0900 	mov.w	r9, #0
 8009614:	f104 0a1a 	add.w	sl, r4, #26
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	425b      	negs	r3, r3
 800961c:	454b      	cmp	r3, r9
 800961e:	dc01      	bgt.n	8009624 <_printf_float+0x28c>
 8009620:	9b08      	ldr	r3, [sp, #32]
 8009622:	e795      	b.n	8009550 <_printf_float+0x1b8>
 8009624:	2301      	movs	r3, #1
 8009626:	4652      	mov	r2, sl
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f af00 	beq.w	8009434 <_printf_float+0x9c>
 8009634:	f109 0901 	add.w	r9, r9, #1
 8009638:	e7ee      	b.n	8009618 <_printf_float+0x280>
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w
 8009640:	ffffffff 	.word	0xffffffff
 8009644:	7fefffff 	.word	0x7fefffff
 8009648:	0800befc 	.word	0x0800befc
 800964c:	0800bf00 	.word	0x0800bf00
 8009650:	0800bf08 	.word	0x0800bf08
 8009654:	0800bf04 	.word	0x0800bf04
 8009658:	0800bf0c 	.word	0x0800bf0c
 800965c:	9a08      	ldr	r2, [sp, #32]
 800965e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009660:	429a      	cmp	r2, r3
 8009662:	bfa8      	it	ge
 8009664:	461a      	movge	r2, r3
 8009666:	2a00      	cmp	r2, #0
 8009668:	4691      	mov	r9, r2
 800966a:	dc38      	bgt.n	80096de <_printf_float+0x346>
 800966c:	2300      	movs	r3, #0
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009674:	f104 021a 	add.w	r2, r4, #26
 8009678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800967a:	9905      	ldr	r1, [sp, #20]
 800967c:	9304      	str	r3, [sp, #16]
 800967e:	eba3 0309 	sub.w	r3, r3, r9
 8009682:	428b      	cmp	r3, r1
 8009684:	dc33      	bgt.n	80096ee <_printf_float+0x356>
 8009686:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800968a:	429a      	cmp	r2, r3
 800968c:	db3c      	blt.n	8009708 <_printf_float+0x370>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	07da      	lsls	r2, r3, #31
 8009692:	d439      	bmi.n	8009708 <_printf_float+0x370>
 8009694:	9a08      	ldr	r2, [sp, #32]
 8009696:	9b04      	ldr	r3, [sp, #16]
 8009698:	9907      	ldr	r1, [sp, #28]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	eba2 0901 	sub.w	r9, r2, r1
 80096a0:	4599      	cmp	r9, r3
 80096a2:	bfa8      	it	ge
 80096a4:	4699      	movge	r9, r3
 80096a6:	f1b9 0f00 	cmp.w	r9, #0
 80096aa:	dc35      	bgt.n	8009718 <_printf_float+0x380>
 80096ac:	f04f 0800 	mov.w	r8, #0
 80096b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096b4:	f104 0a1a 	add.w	sl, r4, #26
 80096b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80096bc:	1a9b      	subs	r3, r3, r2
 80096be:	eba3 0309 	sub.w	r3, r3, r9
 80096c2:	4543      	cmp	r3, r8
 80096c4:	f77f af75 	ble.w	80095b2 <_printf_float+0x21a>
 80096c8:	2301      	movs	r3, #1
 80096ca:	4652      	mov	r2, sl
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f aeae 	beq.w	8009434 <_printf_float+0x9c>
 80096d8:	f108 0801 	add.w	r8, r8, #1
 80096dc:	e7ec      	b.n	80096b8 <_printf_float+0x320>
 80096de:	4613      	mov	r3, r2
 80096e0:	4631      	mov	r1, r6
 80096e2:	4642      	mov	r2, r8
 80096e4:	4628      	mov	r0, r5
 80096e6:	47b8      	blx	r7
 80096e8:	3001      	adds	r0, #1
 80096ea:	d1bf      	bne.n	800966c <_printf_float+0x2d4>
 80096ec:	e6a2      	b.n	8009434 <_printf_float+0x9c>
 80096ee:	2301      	movs	r3, #1
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	9204      	str	r2, [sp, #16]
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	f43f ae9b 	beq.w	8009434 <_printf_float+0x9c>
 80096fe:	9b05      	ldr	r3, [sp, #20]
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	3301      	adds	r3, #1
 8009704:	9305      	str	r3, [sp, #20]
 8009706:	e7b7      	b.n	8009678 <_printf_float+0x2e0>
 8009708:	4653      	mov	r3, sl
 800970a:	465a      	mov	r2, fp
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	d1be      	bne.n	8009694 <_printf_float+0x2fc>
 8009716:	e68d      	b.n	8009434 <_printf_float+0x9c>
 8009718:	9a04      	ldr	r2, [sp, #16]
 800971a:	464b      	mov	r3, r9
 800971c:	4442      	add	r2, r8
 800971e:	4631      	mov	r1, r6
 8009720:	4628      	mov	r0, r5
 8009722:	47b8      	blx	r7
 8009724:	3001      	adds	r0, #1
 8009726:	d1c1      	bne.n	80096ac <_printf_float+0x314>
 8009728:	e684      	b.n	8009434 <_printf_float+0x9c>
 800972a:	9a08      	ldr	r2, [sp, #32]
 800972c:	2a01      	cmp	r2, #1
 800972e:	dc01      	bgt.n	8009734 <_printf_float+0x39c>
 8009730:	07db      	lsls	r3, r3, #31
 8009732:	d537      	bpl.n	80097a4 <_printf_float+0x40c>
 8009734:	2301      	movs	r3, #1
 8009736:	4642      	mov	r2, r8
 8009738:	4631      	mov	r1, r6
 800973a:	4628      	mov	r0, r5
 800973c:	47b8      	blx	r7
 800973e:	3001      	adds	r0, #1
 8009740:	f43f ae78 	beq.w	8009434 <_printf_float+0x9c>
 8009744:	4653      	mov	r3, sl
 8009746:	465a      	mov	r2, fp
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f ae70 	beq.w	8009434 <_printf_float+0x9c>
 8009754:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009758:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800975c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009760:	d01b      	beq.n	800979a <_printf_float+0x402>
 8009762:	9b08      	ldr	r3, [sp, #32]
 8009764:	f108 0201 	add.w	r2, r8, #1
 8009768:	3b01      	subs	r3, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d10e      	bne.n	8009792 <_printf_float+0x3fa>
 8009774:	e65e      	b.n	8009434 <_printf_float+0x9c>
 8009776:	2301      	movs	r3, #1
 8009778:	464a      	mov	r2, r9
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae57 	beq.w	8009434 <_printf_float+0x9c>
 8009786:	f108 0801 	add.w	r8, r8, #1
 800978a:	9b08      	ldr	r3, [sp, #32]
 800978c:	3b01      	subs	r3, #1
 800978e:	4543      	cmp	r3, r8
 8009790:	dcf1      	bgt.n	8009776 <_printf_float+0x3de>
 8009792:	9b04      	ldr	r3, [sp, #16]
 8009794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009798:	e6db      	b.n	8009552 <_printf_float+0x1ba>
 800979a:	f04f 0800 	mov.w	r8, #0
 800979e:	f104 091a 	add.w	r9, r4, #26
 80097a2:	e7f2      	b.n	800978a <_printf_float+0x3f2>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4642      	mov	r2, r8
 80097a8:	e7df      	b.n	800976a <_printf_float+0x3d2>
 80097aa:	2301      	movs	r3, #1
 80097ac:	464a      	mov	r2, r9
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b8      	blx	r7
 80097b4:	3001      	adds	r0, #1
 80097b6:	f43f ae3d 	beq.w	8009434 <_printf_float+0x9c>
 80097ba:	f108 0801 	add.w	r8, r8, #1
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097c2:	1a5b      	subs	r3, r3, r1
 80097c4:	4543      	cmp	r3, r8
 80097c6:	dcf0      	bgt.n	80097aa <_printf_float+0x412>
 80097c8:	e6f7      	b.n	80095ba <_printf_float+0x222>
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	f104 0919 	add.w	r9, r4, #25
 80097d2:	e7f4      	b.n	80097be <_printf_float+0x426>

080097d4 <_printf_common>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	4616      	mov	r6, r2
 80097da:	4699      	mov	r9, r3
 80097dc:	688a      	ldr	r2, [r1, #8]
 80097de:	690b      	ldr	r3, [r1, #16]
 80097e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bfb8      	it	lt
 80097e8:	4613      	movlt	r3, r2
 80097ea:	6033      	str	r3, [r6, #0]
 80097ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097f0:	4607      	mov	r7, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	b10a      	cbz	r2, 80097fa <_printf_common+0x26>
 80097f6:	3301      	adds	r3, #1
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	0699      	lsls	r1, r3, #26
 80097fe:	bf42      	ittt	mi
 8009800:	6833      	ldrmi	r3, [r6, #0]
 8009802:	3302      	addmi	r3, #2
 8009804:	6033      	strmi	r3, [r6, #0]
 8009806:	6825      	ldr	r5, [r4, #0]
 8009808:	f015 0506 	ands.w	r5, r5, #6
 800980c:	d106      	bne.n	800981c <_printf_common+0x48>
 800980e:	f104 0a19 	add.w	sl, r4, #25
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	6832      	ldr	r2, [r6, #0]
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	42ab      	cmp	r3, r5
 800981a:	dc26      	bgt.n	800986a <_printf_common+0x96>
 800981c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009820:	1e13      	subs	r3, r2, #0
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	2301      	movne	r3, #1
 8009828:	0692      	lsls	r2, r2, #26
 800982a:	d42b      	bmi.n	8009884 <_printf_common+0xb0>
 800982c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009830:	4649      	mov	r1, r9
 8009832:	4638      	mov	r0, r7
 8009834:	47c0      	blx	r8
 8009836:	3001      	adds	r0, #1
 8009838:	d01e      	beq.n	8009878 <_printf_common+0xa4>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	68e5      	ldr	r5, [r4, #12]
 800983e:	6832      	ldr	r2, [r6, #0]
 8009840:	f003 0306 	and.w	r3, r3, #6
 8009844:	2b04      	cmp	r3, #4
 8009846:	bf08      	it	eq
 8009848:	1aad      	subeq	r5, r5, r2
 800984a:	68a3      	ldr	r3, [r4, #8]
 800984c:	6922      	ldr	r2, [r4, #16]
 800984e:	bf0c      	ite	eq
 8009850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009854:	2500      	movne	r5, #0
 8009856:	4293      	cmp	r3, r2
 8009858:	bfc4      	itt	gt
 800985a:	1a9b      	subgt	r3, r3, r2
 800985c:	18ed      	addgt	r5, r5, r3
 800985e:	2600      	movs	r6, #0
 8009860:	341a      	adds	r4, #26
 8009862:	42b5      	cmp	r5, r6
 8009864:	d11a      	bne.n	800989c <_printf_common+0xc8>
 8009866:	2000      	movs	r0, #0
 8009868:	e008      	b.n	800987c <_printf_common+0xa8>
 800986a:	2301      	movs	r3, #1
 800986c:	4652      	mov	r2, sl
 800986e:	4649      	mov	r1, r9
 8009870:	4638      	mov	r0, r7
 8009872:	47c0      	blx	r8
 8009874:	3001      	adds	r0, #1
 8009876:	d103      	bne.n	8009880 <_printf_common+0xac>
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	3501      	adds	r5, #1
 8009882:	e7c6      	b.n	8009812 <_printf_common+0x3e>
 8009884:	18e1      	adds	r1, r4, r3
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	2030      	movs	r0, #48	; 0x30
 800988a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988e:	4422      	add	r2, r4
 8009890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009898:	3302      	adds	r3, #2
 800989a:	e7c7      	b.n	800982c <_printf_common+0x58>
 800989c:	2301      	movs	r3, #1
 800989e:	4622      	mov	r2, r4
 80098a0:	4649      	mov	r1, r9
 80098a2:	4638      	mov	r0, r7
 80098a4:	47c0      	blx	r8
 80098a6:	3001      	adds	r0, #1
 80098a8:	d0e6      	beq.n	8009878 <_printf_common+0xa4>
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7d9      	b.n	8009862 <_printf_common+0x8e>
	...

080098b0 <_printf_i>:
 80098b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	460c      	mov	r4, r1
 80098b6:	4691      	mov	r9, r2
 80098b8:	7e27      	ldrb	r7, [r4, #24]
 80098ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098bc:	2f78      	cmp	r7, #120	; 0x78
 80098be:	4680      	mov	r8, r0
 80098c0:	469a      	mov	sl, r3
 80098c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098c6:	d807      	bhi.n	80098d8 <_printf_i+0x28>
 80098c8:	2f62      	cmp	r7, #98	; 0x62
 80098ca:	d80a      	bhi.n	80098e2 <_printf_i+0x32>
 80098cc:	2f00      	cmp	r7, #0
 80098ce:	f000 80d8 	beq.w	8009a82 <_printf_i+0x1d2>
 80098d2:	2f58      	cmp	r7, #88	; 0x58
 80098d4:	f000 80a3 	beq.w	8009a1e <_printf_i+0x16e>
 80098d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80098dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098e0:	e03a      	b.n	8009958 <_printf_i+0xa8>
 80098e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098e6:	2b15      	cmp	r3, #21
 80098e8:	d8f6      	bhi.n	80098d8 <_printf_i+0x28>
 80098ea:	a001      	add	r0, pc, #4	; (adr r0, 80098f0 <_printf_i+0x40>)
 80098ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80098f0:	08009949 	.word	0x08009949
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	080098d9 	.word	0x080098d9
 80098fc:	080098d9 	.word	0x080098d9
 8009900:	080098d9 	.word	0x080098d9
 8009904:	080098d9 	.word	0x080098d9
 8009908:	0800995d 	.word	0x0800995d
 800990c:	080098d9 	.word	0x080098d9
 8009910:	080098d9 	.word	0x080098d9
 8009914:	080098d9 	.word	0x080098d9
 8009918:	080098d9 	.word	0x080098d9
 800991c:	08009a69 	.word	0x08009a69
 8009920:	0800998d 	.word	0x0800998d
 8009924:	08009a4b 	.word	0x08009a4b
 8009928:	080098d9 	.word	0x080098d9
 800992c:	080098d9 	.word	0x080098d9
 8009930:	08009a8b 	.word	0x08009a8b
 8009934:	080098d9 	.word	0x080098d9
 8009938:	0800998d 	.word	0x0800998d
 800993c:	080098d9 	.word	0x080098d9
 8009940:	080098d9 	.word	0x080098d9
 8009944:	08009a53 	.word	0x08009a53
 8009948:	680b      	ldr	r3, [r1, #0]
 800994a:	1d1a      	adds	r2, r3, #4
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	600a      	str	r2, [r1, #0]
 8009950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009958:	2301      	movs	r3, #1
 800995a:	e0a3      	b.n	8009aa4 <_printf_i+0x1f4>
 800995c:	6825      	ldr	r5, [r4, #0]
 800995e:	6808      	ldr	r0, [r1, #0]
 8009960:	062e      	lsls	r6, r5, #24
 8009962:	f100 0304 	add.w	r3, r0, #4
 8009966:	d50a      	bpl.n	800997e <_printf_i+0xce>
 8009968:	6805      	ldr	r5, [r0, #0]
 800996a:	600b      	str	r3, [r1, #0]
 800996c:	2d00      	cmp	r5, #0
 800996e:	da03      	bge.n	8009978 <_printf_i+0xc8>
 8009970:	232d      	movs	r3, #45	; 0x2d
 8009972:	426d      	negs	r5, r5
 8009974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009978:	485e      	ldr	r0, [pc, #376]	; (8009af4 <_printf_i+0x244>)
 800997a:	230a      	movs	r3, #10
 800997c:	e019      	b.n	80099b2 <_printf_i+0x102>
 800997e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009982:	6805      	ldr	r5, [r0, #0]
 8009984:	600b      	str	r3, [r1, #0]
 8009986:	bf18      	it	ne
 8009988:	b22d      	sxthne	r5, r5
 800998a:	e7ef      	b.n	800996c <_printf_i+0xbc>
 800998c:	680b      	ldr	r3, [r1, #0]
 800998e:	6825      	ldr	r5, [r4, #0]
 8009990:	1d18      	adds	r0, r3, #4
 8009992:	6008      	str	r0, [r1, #0]
 8009994:	0628      	lsls	r0, r5, #24
 8009996:	d501      	bpl.n	800999c <_printf_i+0xec>
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	e002      	b.n	80099a2 <_printf_i+0xf2>
 800999c:	0669      	lsls	r1, r5, #25
 800999e:	d5fb      	bpl.n	8009998 <_printf_i+0xe8>
 80099a0:	881d      	ldrh	r5, [r3, #0]
 80099a2:	4854      	ldr	r0, [pc, #336]	; (8009af4 <_printf_i+0x244>)
 80099a4:	2f6f      	cmp	r7, #111	; 0x6f
 80099a6:	bf0c      	ite	eq
 80099a8:	2308      	moveq	r3, #8
 80099aa:	230a      	movne	r3, #10
 80099ac:	2100      	movs	r1, #0
 80099ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099b2:	6866      	ldr	r6, [r4, #4]
 80099b4:	60a6      	str	r6, [r4, #8]
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	bfa2      	ittt	ge
 80099ba:	6821      	ldrge	r1, [r4, #0]
 80099bc:	f021 0104 	bicge.w	r1, r1, #4
 80099c0:	6021      	strge	r1, [r4, #0]
 80099c2:	b90d      	cbnz	r5, 80099c8 <_printf_i+0x118>
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	d04d      	beq.n	8009a64 <_printf_i+0x1b4>
 80099c8:	4616      	mov	r6, r2
 80099ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80099ce:	fb03 5711 	mls	r7, r3, r1, r5
 80099d2:	5dc7      	ldrb	r7, [r0, r7]
 80099d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80099d8:	462f      	mov	r7, r5
 80099da:	42bb      	cmp	r3, r7
 80099dc:	460d      	mov	r5, r1
 80099de:	d9f4      	bls.n	80099ca <_printf_i+0x11a>
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d10b      	bne.n	80099fc <_printf_i+0x14c>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	07df      	lsls	r7, r3, #31
 80099e8:	d508      	bpl.n	80099fc <_printf_i+0x14c>
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	4299      	cmp	r1, r3
 80099f0:	bfde      	ittt	le
 80099f2:	2330      	movle	r3, #48	; 0x30
 80099f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099fc:	1b92      	subs	r2, r2, r6
 80099fe:	6122      	str	r2, [r4, #16]
 8009a00:	f8cd a000 	str.w	sl, [sp]
 8009a04:	464b      	mov	r3, r9
 8009a06:	aa03      	add	r2, sp, #12
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7ff fee2 	bl	80097d4 <_printf_common>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d14c      	bne.n	8009aae <_printf_i+0x1fe>
 8009a14:	f04f 30ff 	mov.w	r0, #4294967295
 8009a18:	b004      	add	sp, #16
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	4835      	ldr	r0, [pc, #212]	; (8009af4 <_printf_i+0x244>)
 8009a20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	680e      	ldr	r6, [r1, #0]
 8009a28:	061f      	lsls	r7, r3, #24
 8009a2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a2e:	600e      	str	r6, [r1, #0]
 8009a30:	d514      	bpl.n	8009a5c <_printf_i+0x1ac>
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	bf44      	itt	mi
 8009a36:	f043 0320 	orrmi.w	r3, r3, #32
 8009a3a:	6023      	strmi	r3, [r4, #0]
 8009a3c:	b91d      	cbnz	r5, 8009a46 <_printf_i+0x196>
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	f023 0320 	bic.w	r3, r3, #32
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	2310      	movs	r3, #16
 8009a48:	e7b0      	b.n	80099ac <_printf_i+0xfc>
 8009a4a:	6823      	ldr	r3, [r4, #0]
 8009a4c:	f043 0320 	orr.w	r3, r3, #32
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	2378      	movs	r3, #120	; 0x78
 8009a54:	4828      	ldr	r0, [pc, #160]	; (8009af8 <_printf_i+0x248>)
 8009a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a5a:	e7e3      	b.n	8009a24 <_printf_i+0x174>
 8009a5c:	065e      	lsls	r6, r3, #25
 8009a5e:	bf48      	it	mi
 8009a60:	b2ad      	uxthmi	r5, r5
 8009a62:	e7e6      	b.n	8009a32 <_printf_i+0x182>
 8009a64:	4616      	mov	r6, r2
 8009a66:	e7bb      	b.n	80099e0 <_printf_i+0x130>
 8009a68:	680b      	ldr	r3, [r1, #0]
 8009a6a:	6826      	ldr	r6, [r4, #0]
 8009a6c:	6960      	ldr	r0, [r4, #20]
 8009a6e:	1d1d      	adds	r5, r3, #4
 8009a70:	600d      	str	r5, [r1, #0]
 8009a72:	0635      	lsls	r5, r6, #24
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	d501      	bpl.n	8009a7c <_printf_i+0x1cc>
 8009a78:	6018      	str	r0, [r3, #0]
 8009a7a:	e002      	b.n	8009a82 <_printf_i+0x1d2>
 8009a7c:	0671      	lsls	r1, r6, #25
 8009a7e:	d5fb      	bpl.n	8009a78 <_printf_i+0x1c8>
 8009a80:	8018      	strh	r0, [r3, #0]
 8009a82:	2300      	movs	r3, #0
 8009a84:	6123      	str	r3, [r4, #16]
 8009a86:	4616      	mov	r6, r2
 8009a88:	e7ba      	b.n	8009a00 <_printf_i+0x150>
 8009a8a:	680b      	ldr	r3, [r1, #0]
 8009a8c:	1d1a      	adds	r2, r3, #4
 8009a8e:	600a      	str	r2, [r1, #0]
 8009a90:	681e      	ldr	r6, [r3, #0]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	2100      	movs	r1, #0
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7f6 fbea 	bl	8000270 <memchr>
 8009a9c:	b108      	cbz	r0, 8009aa2 <_printf_i+0x1f2>
 8009a9e:	1b80      	subs	r0, r0, r6
 8009aa0:	6060      	str	r0, [r4, #4]
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aac:	e7a8      	b.n	8009a00 <_printf_i+0x150>
 8009aae:	6923      	ldr	r3, [r4, #16]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	47d0      	blx	sl
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d0ab      	beq.n	8009a14 <_printf_i+0x164>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	079b      	lsls	r3, r3, #30
 8009ac0:	d413      	bmi.n	8009aea <_printf_i+0x23a>
 8009ac2:	68e0      	ldr	r0, [r4, #12]
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	4298      	cmp	r0, r3
 8009ac8:	bfb8      	it	lt
 8009aca:	4618      	movlt	r0, r3
 8009acc:	e7a4      	b.n	8009a18 <_printf_i+0x168>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4632      	mov	r2, r6
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	47d0      	blx	sl
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d09b      	beq.n	8009a14 <_printf_i+0x164>
 8009adc:	3501      	adds	r5, #1
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	9903      	ldr	r1, [sp, #12]
 8009ae2:	1a5b      	subs	r3, r3, r1
 8009ae4:	42ab      	cmp	r3, r5
 8009ae6:	dcf2      	bgt.n	8009ace <_printf_i+0x21e>
 8009ae8:	e7eb      	b.n	8009ac2 <_printf_i+0x212>
 8009aea:	2500      	movs	r5, #0
 8009aec:	f104 0619 	add.w	r6, r4, #25
 8009af0:	e7f5      	b.n	8009ade <_printf_i+0x22e>
 8009af2:	bf00      	nop
 8009af4:	0800bf0e 	.word	0x0800bf0e
 8009af8:	0800bf1f 	.word	0x0800bf1f

08009afc <realloc>:
 8009afc:	4b02      	ldr	r3, [pc, #8]	; (8009b08 <realloc+0xc>)
 8009afe:	460a      	mov	r2, r1
 8009b00:	4601      	mov	r1, r0
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	f001 ba93 	b.w	800b02e <_realloc_r>
 8009b08:	200001bc 	.word	0x200001bc

08009b0c <_sbrk_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d06      	ldr	r5, [pc, #24]	; (8009b28 <_sbrk_r+0x1c>)
 8009b10:	2300      	movs	r3, #0
 8009b12:	4604      	mov	r4, r0
 8009b14:	4608      	mov	r0, r1
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	f7f8 fdaa 	bl	8002670 <_sbrk>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_sbrk_r+0x1a>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_sbrk_r+0x1a>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20000854 	.word	0x20000854

08009b2c <sniprintf>:
 8009b2c:	b40c      	push	{r2, r3}
 8009b2e:	b530      	push	{r4, r5, lr}
 8009b30:	4b17      	ldr	r3, [pc, #92]	; (8009b90 <sniprintf+0x64>)
 8009b32:	1e0c      	subs	r4, r1, #0
 8009b34:	681d      	ldr	r5, [r3, #0]
 8009b36:	b09d      	sub	sp, #116	; 0x74
 8009b38:	da08      	bge.n	8009b4c <sniprintf+0x20>
 8009b3a:	238b      	movs	r3, #139	; 0x8b
 8009b3c:	602b      	str	r3, [r5, #0]
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	b01d      	add	sp, #116	; 0x74
 8009b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b48:	b002      	add	sp, #8
 8009b4a:	4770      	bx	lr
 8009b4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b54:	bf14      	ite	ne
 8009b56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b5a:	4623      	moveq	r3, r4
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b64:	9002      	str	r0, [sp, #8]
 8009b66:	9006      	str	r0, [sp, #24]
 8009b68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b6e:	ab21      	add	r3, sp, #132	; 0x84
 8009b70:	a902      	add	r1, sp, #8
 8009b72:	4628      	mov	r0, r5
 8009b74:	9301      	str	r3, [sp, #4]
 8009b76:	f001 fadb 	bl	800b130 <_svfiprintf_r>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	bfbc      	itt	lt
 8009b7e:	238b      	movlt	r3, #139	; 0x8b
 8009b80:	602b      	strlt	r3, [r5, #0]
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	d0dd      	beq.n	8009b42 <sniprintf+0x16>
 8009b86:	9b02      	ldr	r3, [sp, #8]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
 8009b8c:	e7d9      	b.n	8009b42 <sniprintf+0x16>
 8009b8e:	bf00      	nop
 8009b90:	200001bc 	.word	0x200001bc

08009b94 <strcpy>:
 8009b94:	4603      	mov	r3, r0
 8009b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b9a:	f803 2b01 	strb.w	r2, [r3], #1
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	d1f9      	bne.n	8009b96 <strcpy+0x2>
 8009ba2:	4770      	bx	lr

08009ba4 <strtok>:
 8009ba4:	4b16      	ldr	r3, [pc, #88]	; (8009c00 <strtok+0x5c>)
 8009ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba8:	681e      	ldr	r6, [r3, #0]
 8009baa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009bac:	4605      	mov	r5, r0
 8009bae:	b9fc      	cbnz	r4, 8009bf0 <strtok+0x4c>
 8009bb0:	2050      	movs	r0, #80	; 0x50
 8009bb2:	9101      	str	r1, [sp, #4]
 8009bb4:	f7ff fa9c 	bl	80090f0 <malloc>
 8009bb8:	9901      	ldr	r1, [sp, #4]
 8009bba:	65b0      	str	r0, [r6, #88]	; 0x58
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	b920      	cbnz	r0, 8009bca <strtok+0x26>
 8009bc0:	4b10      	ldr	r3, [pc, #64]	; (8009c04 <strtok+0x60>)
 8009bc2:	4811      	ldr	r0, [pc, #68]	; (8009c08 <strtok+0x64>)
 8009bc4:	2157      	movs	r1, #87	; 0x57
 8009bc6:	f000 f849 	bl	8009c5c <__assert_func>
 8009bca:	e9c0 4400 	strd	r4, r4, [r0]
 8009bce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009bd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009bd6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009bda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009bde:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009be2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009be6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009bea:	6184      	str	r4, [r0, #24]
 8009bec:	7704      	strb	r4, [r0, #28]
 8009bee:	6244      	str	r4, [r0, #36]	; 0x24
 8009bf0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	b002      	add	sp, #8
 8009bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bfc:	f000 b806 	b.w	8009c0c <__strtok_r>
 8009c00:	200001bc 	.word	0x200001bc
 8009c04:	0800bf30 	.word	0x0800bf30
 8009c08:	0800bf47 	.word	0x0800bf47

08009c0c <__strtok_r>:
 8009c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c0e:	b908      	cbnz	r0, 8009c14 <__strtok_r+0x8>
 8009c10:	6810      	ldr	r0, [r2, #0]
 8009c12:	b188      	cbz	r0, 8009c38 <__strtok_r+0x2c>
 8009c14:	4604      	mov	r4, r0
 8009c16:	4620      	mov	r0, r4
 8009c18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c22:	b91e      	cbnz	r6, 8009c2c <__strtok_r+0x20>
 8009c24:	b965      	cbnz	r5, 8009c40 <__strtok_r+0x34>
 8009c26:	6015      	str	r5, [r2, #0]
 8009c28:	4628      	mov	r0, r5
 8009c2a:	e005      	b.n	8009c38 <__strtok_r+0x2c>
 8009c2c:	42b5      	cmp	r5, r6
 8009c2e:	d1f6      	bne.n	8009c1e <__strtok_r+0x12>
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f0      	bne.n	8009c16 <__strtok_r+0xa>
 8009c34:	6014      	str	r4, [r2, #0]
 8009c36:	7003      	strb	r3, [r0, #0]
 8009c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3a:	461c      	mov	r4, r3
 8009c3c:	e00c      	b.n	8009c58 <__strtok_r+0x4c>
 8009c3e:	b915      	cbnz	r5, 8009c46 <__strtok_r+0x3a>
 8009c40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c44:	460e      	mov	r6, r1
 8009c46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	d1f7      	bne.n	8009c3e <__strtok_r+0x32>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f3      	beq.n	8009c3a <__strtok_r+0x2e>
 8009c52:	2300      	movs	r3, #0
 8009c54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009c58:	6014      	str	r4, [r2, #0]
 8009c5a:	e7ed      	b.n	8009c38 <__strtok_r+0x2c>

08009c5c <__assert_func>:
 8009c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c5e:	4614      	mov	r4, r2
 8009c60:	461a      	mov	r2, r3
 8009c62:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <__assert_func+0x2c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4605      	mov	r5, r0
 8009c68:	68d8      	ldr	r0, [r3, #12]
 8009c6a:	b14c      	cbz	r4, 8009c80 <__assert_func+0x24>
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <__assert_func+0x30>)
 8009c6e:	9100      	str	r1, [sp, #0]
 8009c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c74:	4906      	ldr	r1, [pc, #24]	; (8009c90 <__assert_func+0x34>)
 8009c76:	462b      	mov	r3, r5
 8009c78:	f000 fe1c 	bl	800a8b4 <fiprintf>
 8009c7c:	f001 fd72 	bl	800b764 <abort>
 8009c80:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <__assert_func+0x38>)
 8009c82:	461c      	mov	r4, r3
 8009c84:	e7f3      	b.n	8009c6e <__assert_func+0x12>
 8009c86:	bf00      	nop
 8009c88:	200001bc 	.word	0x200001bc
 8009c8c:	0800bfa8 	.word	0x0800bfa8
 8009c90:	0800bfb5 	.word	0x0800bfb5
 8009c94:	0800bfe3 	.word	0x0800bfe3

08009c98 <quorem>:
 8009c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	6903      	ldr	r3, [r0, #16]
 8009c9e:	690c      	ldr	r4, [r1, #16]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	f2c0 8081 	blt.w	8009daa <quorem+0x112>
 8009ca8:	3c01      	subs	r4, #1
 8009caa:	f101 0814 	add.w	r8, r1, #20
 8009cae:	f100 0514 	add.w	r5, r0, #20
 8009cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ccc:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cd0:	d331      	bcc.n	8009d36 <quorem+0x9e>
 8009cd2:	f04f 0e00 	mov.w	lr, #0
 8009cd6:	4640      	mov	r0, r8
 8009cd8:	46ac      	mov	ip, r5
 8009cda:	46f2      	mov	sl, lr
 8009cdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ce0:	b293      	uxth	r3, r2
 8009ce2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	ebaa 0303 	sub.w	r3, sl, r3
 8009cf0:	0c12      	lsrs	r2, r2, #16
 8009cf2:	f8dc a000 	ldr.w	sl, [ip]
 8009cf6:	fb06 e202 	mla	r2, r6, r2, lr
 8009cfa:	fa13 f38a 	uxtah	r3, r3, sl
 8009cfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d02:	fa1f fa82 	uxth.w	sl, r2
 8009d06:	f8dc 2000 	ldr.w	r2, [ip]
 8009d0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009d0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d18:	4581      	cmp	r9, r0
 8009d1a:	f84c 3b04 	str.w	r3, [ip], #4
 8009d1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d22:	d2db      	bcs.n	8009cdc <quorem+0x44>
 8009d24:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d28:	b92b      	cbnz	r3, 8009d36 <quorem+0x9e>
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	3b04      	subs	r3, #4
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	d32e      	bcc.n	8009d92 <quorem+0xfa>
 8009d34:	613c      	str	r4, [r7, #16]
 8009d36:	4638      	mov	r0, r7
 8009d38:	f001 f86a 	bl	800ae10 <__mcmp>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	db24      	blt.n	8009d8a <quorem+0xf2>
 8009d40:	3601      	adds	r6, #1
 8009d42:	4628      	mov	r0, r5
 8009d44:	f04f 0c00 	mov.w	ip, #0
 8009d48:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d4c:	f8d0 e000 	ldr.w	lr, [r0]
 8009d50:	b293      	uxth	r3, r2
 8009d52:	ebac 0303 	sub.w	r3, ip, r3
 8009d56:	0c12      	lsrs	r2, r2, #16
 8009d58:	fa13 f38e 	uxtah	r3, r3, lr
 8009d5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d6a:	45c1      	cmp	r9, r8
 8009d6c:	f840 3b04 	str.w	r3, [r0], #4
 8009d70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d74:	d2e8      	bcs.n	8009d48 <quorem+0xb0>
 8009d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d7e:	b922      	cbnz	r2, 8009d8a <quorem+0xf2>
 8009d80:	3b04      	subs	r3, #4
 8009d82:	429d      	cmp	r5, r3
 8009d84:	461a      	mov	r2, r3
 8009d86:	d30a      	bcc.n	8009d9e <quorem+0x106>
 8009d88:	613c      	str	r4, [r7, #16]
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	b003      	add	sp, #12
 8009d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d92:	6812      	ldr	r2, [r2, #0]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	2a00      	cmp	r2, #0
 8009d98:	d1cc      	bne.n	8009d34 <quorem+0x9c>
 8009d9a:	3c01      	subs	r4, #1
 8009d9c:	e7c7      	b.n	8009d2e <quorem+0x96>
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	d1f0      	bne.n	8009d88 <quorem+0xf0>
 8009da6:	3c01      	subs	r4, #1
 8009da8:	e7eb      	b.n	8009d82 <quorem+0xea>
 8009daa:	2000      	movs	r0, #0
 8009dac:	e7ee      	b.n	8009d8c <quorem+0xf4>
	...

08009db0 <_dtoa_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	ec59 8b10 	vmov	r8, r9, d0
 8009db8:	b095      	sub	sp, #84	; 0x54
 8009dba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009dbc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009dbe:	9107      	str	r1, [sp, #28]
 8009dc0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8009dca:	b975      	cbnz	r5, 8009dea <_dtoa_r+0x3a>
 8009dcc:	2010      	movs	r0, #16
 8009dce:	f7ff f98f 	bl	80090f0 <malloc>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	6270      	str	r0, [r6, #36]	; 0x24
 8009dd6:	b920      	cbnz	r0, 8009de2 <_dtoa_r+0x32>
 8009dd8:	4bab      	ldr	r3, [pc, #684]	; (800a088 <_dtoa_r+0x2d8>)
 8009dda:	21ea      	movs	r1, #234	; 0xea
 8009ddc:	48ab      	ldr	r0, [pc, #684]	; (800a08c <_dtoa_r+0x2dc>)
 8009dde:	f7ff ff3d 	bl	8009c5c <__assert_func>
 8009de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009de6:	6005      	str	r5, [r0, #0]
 8009de8:	60c5      	str	r5, [r0, #12]
 8009dea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009dec:	6819      	ldr	r1, [r3, #0]
 8009dee:	b151      	cbz	r1, 8009e06 <_dtoa_r+0x56>
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	604a      	str	r2, [r1, #4]
 8009df4:	2301      	movs	r3, #1
 8009df6:	4093      	lsls	r3, r2
 8009df8:	608b      	str	r3, [r1, #8]
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 fdca 	bl	800a994 <_Bfree>
 8009e00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	f1b9 0300 	subs.w	r3, r9, #0
 8009e0a:	bfbb      	ittet	lt
 8009e0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e10:	9303      	strlt	r3, [sp, #12]
 8009e12:	2300      	movge	r3, #0
 8009e14:	2201      	movlt	r2, #1
 8009e16:	bfac      	ite	ge
 8009e18:	6023      	strge	r3, [r4, #0]
 8009e1a:	6022      	strlt	r2, [r4, #0]
 8009e1c:	4b9c      	ldr	r3, [pc, #624]	; (800a090 <_dtoa_r+0x2e0>)
 8009e1e:	9c03      	ldr	r4, [sp, #12]
 8009e20:	43a3      	bics	r3, r4
 8009e22:	d11a      	bne.n	8009e5a <_dtoa_r+0xaa>
 8009e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009e30:	ea53 0308 	orrs.w	r3, r3, r8
 8009e34:	f000 8512 	beq.w	800a85c <_dtoa_r+0xaac>
 8009e38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e3a:	b953      	cbnz	r3, 8009e52 <_dtoa_r+0xa2>
 8009e3c:	4b95      	ldr	r3, [pc, #596]	; (800a094 <_dtoa_r+0x2e4>)
 8009e3e:	e01f      	b.n	8009e80 <_dtoa_r+0xd0>
 8009e40:	4b95      	ldr	r3, [pc, #596]	; (800a098 <_dtoa_r+0x2e8>)
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	3308      	adds	r3, #8
 8009e46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	9800      	ldr	r0, [sp, #0]
 8009e4c:	b015      	add	sp, #84	; 0x54
 8009e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e52:	4b90      	ldr	r3, [pc, #576]	; (800a094 <_dtoa_r+0x2e4>)
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	3303      	adds	r3, #3
 8009e58:	e7f5      	b.n	8009e46 <_dtoa_r+0x96>
 8009e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009e6a:	d10b      	bne.n	8009e84 <_dtoa_r+0xd4>
 8009e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e6e:	2301      	movs	r3, #1
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 84ee 	beq.w	800a856 <_dtoa_r+0xaa6>
 8009e7a:	4888      	ldr	r0, [pc, #544]	; (800a09c <_dtoa_r+0x2ec>)
 8009e7c:	6018      	str	r0, [r3, #0]
 8009e7e:	1e43      	subs	r3, r0, #1
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	e7e2      	b.n	8009e4a <_dtoa_r+0x9a>
 8009e84:	a913      	add	r1, sp, #76	; 0x4c
 8009e86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009e8a:	aa12      	add	r2, sp, #72	; 0x48
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f001 f863 	bl	800af58 <__d2b>
 8009e92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009e96:	4605      	mov	r5, r0
 8009e98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009e9a:	2900      	cmp	r1, #0
 8009e9c:	d047      	beq.n	8009f2e <_dtoa_r+0x17e>
 8009e9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009ea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009ea4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ea8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009eac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009eb0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009eb4:	2400      	movs	r4, #0
 8009eb6:	ec43 2b16 	vmov	d6, r2, r3
 8009eba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009ebe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a070 <_dtoa_r+0x2c0>
 8009ec2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ec6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a078 <_dtoa_r+0x2c8>
 8009eca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009ece:	eeb0 7b46 	vmov.f64	d7, d6
 8009ed2:	ee06 1a90 	vmov	s13, r1
 8009ed6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009eda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a080 <_dtoa_r+0x2d0>
 8009ede:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009ee2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009ee6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eee:	ee16 ba90 	vmov	fp, s13
 8009ef2:	9411      	str	r4, [sp, #68]	; 0x44
 8009ef4:	d508      	bpl.n	8009f08 <_dtoa_r+0x158>
 8009ef6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009efa:	eeb4 6b47 	vcmp.f64	d6, d7
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	bf18      	it	ne
 8009f04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009f08:	f1bb 0f16 	cmp.w	fp, #22
 8009f0c:	d832      	bhi.n	8009f74 <_dtoa_r+0x1c4>
 8009f0e:	4b64      	ldr	r3, [pc, #400]	; (800a0a0 <_dtoa_r+0x2f0>)
 8009f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f14:	ed93 7b00 	vldr	d7, [r3]
 8009f18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009f1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f24:	d501      	bpl.n	8009f2a <_dtoa_r+0x17a>
 8009f26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e023      	b.n	8009f76 <_dtoa_r+0x1c6>
 8009f2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009f30:	4401      	add	r1, r0
 8009f32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009f36:	2b20      	cmp	r3, #32
 8009f38:	bfc3      	ittte	gt
 8009f3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f3e:	fa04 f303 	lslgt.w	r3, r4, r3
 8009f42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009f46:	f1c3 0320 	rsble	r3, r3, #32
 8009f4a:	bfc6      	itte	gt
 8009f4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009f50:	ea43 0308 	orrgt.w	r3, r3, r8
 8009f54:	fa08 f303 	lslle.w	r3, r8, r3
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009f60:	3901      	subs	r1, #1
 8009f62:	ed8d 7b00 	vstr	d7, [sp]
 8009f66:	9c01      	ldr	r4, [sp, #4]
 8009f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009f70:	2401      	movs	r4, #1
 8009f72:	e7a0      	b.n	8009eb6 <_dtoa_r+0x106>
 8009f74:	2301      	movs	r3, #1
 8009f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f78:	1a43      	subs	r3, r0, r1
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	bf45      	ittet	mi
 8009f7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f82:	9305      	strmi	r3, [sp, #20]
 8009f84:	2300      	movpl	r3, #0
 8009f86:	2300      	movmi	r3, #0
 8009f88:	9206      	str	r2, [sp, #24]
 8009f8a:	bf54      	ite	pl
 8009f8c:	9305      	strpl	r3, [sp, #20]
 8009f8e:	9306      	strmi	r3, [sp, #24]
 8009f90:	f1bb 0f00 	cmp.w	fp, #0
 8009f94:	db18      	blt.n	8009fc8 <_dtoa_r+0x218>
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009f9c:	445b      	add	r3, fp
 8009f9e:	9306      	str	r3, [sp, #24]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9a07      	ldr	r2, [sp, #28]
 8009fa4:	2a09      	cmp	r2, #9
 8009fa6:	d849      	bhi.n	800a03c <_dtoa_r+0x28c>
 8009fa8:	2a05      	cmp	r2, #5
 8009faa:	bfc4      	itt	gt
 8009fac:	3a04      	subgt	r2, #4
 8009fae:	9207      	strgt	r2, [sp, #28]
 8009fb0:	9a07      	ldr	r2, [sp, #28]
 8009fb2:	f1a2 0202 	sub.w	r2, r2, #2
 8009fb6:	bfcc      	ite	gt
 8009fb8:	2400      	movgt	r4, #0
 8009fba:	2401      	movle	r4, #1
 8009fbc:	2a03      	cmp	r2, #3
 8009fbe:	d848      	bhi.n	800a052 <_dtoa_r+0x2a2>
 8009fc0:	e8df f002 	tbb	[pc, r2]
 8009fc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8009fc8:	9b05      	ldr	r3, [sp, #20]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	eba3 030b 	sub.w	r3, r3, fp
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	920e      	str	r2, [sp, #56]	; 0x38
 8009fd4:	f1cb 0300 	rsb	r3, fp, #0
 8009fd8:	e7e3      	b.n	8009fa2 <_dtoa_r+0x1f2>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	9208      	str	r2, [sp, #32]
 8009fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe0:	2a00      	cmp	r2, #0
 8009fe2:	dc39      	bgt.n	800a058 <_dtoa_r+0x2a8>
 8009fe4:	f04f 0a01 	mov.w	sl, #1
 8009fe8:	46d1      	mov	r9, sl
 8009fea:	4652      	mov	r2, sl
 8009fec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ff0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6079      	str	r1, [r7, #4]
 8009ff6:	2004      	movs	r0, #4
 8009ff8:	f100 0c14 	add.w	ip, r0, #20
 8009ffc:	4594      	cmp	ip, r2
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	d92f      	bls.n	800a062 <_dtoa_r+0x2b2>
 800a002:	4630      	mov	r0, r6
 800a004:	930c      	str	r3, [sp, #48]	; 0x30
 800a006:	f000 fc85 	bl	800a914 <_Balloc>
 800a00a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a00c:	9000      	str	r0, [sp, #0]
 800a00e:	4602      	mov	r2, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d149      	bne.n	800a0a8 <_dtoa_r+0x2f8>
 800a014:	4b23      	ldr	r3, [pc, #140]	; (800a0a4 <_dtoa_r+0x2f4>)
 800a016:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a01a:	e6df      	b.n	8009ddc <_dtoa_r+0x2c>
 800a01c:	2201      	movs	r2, #1
 800a01e:	e7dd      	b.n	8009fdc <_dtoa_r+0x22c>
 800a020:	2200      	movs	r2, #0
 800a022:	9208      	str	r2, [sp, #32]
 800a024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a026:	eb0b 0a02 	add.w	sl, fp, r2
 800a02a:	f10a 0901 	add.w	r9, sl, #1
 800a02e:	464a      	mov	r2, r9
 800a030:	2a01      	cmp	r2, #1
 800a032:	bfb8      	it	lt
 800a034:	2201      	movlt	r2, #1
 800a036:	e7db      	b.n	8009ff0 <_dtoa_r+0x240>
 800a038:	2201      	movs	r2, #1
 800a03a:	e7f2      	b.n	800a022 <_dtoa_r+0x272>
 800a03c:	2401      	movs	r4, #1
 800a03e:	2200      	movs	r2, #0
 800a040:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a044:	f04f 3aff 	mov.w	sl, #4294967295
 800a048:	2100      	movs	r1, #0
 800a04a:	46d1      	mov	r9, sl
 800a04c:	2212      	movs	r2, #18
 800a04e:	9109      	str	r1, [sp, #36]	; 0x24
 800a050:	e7ce      	b.n	8009ff0 <_dtoa_r+0x240>
 800a052:	2201      	movs	r2, #1
 800a054:	9208      	str	r2, [sp, #32]
 800a056:	e7f5      	b.n	800a044 <_dtoa_r+0x294>
 800a058:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a05c:	46d1      	mov	r9, sl
 800a05e:	4652      	mov	r2, sl
 800a060:	e7c6      	b.n	8009ff0 <_dtoa_r+0x240>
 800a062:	3101      	adds	r1, #1
 800a064:	6079      	str	r1, [r7, #4]
 800a066:	0040      	lsls	r0, r0, #1
 800a068:	e7c6      	b.n	8009ff8 <_dtoa_r+0x248>
 800a06a:	bf00      	nop
 800a06c:	f3af 8000 	nop.w
 800a070:	636f4361 	.word	0x636f4361
 800a074:	3fd287a7 	.word	0x3fd287a7
 800a078:	8b60c8b3 	.word	0x8b60c8b3
 800a07c:	3fc68a28 	.word	0x3fc68a28
 800a080:	509f79fb 	.word	0x509f79fb
 800a084:	3fd34413 	.word	0x3fd34413
 800a088:	0800bf30 	.word	0x0800bf30
 800a08c:	0800bff1 	.word	0x0800bff1
 800a090:	7ff00000 	.word	0x7ff00000
 800a094:	0800bfed 	.word	0x0800bfed
 800a098:	0800bfe4 	.word	0x0800bfe4
 800a09c:	0800bf0d 	.word	0x0800bf0d
 800a0a0:	0800c0f0 	.word	0x0800c0f0
 800a0a4:	0800c050 	.word	0x0800c050
 800a0a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a0aa:	9900      	ldr	r1, [sp, #0]
 800a0ac:	6011      	str	r1, [r2, #0]
 800a0ae:	f1b9 0f0e 	cmp.w	r9, #14
 800a0b2:	d872      	bhi.n	800a19a <_dtoa_r+0x3ea>
 800a0b4:	2c00      	cmp	r4, #0
 800a0b6:	d070      	beq.n	800a19a <_dtoa_r+0x3ea>
 800a0b8:	f1bb 0f00 	cmp.w	fp, #0
 800a0bc:	f340 80a6 	ble.w	800a20c <_dtoa_r+0x45c>
 800a0c0:	49ca      	ldr	r1, [pc, #808]	; (800a3ec <_dtoa_r+0x63c>)
 800a0c2:	f00b 020f 	and.w	r2, fp, #15
 800a0c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a0ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a0ce:	ed92 7b00 	vldr	d7, [r2]
 800a0d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a0d6:	f000 808d 	beq.w	800a1f4 <_dtoa_r+0x444>
 800a0da:	4ac5      	ldr	r2, [pc, #788]	; (800a3f0 <_dtoa_r+0x640>)
 800a0dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a0e0:	ed92 6b08 	vldr	d6, [r2, #32]
 800a0e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a0e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a0ec:	f001 010f 	and.w	r1, r1, #15
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	48bf      	ldr	r0, [pc, #764]	; (800a3f0 <_dtoa_r+0x640>)
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d17f      	bne.n	800a1f8 <_dtoa_r+0x448>
 800a0f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a0fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a100:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a106:	2900      	cmp	r1, #0
 800a108:	f000 80b2 	beq.w	800a270 <_dtoa_r+0x4c0>
 800a10c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a114:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a11c:	f140 80a8 	bpl.w	800a270 <_dtoa_r+0x4c0>
 800a120:	f1b9 0f00 	cmp.w	r9, #0
 800a124:	f000 80a4 	beq.w	800a270 <_dtoa_r+0x4c0>
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	dd31      	ble.n	800a192 <_dtoa_r+0x3e2>
 800a12e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a132:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a136:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a13a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a13e:	3201      	adds	r2, #1
 800a140:	4650      	mov	r0, sl
 800a142:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a146:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a14a:	ee07 2a90 	vmov	s15, r2
 800a14e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a152:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a156:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a15a:	9c03      	ldr	r4, [sp, #12]
 800a15c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a160:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 8086 	bne.w	800a276 <_dtoa_r+0x4c6>
 800a16a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a16e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a172:	ec42 1b17 	vmov	d7, r1, r2
 800a176:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17e:	f300 8272 	bgt.w	800a666 <_dtoa_r+0x8b6>
 800a182:	eeb1 7b47 	vneg.f64	d7, d7
 800a186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18e:	f100 8267 	bmi.w	800a660 <_dtoa_r+0x8b0>
 800a192:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a196:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a19a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	f2c0 8129 	blt.w	800a3f4 <_dtoa_r+0x644>
 800a1a2:	f1bb 0f0e 	cmp.w	fp, #14
 800a1a6:	f300 8125 	bgt.w	800a3f4 <_dtoa_r+0x644>
 800a1aa:	4b90      	ldr	r3, [pc, #576]	; (800a3ec <_dtoa_r+0x63c>)
 800a1ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1b0:	ed93 6b00 	vldr	d6, [r3]
 800a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f280 80c3 	bge.w	800a342 <_dtoa_r+0x592>
 800a1bc:	f1b9 0f00 	cmp.w	r9, #0
 800a1c0:	f300 80bf 	bgt.w	800a342 <_dtoa_r+0x592>
 800a1c4:	f040 824c 	bne.w	800a660 <_dtoa_r+0x8b0>
 800a1c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a1cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a1d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1dc:	464c      	mov	r4, r9
 800a1de:	464f      	mov	r7, r9
 800a1e0:	f280 8222 	bge.w	800a628 <_dtoa_r+0x878>
 800a1e4:	f8dd 8000 	ldr.w	r8, [sp]
 800a1e8:	2331      	movs	r3, #49	; 0x31
 800a1ea:	f808 3b01 	strb.w	r3, [r8], #1
 800a1ee:	f10b 0b01 	add.w	fp, fp, #1
 800a1f2:	e21e      	b.n	800a632 <_dtoa_r+0x882>
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	e77c      	b.n	800a0f2 <_dtoa_r+0x342>
 800a1f8:	07cc      	lsls	r4, r1, #31
 800a1fa:	d504      	bpl.n	800a206 <_dtoa_r+0x456>
 800a1fc:	ed90 6b00 	vldr	d6, [r0]
 800a200:	3201      	adds	r2, #1
 800a202:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a206:	1049      	asrs	r1, r1, #1
 800a208:	3008      	adds	r0, #8
 800a20a:	e773      	b.n	800a0f4 <_dtoa_r+0x344>
 800a20c:	d02e      	beq.n	800a26c <_dtoa_r+0x4bc>
 800a20e:	f1cb 0100 	rsb	r1, fp, #0
 800a212:	4a76      	ldr	r2, [pc, #472]	; (800a3ec <_dtoa_r+0x63c>)
 800a214:	f001 000f 	and.w	r0, r1, #15
 800a218:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a21c:	ed92 7b00 	vldr	d7, [r2]
 800a220:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a224:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a228:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a22c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a230:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a234:	486e      	ldr	r0, [pc, #440]	; (800a3f0 <_dtoa_r+0x640>)
 800a236:	1109      	asrs	r1, r1, #4
 800a238:	2400      	movs	r4, #0
 800a23a:	2202      	movs	r2, #2
 800a23c:	b939      	cbnz	r1, 800a24e <_dtoa_r+0x49e>
 800a23e:	2c00      	cmp	r4, #0
 800a240:	f43f af60 	beq.w	800a104 <_dtoa_r+0x354>
 800a244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24c:	e75a      	b.n	800a104 <_dtoa_r+0x354>
 800a24e:	07cf      	lsls	r7, r1, #31
 800a250:	d509      	bpl.n	800a266 <_dtoa_r+0x4b6>
 800a252:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a256:	ed90 7b00 	vldr	d7, [r0]
 800a25a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a25e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a262:	3201      	adds	r2, #1
 800a264:	2401      	movs	r4, #1
 800a266:	1049      	asrs	r1, r1, #1
 800a268:	3008      	adds	r0, #8
 800a26a:	e7e7      	b.n	800a23c <_dtoa_r+0x48c>
 800a26c:	2202      	movs	r2, #2
 800a26e:	e749      	b.n	800a104 <_dtoa_r+0x354>
 800a270:	465f      	mov	r7, fp
 800a272:	4648      	mov	r0, r9
 800a274:	e765      	b.n	800a142 <_dtoa_r+0x392>
 800a276:	ec42 1b17 	vmov	d7, r1, r2
 800a27a:	4a5c      	ldr	r2, [pc, #368]	; (800a3ec <_dtoa_r+0x63c>)
 800a27c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a280:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a284:	9a00      	ldr	r2, [sp, #0]
 800a286:	1814      	adds	r4, r2, r0
 800a288:	9a08      	ldr	r2, [sp, #32]
 800a28a:	b352      	cbz	r2, 800a2e2 <_dtoa_r+0x532>
 800a28c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a290:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a294:	f8dd 8000 	ldr.w	r8, [sp]
 800a298:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a29c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a2a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a2a8:	ee14 2a90 	vmov	r2, s9
 800a2ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a2b0:	3230      	adds	r2, #48	; 0x30
 800a2b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a2b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2be:	f808 2b01 	strb.w	r2, [r8], #1
 800a2c2:	d439      	bmi.n	800a338 <_dtoa_r+0x588>
 800a2c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a2c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d0:	d472      	bmi.n	800a3b8 <_dtoa_r+0x608>
 800a2d2:	45a0      	cmp	r8, r4
 800a2d4:	f43f af5d 	beq.w	800a192 <_dtoa_r+0x3e2>
 800a2d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a2dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a2e0:	e7e0      	b.n	800a2a4 <_dtoa_r+0x4f4>
 800a2e2:	f8dd 8000 	ldr.w	r8, [sp]
 800a2e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a2f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a2f4:	ee14 2a90 	vmov	r2, s9
 800a2f8:	3230      	adds	r2, #48	; 0x30
 800a2fa:	f808 2b01 	strb.w	r2, [r8], #1
 800a2fe:	45a0      	cmp	r8, r4
 800a300:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a304:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a308:	d118      	bne.n	800a33c <_dtoa_r+0x58c>
 800a30a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a30e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a312:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a31a:	dc4d      	bgt.n	800a3b8 <_dtoa_r+0x608>
 800a31c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a320:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a328:	f57f af33 	bpl.w	800a192 <_dtoa_r+0x3e2>
 800a32c:	4688      	mov	r8, r1
 800a32e:	3901      	subs	r1, #1
 800a330:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a334:	2b30      	cmp	r3, #48	; 0x30
 800a336:	d0f9      	beq.n	800a32c <_dtoa_r+0x57c>
 800a338:	46bb      	mov	fp, r7
 800a33a:	e02a      	b.n	800a392 <_dtoa_r+0x5e2>
 800a33c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a340:	e7d6      	b.n	800a2f0 <_dtoa_r+0x540>
 800a342:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a346:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a34a:	f8dd 8000 	ldr.w	r8, [sp]
 800a34e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a352:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a356:	ee15 3a10 	vmov	r3, s10
 800a35a:	3330      	adds	r3, #48	; 0x30
 800a35c:	f808 3b01 	strb.w	r3, [r8], #1
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	eba8 0303 	sub.w	r3, r8, r3
 800a366:	4599      	cmp	r9, r3
 800a368:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a36c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a370:	d133      	bne.n	800a3da <_dtoa_r+0x62a>
 800a372:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a376:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a37e:	dc1a      	bgt.n	800a3b6 <_dtoa_r+0x606>
 800a380:	eeb4 7b46 	vcmp.f64	d7, d6
 800a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a388:	d103      	bne.n	800a392 <_dtoa_r+0x5e2>
 800a38a:	ee15 3a10 	vmov	r3, s10
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	d411      	bmi.n	800a3b6 <_dtoa_r+0x606>
 800a392:	4629      	mov	r1, r5
 800a394:	4630      	mov	r0, r6
 800a396:	f000 fafd 	bl	800a994 <_Bfree>
 800a39a:	2300      	movs	r3, #0
 800a39c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a39e:	f888 3000 	strb.w	r3, [r8]
 800a3a2:	f10b 0301 	add.w	r3, fp, #1
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f43f ad4d 	beq.w	8009e4a <_dtoa_r+0x9a>
 800a3b0:	f8c3 8000 	str.w	r8, [r3]
 800a3b4:	e549      	b.n	8009e4a <_dtoa_r+0x9a>
 800a3b6:	465f      	mov	r7, fp
 800a3b8:	4643      	mov	r3, r8
 800a3ba:	4698      	mov	r8, r3
 800a3bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3c0:	2a39      	cmp	r2, #57	; 0x39
 800a3c2:	d106      	bne.n	800a3d2 <_dtoa_r+0x622>
 800a3c4:	9a00      	ldr	r2, [sp, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d1f7      	bne.n	800a3ba <_dtoa_r+0x60a>
 800a3ca:	9900      	ldr	r1, [sp, #0]
 800a3cc:	2230      	movs	r2, #48	; 0x30
 800a3ce:	3701      	adds	r7, #1
 800a3d0:	700a      	strb	r2, [r1, #0]
 800a3d2:	781a      	ldrb	r2, [r3, #0]
 800a3d4:	3201      	adds	r2, #1
 800a3d6:	701a      	strb	r2, [r3, #0]
 800a3d8:	e7ae      	b.n	800a338 <_dtoa_r+0x588>
 800a3da:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e6:	d1b2      	bne.n	800a34e <_dtoa_r+0x59e>
 800a3e8:	e7d3      	b.n	800a392 <_dtoa_r+0x5e2>
 800a3ea:	bf00      	nop
 800a3ec:	0800c0f0 	.word	0x0800c0f0
 800a3f0:	0800c0c8 	.word	0x0800c0c8
 800a3f4:	9908      	ldr	r1, [sp, #32]
 800a3f6:	2900      	cmp	r1, #0
 800a3f8:	f000 80d1 	beq.w	800a59e <_dtoa_r+0x7ee>
 800a3fc:	9907      	ldr	r1, [sp, #28]
 800a3fe:	2901      	cmp	r1, #1
 800a400:	f300 80b4 	bgt.w	800a56c <_dtoa_r+0x7bc>
 800a404:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a406:	2900      	cmp	r1, #0
 800a408:	f000 80ac 	beq.w	800a564 <_dtoa_r+0x7b4>
 800a40c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a410:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a414:	461c      	mov	r4, r3
 800a416:	930a      	str	r3, [sp, #40]	; 0x28
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	4413      	add	r3, r2
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	2101      	movs	r1, #1
 800a422:	4413      	add	r3, r2
 800a424:	4630      	mov	r0, r6
 800a426:	9306      	str	r3, [sp, #24]
 800a428:	f000 fb70 	bl	800ab0c <__i2b>
 800a42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a42e:	4607      	mov	r7, r0
 800a430:	f1b8 0f00 	cmp.w	r8, #0
 800a434:	dd0d      	ble.n	800a452 <_dtoa_r+0x6a2>
 800a436:	9a06      	ldr	r2, [sp, #24]
 800a438:	2a00      	cmp	r2, #0
 800a43a:	dd0a      	ble.n	800a452 <_dtoa_r+0x6a2>
 800a43c:	4542      	cmp	r2, r8
 800a43e:	9905      	ldr	r1, [sp, #20]
 800a440:	bfa8      	it	ge
 800a442:	4642      	movge	r2, r8
 800a444:	1a89      	subs	r1, r1, r2
 800a446:	9105      	str	r1, [sp, #20]
 800a448:	9906      	ldr	r1, [sp, #24]
 800a44a:	eba8 0802 	sub.w	r8, r8, r2
 800a44e:	1a8a      	subs	r2, r1, r2
 800a450:	9206      	str	r2, [sp, #24]
 800a452:	b303      	cbz	r3, 800a496 <_dtoa_r+0x6e6>
 800a454:	9a08      	ldr	r2, [sp, #32]
 800a456:	2a00      	cmp	r2, #0
 800a458:	f000 80a6 	beq.w	800a5a8 <_dtoa_r+0x7f8>
 800a45c:	2c00      	cmp	r4, #0
 800a45e:	dd13      	ble.n	800a488 <_dtoa_r+0x6d8>
 800a460:	4639      	mov	r1, r7
 800a462:	4622      	mov	r2, r4
 800a464:	4630      	mov	r0, r6
 800a466:	930c      	str	r3, [sp, #48]	; 0x30
 800a468:	f000 fc0c 	bl	800ac84 <__pow5mult>
 800a46c:	462a      	mov	r2, r5
 800a46e:	4601      	mov	r1, r0
 800a470:	4607      	mov	r7, r0
 800a472:	4630      	mov	r0, r6
 800a474:	f000 fb60 	bl	800ab38 <__multiply>
 800a478:	4629      	mov	r1, r5
 800a47a:	900a      	str	r0, [sp, #40]	; 0x28
 800a47c:	4630      	mov	r0, r6
 800a47e:	f000 fa89 	bl	800a994 <_Bfree>
 800a482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a484:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a486:	4615      	mov	r5, r2
 800a488:	1b1a      	subs	r2, r3, r4
 800a48a:	d004      	beq.n	800a496 <_dtoa_r+0x6e6>
 800a48c:	4629      	mov	r1, r5
 800a48e:	4630      	mov	r0, r6
 800a490:	f000 fbf8 	bl	800ac84 <__pow5mult>
 800a494:	4605      	mov	r5, r0
 800a496:	2101      	movs	r1, #1
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 fb37 	bl	800ab0c <__i2b>
 800a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	f340 8082 	ble.w	800a5ac <_dtoa_r+0x7fc>
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 fbe9 	bl	800ac84 <__pow5mult>
 800a4b2:	9b07      	ldr	r3, [sp, #28]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	dd7b      	ble.n	800a5b2 <_dtoa_r+0x802>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a4be:	6922      	ldr	r2, [r4, #16]
 800a4c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a4c4:	6910      	ldr	r0, [r2, #16]
 800a4c6:	f000 fad1 	bl	800aa6c <__hi0bits>
 800a4ca:	f1c0 0020 	rsb	r0, r0, #32
 800a4ce:	9b06      	ldr	r3, [sp, #24]
 800a4d0:	4418      	add	r0, r3
 800a4d2:	f010 001f 	ands.w	r0, r0, #31
 800a4d6:	f000 808d 	beq.w	800a5f4 <_dtoa_r+0x844>
 800a4da:	f1c0 0220 	rsb	r2, r0, #32
 800a4de:	2a04      	cmp	r2, #4
 800a4e0:	f340 8086 	ble.w	800a5f0 <_dtoa_r+0x840>
 800a4e4:	f1c0 001c 	rsb	r0, r0, #28
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	4403      	add	r3, r0
 800a4ec:	9305      	str	r3, [sp, #20]
 800a4ee:	9b06      	ldr	r3, [sp, #24]
 800a4f0:	4403      	add	r3, r0
 800a4f2:	4480      	add	r8, r0
 800a4f4:	9306      	str	r3, [sp, #24]
 800a4f6:	9b05      	ldr	r3, [sp, #20]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dd05      	ble.n	800a508 <_dtoa_r+0x758>
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	461a      	mov	r2, r3
 800a500:	4630      	mov	r0, r6
 800a502:	f000 fc19 	bl	800ad38 <__lshift>
 800a506:	4605      	mov	r5, r0
 800a508:	9b06      	ldr	r3, [sp, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd05      	ble.n	800a51a <_dtoa_r+0x76a>
 800a50e:	4621      	mov	r1, r4
 800a510:	461a      	mov	r2, r3
 800a512:	4630      	mov	r0, r6
 800a514:	f000 fc10 	bl	800ad38 <__lshift>
 800a518:	4604      	mov	r4, r0
 800a51a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d06b      	beq.n	800a5f8 <_dtoa_r+0x848>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 fc74 	bl	800ae10 <__mcmp>
 800a528:	2800      	cmp	r0, #0
 800a52a:	da65      	bge.n	800a5f8 <_dtoa_r+0x848>
 800a52c:	2300      	movs	r3, #0
 800a52e:	4629      	mov	r1, r5
 800a530:	220a      	movs	r2, #10
 800a532:	4630      	mov	r0, r6
 800a534:	f000 fa50 	bl	800a9d8 <__multadd>
 800a538:	9b08      	ldr	r3, [sp, #32]
 800a53a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a53e:	4605      	mov	r5, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 8192 	beq.w	800a86a <_dtoa_r+0xaba>
 800a546:	4639      	mov	r1, r7
 800a548:	2300      	movs	r3, #0
 800a54a:	220a      	movs	r2, #10
 800a54c:	4630      	mov	r0, r6
 800a54e:	f000 fa43 	bl	800a9d8 <__multadd>
 800a552:	f1ba 0f00 	cmp.w	sl, #0
 800a556:	4607      	mov	r7, r0
 800a558:	f300 808e 	bgt.w	800a678 <_dtoa_r+0x8c8>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	dc51      	bgt.n	800a606 <_dtoa_r+0x856>
 800a562:	e089      	b.n	800a678 <_dtoa_r+0x8c8>
 800a564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a566:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a56a:	e751      	b.n	800a410 <_dtoa_r+0x660>
 800a56c:	f109 34ff 	add.w	r4, r9, #4294967295
 800a570:	42a3      	cmp	r3, r4
 800a572:	bfbf      	itttt	lt
 800a574:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a576:	1ae3      	sublt	r3, r4, r3
 800a578:	18d2      	addlt	r2, r2, r3
 800a57a:	4613      	movlt	r3, r2
 800a57c:	bfb7      	itett	lt
 800a57e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a580:	1b1c      	subge	r4, r3, r4
 800a582:	4623      	movlt	r3, r4
 800a584:	2400      	movlt	r4, #0
 800a586:	f1b9 0f00 	cmp.w	r9, #0
 800a58a:	bfb5      	itete	lt
 800a58c:	9a05      	ldrlt	r2, [sp, #20]
 800a58e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a592:	eba2 0809 	sublt.w	r8, r2, r9
 800a596:	464a      	movge	r2, r9
 800a598:	bfb8      	it	lt
 800a59a:	2200      	movlt	r2, #0
 800a59c:	e73b      	b.n	800a416 <_dtoa_r+0x666>
 800a59e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a5a2:	9f08      	ldr	r7, [sp, #32]
 800a5a4:	461c      	mov	r4, r3
 800a5a6:	e743      	b.n	800a430 <_dtoa_r+0x680>
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	e76f      	b.n	800a48c <_dtoa_r+0x6dc>
 800a5ac:	9b07      	ldr	r3, [sp, #28]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	dc18      	bgt.n	800a5e4 <_dtoa_r+0x834>
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	b9b3      	cbnz	r3, 800a5e4 <_dtoa_r+0x834>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a5bc:	b9a2      	cbnz	r2, 800a5e8 <_dtoa_r+0x838>
 800a5be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5c2:	0d12      	lsrs	r2, r2, #20
 800a5c4:	0512      	lsls	r2, r2, #20
 800a5c6:	b18a      	cbz	r2, 800a5ec <_dtoa_r+0x83c>
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	9b06      	ldr	r3, [sp, #24]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f47f af6f 	bne.w	800a4be <_dtoa_r+0x70e>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	e774      	b.n	800a4ce <_dtoa_r+0x71e>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e7f6      	b.n	800a5d6 <_dtoa_r+0x826>
 800a5e8:	9b02      	ldr	r3, [sp, #8]
 800a5ea:	e7f4      	b.n	800a5d6 <_dtoa_r+0x826>
 800a5ec:	920a      	str	r2, [sp, #40]	; 0x28
 800a5ee:	e7f3      	b.n	800a5d8 <_dtoa_r+0x828>
 800a5f0:	d081      	beq.n	800a4f6 <_dtoa_r+0x746>
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	301c      	adds	r0, #28
 800a5f6:	e777      	b.n	800a4e8 <_dtoa_r+0x738>
 800a5f8:	f1b9 0f00 	cmp.w	r9, #0
 800a5fc:	dc37      	bgt.n	800a66e <_dtoa_r+0x8be>
 800a5fe:	9b07      	ldr	r3, [sp, #28]
 800a600:	2b02      	cmp	r3, #2
 800a602:	dd34      	ble.n	800a66e <_dtoa_r+0x8be>
 800a604:	46ca      	mov	sl, r9
 800a606:	f1ba 0f00 	cmp.w	sl, #0
 800a60a:	d10d      	bne.n	800a628 <_dtoa_r+0x878>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4653      	mov	r3, sl
 800a610:	2205      	movs	r2, #5
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f9e0 	bl	800a9d8 <__multadd>
 800a618:	4601      	mov	r1, r0
 800a61a:	4604      	mov	r4, r0
 800a61c:	4628      	mov	r0, r5
 800a61e:	f000 fbf7 	bl	800ae10 <__mcmp>
 800a622:	2800      	cmp	r0, #0
 800a624:	f73f adde 	bgt.w	800a1e4 <_dtoa_r+0x434>
 800a628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a62a:	f8dd 8000 	ldr.w	r8, [sp]
 800a62e:	ea6f 0b03 	mvn.w	fp, r3
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	4621      	mov	r1, r4
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f9ab 	bl	800a994 <_Bfree>
 800a63e:	2f00      	cmp	r7, #0
 800a640:	f43f aea7 	beq.w	800a392 <_dtoa_r+0x5e2>
 800a644:	f1b9 0f00 	cmp.w	r9, #0
 800a648:	d005      	beq.n	800a656 <_dtoa_r+0x8a6>
 800a64a:	45b9      	cmp	r9, r7
 800a64c:	d003      	beq.n	800a656 <_dtoa_r+0x8a6>
 800a64e:	4649      	mov	r1, r9
 800a650:	4630      	mov	r0, r6
 800a652:	f000 f99f 	bl	800a994 <_Bfree>
 800a656:	4639      	mov	r1, r7
 800a658:	4630      	mov	r0, r6
 800a65a:	f000 f99b 	bl	800a994 <_Bfree>
 800a65e:	e698      	b.n	800a392 <_dtoa_r+0x5e2>
 800a660:	2400      	movs	r4, #0
 800a662:	4627      	mov	r7, r4
 800a664:	e7e0      	b.n	800a628 <_dtoa_r+0x878>
 800a666:	46bb      	mov	fp, r7
 800a668:	4604      	mov	r4, r0
 800a66a:	4607      	mov	r7, r0
 800a66c:	e5ba      	b.n	800a1e4 <_dtoa_r+0x434>
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	46ca      	mov	sl, r9
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 8100 	beq.w	800a878 <_dtoa_r+0xac8>
 800a678:	f1b8 0f00 	cmp.w	r8, #0
 800a67c:	dd05      	ble.n	800a68a <_dtoa_r+0x8da>
 800a67e:	4639      	mov	r1, r7
 800a680:	4642      	mov	r2, r8
 800a682:	4630      	mov	r0, r6
 800a684:	f000 fb58 	bl	800ad38 <__lshift>
 800a688:	4607      	mov	r7, r0
 800a68a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d05d      	beq.n	800a74c <_dtoa_r+0x99c>
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	4630      	mov	r0, r6
 800a694:	f000 f93e 	bl	800a914 <_Balloc>
 800a698:	4680      	mov	r8, r0
 800a69a:	b928      	cbnz	r0, 800a6a8 <_dtoa_r+0x8f8>
 800a69c:	4b82      	ldr	r3, [pc, #520]	; (800a8a8 <_dtoa_r+0xaf8>)
 800a69e:	4602      	mov	r2, r0
 800a6a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6a4:	f7ff bb9a 	b.w	8009ddc <_dtoa_r+0x2c>
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	3202      	adds	r2, #2
 800a6ac:	0092      	lsls	r2, r2, #2
 800a6ae:	f107 010c 	add.w	r1, r7, #12
 800a6b2:	300c      	adds	r0, #12
 800a6b4:	f000 f914 	bl	800a8e0 <memcpy>
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	4641      	mov	r1, r8
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f000 fb3b 	bl	800ad38 <__lshift>
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	9305      	str	r3, [sp, #20]
 800a6c8:	9b00      	ldr	r3, [sp, #0]
 800a6ca:	4453      	add	r3, sl
 800a6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ce:	9b02      	ldr	r3, [sp, #8]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	46b9      	mov	r9, r7
 800a6d6:	9308      	str	r3, [sp, #32]
 800a6d8:	4607      	mov	r7, r0
 800a6da:	9b05      	ldr	r3, [sp, #20]
 800a6dc:	4621      	mov	r1, r4
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	f7ff fad8 	bl	8009c98 <quorem>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	3330      	adds	r3, #48	; 0x30
 800a6ec:	9006      	str	r0, [sp, #24]
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f4:	f000 fb8c 	bl	800ae10 <__mcmp>
 800a6f8:	463a      	mov	r2, r7
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	4630      	mov	r0, r6
 800a700:	f000 fba2 	bl	800ae48 <__mdiff>
 800a704:	68c2      	ldr	r2, [r0, #12]
 800a706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a708:	4680      	mov	r8, r0
 800a70a:	bb0a      	cbnz	r2, 800a750 <_dtoa_r+0x9a0>
 800a70c:	4601      	mov	r1, r0
 800a70e:	4628      	mov	r0, r5
 800a710:	f000 fb7e 	bl	800ae10 <__mcmp>
 800a714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a716:	4602      	mov	r2, r0
 800a718:	4641      	mov	r1, r8
 800a71a:	4630      	mov	r0, r6
 800a71c:	920e      	str	r2, [sp, #56]	; 0x38
 800a71e:	930a      	str	r3, [sp, #40]	; 0x28
 800a720:	f000 f938 	bl	800a994 <_Bfree>
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a728:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a72c:	ea43 0102 	orr.w	r1, r3, r2
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	430b      	orrs	r3, r1
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	d10d      	bne.n	800a754 <_dtoa_r+0x9a4>
 800a738:	2b39      	cmp	r3, #57	; 0x39
 800a73a:	d029      	beq.n	800a790 <_dtoa_r+0x9e0>
 800a73c:	f1ba 0f00 	cmp.w	sl, #0
 800a740:	dd01      	ble.n	800a746 <_dtoa_r+0x996>
 800a742:	9b06      	ldr	r3, [sp, #24]
 800a744:	3331      	adds	r3, #49	; 0x31
 800a746:	9a02      	ldr	r2, [sp, #8]
 800a748:	7013      	strb	r3, [r2, #0]
 800a74a:	e774      	b.n	800a636 <_dtoa_r+0x886>
 800a74c:	4638      	mov	r0, r7
 800a74e:	e7b8      	b.n	800a6c2 <_dtoa_r+0x912>
 800a750:	2201      	movs	r2, #1
 800a752:	e7e1      	b.n	800a718 <_dtoa_r+0x968>
 800a754:	f1ba 0f00 	cmp.w	sl, #0
 800a758:	db06      	blt.n	800a768 <_dtoa_r+0x9b8>
 800a75a:	9907      	ldr	r1, [sp, #28]
 800a75c:	ea41 0a0a 	orr.w	sl, r1, sl
 800a760:	9908      	ldr	r1, [sp, #32]
 800a762:	ea5a 0101 	orrs.w	r1, sl, r1
 800a766:	d120      	bne.n	800a7aa <_dtoa_r+0x9fa>
 800a768:	2a00      	cmp	r2, #0
 800a76a:	ddec      	ble.n	800a746 <_dtoa_r+0x996>
 800a76c:	4629      	mov	r1, r5
 800a76e:	2201      	movs	r2, #1
 800a770:	4630      	mov	r0, r6
 800a772:	9305      	str	r3, [sp, #20]
 800a774:	f000 fae0 	bl	800ad38 <__lshift>
 800a778:	4621      	mov	r1, r4
 800a77a:	4605      	mov	r5, r0
 800a77c:	f000 fb48 	bl	800ae10 <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	9b05      	ldr	r3, [sp, #20]
 800a784:	dc02      	bgt.n	800a78c <_dtoa_r+0x9dc>
 800a786:	d1de      	bne.n	800a746 <_dtoa_r+0x996>
 800a788:	07da      	lsls	r2, r3, #31
 800a78a:	d5dc      	bpl.n	800a746 <_dtoa_r+0x996>
 800a78c:	2b39      	cmp	r3, #57	; 0x39
 800a78e:	d1d8      	bne.n	800a742 <_dtoa_r+0x992>
 800a790:	9a02      	ldr	r2, [sp, #8]
 800a792:	2339      	movs	r3, #57	; 0x39
 800a794:	7013      	strb	r3, [r2, #0]
 800a796:	4643      	mov	r3, r8
 800a798:	4698      	mov	r8, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a7a0:	2a39      	cmp	r2, #57	; 0x39
 800a7a2:	d051      	beq.n	800a848 <_dtoa_r+0xa98>
 800a7a4:	3201      	adds	r2, #1
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	e745      	b.n	800a636 <_dtoa_r+0x886>
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	dd03      	ble.n	800a7b6 <_dtoa_r+0xa06>
 800a7ae:	2b39      	cmp	r3, #57	; 0x39
 800a7b0:	d0ee      	beq.n	800a790 <_dtoa_r+0x9e0>
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	e7c7      	b.n	800a746 <_dtoa_r+0x996>
 800a7b6:	9a05      	ldr	r2, [sp, #20]
 800a7b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7be:	428a      	cmp	r2, r1
 800a7c0:	d02b      	beq.n	800a81a <_dtoa_r+0xa6a>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	220a      	movs	r2, #10
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f000 f905 	bl	800a9d8 <__multadd>
 800a7ce:	45b9      	cmp	r9, r7
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	f04f 0300 	mov.w	r3, #0
 800a7d6:	f04f 020a 	mov.w	r2, #10
 800a7da:	4649      	mov	r1, r9
 800a7dc:	4630      	mov	r0, r6
 800a7de:	d107      	bne.n	800a7f0 <_dtoa_r+0xa40>
 800a7e0:	f000 f8fa 	bl	800a9d8 <__multadd>
 800a7e4:	4681      	mov	r9, r0
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	e774      	b.n	800a6da <_dtoa_r+0x92a>
 800a7f0:	f000 f8f2 	bl	800a9d8 <__multadd>
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4681      	mov	r9, r0
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	f000 f8eb 	bl	800a9d8 <__multadd>
 800a802:	4607      	mov	r7, r0
 800a804:	e7f0      	b.n	800a7e8 <_dtoa_r+0xa38>
 800a806:	f1ba 0f00 	cmp.w	sl, #0
 800a80a:	9a00      	ldr	r2, [sp, #0]
 800a80c:	bfcc      	ite	gt
 800a80e:	46d0      	movgt	r8, sl
 800a810:	f04f 0801 	movle.w	r8, #1
 800a814:	4490      	add	r8, r2
 800a816:	f04f 0900 	mov.w	r9, #0
 800a81a:	4629      	mov	r1, r5
 800a81c:	2201      	movs	r2, #1
 800a81e:	4630      	mov	r0, r6
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	f000 fa89 	bl	800ad38 <__lshift>
 800a826:	4621      	mov	r1, r4
 800a828:	4605      	mov	r5, r0
 800a82a:	f000 faf1 	bl	800ae10 <__mcmp>
 800a82e:	2800      	cmp	r0, #0
 800a830:	dcb1      	bgt.n	800a796 <_dtoa_r+0x9e6>
 800a832:	d102      	bne.n	800a83a <_dtoa_r+0xa8a>
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	07db      	lsls	r3, r3, #31
 800a838:	d4ad      	bmi.n	800a796 <_dtoa_r+0x9e6>
 800a83a:	4643      	mov	r3, r8
 800a83c:	4698      	mov	r8, r3
 800a83e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a842:	2a30      	cmp	r2, #48	; 0x30
 800a844:	d0fa      	beq.n	800a83c <_dtoa_r+0xa8c>
 800a846:	e6f6      	b.n	800a636 <_dtoa_r+0x886>
 800a848:	9a00      	ldr	r2, [sp, #0]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d1a4      	bne.n	800a798 <_dtoa_r+0x9e8>
 800a84e:	f10b 0b01 	add.w	fp, fp, #1
 800a852:	2331      	movs	r3, #49	; 0x31
 800a854:	e778      	b.n	800a748 <_dtoa_r+0x998>
 800a856:	4b15      	ldr	r3, [pc, #84]	; (800a8ac <_dtoa_r+0xafc>)
 800a858:	f7ff bb12 	b.w	8009e80 <_dtoa_r+0xd0>
 800a85c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f aaee 	bne.w	8009e40 <_dtoa_r+0x90>
 800a864:	4b12      	ldr	r3, [pc, #72]	; (800a8b0 <_dtoa_r+0xb00>)
 800a866:	f7ff bb0b 	b.w	8009e80 <_dtoa_r+0xd0>
 800a86a:	f1ba 0f00 	cmp.w	sl, #0
 800a86e:	dc03      	bgt.n	800a878 <_dtoa_r+0xac8>
 800a870:	9b07      	ldr	r3, [sp, #28]
 800a872:	2b02      	cmp	r3, #2
 800a874:	f73f aec7 	bgt.w	800a606 <_dtoa_r+0x856>
 800a878:	f8dd 8000 	ldr.w	r8, [sp]
 800a87c:	4621      	mov	r1, r4
 800a87e:	4628      	mov	r0, r5
 800a880:	f7ff fa0a 	bl	8009c98 <quorem>
 800a884:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a888:	f808 3b01 	strb.w	r3, [r8], #1
 800a88c:	9a00      	ldr	r2, [sp, #0]
 800a88e:	eba8 0202 	sub.w	r2, r8, r2
 800a892:	4592      	cmp	sl, r2
 800a894:	ddb7      	ble.n	800a806 <_dtoa_r+0xa56>
 800a896:	4629      	mov	r1, r5
 800a898:	2300      	movs	r3, #0
 800a89a:	220a      	movs	r2, #10
 800a89c:	4630      	mov	r0, r6
 800a89e:	f000 f89b 	bl	800a9d8 <__multadd>
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	e7ea      	b.n	800a87c <_dtoa_r+0xacc>
 800a8a6:	bf00      	nop
 800a8a8:	0800c050 	.word	0x0800c050
 800a8ac:	0800bf0c 	.word	0x0800bf0c
 800a8b0:	0800bfe4 	.word	0x0800bfe4

0800a8b4 <fiprintf>:
 800a8b4:	b40e      	push	{r1, r2, r3}
 800a8b6:	b503      	push	{r0, r1, lr}
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	4805      	ldr	r0, [pc, #20]	; (800a8d4 <fiprintf+0x20>)
 800a8be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c2:	6800      	ldr	r0, [r0, #0]
 800a8c4:	9301      	str	r3, [sp, #4]
 800a8c6:	f000 fd5d 	bl	800b384 <_vfiprintf_r>
 800a8ca:	b002      	add	sp, #8
 800a8cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8d0:	b003      	add	sp, #12
 800a8d2:	4770      	bx	lr
 800a8d4:	200001bc 	.word	0x200001bc

0800a8d8 <_localeconv_r>:
 800a8d8:	4800      	ldr	r0, [pc, #0]	; (800a8dc <_localeconv_r+0x4>)
 800a8da:	4770      	bx	lr
 800a8dc:	20000310 	.word	0x20000310

0800a8e0 <memcpy>:
 800a8e0:	440a      	add	r2, r1
 800a8e2:	4291      	cmp	r1, r2
 800a8e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8e8:	d100      	bne.n	800a8ec <memcpy+0xc>
 800a8ea:	4770      	bx	lr
 800a8ec:	b510      	push	{r4, lr}
 800a8ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f6:	4291      	cmp	r1, r2
 800a8f8:	d1f9      	bne.n	800a8ee <memcpy+0xe>
 800a8fa:	bd10      	pop	{r4, pc}

0800a8fc <__malloc_lock>:
 800a8fc:	4801      	ldr	r0, [pc, #4]	; (800a904 <__malloc_lock+0x8>)
 800a8fe:	f001 b8f1 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800a902:	bf00      	nop
 800a904:	2000085c 	.word	0x2000085c

0800a908 <__malloc_unlock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_unlock+0x8>)
 800a90a:	f001 b8ec 	b.w	800bae6 <__retarget_lock_release_recursive>
 800a90e:	bf00      	nop
 800a910:	2000085c 	.word	0x2000085c

0800a914 <_Balloc>:
 800a914:	b570      	push	{r4, r5, r6, lr}
 800a916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	b976      	cbnz	r6, 800a93c <_Balloc+0x28>
 800a91e:	2010      	movs	r0, #16
 800a920:	f7fe fbe6 	bl	80090f0 <malloc>
 800a924:	4602      	mov	r2, r0
 800a926:	6260      	str	r0, [r4, #36]	; 0x24
 800a928:	b920      	cbnz	r0, 800a934 <_Balloc+0x20>
 800a92a:	4b18      	ldr	r3, [pc, #96]	; (800a98c <_Balloc+0x78>)
 800a92c:	4818      	ldr	r0, [pc, #96]	; (800a990 <_Balloc+0x7c>)
 800a92e:	2166      	movs	r1, #102	; 0x66
 800a930:	f7ff f994 	bl	8009c5c <__assert_func>
 800a934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a938:	6006      	str	r6, [r0, #0]
 800a93a:	60c6      	str	r6, [r0, #12]
 800a93c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a93e:	68f3      	ldr	r3, [r6, #12]
 800a940:	b183      	cbz	r3, 800a964 <_Balloc+0x50>
 800a942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a94a:	b9b8      	cbnz	r0, 800a97c <_Balloc+0x68>
 800a94c:	2101      	movs	r1, #1
 800a94e:	fa01 f605 	lsl.w	r6, r1, r5
 800a952:	1d72      	adds	r2, r6, #5
 800a954:	0092      	lsls	r2, r2, #2
 800a956:	4620      	mov	r0, r4
 800a958:	f000 fb5a 	bl	800b010 <_calloc_r>
 800a95c:	b160      	cbz	r0, 800a978 <_Balloc+0x64>
 800a95e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a962:	e00e      	b.n	800a982 <_Balloc+0x6e>
 800a964:	2221      	movs	r2, #33	; 0x21
 800a966:	2104      	movs	r1, #4
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fb51 	bl	800b010 <_calloc_r>
 800a96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a970:	60f0      	str	r0, [r6, #12]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e4      	bne.n	800a942 <_Balloc+0x2e>
 800a978:	2000      	movs	r0, #0
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	6802      	ldr	r2, [r0, #0]
 800a97e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a982:	2300      	movs	r3, #0
 800a984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a988:	e7f7      	b.n	800a97a <_Balloc+0x66>
 800a98a:	bf00      	nop
 800a98c:	0800bf30 	.word	0x0800bf30
 800a990:	0800c061 	.word	0x0800c061

0800a994 <_Bfree>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a998:	4605      	mov	r5, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	b976      	cbnz	r6, 800a9bc <_Bfree+0x28>
 800a99e:	2010      	movs	r0, #16
 800a9a0:	f7fe fba6 	bl	80090f0 <malloc>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	6268      	str	r0, [r5, #36]	; 0x24
 800a9a8:	b920      	cbnz	r0, 800a9b4 <_Bfree+0x20>
 800a9aa:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <_Bfree+0x3c>)
 800a9ac:	4809      	ldr	r0, [pc, #36]	; (800a9d4 <_Bfree+0x40>)
 800a9ae:	218a      	movs	r1, #138	; 0x8a
 800a9b0:	f7ff f954 	bl	8009c5c <__assert_func>
 800a9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9b8:	6006      	str	r6, [r0, #0]
 800a9ba:	60c6      	str	r6, [r0, #12]
 800a9bc:	b13c      	cbz	r4, 800a9ce <_Bfree+0x3a>
 800a9be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9c0:	6862      	ldr	r2, [r4, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9c8:	6021      	str	r1, [r4, #0]
 800a9ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	0800bf30 	.word	0x0800bf30
 800a9d4:	0800c061 	.word	0x0800c061

0800a9d8 <__multadd>:
 800a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9dc:	690e      	ldr	r6, [r1, #16]
 800a9de:	4607      	mov	r7, r0
 800a9e0:	4698      	mov	r8, r3
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f101 0014 	add.w	r0, r1, #20
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6805      	ldr	r5, [r0, #0]
 800a9ec:	b2a9      	uxth	r1, r5
 800a9ee:	fb02 8101 	mla	r1, r2, r1, r8
 800a9f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a9f6:	0c2d      	lsrs	r5, r5, #16
 800a9f8:	fb02 c505 	mla	r5, r2, r5, ip
 800a9fc:	b289      	uxth	r1, r1
 800a9fe:	3301      	adds	r3, #1
 800aa00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800aa04:	429e      	cmp	r6, r3
 800aa06:	f840 1b04 	str.w	r1, [r0], #4
 800aa0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800aa0e:	dcec      	bgt.n	800a9ea <__multadd+0x12>
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	d022      	beq.n	800aa5c <__multadd+0x84>
 800aa16:	68a3      	ldr	r3, [r4, #8]
 800aa18:	42b3      	cmp	r3, r6
 800aa1a:	dc19      	bgt.n	800aa50 <__multadd+0x78>
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	4638      	mov	r0, r7
 800aa20:	3101      	adds	r1, #1
 800aa22:	f7ff ff77 	bl	800a914 <_Balloc>
 800aa26:	4605      	mov	r5, r0
 800aa28:	b928      	cbnz	r0, 800aa36 <__multadd+0x5e>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <__multadd+0x8c>)
 800aa2e:	480e      	ldr	r0, [pc, #56]	; (800aa68 <__multadd+0x90>)
 800aa30:	21b5      	movs	r1, #181	; 0xb5
 800aa32:	f7ff f913 	bl	8009c5c <__assert_func>
 800aa36:	6922      	ldr	r2, [r4, #16]
 800aa38:	3202      	adds	r2, #2
 800aa3a:	f104 010c 	add.w	r1, r4, #12
 800aa3e:	0092      	lsls	r2, r2, #2
 800aa40:	300c      	adds	r0, #12
 800aa42:	f7ff ff4d 	bl	800a8e0 <memcpy>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff ffa3 	bl	800a994 <_Bfree>
 800aa4e:	462c      	mov	r4, r5
 800aa50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800aa54:	3601      	adds	r6, #1
 800aa56:	f8c3 8014 	str.w	r8, [r3, #20]
 800aa5a:	6126      	str	r6, [r4, #16]
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa62:	bf00      	nop
 800aa64:	0800c050 	.word	0x0800c050
 800aa68:	0800c061 	.word	0x0800c061

0800aa6c <__hi0bits>:
 800aa6c:	0c03      	lsrs	r3, r0, #16
 800aa6e:	041b      	lsls	r3, r3, #16
 800aa70:	b9d3      	cbnz	r3, 800aaa8 <__hi0bits+0x3c>
 800aa72:	0400      	lsls	r0, r0, #16
 800aa74:	2310      	movs	r3, #16
 800aa76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa7a:	bf04      	itt	eq
 800aa7c:	0200      	lsleq	r0, r0, #8
 800aa7e:	3308      	addeq	r3, #8
 800aa80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa84:	bf04      	itt	eq
 800aa86:	0100      	lsleq	r0, r0, #4
 800aa88:	3304      	addeq	r3, #4
 800aa8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa8e:	bf04      	itt	eq
 800aa90:	0080      	lsleq	r0, r0, #2
 800aa92:	3302      	addeq	r3, #2
 800aa94:	2800      	cmp	r0, #0
 800aa96:	db05      	blt.n	800aaa4 <__hi0bits+0x38>
 800aa98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa9c:	f103 0301 	add.w	r3, r3, #1
 800aaa0:	bf08      	it	eq
 800aaa2:	2320      	moveq	r3, #32
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	4770      	bx	lr
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	e7e4      	b.n	800aa76 <__hi0bits+0xa>

0800aaac <__lo0bits>:
 800aaac:	6803      	ldr	r3, [r0, #0]
 800aaae:	f013 0207 	ands.w	r2, r3, #7
 800aab2:	4601      	mov	r1, r0
 800aab4:	d00b      	beq.n	800aace <__lo0bits+0x22>
 800aab6:	07da      	lsls	r2, r3, #31
 800aab8:	d424      	bmi.n	800ab04 <__lo0bits+0x58>
 800aaba:	0798      	lsls	r0, r3, #30
 800aabc:	bf49      	itett	mi
 800aabe:	085b      	lsrmi	r3, r3, #1
 800aac0:	089b      	lsrpl	r3, r3, #2
 800aac2:	2001      	movmi	r0, #1
 800aac4:	600b      	strmi	r3, [r1, #0]
 800aac6:	bf5c      	itt	pl
 800aac8:	600b      	strpl	r3, [r1, #0]
 800aaca:	2002      	movpl	r0, #2
 800aacc:	4770      	bx	lr
 800aace:	b298      	uxth	r0, r3
 800aad0:	b9b0      	cbnz	r0, 800ab00 <__lo0bits+0x54>
 800aad2:	0c1b      	lsrs	r3, r3, #16
 800aad4:	2010      	movs	r0, #16
 800aad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aada:	bf04      	itt	eq
 800aadc:	0a1b      	lsreq	r3, r3, #8
 800aade:	3008      	addeq	r0, #8
 800aae0:	071a      	lsls	r2, r3, #28
 800aae2:	bf04      	itt	eq
 800aae4:	091b      	lsreq	r3, r3, #4
 800aae6:	3004      	addeq	r0, #4
 800aae8:	079a      	lsls	r2, r3, #30
 800aaea:	bf04      	itt	eq
 800aaec:	089b      	lsreq	r3, r3, #2
 800aaee:	3002      	addeq	r0, #2
 800aaf0:	07da      	lsls	r2, r3, #31
 800aaf2:	d403      	bmi.n	800aafc <__lo0bits+0x50>
 800aaf4:	085b      	lsrs	r3, r3, #1
 800aaf6:	f100 0001 	add.w	r0, r0, #1
 800aafa:	d005      	beq.n	800ab08 <__lo0bits+0x5c>
 800aafc:	600b      	str	r3, [r1, #0]
 800aafe:	4770      	bx	lr
 800ab00:	4610      	mov	r0, r2
 800ab02:	e7e8      	b.n	800aad6 <__lo0bits+0x2a>
 800ab04:	2000      	movs	r0, #0
 800ab06:	4770      	bx	lr
 800ab08:	2020      	movs	r0, #32
 800ab0a:	4770      	bx	lr

0800ab0c <__i2b>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	460c      	mov	r4, r1
 800ab10:	2101      	movs	r1, #1
 800ab12:	f7ff feff 	bl	800a914 <_Balloc>
 800ab16:	4602      	mov	r2, r0
 800ab18:	b928      	cbnz	r0, 800ab26 <__i2b+0x1a>
 800ab1a:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <__i2b+0x24>)
 800ab1c:	4805      	ldr	r0, [pc, #20]	; (800ab34 <__i2b+0x28>)
 800ab1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab22:	f7ff f89b 	bl	8009c5c <__assert_func>
 800ab26:	2301      	movs	r3, #1
 800ab28:	6144      	str	r4, [r0, #20]
 800ab2a:	6103      	str	r3, [r0, #16]
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800c050 	.word	0x0800c050
 800ab34:	0800c061 	.word	0x0800c061

0800ab38 <__multiply>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	690a      	ldr	r2, [r1, #16]
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	bfb8      	it	lt
 800ab46:	460b      	movlt	r3, r1
 800ab48:	460d      	mov	r5, r1
 800ab4a:	bfbc      	itt	lt
 800ab4c:	4625      	movlt	r5, r4
 800ab4e:	461c      	movlt	r4, r3
 800ab50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ab54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab58:	68ab      	ldr	r3, [r5, #8]
 800ab5a:	6869      	ldr	r1, [r5, #4]
 800ab5c:	eb0a 0709 	add.w	r7, sl, r9
 800ab60:	42bb      	cmp	r3, r7
 800ab62:	b085      	sub	sp, #20
 800ab64:	bfb8      	it	lt
 800ab66:	3101      	addlt	r1, #1
 800ab68:	f7ff fed4 	bl	800a914 <_Balloc>
 800ab6c:	b930      	cbnz	r0, 800ab7c <__multiply+0x44>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4b42      	ldr	r3, [pc, #264]	; (800ac7c <__multiply+0x144>)
 800ab72:	4843      	ldr	r0, [pc, #268]	; (800ac80 <__multiply+0x148>)
 800ab74:	f240 115d 	movw	r1, #349	; 0x15d
 800ab78:	f7ff f870 	bl	8009c5c <__assert_func>
 800ab7c:	f100 0614 	add.w	r6, r0, #20
 800ab80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ab84:	4633      	mov	r3, r6
 800ab86:	2200      	movs	r2, #0
 800ab88:	4543      	cmp	r3, r8
 800ab8a:	d31e      	bcc.n	800abca <__multiply+0x92>
 800ab8c:	f105 0c14 	add.w	ip, r5, #20
 800ab90:	f104 0314 	add.w	r3, r4, #20
 800ab94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ab98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ab9c:	9202      	str	r2, [sp, #8]
 800ab9e:	ebac 0205 	sub.w	r2, ip, r5
 800aba2:	3a15      	subs	r2, #21
 800aba4:	f022 0203 	bic.w	r2, r2, #3
 800aba8:	3204      	adds	r2, #4
 800abaa:	f105 0115 	add.w	r1, r5, #21
 800abae:	458c      	cmp	ip, r1
 800abb0:	bf38      	it	cc
 800abb2:	2204      	movcc	r2, #4
 800abb4:	9201      	str	r2, [sp, #4]
 800abb6:	9a02      	ldr	r2, [sp, #8]
 800abb8:	9303      	str	r3, [sp, #12]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d808      	bhi.n	800abd0 <__multiply+0x98>
 800abbe:	2f00      	cmp	r7, #0
 800abc0:	dc55      	bgt.n	800ac6e <__multiply+0x136>
 800abc2:	6107      	str	r7, [r0, #16]
 800abc4:	b005      	add	sp, #20
 800abc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abca:	f843 2b04 	str.w	r2, [r3], #4
 800abce:	e7db      	b.n	800ab88 <__multiply+0x50>
 800abd0:	f8b3 a000 	ldrh.w	sl, [r3]
 800abd4:	f1ba 0f00 	cmp.w	sl, #0
 800abd8:	d020      	beq.n	800ac1c <__multiply+0xe4>
 800abda:	f105 0e14 	add.w	lr, r5, #20
 800abde:	46b1      	mov	r9, r6
 800abe0:	2200      	movs	r2, #0
 800abe2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800abe6:	f8d9 b000 	ldr.w	fp, [r9]
 800abea:	b2a1      	uxth	r1, r4
 800abec:	fa1f fb8b 	uxth.w	fp, fp
 800abf0:	fb0a b101 	mla	r1, sl, r1, fp
 800abf4:	4411      	add	r1, r2
 800abf6:	f8d9 2000 	ldr.w	r2, [r9]
 800abfa:	0c24      	lsrs	r4, r4, #16
 800abfc:	0c12      	lsrs	r2, r2, #16
 800abfe:	fb0a 2404 	mla	r4, sl, r4, r2
 800ac02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ac06:	b289      	uxth	r1, r1
 800ac08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac0c:	45f4      	cmp	ip, lr
 800ac0e:	f849 1b04 	str.w	r1, [r9], #4
 800ac12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ac16:	d8e4      	bhi.n	800abe2 <__multiply+0xaa>
 800ac18:	9901      	ldr	r1, [sp, #4]
 800ac1a:	5072      	str	r2, [r6, r1]
 800ac1c:	9a03      	ldr	r2, [sp, #12]
 800ac1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac22:	3304      	adds	r3, #4
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	d01f      	beq.n	800ac6a <__multiply+0x132>
 800ac2a:	6834      	ldr	r4, [r6, #0]
 800ac2c:	f105 0114 	add.w	r1, r5, #20
 800ac30:	46b6      	mov	lr, r6
 800ac32:	f04f 0a00 	mov.w	sl, #0
 800ac36:	880a      	ldrh	r2, [r1, #0]
 800ac38:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ac3c:	fb09 b202 	mla	r2, r9, r2, fp
 800ac40:	4492      	add	sl, r2
 800ac42:	b2a4      	uxth	r4, r4
 800ac44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ac48:	f84e 4b04 	str.w	r4, [lr], #4
 800ac4c:	f851 4b04 	ldr.w	r4, [r1], #4
 800ac50:	f8be 2000 	ldrh.w	r2, [lr]
 800ac54:	0c24      	lsrs	r4, r4, #16
 800ac56:	fb09 2404 	mla	r4, r9, r4, r2
 800ac5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ac5e:	458c      	cmp	ip, r1
 800ac60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac64:	d8e7      	bhi.n	800ac36 <__multiply+0xfe>
 800ac66:	9a01      	ldr	r2, [sp, #4]
 800ac68:	50b4      	str	r4, [r6, r2]
 800ac6a:	3604      	adds	r6, #4
 800ac6c:	e7a3      	b.n	800abb6 <__multiply+0x7e>
 800ac6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1a5      	bne.n	800abc2 <__multiply+0x8a>
 800ac76:	3f01      	subs	r7, #1
 800ac78:	e7a1      	b.n	800abbe <__multiply+0x86>
 800ac7a:	bf00      	nop
 800ac7c:	0800c050 	.word	0x0800c050
 800ac80:	0800c061 	.word	0x0800c061

0800ac84 <__pow5mult>:
 800ac84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac88:	4615      	mov	r5, r2
 800ac8a:	f012 0203 	ands.w	r2, r2, #3
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460f      	mov	r7, r1
 800ac92:	d007      	beq.n	800aca4 <__pow5mult+0x20>
 800ac94:	4c25      	ldr	r4, [pc, #148]	; (800ad2c <__pow5mult+0xa8>)
 800ac96:	3a01      	subs	r2, #1
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac9e:	f7ff fe9b 	bl	800a9d8 <__multadd>
 800aca2:	4607      	mov	r7, r0
 800aca4:	10ad      	asrs	r5, r5, #2
 800aca6:	d03d      	beq.n	800ad24 <__pow5mult+0xa0>
 800aca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acaa:	b97c      	cbnz	r4, 800accc <__pow5mult+0x48>
 800acac:	2010      	movs	r0, #16
 800acae:	f7fe fa1f 	bl	80090f0 <malloc>
 800acb2:	4602      	mov	r2, r0
 800acb4:	6270      	str	r0, [r6, #36]	; 0x24
 800acb6:	b928      	cbnz	r0, 800acc4 <__pow5mult+0x40>
 800acb8:	4b1d      	ldr	r3, [pc, #116]	; (800ad30 <__pow5mult+0xac>)
 800acba:	481e      	ldr	r0, [pc, #120]	; (800ad34 <__pow5mult+0xb0>)
 800acbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acc0:	f7fe ffcc 	bl	8009c5c <__assert_func>
 800acc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acc8:	6004      	str	r4, [r0, #0]
 800acca:	60c4      	str	r4, [r0, #12]
 800accc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acd4:	b94c      	cbnz	r4, 800acea <__pow5mult+0x66>
 800acd6:	f240 2171 	movw	r1, #625	; 0x271
 800acda:	4630      	mov	r0, r6
 800acdc:	f7ff ff16 	bl	800ab0c <__i2b>
 800ace0:	2300      	movs	r3, #0
 800ace2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ace6:	4604      	mov	r4, r0
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	07eb      	lsls	r3, r5, #31
 800acf0:	d50a      	bpl.n	800ad08 <__pow5mult+0x84>
 800acf2:	4639      	mov	r1, r7
 800acf4:	4622      	mov	r2, r4
 800acf6:	4630      	mov	r0, r6
 800acf8:	f7ff ff1e 	bl	800ab38 <__multiply>
 800acfc:	4639      	mov	r1, r7
 800acfe:	4680      	mov	r8, r0
 800ad00:	4630      	mov	r0, r6
 800ad02:	f7ff fe47 	bl	800a994 <_Bfree>
 800ad06:	4647      	mov	r7, r8
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	d00b      	beq.n	800ad24 <__pow5mult+0xa0>
 800ad0c:	6820      	ldr	r0, [r4, #0]
 800ad0e:	b938      	cbnz	r0, 800ad20 <__pow5mult+0x9c>
 800ad10:	4622      	mov	r2, r4
 800ad12:	4621      	mov	r1, r4
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7ff ff0f 	bl	800ab38 <__multiply>
 800ad1a:	6020      	str	r0, [r4, #0]
 800ad1c:	f8c0 9000 	str.w	r9, [r0]
 800ad20:	4604      	mov	r4, r0
 800ad22:	e7e4      	b.n	800acee <__pow5mult+0x6a>
 800ad24:	4638      	mov	r0, r7
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800c1b8 	.word	0x0800c1b8
 800ad30:	0800bf30 	.word	0x0800bf30
 800ad34:	0800c061 	.word	0x0800c061

0800ad38 <__lshift>:
 800ad38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	6849      	ldr	r1, [r1, #4]
 800ad40:	6923      	ldr	r3, [r4, #16]
 800ad42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad46:	68a3      	ldr	r3, [r4, #8]
 800ad48:	4607      	mov	r7, r0
 800ad4a:	4691      	mov	r9, r2
 800ad4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad50:	f108 0601 	add.w	r6, r8, #1
 800ad54:	42b3      	cmp	r3, r6
 800ad56:	db0b      	blt.n	800ad70 <__lshift+0x38>
 800ad58:	4638      	mov	r0, r7
 800ad5a:	f7ff fddb 	bl	800a914 <_Balloc>
 800ad5e:	4605      	mov	r5, r0
 800ad60:	b948      	cbnz	r0, 800ad76 <__lshift+0x3e>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b28      	ldr	r3, [pc, #160]	; (800ae08 <__lshift+0xd0>)
 800ad66:	4829      	ldr	r0, [pc, #164]	; (800ae0c <__lshift+0xd4>)
 800ad68:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad6c:	f7fe ff76 	bl	8009c5c <__assert_func>
 800ad70:	3101      	adds	r1, #1
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	e7ee      	b.n	800ad54 <__lshift+0x1c>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f100 0114 	add.w	r1, r0, #20
 800ad7c:	f100 0210 	add.w	r2, r0, #16
 800ad80:	4618      	mov	r0, r3
 800ad82:	4553      	cmp	r3, sl
 800ad84:	db33      	blt.n	800adee <__lshift+0xb6>
 800ad86:	6920      	ldr	r0, [r4, #16]
 800ad88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad8c:	f104 0314 	add.w	r3, r4, #20
 800ad90:	f019 091f 	ands.w	r9, r9, #31
 800ad94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad9c:	d02b      	beq.n	800adf6 <__lshift+0xbe>
 800ad9e:	f1c9 0e20 	rsb	lr, r9, #32
 800ada2:	468a      	mov	sl, r1
 800ada4:	2200      	movs	r2, #0
 800ada6:	6818      	ldr	r0, [r3, #0]
 800ada8:	fa00 f009 	lsl.w	r0, r0, r9
 800adac:	4302      	orrs	r2, r0
 800adae:	f84a 2b04 	str.w	r2, [sl], #4
 800adb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb6:	459c      	cmp	ip, r3
 800adb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800adbc:	d8f3      	bhi.n	800ada6 <__lshift+0x6e>
 800adbe:	ebac 0304 	sub.w	r3, ip, r4
 800adc2:	3b15      	subs	r3, #21
 800adc4:	f023 0303 	bic.w	r3, r3, #3
 800adc8:	3304      	adds	r3, #4
 800adca:	f104 0015 	add.w	r0, r4, #21
 800adce:	4584      	cmp	ip, r0
 800add0:	bf38      	it	cc
 800add2:	2304      	movcc	r3, #4
 800add4:	50ca      	str	r2, [r1, r3]
 800add6:	b10a      	cbz	r2, 800addc <__lshift+0xa4>
 800add8:	f108 0602 	add.w	r6, r8, #2
 800addc:	3e01      	subs	r6, #1
 800adde:	4638      	mov	r0, r7
 800ade0:	612e      	str	r6, [r5, #16]
 800ade2:	4621      	mov	r1, r4
 800ade4:	f7ff fdd6 	bl	800a994 <_Bfree>
 800ade8:	4628      	mov	r0, r5
 800adea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adee:	f842 0f04 	str.w	r0, [r2, #4]!
 800adf2:	3301      	adds	r3, #1
 800adf4:	e7c5      	b.n	800ad82 <__lshift+0x4a>
 800adf6:	3904      	subs	r1, #4
 800adf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae00:	459c      	cmp	ip, r3
 800ae02:	d8f9      	bhi.n	800adf8 <__lshift+0xc0>
 800ae04:	e7ea      	b.n	800addc <__lshift+0xa4>
 800ae06:	bf00      	nop
 800ae08:	0800c050 	.word	0x0800c050
 800ae0c:	0800c061 	.word	0x0800c061

0800ae10 <__mcmp>:
 800ae10:	b530      	push	{r4, r5, lr}
 800ae12:	6902      	ldr	r2, [r0, #16]
 800ae14:	690c      	ldr	r4, [r1, #16]
 800ae16:	1b12      	subs	r2, r2, r4
 800ae18:	d10e      	bne.n	800ae38 <__mcmp+0x28>
 800ae1a:	f100 0314 	add.w	r3, r0, #20
 800ae1e:	3114      	adds	r1, #20
 800ae20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae30:	42a5      	cmp	r5, r4
 800ae32:	d003      	beq.n	800ae3c <__mcmp+0x2c>
 800ae34:	d305      	bcc.n	800ae42 <__mcmp+0x32>
 800ae36:	2201      	movs	r2, #1
 800ae38:	4610      	mov	r0, r2
 800ae3a:	bd30      	pop	{r4, r5, pc}
 800ae3c:	4283      	cmp	r3, r0
 800ae3e:	d3f3      	bcc.n	800ae28 <__mcmp+0x18>
 800ae40:	e7fa      	b.n	800ae38 <__mcmp+0x28>
 800ae42:	f04f 32ff 	mov.w	r2, #4294967295
 800ae46:	e7f7      	b.n	800ae38 <__mcmp+0x28>

0800ae48 <__mdiff>:
 800ae48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	4606      	mov	r6, r0
 800ae50:	4611      	mov	r1, r2
 800ae52:	4620      	mov	r0, r4
 800ae54:	4617      	mov	r7, r2
 800ae56:	f7ff ffdb 	bl	800ae10 <__mcmp>
 800ae5a:	1e05      	subs	r5, r0, #0
 800ae5c:	d110      	bne.n	800ae80 <__mdiff+0x38>
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff fd57 	bl	800a914 <_Balloc>
 800ae66:	b930      	cbnz	r0, 800ae76 <__mdiff+0x2e>
 800ae68:	4b39      	ldr	r3, [pc, #228]	; (800af50 <__mdiff+0x108>)
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	f240 2132 	movw	r1, #562	; 0x232
 800ae70:	4838      	ldr	r0, [pc, #224]	; (800af54 <__mdiff+0x10c>)
 800ae72:	f7fe fef3 	bl	8009c5c <__assert_func>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	bfa4      	itt	ge
 800ae82:	463b      	movge	r3, r7
 800ae84:	4627      	movge	r7, r4
 800ae86:	4630      	mov	r0, r6
 800ae88:	6879      	ldr	r1, [r7, #4]
 800ae8a:	bfa6      	itte	ge
 800ae8c:	461c      	movge	r4, r3
 800ae8e:	2500      	movge	r5, #0
 800ae90:	2501      	movlt	r5, #1
 800ae92:	f7ff fd3f 	bl	800a914 <_Balloc>
 800ae96:	b920      	cbnz	r0, 800aea2 <__mdiff+0x5a>
 800ae98:	4b2d      	ldr	r3, [pc, #180]	; (800af50 <__mdiff+0x108>)
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aea0:	e7e6      	b.n	800ae70 <__mdiff+0x28>
 800aea2:	693e      	ldr	r6, [r7, #16]
 800aea4:	60c5      	str	r5, [r0, #12]
 800aea6:	6925      	ldr	r5, [r4, #16]
 800aea8:	f107 0114 	add.w	r1, r7, #20
 800aeac:	f104 0914 	add.w	r9, r4, #20
 800aeb0:	f100 0e14 	add.w	lr, r0, #20
 800aeb4:	f107 0210 	add.w	r2, r7, #16
 800aeb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aebc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aec0:	46f2      	mov	sl, lr
 800aec2:	2700      	movs	r7, #0
 800aec4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aecc:	fa1f f883 	uxth.w	r8, r3
 800aed0:	fa17 f78b 	uxtah	r7, r7, fp
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	eba7 0808 	sub.w	r8, r7, r8
 800aeda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aee2:	fa1f f888 	uxth.w	r8, r8
 800aee6:	141f      	asrs	r7, r3, #16
 800aee8:	454d      	cmp	r5, r9
 800aeea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aeee:	f84a 3b04 	str.w	r3, [sl], #4
 800aef2:	d8e7      	bhi.n	800aec4 <__mdiff+0x7c>
 800aef4:	1b2b      	subs	r3, r5, r4
 800aef6:	3b15      	subs	r3, #21
 800aef8:	f023 0303 	bic.w	r3, r3, #3
 800aefc:	3304      	adds	r3, #4
 800aefe:	3415      	adds	r4, #21
 800af00:	42a5      	cmp	r5, r4
 800af02:	bf38      	it	cc
 800af04:	2304      	movcc	r3, #4
 800af06:	4419      	add	r1, r3
 800af08:	4473      	add	r3, lr
 800af0a:	469e      	mov	lr, r3
 800af0c:	460d      	mov	r5, r1
 800af0e:	4565      	cmp	r5, ip
 800af10:	d30e      	bcc.n	800af30 <__mdiff+0xe8>
 800af12:	f10c 0203 	add.w	r2, ip, #3
 800af16:	1a52      	subs	r2, r2, r1
 800af18:	f022 0203 	bic.w	r2, r2, #3
 800af1c:	3903      	subs	r1, #3
 800af1e:	458c      	cmp	ip, r1
 800af20:	bf38      	it	cc
 800af22:	2200      	movcc	r2, #0
 800af24:	441a      	add	r2, r3
 800af26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af2a:	b17b      	cbz	r3, 800af4c <__mdiff+0x104>
 800af2c:	6106      	str	r6, [r0, #16]
 800af2e:	e7a5      	b.n	800ae7c <__mdiff+0x34>
 800af30:	f855 8b04 	ldr.w	r8, [r5], #4
 800af34:	fa17 f488 	uxtah	r4, r7, r8
 800af38:	1422      	asrs	r2, r4, #16
 800af3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800af3e:	b2a4      	uxth	r4, r4
 800af40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af44:	f84e 4b04 	str.w	r4, [lr], #4
 800af48:	1417      	asrs	r7, r2, #16
 800af4a:	e7e0      	b.n	800af0e <__mdiff+0xc6>
 800af4c:	3e01      	subs	r6, #1
 800af4e:	e7ea      	b.n	800af26 <__mdiff+0xde>
 800af50:	0800c050 	.word	0x0800c050
 800af54:	0800c061 	.word	0x0800c061

0800af58 <__d2b>:
 800af58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	4689      	mov	r9, r1
 800af5e:	2101      	movs	r1, #1
 800af60:	ec57 6b10 	vmov	r6, r7, d0
 800af64:	4690      	mov	r8, r2
 800af66:	f7ff fcd5 	bl	800a914 <_Balloc>
 800af6a:	4604      	mov	r4, r0
 800af6c:	b930      	cbnz	r0, 800af7c <__d2b+0x24>
 800af6e:	4602      	mov	r2, r0
 800af70:	4b25      	ldr	r3, [pc, #148]	; (800b008 <__d2b+0xb0>)
 800af72:	4826      	ldr	r0, [pc, #152]	; (800b00c <__d2b+0xb4>)
 800af74:	f240 310a 	movw	r1, #778	; 0x30a
 800af78:	f7fe fe70 	bl	8009c5c <__assert_func>
 800af7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800af80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af84:	bb35      	cbnz	r5, 800afd4 <__d2b+0x7c>
 800af86:	2e00      	cmp	r6, #0
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	d028      	beq.n	800afde <__d2b+0x86>
 800af8c:	4668      	mov	r0, sp
 800af8e:	9600      	str	r6, [sp, #0]
 800af90:	f7ff fd8c 	bl	800aaac <__lo0bits>
 800af94:	9900      	ldr	r1, [sp, #0]
 800af96:	b300      	cbz	r0, 800afda <__d2b+0x82>
 800af98:	9a01      	ldr	r2, [sp, #4]
 800af9a:	f1c0 0320 	rsb	r3, r0, #32
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	430b      	orrs	r3, r1
 800afa4:	40c2      	lsrs	r2, r0
 800afa6:	6163      	str	r3, [r4, #20]
 800afa8:	9201      	str	r2, [sp, #4]
 800afaa:	9b01      	ldr	r3, [sp, #4]
 800afac:	61a3      	str	r3, [r4, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	bf14      	ite	ne
 800afb2:	2202      	movne	r2, #2
 800afb4:	2201      	moveq	r2, #1
 800afb6:	6122      	str	r2, [r4, #16]
 800afb8:	b1d5      	cbz	r5, 800aff0 <__d2b+0x98>
 800afba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afbe:	4405      	add	r5, r0
 800afc0:	f8c9 5000 	str.w	r5, [r9]
 800afc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afc8:	f8c8 0000 	str.w	r0, [r8]
 800afcc:	4620      	mov	r0, r4
 800afce:	b003      	add	sp, #12
 800afd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afd8:	e7d5      	b.n	800af86 <__d2b+0x2e>
 800afda:	6161      	str	r1, [r4, #20]
 800afdc:	e7e5      	b.n	800afaa <__d2b+0x52>
 800afde:	a801      	add	r0, sp, #4
 800afe0:	f7ff fd64 	bl	800aaac <__lo0bits>
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	6163      	str	r3, [r4, #20]
 800afe8:	2201      	movs	r2, #1
 800afea:	6122      	str	r2, [r4, #16]
 800afec:	3020      	adds	r0, #32
 800afee:	e7e3      	b.n	800afb8 <__d2b+0x60>
 800aff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aff8:	f8c9 0000 	str.w	r0, [r9]
 800affc:	6918      	ldr	r0, [r3, #16]
 800affe:	f7ff fd35 	bl	800aa6c <__hi0bits>
 800b002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b006:	e7df      	b.n	800afc8 <__d2b+0x70>
 800b008:	0800c050 	.word	0x0800c050
 800b00c:	0800c061 	.word	0x0800c061

0800b010 <_calloc_r>:
 800b010:	b513      	push	{r0, r1, r4, lr}
 800b012:	434a      	muls	r2, r1
 800b014:	4611      	mov	r1, r2
 800b016:	9201      	str	r2, [sp, #4]
 800b018:	f7fe f8d2 	bl	80091c0 <_malloc_r>
 800b01c:	4604      	mov	r4, r0
 800b01e:	b118      	cbz	r0, 800b028 <_calloc_r+0x18>
 800b020:	9a01      	ldr	r2, [sp, #4]
 800b022:	2100      	movs	r1, #0
 800b024:	f7fe f874 	bl	8009110 <memset>
 800b028:	4620      	mov	r0, r4
 800b02a:	b002      	add	sp, #8
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <_realloc_r>:
 800b02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b030:	4607      	mov	r7, r0
 800b032:	4614      	mov	r4, r2
 800b034:	460e      	mov	r6, r1
 800b036:	b921      	cbnz	r1, 800b042 <_realloc_r+0x14>
 800b038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b03c:	4611      	mov	r1, r2
 800b03e:	f7fe b8bf 	b.w	80091c0 <_malloc_r>
 800b042:	b922      	cbnz	r2, 800b04e <_realloc_r+0x20>
 800b044:	f7fe f86c 	bl	8009120 <_free_r>
 800b048:	4625      	mov	r5, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04e:	f000 fddb 	bl	800bc08 <_malloc_usable_size_r>
 800b052:	42a0      	cmp	r0, r4
 800b054:	d20f      	bcs.n	800b076 <_realloc_r+0x48>
 800b056:	4621      	mov	r1, r4
 800b058:	4638      	mov	r0, r7
 800b05a:	f7fe f8b1 	bl	80091c0 <_malloc_r>
 800b05e:	4605      	mov	r5, r0
 800b060:	2800      	cmp	r0, #0
 800b062:	d0f2      	beq.n	800b04a <_realloc_r+0x1c>
 800b064:	4631      	mov	r1, r6
 800b066:	4622      	mov	r2, r4
 800b068:	f7ff fc3a 	bl	800a8e0 <memcpy>
 800b06c:	4631      	mov	r1, r6
 800b06e:	4638      	mov	r0, r7
 800b070:	f7fe f856 	bl	8009120 <_free_r>
 800b074:	e7e9      	b.n	800b04a <_realloc_r+0x1c>
 800b076:	4635      	mov	r5, r6
 800b078:	e7e7      	b.n	800b04a <_realloc_r+0x1c>

0800b07a <__ssputs_r>:
 800b07a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b07e:	688e      	ldr	r6, [r1, #8]
 800b080:	429e      	cmp	r6, r3
 800b082:	4682      	mov	sl, r0
 800b084:	460c      	mov	r4, r1
 800b086:	4690      	mov	r8, r2
 800b088:	461f      	mov	r7, r3
 800b08a:	d838      	bhi.n	800b0fe <__ssputs_r+0x84>
 800b08c:	898a      	ldrh	r2, [r1, #12]
 800b08e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b092:	d032      	beq.n	800b0fa <__ssputs_r+0x80>
 800b094:	6825      	ldr	r5, [r4, #0]
 800b096:	6909      	ldr	r1, [r1, #16]
 800b098:	eba5 0901 	sub.w	r9, r5, r1
 800b09c:	6965      	ldr	r5, [r4, #20]
 800b09e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	444b      	add	r3, r9
 800b0aa:	106d      	asrs	r5, r5, #1
 800b0ac:	429d      	cmp	r5, r3
 800b0ae:	bf38      	it	cc
 800b0b0:	461d      	movcc	r5, r3
 800b0b2:	0553      	lsls	r3, r2, #21
 800b0b4:	d531      	bpl.n	800b11a <__ssputs_r+0xa0>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	f7fe f882 	bl	80091c0 <_malloc_r>
 800b0bc:	4606      	mov	r6, r0
 800b0be:	b950      	cbnz	r0, 800b0d6 <__ssputs_r+0x5c>
 800b0c0:	230c      	movs	r3, #12
 800b0c2:	f8ca 3000 	str.w	r3, [sl]
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d6:	6921      	ldr	r1, [r4, #16]
 800b0d8:	464a      	mov	r2, r9
 800b0da:	f7ff fc01 	bl	800a8e0 <memcpy>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	6126      	str	r6, [r4, #16]
 800b0ec:	6165      	str	r5, [r4, #20]
 800b0ee:	444e      	add	r6, r9
 800b0f0:	eba5 0509 	sub.w	r5, r5, r9
 800b0f4:	6026      	str	r6, [r4, #0]
 800b0f6:	60a5      	str	r5, [r4, #8]
 800b0f8:	463e      	mov	r6, r7
 800b0fa:	42be      	cmp	r6, r7
 800b0fc:	d900      	bls.n	800b100 <__ssputs_r+0x86>
 800b0fe:	463e      	mov	r6, r7
 800b100:	4632      	mov	r2, r6
 800b102:	6820      	ldr	r0, [r4, #0]
 800b104:	4641      	mov	r1, r8
 800b106:	f000 fd65 	bl	800bbd4 <memmove>
 800b10a:	68a3      	ldr	r3, [r4, #8]
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	1b9b      	subs	r3, r3, r6
 800b110:	4432      	add	r2, r6
 800b112:	60a3      	str	r3, [r4, #8]
 800b114:	6022      	str	r2, [r4, #0]
 800b116:	2000      	movs	r0, #0
 800b118:	e7db      	b.n	800b0d2 <__ssputs_r+0x58>
 800b11a:	462a      	mov	r2, r5
 800b11c:	f7ff ff87 	bl	800b02e <_realloc_r>
 800b120:	4606      	mov	r6, r0
 800b122:	2800      	cmp	r0, #0
 800b124:	d1e1      	bne.n	800b0ea <__ssputs_r+0x70>
 800b126:	6921      	ldr	r1, [r4, #16]
 800b128:	4650      	mov	r0, sl
 800b12a:	f7fd fff9 	bl	8009120 <_free_r>
 800b12e:	e7c7      	b.n	800b0c0 <__ssputs_r+0x46>

0800b130 <_svfiprintf_r>:
 800b130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4698      	mov	r8, r3
 800b136:	898b      	ldrh	r3, [r1, #12]
 800b138:	061b      	lsls	r3, r3, #24
 800b13a:	b09d      	sub	sp, #116	; 0x74
 800b13c:	4607      	mov	r7, r0
 800b13e:	460d      	mov	r5, r1
 800b140:	4614      	mov	r4, r2
 800b142:	d50e      	bpl.n	800b162 <_svfiprintf_r+0x32>
 800b144:	690b      	ldr	r3, [r1, #16]
 800b146:	b963      	cbnz	r3, 800b162 <_svfiprintf_r+0x32>
 800b148:	2140      	movs	r1, #64	; 0x40
 800b14a:	f7fe f839 	bl	80091c0 <_malloc_r>
 800b14e:	6028      	str	r0, [r5, #0]
 800b150:	6128      	str	r0, [r5, #16]
 800b152:	b920      	cbnz	r0, 800b15e <_svfiprintf_r+0x2e>
 800b154:	230c      	movs	r3, #12
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	e0d1      	b.n	800b302 <_svfiprintf_r+0x1d2>
 800b15e:	2340      	movs	r3, #64	; 0x40
 800b160:	616b      	str	r3, [r5, #20]
 800b162:	2300      	movs	r3, #0
 800b164:	9309      	str	r3, [sp, #36]	; 0x24
 800b166:	2320      	movs	r3, #32
 800b168:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b16c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b170:	2330      	movs	r3, #48	; 0x30
 800b172:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b31c <_svfiprintf_r+0x1ec>
 800b176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b17a:	f04f 0901 	mov.w	r9, #1
 800b17e:	4623      	mov	r3, r4
 800b180:	469a      	mov	sl, r3
 800b182:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b186:	b10a      	cbz	r2, 800b18c <_svfiprintf_r+0x5c>
 800b188:	2a25      	cmp	r2, #37	; 0x25
 800b18a:	d1f9      	bne.n	800b180 <_svfiprintf_r+0x50>
 800b18c:	ebba 0b04 	subs.w	fp, sl, r4
 800b190:	d00b      	beq.n	800b1aa <_svfiprintf_r+0x7a>
 800b192:	465b      	mov	r3, fp
 800b194:	4622      	mov	r2, r4
 800b196:	4629      	mov	r1, r5
 800b198:	4638      	mov	r0, r7
 800b19a:	f7ff ff6e 	bl	800b07a <__ssputs_r>
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f000 80aa 	beq.w	800b2f8 <_svfiprintf_r+0x1c8>
 800b1a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a6:	445a      	add	r2, fp
 800b1a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 80a2 	beq.w	800b2f8 <_svfiprintf_r+0x1c8>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1be:	f10a 0a01 	add.w	sl, sl, #1
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	9307      	str	r3, [sp, #28]
 800b1c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1ca:	931a      	str	r3, [sp, #104]	; 0x68
 800b1cc:	4654      	mov	r4, sl
 800b1ce:	2205      	movs	r2, #5
 800b1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d4:	4851      	ldr	r0, [pc, #324]	; (800b31c <_svfiprintf_r+0x1ec>)
 800b1d6:	f7f5 f84b 	bl	8000270 <memchr>
 800b1da:	9a04      	ldr	r2, [sp, #16]
 800b1dc:	b9d8      	cbnz	r0, 800b216 <_svfiprintf_r+0xe6>
 800b1de:	06d0      	lsls	r0, r2, #27
 800b1e0:	bf44      	itt	mi
 800b1e2:	2320      	movmi	r3, #32
 800b1e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1e8:	0711      	lsls	r1, r2, #28
 800b1ea:	bf44      	itt	mi
 800b1ec:	232b      	movmi	r3, #43	; 0x2b
 800b1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1f8:	d015      	beq.n	800b226 <_svfiprintf_r+0xf6>
 800b1fa:	9a07      	ldr	r2, [sp, #28]
 800b1fc:	4654      	mov	r4, sl
 800b1fe:	2000      	movs	r0, #0
 800b200:	f04f 0c0a 	mov.w	ip, #10
 800b204:	4621      	mov	r1, r4
 800b206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b20a:	3b30      	subs	r3, #48	; 0x30
 800b20c:	2b09      	cmp	r3, #9
 800b20e:	d94e      	bls.n	800b2ae <_svfiprintf_r+0x17e>
 800b210:	b1b0      	cbz	r0, 800b240 <_svfiprintf_r+0x110>
 800b212:	9207      	str	r2, [sp, #28]
 800b214:	e014      	b.n	800b240 <_svfiprintf_r+0x110>
 800b216:	eba0 0308 	sub.w	r3, r0, r8
 800b21a:	fa09 f303 	lsl.w	r3, r9, r3
 800b21e:	4313      	orrs	r3, r2
 800b220:	9304      	str	r3, [sp, #16]
 800b222:	46a2      	mov	sl, r4
 800b224:	e7d2      	b.n	800b1cc <_svfiprintf_r+0x9c>
 800b226:	9b03      	ldr	r3, [sp, #12]
 800b228:	1d19      	adds	r1, r3, #4
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	9103      	str	r1, [sp, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bfbb      	ittet	lt
 800b232:	425b      	neglt	r3, r3
 800b234:	f042 0202 	orrlt.w	r2, r2, #2
 800b238:	9307      	strge	r3, [sp, #28]
 800b23a:	9307      	strlt	r3, [sp, #28]
 800b23c:	bfb8      	it	lt
 800b23e:	9204      	strlt	r2, [sp, #16]
 800b240:	7823      	ldrb	r3, [r4, #0]
 800b242:	2b2e      	cmp	r3, #46	; 0x2e
 800b244:	d10c      	bne.n	800b260 <_svfiprintf_r+0x130>
 800b246:	7863      	ldrb	r3, [r4, #1]
 800b248:	2b2a      	cmp	r3, #42	; 0x2a
 800b24a:	d135      	bne.n	800b2b8 <_svfiprintf_r+0x188>
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	1d1a      	adds	r2, r3, #4
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	9203      	str	r2, [sp, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	bfb8      	it	lt
 800b258:	f04f 33ff 	movlt.w	r3, #4294967295
 800b25c:	3402      	adds	r4, #2
 800b25e:	9305      	str	r3, [sp, #20]
 800b260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b32c <_svfiprintf_r+0x1fc>
 800b264:	7821      	ldrb	r1, [r4, #0]
 800b266:	2203      	movs	r2, #3
 800b268:	4650      	mov	r0, sl
 800b26a:	f7f5 f801 	bl	8000270 <memchr>
 800b26e:	b140      	cbz	r0, 800b282 <_svfiprintf_r+0x152>
 800b270:	2340      	movs	r3, #64	; 0x40
 800b272:	eba0 000a 	sub.w	r0, r0, sl
 800b276:	fa03 f000 	lsl.w	r0, r3, r0
 800b27a:	9b04      	ldr	r3, [sp, #16]
 800b27c:	4303      	orrs	r3, r0
 800b27e:	3401      	adds	r4, #1
 800b280:	9304      	str	r3, [sp, #16]
 800b282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b286:	4826      	ldr	r0, [pc, #152]	; (800b320 <_svfiprintf_r+0x1f0>)
 800b288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b28c:	2206      	movs	r2, #6
 800b28e:	f7f4 ffef 	bl	8000270 <memchr>
 800b292:	2800      	cmp	r0, #0
 800b294:	d038      	beq.n	800b308 <_svfiprintf_r+0x1d8>
 800b296:	4b23      	ldr	r3, [pc, #140]	; (800b324 <_svfiprintf_r+0x1f4>)
 800b298:	bb1b      	cbnz	r3, 800b2e2 <_svfiprintf_r+0x1b2>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	3307      	adds	r3, #7
 800b29e:	f023 0307 	bic.w	r3, r3, #7
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	9303      	str	r3, [sp, #12]
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	4433      	add	r3, r6
 800b2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ac:	e767      	b.n	800b17e <_svfiprintf_r+0x4e>
 800b2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	2001      	movs	r0, #1
 800b2b6:	e7a5      	b.n	800b204 <_svfiprintf_r+0xd4>
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	3401      	adds	r4, #1
 800b2bc:	9305      	str	r3, [sp, #20]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	f04f 0c0a 	mov.w	ip, #10
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ca:	3a30      	subs	r2, #48	; 0x30
 800b2cc:	2a09      	cmp	r2, #9
 800b2ce:	d903      	bls.n	800b2d8 <_svfiprintf_r+0x1a8>
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0c5      	beq.n	800b260 <_svfiprintf_r+0x130>
 800b2d4:	9105      	str	r1, [sp, #20]
 800b2d6:	e7c3      	b.n	800b260 <_svfiprintf_r+0x130>
 800b2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2dc:	4604      	mov	r4, r0
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e7f0      	b.n	800b2c4 <_svfiprintf_r+0x194>
 800b2e2:	ab03      	add	r3, sp, #12
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	462a      	mov	r2, r5
 800b2e8:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <_svfiprintf_r+0x1f8>)
 800b2ea:	a904      	add	r1, sp, #16
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f7fe f853 	bl	8009398 <_printf_float>
 800b2f2:	1c42      	adds	r2, r0, #1
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	d1d6      	bne.n	800b2a6 <_svfiprintf_r+0x176>
 800b2f8:	89ab      	ldrh	r3, [r5, #12]
 800b2fa:	065b      	lsls	r3, r3, #25
 800b2fc:	f53f af2c 	bmi.w	800b158 <_svfiprintf_r+0x28>
 800b300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b302:	b01d      	add	sp, #116	; 0x74
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	ab03      	add	r3, sp, #12
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	462a      	mov	r2, r5
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <_svfiprintf_r+0x1f8>)
 800b310:	a904      	add	r1, sp, #16
 800b312:	4638      	mov	r0, r7
 800b314:	f7fe facc 	bl	80098b0 <_printf_i>
 800b318:	e7eb      	b.n	800b2f2 <_svfiprintf_r+0x1c2>
 800b31a:	bf00      	nop
 800b31c:	0800c1c4 	.word	0x0800c1c4
 800b320:	0800c1ce 	.word	0x0800c1ce
 800b324:	08009399 	.word	0x08009399
 800b328:	0800b07b 	.word	0x0800b07b
 800b32c:	0800c1ca 	.word	0x0800c1ca

0800b330 <__sfputc_r>:
 800b330:	6893      	ldr	r3, [r2, #8]
 800b332:	3b01      	subs	r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	b410      	push	{r4}
 800b338:	6093      	str	r3, [r2, #8]
 800b33a:	da08      	bge.n	800b34e <__sfputc_r+0x1e>
 800b33c:	6994      	ldr	r4, [r2, #24]
 800b33e:	42a3      	cmp	r3, r4
 800b340:	db01      	blt.n	800b346 <__sfputc_r+0x16>
 800b342:	290a      	cmp	r1, #10
 800b344:	d103      	bne.n	800b34e <__sfputc_r+0x1e>
 800b346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b34a:	f000 b94b 	b.w	800b5e4 <__swbuf_r>
 800b34e:	6813      	ldr	r3, [r2, #0]
 800b350:	1c58      	adds	r0, r3, #1
 800b352:	6010      	str	r0, [r2, #0]
 800b354:	7019      	strb	r1, [r3, #0]
 800b356:	4608      	mov	r0, r1
 800b358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <__sfputs_r>:
 800b35e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b360:	4606      	mov	r6, r0
 800b362:	460f      	mov	r7, r1
 800b364:	4614      	mov	r4, r2
 800b366:	18d5      	adds	r5, r2, r3
 800b368:	42ac      	cmp	r4, r5
 800b36a:	d101      	bne.n	800b370 <__sfputs_r+0x12>
 800b36c:	2000      	movs	r0, #0
 800b36e:	e007      	b.n	800b380 <__sfputs_r+0x22>
 800b370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b374:	463a      	mov	r2, r7
 800b376:	4630      	mov	r0, r6
 800b378:	f7ff ffda 	bl	800b330 <__sfputc_r>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	d1f3      	bne.n	800b368 <__sfputs_r+0xa>
 800b380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b384 <_vfiprintf_r>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	460d      	mov	r5, r1
 800b38a:	b09d      	sub	sp, #116	; 0x74
 800b38c:	4614      	mov	r4, r2
 800b38e:	4698      	mov	r8, r3
 800b390:	4606      	mov	r6, r0
 800b392:	b118      	cbz	r0, 800b39c <_vfiprintf_r+0x18>
 800b394:	6983      	ldr	r3, [r0, #24]
 800b396:	b90b      	cbnz	r3, 800b39c <_vfiprintf_r+0x18>
 800b398:	f000 fb06 	bl	800b9a8 <__sinit>
 800b39c:	4b89      	ldr	r3, [pc, #548]	; (800b5c4 <_vfiprintf_r+0x240>)
 800b39e:	429d      	cmp	r5, r3
 800b3a0:	d11b      	bne.n	800b3da <_vfiprintf_r+0x56>
 800b3a2:	6875      	ldr	r5, [r6, #4]
 800b3a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a6:	07d9      	lsls	r1, r3, #31
 800b3a8:	d405      	bmi.n	800b3b6 <_vfiprintf_r+0x32>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	059a      	lsls	r2, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_vfiprintf_r+0x32>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b2:	f000 fb97 	bl	800bae4 <__retarget_lock_acquire_recursive>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	071b      	lsls	r3, r3, #28
 800b3ba:	d501      	bpl.n	800b3c0 <_vfiprintf_r+0x3c>
 800b3bc:	692b      	ldr	r3, [r5, #16]
 800b3be:	b9eb      	cbnz	r3, 800b3fc <_vfiprintf_r+0x78>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f000 f960 	bl	800b688 <__swsetup_r>
 800b3c8:	b1c0      	cbz	r0, 800b3fc <_vfiprintf_r+0x78>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3cc:	07dc      	lsls	r4, r3, #31
 800b3ce:	d50e      	bpl.n	800b3ee <_vfiprintf_r+0x6a>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	b01d      	add	sp, #116	; 0x74
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	4b7b      	ldr	r3, [pc, #492]	; (800b5c8 <_vfiprintf_r+0x244>)
 800b3dc:	429d      	cmp	r5, r3
 800b3de:	d101      	bne.n	800b3e4 <_vfiprintf_r+0x60>
 800b3e0:	68b5      	ldr	r5, [r6, #8]
 800b3e2:	e7df      	b.n	800b3a4 <_vfiprintf_r+0x20>
 800b3e4:	4b79      	ldr	r3, [pc, #484]	; (800b5cc <_vfiprintf_r+0x248>)
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	bf08      	it	eq
 800b3ea:	68f5      	ldreq	r5, [r6, #12]
 800b3ec:	e7da      	b.n	800b3a4 <_vfiprintf_r+0x20>
 800b3ee:	89ab      	ldrh	r3, [r5, #12]
 800b3f0:	0598      	lsls	r0, r3, #22
 800b3f2:	d4ed      	bmi.n	800b3d0 <_vfiprintf_r+0x4c>
 800b3f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f6:	f000 fb76 	bl	800bae6 <__retarget_lock_release_recursive>
 800b3fa:	e7e9      	b.n	800b3d0 <_vfiprintf_r+0x4c>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b400:	2320      	movs	r3, #32
 800b402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b406:	f8cd 800c 	str.w	r8, [sp, #12]
 800b40a:	2330      	movs	r3, #48	; 0x30
 800b40c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5d0 <_vfiprintf_r+0x24c>
 800b410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b414:	f04f 0901 	mov.w	r9, #1
 800b418:	4623      	mov	r3, r4
 800b41a:	469a      	mov	sl, r3
 800b41c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b420:	b10a      	cbz	r2, 800b426 <_vfiprintf_r+0xa2>
 800b422:	2a25      	cmp	r2, #37	; 0x25
 800b424:	d1f9      	bne.n	800b41a <_vfiprintf_r+0x96>
 800b426:	ebba 0b04 	subs.w	fp, sl, r4
 800b42a:	d00b      	beq.n	800b444 <_vfiprintf_r+0xc0>
 800b42c:	465b      	mov	r3, fp
 800b42e:	4622      	mov	r2, r4
 800b430:	4629      	mov	r1, r5
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ff93 	bl	800b35e <__sfputs_r>
 800b438:	3001      	adds	r0, #1
 800b43a:	f000 80aa 	beq.w	800b592 <_vfiprintf_r+0x20e>
 800b43e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b440:	445a      	add	r2, fp
 800b442:	9209      	str	r2, [sp, #36]	; 0x24
 800b444:	f89a 3000 	ldrb.w	r3, [sl]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 80a2 	beq.w	800b592 <_vfiprintf_r+0x20e>
 800b44e:	2300      	movs	r3, #0
 800b450:	f04f 32ff 	mov.w	r2, #4294967295
 800b454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b458:	f10a 0a01 	add.w	sl, sl, #1
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b464:	931a      	str	r3, [sp, #104]	; 0x68
 800b466:	4654      	mov	r4, sl
 800b468:	2205      	movs	r2, #5
 800b46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46e:	4858      	ldr	r0, [pc, #352]	; (800b5d0 <_vfiprintf_r+0x24c>)
 800b470:	f7f4 fefe 	bl	8000270 <memchr>
 800b474:	9a04      	ldr	r2, [sp, #16]
 800b476:	b9d8      	cbnz	r0, 800b4b0 <_vfiprintf_r+0x12c>
 800b478:	06d1      	lsls	r1, r2, #27
 800b47a:	bf44      	itt	mi
 800b47c:	2320      	movmi	r3, #32
 800b47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b482:	0713      	lsls	r3, r2, #28
 800b484:	bf44      	itt	mi
 800b486:	232b      	movmi	r3, #43	; 0x2b
 800b488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b48c:	f89a 3000 	ldrb.w	r3, [sl]
 800b490:	2b2a      	cmp	r3, #42	; 0x2a
 800b492:	d015      	beq.n	800b4c0 <_vfiprintf_r+0x13c>
 800b494:	9a07      	ldr	r2, [sp, #28]
 800b496:	4654      	mov	r4, sl
 800b498:	2000      	movs	r0, #0
 800b49a:	f04f 0c0a 	mov.w	ip, #10
 800b49e:	4621      	mov	r1, r4
 800b4a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a4:	3b30      	subs	r3, #48	; 0x30
 800b4a6:	2b09      	cmp	r3, #9
 800b4a8:	d94e      	bls.n	800b548 <_vfiprintf_r+0x1c4>
 800b4aa:	b1b0      	cbz	r0, 800b4da <_vfiprintf_r+0x156>
 800b4ac:	9207      	str	r2, [sp, #28]
 800b4ae:	e014      	b.n	800b4da <_vfiprintf_r+0x156>
 800b4b0:	eba0 0308 	sub.w	r3, r0, r8
 800b4b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	9304      	str	r3, [sp, #16]
 800b4bc:	46a2      	mov	sl, r4
 800b4be:	e7d2      	b.n	800b466 <_vfiprintf_r+0xe2>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	1d19      	adds	r1, r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9103      	str	r1, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfbb      	ittet	lt
 800b4cc:	425b      	neglt	r3, r3
 800b4ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b4d2:	9307      	strge	r3, [sp, #28]
 800b4d4:	9307      	strlt	r3, [sp, #28]
 800b4d6:	bfb8      	it	lt
 800b4d8:	9204      	strlt	r2, [sp, #16]
 800b4da:	7823      	ldrb	r3, [r4, #0]
 800b4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800b4de:	d10c      	bne.n	800b4fa <_vfiprintf_r+0x176>
 800b4e0:	7863      	ldrb	r3, [r4, #1]
 800b4e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e4:	d135      	bne.n	800b552 <_vfiprintf_r+0x1ce>
 800b4e6:	9b03      	ldr	r3, [sp, #12]
 800b4e8:	1d1a      	adds	r2, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9203      	str	r2, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfb8      	it	lt
 800b4f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4f6:	3402      	adds	r4, #2
 800b4f8:	9305      	str	r3, [sp, #20]
 800b4fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5e0 <_vfiprintf_r+0x25c>
 800b4fe:	7821      	ldrb	r1, [r4, #0]
 800b500:	2203      	movs	r2, #3
 800b502:	4650      	mov	r0, sl
 800b504:	f7f4 feb4 	bl	8000270 <memchr>
 800b508:	b140      	cbz	r0, 800b51c <_vfiprintf_r+0x198>
 800b50a:	2340      	movs	r3, #64	; 0x40
 800b50c:	eba0 000a 	sub.w	r0, r0, sl
 800b510:	fa03 f000 	lsl.w	r0, r3, r0
 800b514:	9b04      	ldr	r3, [sp, #16]
 800b516:	4303      	orrs	r3, r0
 800b518:	3401      	adds	r4, #1
 800b51a:	9304      	str	r3, [sp, #16]
 800b51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b520:	482c      	ldr	r0, [pc, #176]	; (800b5d4 <_vfiprintf_r+0x250>)
 800b522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b526:	2206      	movs	r2, #6
 800b528:	f7f4 fea2 	bl	8000270 <memchr>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d03f      	beq.n	800b5b0 <_vfiprintf_r+0x22c>
 800b530:	4b29      	ldr	r3, [pc, #164]	; (800b5d8 <_vfiprintf_r+0x254>)
 800b532:	bb1b      	cbnz	r3, 800b57c <_vfiprintf_r+0x1f8>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	3307      	adds	r3, #7
 800b538:	f023 0307 	bic.w	r3, r3, #7
 800b53c:	3308      	adds	r3, #8
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b542:	443b      	add	r3, r7
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
 800b546:	e767      	b.n	800b418 <_vfiprintf_r+0x94>
 800b548:	fb0c 3202 	mla	r2, ip, r2, r3
 800b54c:	460c      	mov	r4, r1
 800b54e:	2001      	movs	r0, #1
 800b550:	e7a5      	b.n	800b49e <_vfiprintf_r+0x11a>
 800b552:	2300      	movs	r3, #0
 800b554:	3401      	adds	r4, #1
 800b556:	9305      	str	r3, [sp, #20]
 800b558:	4619      	mov	r1, r3
 800b55a:	f04f 0c0a 	mov.w	ip, #10
 800b55e:	4620      	mov	r0, r4
 800b560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b564:	3a30      	subs	r2, #48	; 0x30
 800b566:	2a09      	cmp	r2, #9
 800b568:	d903      	bls.n	800b572 <_vfiprintf_r+0x1ee>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0c5      	beq.n	800b4fa <_vfiprintf_r+0x176>
 800b56e:	9105      	str	r1, [sp, #20]
 800b570:	e7c3      	b.n	800b4fa <_vfiprintf_r+0x176>
 800b572:	fb0c 2101 	mla	r1, ip, r1, r2
 800b576:	4604      	mov	r4, r0
 800b578:	2301      	movs	r3, #1
 800b57a:	e7f0      	b.n	800b55e <_vfiprintf_r+0x1da>
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b16      	ldr	r3, [pc, #88]	; (800b5dc <_vfiprintf_r+0x258>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4630      	mov	r0, r6
 800b588:	f7fd ff06 	bl	8009398 <_printf_float>
 800b58c:	4607      	mov	r7, r0
 800b58e:	1c78      	adds	r0, r7, #1
 800b590:	d1d6      	bne.n	800b540 <_vfiprintf_r+0x1bc>
 800b592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b594:	07d9      	lsls	r1, r3, #31
 800b596:	d405      	bmi.n	800b5a4 <_vfiprintf_r+0x220>
 800b598:	89ab      	ldrh	r3, [r5, #12]
 800b59a:	059a      	lsls	r2, r3, #22
 800b59c:	d402      	bmi.n	800b5a4 <_vfiprintf_r+0x220>
 800b59e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5a0:	f000 faa1 	bl	800bae6 <__retarget_lock_release_recursive>
 800b5a4:	89ab      	ldrh	r3, [r5, #12]
 800b5a6:	065b      	lsls	r3, r3, #25
 800b5a8:	f53f af12 	bmi.w	800b3d0 <_vfiprintf_r+0x4c>
 800b5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ae:	e711      	b.n	800b3d4 <_vfiprintf_r+0x50>
 800b5b0:	ab03      	add	r3, sp, #12
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	462a      	mov	r2, r5
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <_vfiprintf_r+0x258>)
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7fe f978 	bl	80098b0 <_printf_i>
 800b5c0:	e7e4      	b.n	800b58c <_vfiprintf_r+0x208>
 800b5c2:	bf00      	nop
 800b5c4:	0800c1f8 	.word	0x0800c1f8
 800b5c8:	0800c218 	.word	0x0800c218
 800b5cc:	0800c1d8 	.word	0x0800c1d8
 800b5d0:	0800c1c4 	.word	0x0800c1c4
 800b5d4:	0800c1ce 	.word	0x0800c1ce
 800b5d8:	08009399 	.word	0x08009399
 800b5dc:	0800b35f 	.word	0x0800b35f
 800b5e0:	0800c1ca 	.word	0x0800c1ca

0800b5e4 <__swbuf_r>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	460e      	mov	r6, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	b118      	cbz	r0, 800b5f6 <__swbuf_r+0x12>
 800b5ee:	6983      	ldr	r3, [r0, #24]
 800b5f0:	b90b      	cbnz	r3, 800b5f6 <__swbuf_r+0x12>
 800b5f2:	f000 f9d9 	bl	800b9a8 <__sinit>
 800b5f6:	4b21      	ldr	r3, [pc, #132]	; (800b67c <__swbuf_r+0x98>)
 800b5f8:	429c      	cmp	r4, r3
 800b5fa:	d12b      	bne.n	800b654 <__swbuf_r+0x70>
 800b5fc:	686c      	ldr	r4, [r5, #4]
 800b5fe:	69a3      	ldr	r3, [r4, #24]
 800b600:	60a3      	str	r3, [r4, #8]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	071a      	lsls	r2, r3, #28
 800b606:	d52f      	bpl.n	800b668 <__swbuf_r+0x84>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	b36b      	cbz	r3, 800b668 <__swbuf_r+0x84>
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	6820      	ldr	r0, [r4, #0]
 800b610:	1ac0      	subs	r0, r0, r3
 800b612:	6963      	ldr	r3, [r4, #20]
 800b614:	b2f6      	uxtb	r6, r6
 800b616:	4283      	cmp	r3, r0
 800b618:	4637      	mov	r7, r6
 800b61a:	dc04      	bgt.n	800b626 <__swbuf_r+0x42>
 800b61c:	4621      	mov	r1, r4
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 f92e 	bl	800b880 <_fflush_r>
 800b624:	bb30      	cbnz	r0, 800b674 <__swbuf_r+0x90>
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	3b01      	subs	r3, #1
 800b62a:	60a3      	str	r3, [r4, #8]
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	6022      	str	r2, [r4, #0]
 800b632:	701e      	strb	r6, [r3, #0]
 800b634:	6963      	ldr	r3, [r4, #20]
 800b636:	3001      	adds	r0, #1
 800b638:	4283      	cmp	r3, r0
 800b63a:	d004      	beq.n	800b646 <__swbuf_r+0x62>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	07db      	lsls	r3, r3, #31
 800b640:	d506      	bpl.n	800b650 <__swbuf_r+0x6c>
 800b642:	2e0a      	cmp	r6, #10
 800b644:	d104      	bne.n	800b650 <__swbuf_r+0x6c>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f919 	bl	800b880 <_fflush_r>
 800b64e:	b988      	cbnz	r0, 800b674 <__swbuf_r+0x90>
 800b650:	4638      	mov	r0, r7
 800b652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b654:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <__swbuf_r+0x9c>)
 800b656:	429c      	cmp	r4, r3
 800b658:	d101      	bne.n	800b65e <__swbuf_r+0x7a>
 800b65a:	68ac      	ldr	r4, [r5, #8]
 800b65c:	e7cf      	b.n	800b5fe <__swbuf_r+0x1a>
 800b65e:	4b09      	ldr	r3, [pc, #36]	; (800b684 <__swbuf_r+0xa0>)
 800b660:	429c      	cmp	r4, r3
 800b662:	bf08      	it	eq
 800b664:	68ec      	ldreq	r4, [r5, #12]
 800b666:	e7ca      	b.n	800b5fe <__swbuf_r+0x1a>
 800b668:	4621      	mov	r1, r4
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f80c 	bl	800b688 <__swsetup_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0cb      	beq.n	800b60c <__swbuf_r+0x28>
 800b674:	f04f 37ff 	mov.w	r7, #4294967295
 800b678:	e7ea      	b.n	800b650 <__swbuf_r+0x6c>
 800b67a:	bf00      	nop
 800b67c:	0800c1f8 	.word	0x0800c1f8
 800b680:	0800c218 	.word	0x0800c218
 800b684:	0800c1d8 	.word	0x0800c1d8

0800b688 <__swsetup_r>:
 800b688:	4b32      	ldr	r3, [pc, #200]	; (800b754 <__swsetup_r+0xcc>)
 800b68a:	b570      	push	{r4, r5, r6, lr}
 800b68c:	681d      	ldr	r5, [r3, #0]
 800b68e:	4606      	mov	r6, r0
 800b690:	460c      	mov	r4, r1
 800b692:	b125      	cbz	r5, 800b69e <__swsetup_r+0x16>
 800b694:	69ab      	ldr	r3, [r5, #24]
 800b696:	b913      	cbnz	r3, 800b69e <__swsetup_r+0x16>
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 f985 	bl	800b9a8 <__sinit>
 800b69e:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <__swsetup_r+0xd0>)
 800b6a0:	429c      	cmp	r4, r3
 800b6a2:	d10f      	bne.n	800b6c4 <__swsetup_r+0x3c>
 800b6a4:	686c      	ldr	r4, [r5, #4]
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6ac:	0719      	lsls	r1, r3, #28
 800b6ae:	d42c      	bmi.n	800b70a <__swsetup_r+0x82>
 800b6b0:	06dd      	lsls	r5, r3, #27
 800b6b2:	d411      	bmi.n	800b6d8 <__swsetup_r+0x50>
 800b6b4:	2309      	movs	r3, #9
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	e03e      	b.n	800b742 <__swsetup_r+0xba>
 800b6c4:	4b25      	ldr	r3, [pc, #148]	; (800b75c <__swsetup_r+0xd4>)
 800b6c6:	429c      	cmp	r4, r3
 800b6c8:	d101      	bne.n	800b6ce <__swsetup_r+0x46>
 800b6ca:	68ac      	ldr	r4, [r5, #8]
 800b6cc:	e7eb      	b.n	800b6a6 <__swsetup_r+0x1e>
 800b6ce:	4b24      	ldr	r3, [pc, #144]	; (800b760 <__swsetup_r+0xd8>)
 800b6d0:	429c      	cmp	r4, r3
 800b6d2:	bf08      	it	eq
 800b6d4:	68ec      	ldreq	r4, [r5, #12]
 800b6d6:	e7e6      	b.n	800b6a6 <__swsetup_r+0x1e>
 800b6d8:	0758      	lsls	r0, r3, #29
 800b6da:	d512      	bpl.n	800b702 <__swsetup_r+0x7a>
 800b6dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6de:	b141      	cbz	r1, 800b6f2 <__swsetup_r+0x6a>
 800b6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e4:	4299      	cmp	r1, r3
 800b6e6:	d002      	beq.n	800b6ee <__swsetup_r+0x66>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7fd fd19 	bl	8009120 <_free_r>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	6063      	str	r3, [r4, #4]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f043 0308 	orr.w	r3, r3, #8
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	6923      	ldr	r3, [r4, #16]
 800b70c:	b94b      	cbnz	r3, 800b722 <__swsetup_r+0x9a>
 800b70e:	89a3      	ldrh	r3, [r4, #12]
 800b710:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b718:	d003      	beq.n	800b722 <__swsetup_r+0x9a>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 fa07 	bl	800bb30 <__smakebuf_r>
 800b722:	89a0      	ldrh	r0, [r4, #12]
 800b724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b728:	f010 0301 	ands.w	r3, r0, #1
 800b72c:	d00a      	beq.n	800b744 <__swsetup_r+0xbc>
 800b72e:	2300      	movs	r3, #0
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	6963      	ldr	r3, [r4, #20]
 800b734:	425b      	negs	r3, r3
 800b736:	61a3      	str	r3, [r4, #24]
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b943      	cbnz	r3, 800b74e <__swsetup_r+0xc6>
 800b73c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b740:	d1ba      	bne.n	800b6b8 <__swsetup_r+0x30>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	0781      	lsls	r1, r0, #30
 800b746:	bf58      	it	pl
 800b748:	6963      	ldrpl	r3, [r4, #20]
 800b74a:	60a3      	str	r3, [r4, #8]
 800b74c:	e7f4      	b.n	800b738 <__swsetup_r+0xb0>
 800b74e:	2000      	movs	r0, #0
 800b750:	e7f7      	b.n	800b742 <__swsetup_r+0xba>
 800b752:	bf00      	nop
 800b754:	200001bc 	.word	0x200001bc
 800b758:	0800c1f8 	.word	0x0800c1f8
 800b75c:	0800c218 	.word	0x0800c218
 800b760:	0800c1d8 	.word	0x0800c1d8

0800b764 <abort>:
 800b764:	b508      	push	{r3, lr}
 800b766:	2006      	movs	r0, #6
 800b768:	f000 fa7e 	bl	800bc68 <raise>
 800b76c:	2001      	movs	r0, #1
 800b76e:	f7f6 ff07 	bl	8002580 <_exit>
	...

0800b774 <__sflush_r>:
 800b774:	898a      	ldrh	r2, [r1, #12]
 800b776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b77a:	4605      	mov	r5, r0
 800b77c:	0710      	lsls	r0, r2, #28
 800b77e:	460c      	mov	r4, r1
 800b780:	d458      	bmi.n	800b834 <__sflush_r+0xc0>
 800b782:	684b      	ldr	r3, [r1, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dc05      	bgt.n	800b794 <__sflush_r+0x20>
 800b788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dc02      	bgt.n	800b794 <__sflush_r+0x20>
 800b78e:	2000      	movs	r0, #0
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b796:	2e00      	cmp	r6, #0
 800b798:	d0f9      	beq.n	800b78e <__sflush_r+0x1a>
 800b79a:	2300      	movs	r3, #0
 800b79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7a0:	682f      	ldr	r7, [r5, #0]
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	d032      	beq.n	800b80c <__sflush_r+0x98>
 800b7a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	075a      	lsls	r2, r3, #29
 800b7ac:	d505      	bpl.n	800b7ba <__sflush_r+0x46>
 800b7ae:	6863      	ldr	r3, [r4, #4]
 800b7b0:	1ac0      	subs	r0, r0, r3
 800b7b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7b4:	b10b      	cbz	r3, 800b7ba <__sflush_r+0x46>
 800b7b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7b8:	1ac0      	subs	r0, r0, r3
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4602      	mov	r2, r0
 800b7be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7c0:	6a21      	ldr	r1, [r4, #32]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b0      	blx	r6
 800b7c6:	1c43      	adds	r3, r0, #1
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	d106      	bne.n	800b7da <__sflush_r+0x66>
 800b7cc:	6829      	ldr	r1, [r5, #0]
 800b7ce:	291d      	cmp	r1, #29
 800b7d0:	d82c      	bhi.n	800b82c <__sflush_r+0xb8>
 800b7d2:	4a2a      	ldr	r2, [pc, #168]	; (800b87c <__sflush_r+0x108>)
 800b7d4:	40ca      	lsrs	r2, r1
 800b7d6:	07d6      	lsls	r6, r2, #31
 800b7d8:	d528      	bpl.n	800b82c <__sflush_r+0xb8>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	6062      	str	r2, [r4, #4]
 800b7de:	04d9      	lsls	r1, r3, #19
 800b7e0:	6922      	ldr	r2, [r4, #16]
 800b7e2:	6022      	str	r2, [r4, #0]
 800b7e4:	d504      	bpl.n	800b7f0 <__sflush_r+0x7c>
 800b7e6:	1c42      	adds	r2, r0, #1
 800b7e8:	d101      	bne.n	800b7ee <__sflush_r+0x7a>
 800b7ea:	682b      	ldr	r3, [r5, #0]
 800b7ec:	b903      	cbnz	r3, 800b7f0 <__sflush_r+0x7c>
 800b7ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7f2:	602f      	str	r7, [r5, #0]
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	d0ca      	beq.n	800b78e <__sflush_r+0x1a>
 800b7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	d002      	beq.n	800b806 <__sflush_r+0x92>
 800b800:	4628      	mov	r0, r5
 800b802:	f7fd fc8d 	bl	8009120 <_free_r>
 800b806:	2000      	movs	r0, #0
 800b808:	6360      	str	r0, [r4, #52]	; 0x34
 800b80a:	e7c1      	b.n	800b790 <__sflush_r+0x1c>
 800b80c:	6a21      	ldr	r1, [r4, #32]
 800b80e:	2301      	movs	r3, #1
 800b810:	4628      	mov	r0, r5
 800b812:	47b0      	blx	r6
 800b814:	1c41      	adds	r1, r0, #1
 800b816:	d1c7      	bne.n	800b7a8 <__sflush_r+0x34>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0c4      	beq.n	800b7a8 <__sflush_r+0x34>
 800b81e:	2b1d      	cmp	r3, #29
 800b820:	d001      	beq.n	800b826 <__sflush_r+0xb2>
 800b822:	2b16      	cmp	r3, #22
 800b824:	d101      	bne.n	800b82a <__sflush_r+0xb6>
 800b826:	602f      	str	r7, [r5, #0]
 800b828:	e7b1      	b.n	800b78e <__sflush_r+0x1a>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	e7ad      	b.n	800b790 <__sflush_r+0x1c>
 800b834:	690f      	ldr	r7, [r1, #16]
 800b836:	2f00      	cmp	r7, #0
 800b838:	d0a9      	beq.n	800b78e <__sflush_r+0x1a>
 800b83a:	0793      	lsls	r3, r2, #30
 800b83c:	680e      	ldr	r6, [r1, #0]
 800b83e:	bf08      	it	eq
 800b840:	694b      	ldreq	r3, [r1, #20]
 800b842:	600f      	str	r7, [r1, #0]
 800b844:	bf18      	it	ne
 800b846:	2300      	movne	r3, #0
 800b848:	eba6 0807 	sub.w	r8, r6, r7
 800b84c:	608b      	str	r3, [r1, #8]
 800b84e:	f1b8 0f00 	cmp.w	r8, #0
 800b852:	dd9c      	ble.n	800b78e <__sflush_r+0x1a>
 800b854:	6a21      	ldr	r1, [r4, #32]
 800b856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b858:	4643      	mov	r3, r8
 800b85a:	463a      	mov	r2, r7
 800b85c:	4628      	mov	r0, r5
 800b85e:	47b0      	blx	r6
 800b860:	2800      	cmp	r0, #0
 800b862:	dc06      	bgt.n	800b872 <__sflush_r+0xfe>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e78e      	b.n	800b790 <__sflush_r+0x1c>
 800b872:	4407      	add	r7, r0
 800b874:	eba8 0800 	sub.w	r8, r8, r0
 800b878:	e7e9      	b.n	800b84e <__sflush_r+0xda>
 800b87a:	bf00      	nop
 800b87c:	20400001 	.word	0x20400001

0800b880 <_fflush_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	690b      	ldr	r3, [r1, #16]
 800b884:	4605      	mov	r5, r0
 800b886:	460c      	mov	r4, r1
 800b888:	b913      	cbnz	r3, 800b890 <_fflush_r+0x10>
 800b88a:	2500      	movs	r5, #0
 800b88c:	4628      	mov	r0, r5
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	b118      	cbz	r0, 800b89a <_fflush_r+0x1a>
 800b892:	6983      	ldr	r3, [r0, #24]
 800b894:	b90b      	cbnz	r3, 800b89a <_fflush_r+0x1a>
 800b896:	f000 f887 	bl	800b9a8 <__sinit>
 800b89a:	4b14      	ldr	r3, [pc, #80]	; (800b8ec <_fflush_r+0x6c>)
 800b89c:	429c      	cmp	r4, r3
 800b89e:	d11b      	bne.n	800b8d8 <_fflush_r+0x58>
 800b8a0:	686c      	ldr	r4, [r5, #4]
 800b8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0ef      	beq.n	800b88a <_fflush_r+0xa>
 800b8aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8ac:	07d0      	lsls	r0, r2, #31
 800b8ae:	d404      	bmi.n	800b8ba <_fflush_r+0x3a>
 800b8b0:	0599      	lsls	r1, r3, #22
 800b8b2:	d402      	bmi.n	800b8ba <_fflush_r+0x3a>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8b6:	f000 f915 	bl	800bae4 <__retarget_lock_acquire_recursive>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f7ff ff59 	bl	800b774 <__sflush_r>
 800b8c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8c4:	07da      	lsls	r2, r3, #31
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	d4e0      	bmi.n	800b88c <_fflush_r+0xc>
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	059b      	lsls	r3, r3, #22
 800b8ce:	d4dd      	bmi.n	800b88c <_fflush_r+0xc>
 800b8d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8d2:	f000 f908 	bl	800bae6 <__retarget_lock_release_recursive>
 800b8d6:	e7d9      	b.n	800b88c <_fflush_r+0xc>
 800b8d8:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <_fflush_r+0x70>)
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	d101      	bne.n	800b8e2 <_fflush_r+0x62>
 800b8de:	68ac      	ldr	r4, [r5, #8]
 800b8e0:	e7df      	b.n	800b8a2 <_fflush_r+0x22>
 800b8e2:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <_fflush_r+0x74>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	bf08      	it	eq
 800b8e8:	68ec      	ldreq	r4, [r5, #12]
 800b8ea:	e7da      	b.n	800b8a2 <_fflush_r+0x22>
 800b8ec:	0800c1f8 	.word	0x0800c1f8
 800b8f0:	0800c218 	.word	0x0800c218
 800b8f4:	0800c1d8 	.word	0x0800c1d8

0800b8f8 <std>:
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b906:	6083      	str	r3, [r0, #8]
 800b908:	8181      	strh	r1, [r0, #12]
 800b90a:	6643      	str	r3, [r0, #100]	; 0x64
 800b90c:	81c2      	strh	r2, [r0, #14]
 800b90e:	6183      	str	r3, [r0, #24]
 800b910:	4619      	mov	r1, r3
 800b912:	2208      	movs	r2, #8
 800b914:	305c      	adds	r0, #92	; 0x5c
 800b916:	f7fd fbfb 	bl	8009110 <memset>
 800b91a:	4b05      	ldr	r3, [pc, #20]	; (800b930 <std+0x38>)
 800b91c:	6263      	str	r3, [r4, #36]	; 0x24
 800b91e:	4b05      	ldr	r3, [pc, #20]	; (800b934 <std+0x3c>)
 800b920:	62a3      	str	r3, [r4, #40]	; 0x28
 800b922:	4b05      	ldr	r3, [pc, #20]	; (800b938 <std+0x40>)
 800b924:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b926:	4b05      	ldr	r3, [pc, #20]	; (800b93c <std+0x44>)
 800b928:	6224      	str	r4, [r4, #32]
 800b92a:	6323      	str	r3, [r4, #48]	; 0x30
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	bf00      	nop
 800b930:	0800bca1 	.word	0x0800bca1
 800b934:	0800bcc3 	.word	0x0800bcc3
 800b938:	0800bcfb 	.word	0x0800bcfb
 800b93c:	0800bd1f 	.word	0x0800bd1f

0800b940 <_cleanup_r>:
 800b940:	4901      	ldr	r1, [pc, #4]	; (800b948 <_cleanup_r+0x8>)
 800b942:	f000 b8af 	b.w	800baa4 <_fwalk_reent>
 800b946:	bf00      	nop
 800b948:	0800b881 	.word	0x0800b881

0800b94c <__sfmoreglue>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	1e4a      	subs	r2, r1, #1
 800b950:	2568      	movs	r5, #104	; 0x68
 800b952:	4355      	muls	r5, r2
 800b954:	460e      	mov	r6, r1
 800b956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b95a:	f7fd fc31 	bl	80091c0 <_malloc_r>
 800b95e:	4604      	mov	r4, r0
 800b960:	b140      	cbz	r0, 800b974 <__sfmoreglue+0x28>
 800b962:	2100      	movs	r1, #0
 800b964:	e9c0 1600 	strd	r1, r6, [r0]
 800b968:	300c      	adds	r0, #12
 800b96a:	60a0      	str	r0, [r4, #8]
 800b96c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b970:	f7fd fbce 	bl	8009110 <memset>
 800b974:	4620      	mov	r0, r4
 800b976:	bd70      	pop	{r4, r5, r6, pc}

0800b978 <__sfp_lock_acquire>:
 800b978:	4801      	ldr	r0, [pc, #4]	; (800b980 <__sfp_lock_acquire+0x8>)
 800b97a:	f000 b8b3 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800b97e:	bf00      	nop
 800b980:	20000860 	.word	0x20000860

0800b984 <__sfp_lock_release>:
 800b984:	4801      	ldr	r0, [pc, #4]	; (800b98c <__sfp_lock_release+0x8>)
 800b986:	f000 b8ae 	b.w	800bae6 <__retarget_lock_release_recursive>
 800b98a:	bf00      	nop
 800b98c:	20000860 	.word	0x20000860

0800b990 <__sinit_lock_acquire>:
 800b990:	4801      	ldr	r0, [pc, #4]	; (800b998 <__sinit_lock_acquire+0x8>)
 800b992:	f000 b8a7 	b.w	800bae4 <__retarget_lock_acquire_recursive>
 800b996:	bf00      	nop
 800b998:	2000085b 	.word	0x2000085b

0800b99c <__sinit_lock_release>:
 800b99c:	4801      	ldr	r0, [pc, #4]	; (800b9a4 <__sinit_lock_release+0x8>)
 800b99e:	f000 b8a2 	b.w	800bae6 <__retarget_lock_release_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	2000085b 	.word	0x2000085b

0800b9a8 <__sinit>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	f7ff fff0 	bl	800b990 <__sinit_lock_acquire>
 800b9b0:	69a3      	ldr	r3, [r4, #24]
 800b9b2:	b11b      	cbz	r3, 800b9bc <__sinit+0x14>
 800b9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9b8:	f7ff bff0 	b.w	800b99c <__sinit_lock_release>
 800b9bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <__sinit+0x68>)
 800b9c4:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <__sinit+0x6c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	bf04      	itt	eq
 800b9ce:	2301      	moveq	r3, #1
 800b9d0:	61a3      	streq	r3, [r4, #24]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 f820 	bl	800ba18 <__sfp>
 800b9d8:	6060      	str	r0, [r4, #4]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f000 f81c 	bl	800ba18 <__sfp>
 800b9e0:	60a0      	str	r0, [r4, #8]
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 f818 	bl	800ba18 <__sfp>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	60e0      	str	r0, [r4, #12]
 800b9ec:	2104      	movs	r1, #4
 800b9ee:	6860      	ldr	r0, [r4, #4]
 800b9f0:	f7ff ff82 	bl	800b8f8 <std>
 800b9f4:	68a0      	ldr	r0, [r4, #8]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	2109      	movs	r1, #9
 800b9fa:	f7ff ff7d 	bl	800b8f8 <std>
 800b9fe:	68e0      	ldr	r0, [r4, #12]
 800ba00:	2202      	movs	r2, #2
 800ba02:	2112      	movs	r1, #18
 800ba04:	f7ff ff78 	bl	800b8f8 <std>
 800ba08:	2301      	movs	r3, #1
 800ba0a:	61a3      	str	r3, [r4, #24]
 800ba0c:	e7d2      	b.n	800b9b4 <__sinit+0xc>
 800ba0e:	bf00      	nop
 800ba10:	0800bef8 	.word	0x0800bef8
 800ba14:	0800b941 	.word	0x0800b941

0800ba18 <__sfp>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	4607      	mov	r7, r0
 800ba1c:	f7ff ffac 	bl	800b978 <__sfp_lock_acquire>
 800ba20:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <__sfp+0x84>)
 800ba22:	681e      	ldr	r6, [r3, #0]
 800ba24:	69b3      	ldr	r3, [r6, #24]
 800ba26:	b913      	cbnz	r3, 800ba2e <__sfp+0x16>
 800ba28:	4630      	mov	r0, r6
 800ba2a:	f7ff ffbd 	bl	800b9a8 <__sinit>
 800ba2e:	3648      	adds	r6, #72	; 0x48
 800ba30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	d503      	bpl.n	800ba40 <__sfp+0x28>
 800ba38:	6833      	ldr	r3, [r6, #0]
 800ba3a:	b30b      	cbz	r3, 800ba80 <__sfp+0x68>
 800ba3c:	6836      	ldr	r6, [r6, #0]
 800ba3e:	e7f7      	b.n	800ba30 <__sfp+0x18>
 800ba40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba44:	b9d5      	cbnz	r5, 800ba7c <__sfp+0x64>
 800ba46:	4b16      	ldr	r3, [pc, #88]	; (800baa0 <__sfp+0x88>)
 800ba48:	60e3      	str	r3, [r4, #12]
 800ba4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba4e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba50:	f000 f847 	bl	800bae2 <__retarget_lock_init_recursive>
 800ba54:	f7ff ff96 	bl	800b984 <__sfp_lock_release>
 800ba58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba60:	6025      	str	r5, [r4, #0]
 800ba62:	61a5      	str	r5, [r4, #24]
 800ba64:	2208      	movs	r2, #8
 800ba66:	4629      	mov	r1, r5
 800ba68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba6c:	f7fd fb50 	bl	8009110 <memset>
 800ba70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba78:	4620      	mov	r0, r4
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7c:	3468      	adds	r4, #104	; 0x68
 800ba7e:	e7d9      	b.n	800ba34 <__sfp+0x1c>
 800ba80:	2104      	movs	r1, #4
 800ba82:	4638      	mov	r0, r7
 800ba84:	f7ff ff62 	bl	800b94c <__sfmoreglue>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	6030      	str	r0, [r6, #0]
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1d5      	bne.n	800ba3c <__sfp+0x24>
 800ba90:	f7ff ff78 	bl	800b984 <__sfp_lock_release>
 800ba94:	230c      	movs	r3, #12
 800ba96:	603b      	str	r3, [r7, #0]
 800ba98:	e7ee      	b.n	800ba78 <__sfp+0x60>
 800ba9a:	bf00      	nop
 800ba9c:	0800bef8 	.word	0x0800bef8
 800baa0:	ffff0001 	.word	0xffff0001

0800baa4 <_fwalk_reent>:
 800baa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa8:	4606      	mov	r6, r0
 800baaa:	4688      	mov	r8, r1
 800baac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bab0:	2700      	movs	r7, #0
 800bab2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bab6:	f1b9 0901 	subs.w	r9, r9, #1
 800baba:	d505      	bpl.n	800bac8 <_fwalk_reent+0x24>
 800babc:	6824      	ldr	r4, [r4, #0]
 800babe:	2c00      	cmp	r4, #0
 800bac0:	d1f7      	bne.n	800bab2 <_fwalk_reent+0xe>
 800bac2:	4638      	mov	r0, r7
 800bac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac8:	89ab      	ldrh	r3, [r5, #12]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d907      	bls.n	800bade <_fwalk_reent+0x3a>
 800bace:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bad2:	3301      	adds	r3, #1
 800bad4:	d003      	beq.n	800bade <_fwalk_reent+0x3a>
 800bad6:	4629      	mov	r1, r5
 800bad8:	4630      	mov	r0, r6
 800bada:	47c0      	blx	r8
 800badc:	4307      	orrs	r7, r0
 800bade:	3568      	adds	r5, #104	; 0x68
 800bae0:	e7e9      	b.n	800bab6 <_fwalk_reent+0x12>

0800bae2 <__retarget_lock_init_recursive>:
 800bae2:	4770      	bx	lr

0800bae4 <__retarget_lock_acquire_recursive>:
 800bae4:	4770      	bx	lr

0800bae6 <__retarget_lock_release_recursive>:
 800bae6:	4770      	bx	lr

0800bae8 <__swhatbuf_r>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	460e      	mov	r6, r1
 800baec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf0:	2900      	cmp	r1, #0
 800baf2:	b096      	sub	sp, #88	; 0x58
 800baf4:	4614      	mov	r4, r2
 800baf6:	461d      	mov	r5, r3
 800baf8:	da07      	bge.n	800bb0a <__swhatbuf_r+0x22>
 800bafa:	2300      	movs	r3, #0
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	89b3      	ldrh	r3, [r6, #12]
 800bb00:	061a      	lsls	r2, r3, #24
 800bb02:	d410      	bmi.n	800bb26 <__swhatbuf_r+0x3e>
 800bb04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb08:	e00e      	b.n	800bb28 <__swhatbuf_r+0x40>
 800bb0a:	466a      	mov	r2, sp
 800bb0c:	f000 f93a 	bl	800bd84 <_fstat_r>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	dbf2      	blt.n	800bafa <__swhatbuf_r+0x12>
 800bb14:	9a01      	ldr	r2, [sp, #4]
 800bb16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb1e:	425a      	negs	r2, r3
 800bb20:	415a      	adcs	r2, r3
 800bb22:	602a      	str	r2, [r5, #0]
 800bb24:	e7ee      	b.n	800bb04 <__swhatbuf_r+0x1c>
 800bb26:	2340      	movs	r3, #64	; 0x40
 800bb28:	2000      	movs	r0, #0
 800bb2a:	6023      	str	r3, [r4, #0]
 800bb2c:	b016      	add	sp, #88	; 0x58
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}

0800bb30 <__smakebuf_r>:
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb34:	079d      	lsls	r5, r3, #30
 800bb36:	4606      	mov	r6, r0
 800bb38:	460c      	mov	r4, r1
 800bb3a:	d507      	bpl.n	800bb4c <__smakebuf_r+0x1c>
 800bb3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	2301      	movs	r3, #1
 800bb46:	6163      	str	r3, [r4, #20]
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd70      	pop	{r4, r5, r6, pc}
 800bb4c:	ab01      	add	r3, sp, #4
 800bb4e:	466a      	mov	r2, sp
 800bb50:	f7ff ffca 	bl	800bae8 <__swhatbuf_r>
 800bb54:	9900      	ldr	r1, [sp, #0]
 800bb56:	4605      	mov	r5, r0
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7fd fb31 	bl	80091c0 <_malloc_r>
 800bb5e:	b948      	cbnz	r0, 800bb74 <__smakebuf_r+0x44>
 800bb60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb64:	059a      	lsls	r2, r3, #22
 800bb66:	d4ef      	bmi.n	800bb48 <__smakebuf_r+0x18>
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	f043 0302 	orr.w	r3, r3, #2
 800bb70:	81a3      	strh	r3, [r4, #12]
 800bb72:	e7e3      	b.n	800bb3c <__smakebuf_r+0xc>
 800bb74:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <__smakebuf_r+0x7c>)
 800bb76:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	6163      	str	r3, [r4, #20]
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	6120      	str	r0, [r4, #16]
 800bb8a:	b15b      	cbz	r3, 800bba4 <__smakebuf_r+0x74>
 800bb8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb90:	4630      	mov	r0, r6
 800bb92:	f000 f909 	bl	800bda8 <_isatty_r>
 800bb96:	b128      	cbz	r0, 800bba4 <__smakebuf_r+0x74>
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	f043 0301 	orr.w	r3, r3, #1
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	89a0      	ldrh	r0, [r4, #12]
 800bba6:	4305      	orrs	r5, r0
 800bba8:	81a5      	strh	r5, [r4, #12]
 800bbaa:	e7cd      	b.n	800bb48 <__smakebuf_r+0x18>
 800bbac:	0800b941 	.word	0x0800b941

0800bbb0 <__ascii_mbtowc>:
 800bbb0:	b082      	sub	sp, #8
 800bbb2:	b901      	cbnz	r1, 800bbb6 <__ascii_mbtowc+0x6>
 800bbb4:	a901      	add	r1, sp, #4
 800bbb6:	b142      	cbz	r2, 800bbca <__ascii_mbtowc+0x1a>
 800bbb8:	b14b      	cbz	r3, 800bbce <__ascii_mbtowc+0x1e>
 800bbba:	7813      	ldrb	r3, [r2, #0]
 800bbbc:	600b      	str	r3, [r1, #0]
 800bbbe:	7812      	ldrb	r2, [r2, #0]
 800bbc0:	1e10      	subs	r0, r2, #0
 800bbc2:	bf18      	it	ne
 800bbc4:	2001      	movne	r0, #1
 800bbc6:	b002      	add	sp, #8
 800bbc8:	4770      	bx	lr
 800bbca:	4610      	mov	r0, r2
 800bbcc:	e7fb      	b.n	800bbc6 <__ascii_mbtowc+0x16>
 800bbce:	f06f 0001 	mvn.w	r0, #1
 800bbd2:	e7f8      	b.n	800bbc6 <__ascii_mbtowc+0x16>

0800bbd4 <memmove>:
 800bbd4:	4288      	cmp	r0, r1
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	eb01 0402 	add.w	r4, r1, r2
 800bbdc:	d902      	bls.n	800bbe4 <memmove+0x10>
 800bbde:	4284      	cmp	r4, r0
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	d807      	bhi.n	800bbf4 <memmove+0x20>
 800bbe4:	1e43      	subs	r3, r0, #1
 800bbe6:	42a1      	cmp	r1, r4
 800bbe8:	d008      	beq.n	800bbfc <memmove+0x28>
 800bbea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbf2:	e7f8      	b.n	800bbe6 <memmove+0x12>
 800bbf4:	4402      	add	r2, r0
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	428a      	cmp	r2, r1
 800bbfa:	d100      	bne.n	800bbfe <memmove+0x2a>
 800bbfc:	bd10      	pop	{r4, pc}
 800bbfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc06:	e7f7      	b.n	800bbf8 <memmove+0x24>

0800bc08 <_malloc_usable_size_r>:
 800bc08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0c:	1f18      	subs	r0, r3, #4
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bfbc      	itt	lt
 800bc12:	580b      	ldrlt	r3, [r1, r0]
 800bc14:	18c0      	addlt	r0, r0, r3
 800bc16:	4770      	bx	lr

0800bc18 <_raise_r>:
 800bc18:	291f      	cmp	r1, #31
 800bc1a:	b538      	push	{r3, r4, r5, lr}
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	460d      	mov	r5, r1
 800bc20:	d904      	bls.n	800bc2c <_raise_r+0x14>
 800bc22:	2316      	movs	r3, #22
 800bc24:	6003      	str	r3, [r0, #0]
 800bc26:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2a:	bd38      	pop	{r3, r4, r5, pc}
 800bc2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc2e:	b112      	cbz	r2, 800bc36 <_raise_r+0x1e>
 800bc30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc34:	b94b      	cbnz	r3, 800bc4a <_raise_r+0x32>
 800bc36:	4620      	mov	r0, r4
 800bc38:	f000 f830 	bl	800bc9c <_getpid_r>
 800bc3c:	462a      	mov	r2, r5
 800bc3e:	4601      	mov	r1, r0
 800bc40:	4620      	mov	r0, r4
 800bc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc46:	f000 b817 	b.w	800bc78 <_kill_r>
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d00a      	beq.n	800bc64 <_raise_r+0x4c>
 800bc4e:	1c59      	adds	r1, r3, #1
 800bc50:	d103      	bne.n	800bc5a <_raise_r+0x42>
 800bc52:	2316      	movs	r3, #22
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	2001      	movs	r0, #1
 800bc58:	e7e7      	b.n	800bc2a <_raise_r+0x12>
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc60:	4628      	mov	r0, r5
 800bc62:	4798      	blx	r3
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7e0      	b.n	800bc2a <_raise_r+0x12>

0800bc68 <raise>:
 800bc68:	4b02      	ldr	r3, [pc, #8]	; (800bc74 <raise+0xc>)
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	6818      	ldr	r0, [r3, #0]
 800bc6e:	f7ff bfd3 	b.w	800bc18 <_raise_r>
 800bc72:	bf00      	nop
 800bc74:	200001bc 	.word	0x200001bc

0800bc78 <_kill_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d07      	ldr	r5, [pc, #28]	; (800bc98 <_kill_r+0x20>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	4611      	mov	r1, r2
 800bc84:	602b      	str	r3, [r5, #0]
 800bc86:	f7f6 fc6b 	bl	8002560 <_kill>
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	d102      	bne.n	800bc94 <_kill_r+0x1c>
 800bc8e:	682b      	ldr	r3, [r5, #0]
 800bc90:	b103      	cbz	r3, 800bc94 <_kill_r+0x1c>
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	bd38      	pop	{r3, r4, r5, pc}
 800bc96:	bf00      	nop
 800bc98:	20000854 	.word	0x20000854

0800bc9c <_getpid_r>:
 800bc9c:	f7f6 bc58 	b.w	8002550 <_getpid>

0800bca0 <__sread>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	460c      	mov	r4, r1
 800bca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca8:	f000 f8a0 	bl	800bdec <_read_r>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	bfab      	itete	ge
 800bcb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcb2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcb4:	181b      	addge	r3, r3, r0
 800bcb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcba:	bfac      	ite	ge
 800bcbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcbe:	81a3      	strhlt	r3, [r4, #12]
 800bcc0:	bd10      	pop	{r4, pc}

0800bcc2 <__swrite>:
 800bcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc6:	461f      	mov	r7, r3
 800bcc8:	898b      	ldrh	r3, [r1, #12]
 800bcca:	05db      	lsls	r3, r3, #23
 800bccc:	4605      	mov	r5, r0
 800bcce:	460c      	mov	r4, r1
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	d505      	bpl.n	800bce0 <__swrite+0x1e>
 800bcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd8:	2302      	movs	r3, #2
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f000 f874 	bl	800bdc8 <_lseek_r>
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	4632      	mov	r2, r6
 800bcee:	463b      	mov	r3, r7
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf6:	f000 b823 	b.w	800bd40 <_write_r>

0800bcfa <__sseek>:
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd02:	f000 f861 	bl	800bdc8 <_lseek_r>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	bf15      	itete	ne
 800bd0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd16:	81a3      	strheq	r3, [r4, #12]
 800bd18:	bf18      	it	ne
 800bd1a:	81a3      	strhne	r3, [r4, #12]
 800bd1c:	bd10      	pop	{r4, pc}

0800bd1e <__sclose>:
 800bd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd22:	f000 b81f 	b.w	800bd64 <_close_r>

0800bd26 <__ascii_wctomb>:
 800bd26:	b149      	cbz	r1, 800bd3c <__ascii_wctomb+0x16>
 800bd28:	2aff      	cmp	r2, #255	; 0xff
 800bd2a:	bf85      	ittet	hi
 800bd2c:	238a      	movhi	r3, #138	; 0x8a
 800bd2e:	6003      	strhi	r3, [r0, #0]
 800bd30:	700a      	strbls	r2, [r1, #0]
 800bd32:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd36:	bf98      	it	ls
 800bd38:	2001      	movls	r0, #1
 800bd3a:	4770      	bx	lr
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	4770      	bx	lr

0800bd40 <_write_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	; (800bd60 <_write_r+0x20>)
 800bd44:	4604      	mov	r4, r0
 800bd46:	4608      	mov	r0, r1
 800bd48:	4611      	mov	r1, r2
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	602a      	str	r2, [r5, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	f7f6 fc3d 	bl	80025ce <_write>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_write_r+0x1e>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_write_r+0x1e>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	20000854 	.word	0x20000854

0800bd64 <_close_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	; (800bd80 <_close_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f6 fc49 	bl	8002606 <_close>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_close_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_close_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20000854 	.word	0x20000854

0800bd84 <_fstat_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	; (800bda4 <_fstat_r+0x20>)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	4611      	mov	r1, r2
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	f7f6 fc44 	bl	800261e <_fstat>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d102      	bne.n	800bda0 <_fstat_r+0x1c>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	b103      	cbz	r3, 800bda0 <_fstat_r+0x1c>
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	bf00      	nop
 800bda4:	20000854 	.word	0x20000854

0800bda8 <_isatty_r>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4d06      	ldr	r5, [pc, #24]	; (800bdc4 <_isatty_r+0x1c>)
 800bdac:	2300      	movs	r3, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4608      	mov	r0, r1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	f7f6 fc43 	bl	800263e <_isatty>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_isatty_r+0x1a>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_isatty_r+0x1a>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20000854 	.word	0x20000854

0800bdc8 <_lseek_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d07      	ldr	r5, [pc, #28]	; (800bde8 <_lseek_r+0x20>)
 800bdcc:	4604      	mov	r4, r0
 800bdce:	4608      	mov	r0, r1
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	602a      	str	r2, [r5, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f7f6 fc3c 	bl	8002654 <_lseek>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d102      	bne.n	800bde6 <_lseek_r+0x1e>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <_lseek_r+0x1e>
 800bde4:	6023      	str	r3, [r4, #0]
 800bde6:	bd38      	pop	{r3, r4, r5, pc}
 800bde8:	20000854 	.word	0x20000854

0800bdec <_read_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	4d07      	ldr	r5, [pc, #28]	; (800be0c <_read_r+0x20>)
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	4608      	mov	r0, r1
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	602a      	str	r2, [r5, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f7f6 fbca 	bl	8002594 <_read>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_read_r+0x1e>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b103      	cbz	r3, 800be0a <_read_r+0x1e>
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	20000854 	.word	0x20000854

0800be10 <_init>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr

0800be1c <_fini>:
 800be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1e:	bf00      	nop
 800be20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be22:	bc08      	pop	{r3}
 800be24:	469e      	mov	lr, r3
 800be26:	4770      	bx	lr
