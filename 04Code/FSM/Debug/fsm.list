
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e84  08009e84  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e8c  08009e8c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e90  08009e90  00019e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000238  0800a0cc  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800a0cc  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020059  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000459c  00000000  00000000  000402bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00044860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  00045d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd21  00000000  00000000  00047088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c487  00000000  00000000  00073da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001064f5  00000000  00000000  00090230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006180  00000000  00000000  00196778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	08009a5c 	.word	0x08009a5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	08009a5c 	.word	0x08009a5c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC2_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC2_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC2_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC2_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC2_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC2_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC2_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC2_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC2_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC2_Init+0x98>)
 800064a:	f001 fd09 	bl	8002060 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fbe6 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC2_Init+0x98>)
 800066a:	f001 fffb 	bl	8002664 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fbd6 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000028c 	.word	0x2000028c
 8000684:	40012100 	.word	0x40012100
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fcb7 	bl	8002060 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fb94 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000704:	2307      	movs	r3, #7
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f001 ffa9 	bl	8002664 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fb84 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f001 ff9b 	bl	8002664 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fb76 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f001 ff8d 	bl	8002664 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fb68 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f001 ff7f 	bl	8002664 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fb5a 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f001 ff71 	bl	8002664 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fb4c 	bl	8000e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f001 ff63 	bl	8002664 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fb3e 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000334 	.word	0x20000334
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <HAL_ADC_MspInit+0x210>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d15d      	bne.n	800089a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a75      	ldr	r2, [pc, #468]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	486c      	ldr	r0, [pc, #432]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 8000822:	f002 ff0b 	bl	800363c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000828:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <HAL_ADC_MspInit+0x220>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800086e:	f002 fadb 	bl	8002e28 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000878:	f000 fad4 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a55      	ldr	r2, [pc, #340]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2012      	movs	r0, #18
 800088e:	f002 fa94 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000892:	2012      	movs	r0, #18
 8000894:	f002 faad 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000898:	e093      	b.n	80009c2 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <HAL_ADC_MspInit+0x224>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f040 808e 	bne.w	80009c2 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 8000906:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <HAL_ADC_MspInit+0x228>)
 800091c:	f002 fe8e 	bl	800363c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_ADC_MspInit+0x22c>)
 8000934:	f002 fe82 	bl	800363c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 800094c:	f002 fe76 	bl	800363c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0x234>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000998:	f002 fa46 	bl	8002e28 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009a2:	f000 fa3f 	bl	8000e24 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2012      	movs	r0, #18
 80009b8:	f002 f9ff 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009bc:	2012      	movs	r0, #18
 80009be:	f002 fa18 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012100 	.word	0x40012100
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	2000037c 	.word	0x2000037c
 80009dc:	40026440 	.word	0x40026440
 80009e0:	40012200 	.word	0x40012200
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	200002d4 	.word	0x200002d4
 80009f0:	40026428 	.word	0x40026428

080009f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_DMA_Init+0x48>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <MX_DMA_Init+0x48>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_DMA_Init+0x48>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2039      	movs	r0, #57	; 0x39
 8000a18:	f002 f9cf 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a1c:	2039      	movs	r0, #57	; 0x39
 8000a1e:	f002 f9e8 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	203a      	movs	r0, #58	; 0x3a
 8000a28:	f002 f9c7 	bl	8002dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a2c:	203a      	movs	r0, #58	; 0x3a
 8000a2e:	f002 f9e0 	bl	8002df2 <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a56:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a5c:	f043 0320 	orr.w	r3, r3, #32
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b48      	ldr	r3, [pc, #288]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0320 	and.w	r3, r3, #32
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b45      	ldr	r3, [pc, #276]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a44      	ldr	r2, [pc, #272]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a38      	ldr	r2, [pc, #224]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b33      	ldr	r3, [pc, #204]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a32      	ldr	r2, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <MX_GPIO_Init+0x144>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2160      	movs	r1, #96	; 0x60
 8000ad2:	482d      	ldr	r0, [pc, #180]	; (8000b88 <MX_GPIO_Init+0x148>)
 8000ad4:	f002 ff5e 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f244 2181 	movw	r1, #17025	; 0x4281
 8000ade:	482b      	ldr	r0, [pc, #172]	; (8000b8c <MX_GPIO_Init+0x14c>)
 8000ae0:	f002 ff58 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f244 0104 	movw	r1, #16388	; 0x4004
 8000aea:	4829      	ldr	r0, [pc, #164]	; (8000b90 <MX_GPIO_Init+0x150>)
 8000aec:	f002 ff52 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4824      	ldr	r0, [pc, #144]	; (8000b94 <MX_GPIO_Init+0x154>)
 8000b04:	f002 fd9a 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000b08:	2360      	movs	r3, #96	; 0x60
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <MX_GPIO_Init+0x148>)
 8000b20:	f002 fd8c 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000b24:	f244 2381 	movw	r3, #17025	; 0x4281
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_GPIO_Init+0x14c>)
 8000b3e:	f002 fd7d 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000b42:	f244 0304 	movw	r3, #16388	; 0x4004
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_GPIO_Init+0x150>)
 8000b5c:	f002 fd6e 	bl	800363c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <MX_GPIO_Init+0x154>)
 8000b76:	f002 fd61 	bl	800363c <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40020800 	.word	0x40020800

08000b98 <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <lfollower_start+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d007      	beq.n	8000bb4 <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 8000ba4:	f000 fb3e 	bl	8001224 <qtr_init>
	// start movement
	move_start();
 8000ba8:	f000 fa18 	bl	8000fdc <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 8000bac:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <lfollower_start+0x20>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e000      	b.n	8000bb6 <lfollower_start+0x1e>
		return;
 8000bb4:	bf00      	nop
}
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000256 	.word	0x20000256

08000bbc <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <lfollower_stop+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d007      	beq.n	8000bd8 <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 8000bc8:	f000 fb3a 	bl	8001240 <qtr_kill>
	// stop movement
	move_stop();
 8000bcc:	f000 fa1a 	bl	8001004 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <lfollower_stop+0x20>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
 8000bd6:	e000      	b.n	8000bda <lfollower_stop+0x1e>
		return;
 8000bd8:	bf00      	nop
}
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000256 	.word	0x20000256

08000be0 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	ed2d 8b02 	vpush	{d8}
 8000be6:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <lfollower_isr+0xa0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e03f      	b.n	8000c74 <lfollower_isr+0x94>

	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f000 fb2f 	bl	8001258 <qtr_get_digital>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <lfollower_isr+0x34>
		(qtr_get_digital(LF_SENSOR_CTR_L) == 0))
 8000c00:	2003      	movs	r0, #3
 8000c02:	f000 fb29 	bl	8001258 <qtr_get_digital>
 8000c06:	4603      	mov	r3, r0
	if((qtr_get_digital(LF_SENSOR_CTR_R) == 0) &&
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d103      	bne.n	8000c14 <lfollower_isr+0x34>
	{
		// robot is not over the line
		// stop line follower
		lfollower_stop();
 8000c0c:	f7ff ffd6 	bl	8000bbc <lfollower_stop>
		// send error: no line to follow
		return E_LF_NO_LINE;
 8000c10:	2305      	movs	r3, #5
 8000c12:	e02f      	b.n	8000c74 <lfollower_isr+0x94>
	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8000c14:	2004      	movs	r0, #4
 8000c16:	f000 fb57 	bl	80012c8 <qtr_get_analog>
 8000c1a:	eeb0 8a40 	vmov.f32	s16, s0
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fb52 	bl	80012c8 <qtr_get_analog>
 8000c24:	eef0 7a40 	vmov.f32	s15, s0
 8000c28:	eef0 0a67 	vmov.f32	s1, s15
 8000c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8000c30:	4814      	ldr	r0, [pc, #80]	; (8000c84 <lfollower_isr+0xa4>)
 8000c32:	f000 fa6b 	bl	800110c <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <lfollower_isr+0xa4>)
 8000c38:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c3c:	eef1 7a67 	vneg.f32	s15, s15
 8000c40:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c88 <lfollower_isr+0xa8>
 8000c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c48:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000c8c <lfollower_isr+0xac>
 8000c4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <lfollower_isr+0xa4>)
 8000c52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c56:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000c88 <lfollower_isr+0xa8>
 8000c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c5e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000c8c <lfollower_isr+0xac>
 8000c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c66:	eef0 0a67 	vmov.f32	s1, s15
 8000c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000c6e:	f000 f9df 	bl	8001030 <move_control>

	return EXIT_SUCCESS;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	ecbd 8b02 	vpop	{d8}
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000256 	.word	0x20000256
 8000c84:	20000000 	.word	0x20000000
 8000c88:	3eb33334 	.word	0x3eb33334
 8000c8c:	3f266666 	.word	0x3f266666

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c96:	f001 f962 	bl	8001f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9a:	f000 f831 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9e:	f7ff fecf 	bl	8000a40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca2:	f7ff fea7 	bl	80009f4 <MX_DMA_Init>
  MX_SPI3_Init();
 8000ca6:	f000 fb39 	bl	800131c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000caa:	f001 f867 	bl	8001d7c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000cae:	f000 fe9d 	bl	80019ec <MX_TIM6_Init>
  MX_ADC3_Init();
 8000cb2:	f7ff fceb 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000cb6:	f000 fe35 	bl	8001924 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000cba:	f001 f82f 	bl	8001d1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000cbe:	f000 fde1 	bl	8001884 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000cc2:	f7ff fc91 	bl	80005e8 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <main+0x64>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <main+0x68>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]

  int err = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]

  while (1)
  {
	err = test_modules();
 8000cd6:	f000 fdcb 	bl	8001870 <test_modules>
 8000cda:	6078      	str	r0, [r7, #4]

	switch(err)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <main+0x60>
		case 0:
			break;

		default:
			// signal error. Light up RED LED
			write_led(LRED, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <main+0x6c>)
 8000cea:	f002 fe53 	bl	8003994 <HAL_GPIO_WritePin>
			break;
 8000cee:	e000      	b.n	8000cf2 <main+0x62>
			break;
 8000cf0:	bf00      	nop
	}

	while(1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x62>
 8000cf4:	20000254 	.word	0x20000254
 8000cf8:	20000255 	.word	0x20000255
 8000cfc:	40020400 	.word	0x40020400

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0b8      	sub	sp, #224	; 0xe0
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0a:	2234      	movs	r2, #52	; 0x34
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 fa64 	bl	80071dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	2290      	movs	r2, #144	; 0x90
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f006 fa55 	bl	80071dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b3a      	ldr	r3, [pc, #232]	; (8000e1c <SystemClock_Config+0x11c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <SystemClock_Config+0x11c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <SystemClock_Config+0x11c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <SystemClock_Config+0x120>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a34      	ldr	r2, [pc, #208]	; (8000e20 <SystemClock_Config+0x120>)
 8000d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <SystemClock_Config+0x120>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d62:	2302      	movs	r3, #2
 8000d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d80:	2308      	movs	r3, #8
 8000d82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d86:	23d8      	movs	r3, #216	; 0xd8
 8000d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fe7d 	bl	8003a9c <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000da8:	f000 f83c 	bl	8000e24 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dac:	f002 fe26 	bl	80039fc <HAL_PWREx_EnableOverDrive>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000db6:	f000 f835 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	230f      	movs	r3, #15
 8000dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ddc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000de0:	2107      	movs	r1, #7
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f908 	bl	8003ff8 <HAL_RCC_ClockConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000dee:	f000 f819 	bl	8000e24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000df2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000df6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 facd 	bl	80043a4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e10:	f000 f808 	bl	8000e24 <Error_Handler>
  }
}
 8000e14:	bf00      	nop
 8000e16:	37e0      	adds	r7, #224	; 0xe0
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <motion_start>:
//
//	// start sampling motion sensors
//	HAL_TIM_Base_Start_IT(&TIM_MOTION);
//}
void motion_start(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <motion_start+0x38>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d012      	beq.n	8000e62 <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8000e3c:	f7ff feac 	bl	8000b98 <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <motion_start+0x38>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d103      	bne.n	8000e50 <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <motion_start+0x38>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
		return;
 8000e4e:	e009      	b.n	8000e64 <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <motion_start+0x38>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 8000e56:	f000 fba3 	bl	80015a0 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8000e5a:	4804      	ldr	r0, [pc, #16]	; (8000e6c <motion_start+0x3c>)
 8000e5c:	f004 f8ec 	bl	8005038 <HAL_TIM_Base_Start_IT>
 8000e60:	e000      	b.n	8000e64 <motion_start+0x34>
		return;
 8000e62:	bf00      	nop
}
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000030 	.word	0x20000030
 8000e6c:	2000053c 	.word	0x2000053c

08000e70 <motion_stop>:

void motion_stop(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	if(motion_status == MOT_OFF)
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <motion_stop+0x34>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00e      	beq.n	8000e9a <motion_stop+0x2a>
		// already stopped
		return;

	// disable Line Follower
	lfollower_stop();
 8000e7c:	f7ff fe9e 	bl	8000bbc <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <motion_stop+0x34>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d00a      	beq.n	8000e9e <motion_stop+0x2e>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <motion_stop+0x38>)
 8000e8a:	f004 f94d 	bl	8005128 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 8000e8e:	f000 fb99 	bl	80015c4 <stop_detector_deInit>
	// motion OFF
	motion_status = MOT_OFF;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <motion_stop+0x34>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	e002      	b.n	8000ea0 <motion_stop+0x30>
		return;
 8000e9a:	bf00      	nop
 8000e9c:	e000      	b.n	8000ea0 <motion_stop+0x30>
		return;
 8000e9e:	bf00      	nop
}
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000030 	.word	0x20000030
 8000ea8:	2000053c 	.word	0x2000053c

08000eac <motion_isr>:
//		motion_stop();
//	}
//}

void motion_isr(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8000eb2:	f000 fb95 	bl	80015e0 <stop_detector_isr>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <motion_isr+0x7c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d10f      	bne.n	8000ee2 <motion_isr+0x36>
	{
		if(timeout_flag)
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <motion_isr+0x80>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <motion_isr+0x7c>)
 8000ecc:	2206      	movs	r2, #6
 8000ece:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8000ed0:	f7ff ffce 	bl	8000e70 <motion_stop>
			return;
 8000ed4:	e025      	b.n	8000f22 <motion_isr+0x76>
		}
		if(err == 0)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d121      	bne.n	8000f20 <motion_isr+0x74>
			// obstacle has been moved
			// restart movement
			motion_start();
 8000edc:	f7ff ffa8 	bl	8000e30 <motion_start>
 8000ee0:	e011      	b.n	8000f06 <motion_isr+0x5a>
		else
			// continue in Hold
			return;
	}
	else if(err)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00e      	beq.n	8000f06 <motion_isr+0x5a>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <motion_isr+0x7c>)
 8000ef0:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <motion_isr+0x7c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d102      	bne.n	8000f00 <motion_isr+0x54>
			timeout_start(HOLD_TIMEOUT);
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 fec6 	bl	8001c8c <timeout_start>

		// obstacle/stop mark found
		// stop movement
		motion_stop();
 8000f00:	f7ff ffb6 	bl	8000e70 <motion_stop>
		return;
 8000f04:	e00d      	b.n	8000f22 <motion_isr+0x76>
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 8000f06:	f7ff fe6b 	bl	8000be0 <lfollower_isr>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	if(err)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <motion_isr+0x76>
	{
		// signal motion error
		motion_status = MOT_ERR;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <motion_isr+0x7c>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 8000f1a:	f7ff ffa9 	bl	8000e70 <motion_stop>
 8000f1e:	e000      	b.n	8000f22 <motion_isr+0x76>
			return;
 8000f20:	bf00      	nop
	}
}
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000030 	.word	0x20000030
 8000f2c:	20000280 	.word	0x20000280

08000f30 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <motor_init+0x1c>)
 8000f40:	f004 f978 	bl	8005234 <HAL_TIM_PWM_Start>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200004a4 	.word	0x200004a4

08000f50 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <motor_kill+0x28>)
 8000f60:	f004 fa62 	bl	8005428 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8000f64:	2202      	movs	r2, #2
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 f807 	bl	8000f7c <motor_control>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200004a4 	.word	0x200004a4

08000f7c <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6858      	ldr	r0, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	8919      	ldrh	r1, [r3, #8]
 8000f94:	78bb      	ldrb	r3, [r7, #2]
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <motor_control+0x58>)
 8000f98:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	f002 fcf9 	bl	8003994 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68d8      	ldr	r0, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	8a19      	ldrh	r1, [r3, #16]
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <motor_control+0x58>)
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	f002 fced 	bl	8003994 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <motor_control+0x5c>)
 8000fc8:	f000 fe06 	bl	8001bd8 <set_pwm>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08009a78 	.word	0x08009a78
 8000fd8:	200004a4 	.word	0x200004a4

08000fdc <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <move_start+0x1c>)
 8000fe2:	f7ff ffa5 	bl	8000f30 <motor_init>
	motor_init(&motor_left);
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <move_start+0x20>)
 8000fe8:	f7ff ffa2 	bl	8000f30 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <move_start+0x24>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000034 	.word	0x20000034
 8000ffc:	20000048 	.word	0x20000048
 8001000:	20000257 	.word	0x20000257

08001004 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <move_stop+0x1c>)
 800100a:	f7ff ffa1 	bl	8000f50 <motor_kill>
	motor_kill(&motor_left);
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <move_stop+0x20>)
 8001010:	f7ff ff9e 	bl	8000f50 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <move_stop+0x24>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000034 	.word	0x20000034
 8001024:	20000048 	.word	0x20000048
 8001028:	20000257 	.word	0x20000257
 800102c:	00000000 	.word	0x00000000

08001030 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	ed87 0a03 	vstr	s0, [r7, #12]
 800103a:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 800103e:	4b30      	ldr	r3, [pc, #192]	; (8001100 <move_control+0xd0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8001046:	f7ff ffc9 	bl	8000fdc <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 800104a:	edd7 7a03 	vldr	s15, [r7, #12]
 800104e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001052:	ed9f 6b27 	vldr	d6, [pc, #156]	; 80010f0 <move_control+0xc0>
 8001056:	ee37 7b06 	vadd.f64	d7, d7, d6
 800105a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800105e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8001066:	edd7 7a02 	vldr	s15, [r7, #8]
 800106a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80010f0 <move_control+0xc0>
 8001072:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001076:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800107a:	edc7 7a01 	vstr	s15, [r7, #4]
 800107e:	793b      	ldrb	r3, [r7, #4]
 8001080:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 8001082:	edd7 7a02 	vldr	s15, [r7, #8]
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800108e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 80010f8 <move_control+0xc8>
 8001092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109a:	edc7 7a01 	vstr	s15, [r7, #4]
 800109e:	793b      	ldrb	r3, [r7, #4]
 80010a0:	b2d9      	uxtb	r1, r3
 80010a2:	7dbb      	ldrb	r3, [r7, #22]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4815      	ldr	r0, [pc, #84]	; (8001104 <move_control+0xd4>)
 80010ae:	f7ff ff65 	bl	8000f7c <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 80010b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010be:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 80010f8 <move_control+0xc8>
 80010c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80010ce:	793b      	ldrb	r3, [r7, #4]
 80010d0:	b2d9      	uxtb	r1, r3
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <move_control+0xd8>)
 80010de:	f7ff ff4d 	bl	8000f7c <motor_control>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	7ae147ae 	.word	0x7ae147ae
 80010f4:	3fefae14 	.word	0x3fefae14
 80010f8:	00000000 	.word	0x00000000
 80010fc:	40590000 	.word	0x40590000
 8001100:	20000257 	.word	0x20000257
 8001104:	20000034 	.word	0x20000034
 8001108:	20000048 	.word	0x20000048

0800110c <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	ed87 0a02 	vstr	s0, [r7, #8]
 8001118:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 800111c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001120:	edd7 7a01 	vldr	s15, [r7, #4]
 8001124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ed93 7a05 	vldr	s14, [r3, #20]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	edd3 6a03 	vldr	s13, [r3, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	edd3 7a04 	vldr	s15, [r3, #16]
 800115e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	edd3 7a08 	vldr	s15, [r3, #32]
 800116c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001220 <pid_calcule+0x114>
 8001170:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edd3 7a03 	vldr	s15, [r3, #12]
 800118a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	edd3 6a01 	vldr	s13, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	edd3 7a05 	vldr	s15, [r3, #20]
 800119a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800119e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80011a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	dd08      	ble.n	80011ea <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	699a      	ldr	r2, [r3, #24]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 80011e8:	e013      	b.n	8001212 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80011f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d400      	bmi.n	8001202 <pid_calcule+0xf6>
}
 8001200:	e007      	b.n	8001212 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	3e99999a 	.word	0x3e99999a

08001224 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001228:	2206      	movs	r2, #6
 800122a:	4903      	ldr	r1, [pc, #12]	; (8001238 <qtr_init+0x14>)
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <qtr_init+0x18>)
 800122e:	f001 f89d 	bl	800236c <HAL_ADC_Start_DMA>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000258 	.word	0x20000258
 800123c:	20000334 	.word	0x20000334

08001240 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <qtr_kill+0x10>)
 8001246:	f001 f98b 	bl	8002560 <HAL_ADC_Stop_DMA>
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000334 	.word	0x20000334
 8001254:	00000000 	.word	0x00000000

08001258 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a16      	ldr	r2, [pc, #88]	; (80012c0 <qtr_get_digital+0x68>)
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001272:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80012a8 <qtr_get_digital+0x50>
 8001276:	ee27 6b06 	vmul.f64	d6, d7, d6
 800127a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80012b0 <qtr_get_digital+0x58>
 800127e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001282:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80012b8 <qtr_get_digital+0x60>
 8001286:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	bfcc      	ite	gt
 8001290:	2301      	movgt	r3, #1
 8001292:	2300      	movle	r3, #0
 8001294:	b2db      	uxtb	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	66666666 	.word	0x66666666
 80012ac:	400a6666 	.word	0x400a6666
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40affe00 	.word	0x40affe00
 80012b8:	9999999a 	.word	0x9999999a
 80012bc:	40039999 	.word	0x40039999
 80012c0:	20000258 	.word	0x20000258
 80012c4:	00000000 	.word	0x00000000

080012c8 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4a10      	ldr	r2, [pc, #64]	; (8001318 <qtr_get_analog+0x50>)
 80012d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012e2:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001308 <qtr_get_analog+0x40>
 80012e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012ea:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001310 <qtr_get_analog+0x48>
 80012ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	f3af 8000 	nop.w
 8001308:	66666666 	.word	0x66666666
 800130c:	400a6666 	.word	0x400a6666
 8001310:	00000000 	.word	0x00000000
 8001314:	40affe00 	.word	0x40affe00
 8001318:	20000258 	.word	0x20000258

0800131c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_SPI3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_SPI3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_SPI3_Init+0x74>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x74>)
 8001336:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800133a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x74>)
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI3_Init+0x74>)
 8001352:	2218      	movs	r2, #24
 8001354:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x74>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI3_Init+0x74>)
 800137c:	f003 fc3a 	bl	8004bf4 <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001386:	f7ff fd4d 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003dc 	.word	0x200003dc
 8001394:	40003c00 	.word	0x40003c00

08001398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_SPI_MspInit+0x8c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d130      	bne.n	800141c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a1a      	ldr	r2, [pc, #104]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a14      	ldr	r2, [pc, #80]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_SPI_MspInit+0x90>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fc:	2306      	movs	r3, #6
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <HAL_SPI_MspInit+0x94>)
 8001408:	f002 f918 	bl	800363c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2033      	movs	r0, #51	; 0x33
 8001412:	f001 fcd2 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001416:	2033      	movs	r0, #51	; 0x33
 8001418:	f001 fceb 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40003c00 	.word	0x40003c00
 8001428:	40023800 	.word	0x40023800
 800142c:	40020800 	.word	0x40020800

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>
	...

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <HardFault_Handler+0x18>)
 800148a:	f002 fa9c 	bl	80039c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f000 fdc1 	bl	8002018 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001496:	e7f5      	b.n	8001484 <HardFault_Handler+0x4>
 8001498:	40020400 	.word	0x40020400

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 fd7c 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <ADC_IRQHandler+0x14>)
 80014ea:	f000 fdfd 	bl	80020e8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <ADC_IRQHandler+0x18>)
 80014f0:	f000 fdfa 	bl	80020e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000028c 	.word	0x2000028c
 80014fc:	20000334 	.word	0x20000334

08001500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM3_IRQHandler+0x10>)
 8001506:	f004 f80f 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200004f0 	.word	0x200004f0

08001514 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM4_IRQHandler+0x10>)
 800151a:	f004 f805 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200004a4 	.word	0x200004a4

08001528 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <USART1_IRQHandler+0x10>)
 800152e:	f004 ffd1 	bl	80064d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000070c 	.word	0x2000070c

0800153c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <USART3_IRQHandler+0x10>)
 8001542:	f004 ffc7 	bl	80064d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000588 	.word	0x20000588

08001550 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <SPI3_IRQHandler+0x10>)
 8001556:	f003 fbf9 	bl	8004d4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200003dc 	.word	0x200003dc

08001564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM6_DAC_IRQHandler+0x10>)
 800156a:	f003 ffdd 	bl	8005528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000053c 	.word	0x2000053c

08001578 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA2_Stream1_IRQHandler+0x10>)
 800157e:	f001 fdf3 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200002d4 	.word	0x200002d4

0800158c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <DMA2_Stream2_IRQHandler+0x10>)
 8001592:	f001 fde9 	bl	8003168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000037c 	.word	0x2000037c

080015a0 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	4904      	ldr	r1, [pc, #16]	; (80015b8 <stop_detector_init+0x18>)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <stop_detector_init+0x1c>)
 80015aa:	f000 fedf 	bl	800236c <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <stop_detector_init+0x20>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000270 	.word	0x20000270
 80015bc:	2000028c 	.word	0x2000028c
 80015c0:	20000274 	.word	0x20000274

080015c4 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <stop_detector_deInit+0x14>)
 80015ca:	f000 ffc9 	bl	8002560 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <stop_detector_deInit+0x18>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000028c 	.word	0x2000028c
 80015dc:	20000274 	.word	0x20000274

080015e0 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <stop_detector_isr+0x9c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e03b      	b.n	8001672 <stop_detector_isr+0x92>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 80015fa:	2005      	movs	r0, #5
 80015fc:	f7ff fe2c 	bl	8001258 <qtr_get_digital>
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff fe24 	bl	8001258 <qtr_get_digital>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4413      	add	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if(sens == 3)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d101      	bne.n	8001624 <stop_detector_isr+0x44>
		// return cross found error
		return E_ST_CROSS_FOUND;
 8001620:	2301      	movs	r3, #1
 8001622:	e026      	b.n	8001672 <stop_detector_isr+0x92>

	// current sensors value equal to the previous sensor values
	// and only one sensor enabled
	else if((sens == sens_prev) && (sens != 0))
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <stop_detector_isr+0xa0>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	429a      	cmp	r2, r3
 800162c:	d104      	bne.n	8001638 <stop_detector_isr+0x58>
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <stop_detector_isr+0x58>
		// return room found error
		return E_ST_ROOM_FOUND;
 8001634:	2302      	movs	r3, #2
 8001636:	e01c      	b.n	8001672 <stop_detector_isr+0x92>

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <stop_detector_isr+0xa4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f240 4272 	movw	r2, #1138	; 0x472
 8001640:	4293      	cmp	r3, r2
 8001642:	d907      	bls.n	8001654 <stop_detector_isr+0x74>
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <stop_detector_isr+0xa8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f240 4272 	movw	r2, #1138	; 0x472
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <stop_detector_isr+0x74>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <stop_detector_isr+0x76>
 8001654:	2300      	movs	r3, #0
 8001656:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <stop_detector_isr+0xa4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <stop_detector_isr+0xa8>)
 800165e:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <stop_detector_isr+0x8a>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 8001666:	2303      	movs	r3, #3
 8001668:	e003      	b.n	8001672 <stop_detector_isr+0x92>

	// update sensors value
	sens_prev = sens;
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <stop_detector_isr+0xa0>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000274 	.word	0x20000274
 8001680:	20000275 	.word	0x20000275
 8001684:	20000270 	.word	0x20000270
 8001688:	20000278 	.word	0x20000278

0800168c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_kill>:

int _kill(int pid, int sig)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016a6:	f005 fd67 	bl	8007178 <__errno>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2216      	movs	r2, #22
 80016ae:	601a      	str	r2, [r3, #0]
	return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_exit>:

void _exit (int status)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffe7 	bl	800169c <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ce:	e7fe      	b.n	80016ce <_exit+0x12>

080016d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00a      	b.n	80016f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016e2:	f3af 8000 	nop.w
 80016e6:	4601      	mov	r1, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	60ba      	str	r2, [r7, #8]
 80016ee:	b2ca      	uxtb	r2, r1
 80016f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf0      	blt.n	80016e2 <_read+0x12>
	}

return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e009      	b.n	8001730 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	60ba      	str	r2, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf1      	blt.n	800171c <_write+0x12>
	}
	return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_close>:

int _close(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return -1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176a:	605a      	str	r2, [r3, #4]
	return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_isatty>:

int _isatty(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return 1;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f005 fccc 	bl	8007178 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20080000 	.word	0x20080000
 800180c:	00000400 	.word	0x00000400
 8001810:	2000027c 	.word	0x2000027c
 8001814:	200007b8 	.word	0x200007b8

08001818 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <test_timeout>:

/******************************************************************************
Test timeouts
******************************************************************************/
void test_timeout(uint8_t sec)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	timeout_start(sec);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fa1f 	bl	8001c8c <timeout_start>

	while(timeout_flag == 0)
 800184e:	bf00      	nop
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <test_timeout+0x2c>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0fb      	beq.n	8001850 <test_timeout+0x14>
		;

	toggle_led(LGREEN);
 8001858:	2101      	movs	r1, #1
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <test_timeout+0x30>)
 800185c:	f002 f8b3 	bl	80039c6 <HAL_GPIO_TogglePin>
//	while(1)
//		;
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000280 	.word	0x20000280
 800186c:	40020400 	.word	0x40020400

08001870 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
	int err = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]

//	while(1)
//		test_lf_print_qtr();

	while(1)
		test_timeout(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f7ff ffde 	bl	800183c <test_timeout>
 8001880:	e7fb      	b.n	800187a <test_modules+0xa>
	...

08001884 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <MX_TIM3_Init+0x98>)
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <MX_TIM3_Init+0x9c>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MX_TIM3_Init+0x98>)
 80018aa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80018ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <MX_TIM3_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 450-1;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <MX_TIM3_Init+0x98>)
 80018b8:	f240 12c1 	movw	r2, #449	; 0x1c1
 80018bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_TIM3_Init+0x98>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_TIM3_Init+0x98>)
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <MX_TIM3_Init+0x98>)
 80018ce:	f003 fb5c 	bl	8004f8a <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80018d8:	f7ff faa4 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4619      	mov	r1, r3
 80018e8:	480c      	ldr	r0, [pc, #48]	; (800191c <MX_TIM3_Init+0x98>)
 80018ea:	f004 f84d 	bl	8005988 <HAL_TIM_ConfigClockSource>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80018f4:	f7ff fa96 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018f8:	2320      	movs	r3, #32
 80018fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_TIM3_Init+0x98>)
 8001906:	f004 fceb 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001910:	f7ff fa88 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200004f0 	.word	0x200004f0
 8001920:	40000400 	.word	0x40000400

08001924 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <MX_TIM4_Init+0xc0>)
 800194a:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <MX_TIM4_Init+0xc4>)
 800194c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <MX_TIM4_Init+0xc0>)
 8001950:	226b      	movs	r2, #107	; 0x6b
 8001952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <MX_TIM4_Init+0xc0>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <MX_TIM4_Init+0xc0>)
 800195c:	2264      	movs	r2, #100	; 0x64
 800195e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MX_TIM4_Init+0xc0>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <MX_TIM4_Init+0xc0>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800196c:	481d      	ldr	r0, [pc, #116]	; (80019e4 <MX_TIM4_Init+0xc0>)
 800196e:	f003 fc0a 	bl	8005186 <HAL_TIM_PWM_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001978:	f7ff fa54 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	4816      	ldr	r0, [pc, #88]	; (80019e4 <MX_TIM4_Init+0xc0>)
 800198c:	f004 fca8 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001996:	f7ff fa45 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199a:	2360      	movs	r3, #96	; 0x60
 800199c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2208      	movs	r2, #8
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_TIM4_Init+0xc0>)
 80019b2:	f003 fed9 	bl	8005768 <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80019bc:	f7ff fa32 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	220c      	movs	r2, #12
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM4_Init+0xc0>)
 80019c8:	f003 fece 	bl	8005768 <HAL_TIM_PWM_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80019d2:	f7ff fa27 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM4_Init+0xc0>)
 80019d8:	f000 f8a6 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	; 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200004a4 	.word	0x200004a4
 80019e8:	40000800 	.word	0x40000800

080019ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_TIM6_Init+0x64>)
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <MX_TIM6_Init+0x68>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a04:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001a08:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a12:	2263      	movs	r2, #99	; 0x63
 8001a14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a1e:	f003 fab4 	bl	8004f8a <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a28:	f7ff f9fc 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_TIM6_Init+0x64>)
 8001a3a:	f004 fc51 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a44:	f7ff f9ee 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	2000053c 	.word	0x2000053c
 8001a54:	40001000 	.word	0x40001000

08001a58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <HAL_TIM_Base_MspInit+0x78>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d114      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a19      	ldr	r2, [pc, #100]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	201d      	movs	r0, #29
 8001a88:	f001 f997 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a8c:	201d      	movs	r0, #29
 8001a8e:	f001 f9b0 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a92:	e018      	b.n	8001ac6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_TIM_Base_MspInit+0x80>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d113      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2036      	movs	r0, #54	; 0x36
 8001abc:	f001 f97d 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ac0:	2036      	movs	r0, #54	; 0x36
 8001ac2:	f001 f996 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40001000 	.word	0x40001000

08001adc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_TIM_PWM_MspInit+0x44>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d113      	bne.n	8001b16 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_TIM_PWM_MspInit+0x48>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <HAL_TIM_PWM_MspInit+0x48>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_PWM_MspInit+0x48>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	201e      	movs	r0, #30
 8001b0c:	f001 f955 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b10:	201e      	movs	r0, #30
 8001b12:	f001 f96e 	bl	8002df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40000800 	.word	0x40000800
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_TIM_MspPostInit+0xa0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d139      	bne.n	8001bbe <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_TIM_MspPostInit+0xa4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480e      	ldr	r0, [pc, #56]	; (8001bd0 <HAL_TIM_MspPostInit+0xa8>)
 8001b98:	f001 fd50 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_TIM_MspPostInit+0xac>)
 8001bba:	f001 fd3f 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40000800 	.word	0x40000800
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40020400 	.word	0x40020400

08001bd8 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d104      	bne.n	8001bf8 <set_pwm+0x20>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	883a      	ldrh	r2, [r7, #0]
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bf6:	e023      	b.n	8001c40 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d104      	bne.n	8001c08 <set_pwm+0x30>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	883b      	ldrh	r3, [r7, #0]
 8001c04:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c06:	e01b      	b.n	8001c40 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d104      	bne.n	8001c18 <set_pwm+0x40>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c16:	e013      	b.n	8001c40 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d104      	bne.n	8001c28 <set_pwm+0x50>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	883b      	ldrh	r3, [r7, #0]
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c26:	e00b      	b.n	8001c40 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d104      	bne.n	8001c38 <set_pwm+0x60>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001c36:	e003      	b.n	8001c40 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d102      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8001c5c:	f7ff f926 	bl	8000eac <motion_isr>
	else if(htim == &TIM_TIMEOUTS)
	{// enters every 1sec
		timeout_isr();
		write_led(LBLUE, 1);
	}
}
 8001c60:	e00a      	b.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if(htim == &TIM_TIMEOUTS)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0x2c>
		timeout_isr();
 8001c6a:	f000 f84b 	bl	8001d04 <timeout_isr>
		write_led(LBLUE, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2180      	movs	r1, #128	; 0x80
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001c74:	f001 fe8e 	bl	8003994 <HAL_GPIO_WritePin>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000053c 	.word	0x2000053c
 8001c84:	200004f0 	.word	0x200004f0
 8001c88:	40020400 	.word	0x40020400

08001c8c <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(uint8_t time_sec)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b91      	cmp	r3, #145	; 0x91
 8001c9a:	d904      	bls.n	8001ca6 <timeout_start+0x1a>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <timeout_start+0x5c>)
 8001c9e:	f64f 62e1 	movw	r2, #65249	; 0xfee1
 8001ca2:	60da      	str	r2, [r3, #12]
 8001ca4:	e008      	b.n	8001cb8 <timeout_start+0x2c>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec * 4) - 1; // >>>>>>>>>>>>> check this
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <timeout_start+0x5c>)
 8001cb6:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8001cb8:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <timeout_start+0x5c>)
 8001cba:	f003 f966 	bl	8004f8a <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <timeout_start+0x3e>
		// init error
		Error_Handler();
 8001cc4:	f7ff f8ae 	bl	8000e24 <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8001cc8:	e00a      	b.n	8001ce0 <timeout_start+0x54>
		timeout_flag = 0;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <timeout_start+0x60>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <timeout_start+0x5c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f06f 0201 	mvn.w	r2, #1
 8001cd8:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8001cda:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <timeout_start+0x5c>)
 8001cdc:	f003 f9ac 	bl	8005038 <HAL_TIM_Base_Start_IT>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200004f0 	.word	0x200004f0
 8001cec:	20000280 	.word	0x20000280

08001cf0 <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <timeout_stop+0x10>)
 8001cf6:	f003 fa17 	bl	8005128 <HAL_TIM_Base_Stop_IT>
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200004f0 	.word	0x200004f0

08001d04 <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
//	if(__HAL_TIM_GET_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF) != RESET)
//		 return;

	// set timeout flag
	timeout_flag = 1;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <timeout_isr+0x14>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8001d0e:	f7ff ffef 	bl	8001cf0 <timeout_stop>
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000280 	.word	0x20000280

08001d1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_USART1_UART_Init+0x5c>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART1_UART_Init+0x58>)
 8001d60:	f004 fb6a 	bl	8006438 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f7ff f85b 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000070c 	.word	0x2000070c
 8001d78:	40011000 	.word	0x40011000

08001d7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <MX_USART3_UART_Init+0x5c>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_USART3_UART_Init+0x58>)
 8001dc0:	f004 fb3a 	bl	8006438 <HAL_UART_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dca:	f7ff f82b 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000588 	.word	0x20000588
 8001dd8:	40004800 	.word	0x40004800

08001ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3f      	ldr	r2, [pc, #252]	; (8001ef8 <HAL_UART_MspInit+0x11c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d141      	bne.n	8001e82 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e04:	f043 0310 	orr.w	r3, r3, #16
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a38      	ldr	r2, [pc, #224]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e40:	2304      	movs	r3, #4
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	482d      	ldr	r0, [pc, #180]	; (8001f00 <HAL_UART_MspInit+0x124>)
 8001e4c:	f001 fbf6 	bl	800363c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e60:	2307      	movs	r3, #7
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4825      	ldr	r0, [pc, #148]	; (8001f00 <HAL_UART_MspInit+0x124>)
 8001e6c:	f001 fbe6 	bl	800363c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2100      	movs	r1, #0
 8001e74:	2025      	movs	r0, #37	; 0x25
 8001e76:	f000 ffa0 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e7a:	2025      	movs	r0, #37	; 0x25
 8001e7c:	f000 ffb9 	bl	8002df2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e80:	e035      	b.n	8001eee <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_UART_MspInit+0x128>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d130      	bne.n	8001eee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e96:	6413      	str	r3, [r2, #64]	; 0x40
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001eaa:	f043 0308 	orr.w	r3, r3, #8
 8001eae:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_UART_MspInit+0x120>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <HAL_UART_MspInit+0x12c>)
 8001eda:	f001 fbaf 	bl	800363c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2027      	movs	r0, #39	; 0x27
 8001ee4:	f000 ff69 	bl	8002dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ee8:	2027      	movs	r0, #39	; 0x27
 8001eea:	f000 ff82 	bl	8002df2 <HAL_NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3730      	adds	r7, #48	; 0x30
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40011000 	.word	0x40011000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40004800 	.word	0x40004800
 8001f08:	40020c00 	.word	0x40020c00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f12:	490e      	ldr	r1, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f14:	4a0e      	ldr	r2, [pc, #56]	; (8001f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f28:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f36:	f7ff fc6f 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f005 f923 	bl	8007184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7fe fea7 	bl	8000c90 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f44:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8001f50:	08009e94 	.word	0x08009e94
  ldr r2, =_sbss
 8001f54:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8001f58:	200007b8 	.word	0x200007b8

08001f5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <CAN1_RX0_IRQHandler>

08001f5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f000 ff1e 	bl	8002da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f805 	bl	8001f78 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f6e:	f7ff fa5f 	bl	8001430 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 ff39 	bl	8002e0e <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 ff01 	bl	8002dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000005c 	.word	0x2000005c
 8001fd0:	20000064 	.word	0x20000064
 8001fd4:	20000060 	.word	0x20000060

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000064 	.word	0x20000064
 8001ffc:	200007a4 	.word	0x200007a4

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	200007a4 	.word	0x200007a4

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000064 	.word	0x20000064

08002060 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e031      	b.n	80020da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fb9c 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_ADC_Init+0x84>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	f043 0202 	orr.w	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fc22 	bl	80028f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	e001      	b.n	80020d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	ffffeefd 	.word	0xffffeefd

080020e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b02      	cmp	r3, #2
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b20      	cmp	r3, #32
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d049      	beq.n	80021be <HAL_ADC_IRQHandler+0xd6>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d12b      	bne.n	80021ae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d127      	bne.n	80021ae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002176:	2b00      	cmp	r3, #0
 8002178:	d119      	bne.n	80021ae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0220 	bic.w	r2, r2, #32
 8002188:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa30 	bl	8002614 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0212 	mvn.w	r2, #18
 80021bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	bf0c      	ite	eq
 80021e2:	2301      	moveq	r3, #1
 80021e4:	2300      	movne	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d057      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1b8>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d054      	beq.n	80022a0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d139      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002234:	2b00      	cmp	r3, #0
 8002236:	d12b      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002242:	2b00      	cmp	r3, #0
 8002244:	d124      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d11d      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d119      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fcad 	bl	8002bf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 020c 	mvn.w	r2, #12
 800229e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d017      	beq.n	8002302 <HAL_ADC_IRQHandler+0x21a>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d014      	beq.n	8002302 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d10d      	bne.n	8002302 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f9a2 	bl	800263c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f06f 0201 	mvn.w	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b20      	cmp	r3, #32
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d015      	beq.n	8002362 <HAL_ADC_IRQHandler+0x27a>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d012      	beq.n	8002362 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0220 	mvn.w	r2, #32
 8002350:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f97c 	bl	8002650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0220 	mvn.w	r2, #32
 8002360:	601a      	str	r2, [r3, #0]
  }
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADC_Start_DMA+0x1e>
 8002386:	2302      	movs	r3, #2
 8002388:	e0d4      	b.n	8002534 <HAL_ADC_Start_DMA+0x1c8>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d018      	beq.n	80023d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80023b0:	4b62      	ldr	r3, [pc, #392]	; (800253c <HAL_ADC_Start_DMA+0x1d0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a62      	ldr	r2, [pc, #392]	; (8002540 <HAL_ADC_Start_DMA+0x1d4>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0c9a      	lsrs	r2, r3, #18
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	f040 809c 	bne.w	800251a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e6:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_ADC_Start_DMA+0x1d8>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002408:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800241c:	d106      	bne.n	800242c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f023 0206 	bic.w	r2, r3, #6
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
 800242a:	e002      	b.n	8002432 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	4a42      	ldr	r2, [pc, #264]	; (8002548 <HAL_ADC_Start_DMA+0x1dc>)
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	4a41      	ldr	r2, [pc, #260]	; (800254c <HAL_ADC_Start_DMA+0x1e0>)
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	4a40      	ldr	r2, [pc, #256]	; (8002550 <HAL_ADC_Start_DMA+0x1e4>)
 8002450:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800245a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800246a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	334c      	adds	r3, #76	; 0x4c
 8002486:	4619      	mov	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f000 fd7a 	bl	8002f84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_ADC_Start_DMA+0x1e8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d143      	bne.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	e03a      	b.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a25      	ldr	r2, [pc, #148]	; (8002558 <HAL_ADC_Start_DMA+0x1ec>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10e      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x178>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_ADC_Start_DMA+0x1e8>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d120      	bne.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_ADC_Start_DMA+0x1f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d11b      	bne.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d114      	bne.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00b      	b.n	8002532 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000005c 	.word	0x2000005c
 8002540:	431bde83 	.word	0x431bde83
 8002544:	fffff8fe 	.word	0xfffff8fe
 8002548:	08002aed 	.word	0x08002aed
 800254c:	08002ba7 	.word	0x08002ba7
 8002550:	08002bc3 	.word	0x08002bc3
 8002554:	40012300 	.word	0x40012300
 8002558:	40012000 	.word	0x40012000
 800255c:	40012200 	.word	0x40012200

08002560 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ADC_Stop_DMA+0x1a>
 8002576:	2302      	movs	r3, #2
 8002578:	e046      	b.n	8002608 <HAL_ADC_Stop_DMA+0xa8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d12e      	bne.n	80025fe <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d10f      	bne.n	80025de <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd3e 	bl	8003044 <HAL_DMA_Abort>
 80025c8:	4603      	mov	r3, r0
 80025ca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80025ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <HAL_ADC_Stop_DMA+0xb0>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	ffffeefe 	.word	0xffffeefe

08002614 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1c>
 800267c:	2302      	movs	r3, #2
 800267e:	e12a      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x272>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d93a      	bls.n	8002706 <HAL_ADC_ConfigChannel+0xa2>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002698:	d035      	beq.n	8002706 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68d9      	ldr	r1, [r3, #12]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	3b1e      	subs	r3, #30
 80026b0:	2207      	movs	r2, #7
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a87      	ldr	r2, [pc, #540]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68d9      	ldr	r1, [r3, #12]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	061a      	lsls	r2, r3, #24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	e035      	b.n	800274c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4403      	add	r3, r0
 80026f8:	3b1e      	subs	r3, #30
 80026fa:	409a      	lsls	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002704:	e022      	b.n	800274c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	461a      	mov	r2, r3
 8002714:	4613      	mov	r3, r2
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4413      	add	r3, r2
 800271a:	2207      	movs	r2, #7
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43da      	mvns	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	400a      	ands	r2, r1
 8002728:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4618      	mov	r0, r3
 800273c:	4603      	mov	r3, r0
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4403      	add	r3, r0
 8002742:	409a      	lsls	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b06      	cmp	r3, #6
 8002752:	d824      	bhi.n	800279e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	3b05      	subs	r3, #5
 8002766:	221f      	movs	r2, #31
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43da      	mvns	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	400a      	ands	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	3b05      	subs	r3, #5
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	635a      	str	r2, [r3, #52]	; 0x34
 800279c:	e04c      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b0c      	cmp	r3, #12
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b23      	subs	r3, #35	; 0x23
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b23      	subs	r3, #35	; 0x23
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
 80027ee:	e023      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	3b41      	subs	r3, #65	; 0x41
 8002802:	221f      	movs	r2, #31
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43da      	mvns	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	400a      	ands	r2, r1
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4618      	mov	r0, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b41      	subs	r3, #65	; 0x41
 800282c:	fa00 f203 	lsl.w	r2, r0, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10a      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1f4>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284a:	d105      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002852:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002856:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d109      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x212>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b12      	cmp	r3, #18
 8002868:	d105      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002874:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_ADC_ConfigChannel+0x284>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d125      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x22e>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b11      	cmp	r3, #17
 8002890:	d11c      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_ADC_ConfigChannel+0x288>)
 8002898:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800289c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_ADC_ConfigChannel+0x280>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_ADC_ConfigChannel+0x28c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_ADC_ConfigChannel+0x290>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9a      	lsrs	r2, r3, #18
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028be:	e002      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f9      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	10000012 	.word	0x10000012
 80028e8:	40012000 	.word	0x40012000
 80028ec:	40012300 	.word	0x40012300
 80028f0:	2000005c 	.word	0x2000005c
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <ADC_Init+0x1ec>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <ADC_Init+0x1ec>)
 8002906:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800290a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800290c:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <ADC_Init+0x1ec>)
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4973      	ldr	r1, [pc, #460]	; (8002ae4 <ADC_Init+0x1ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800294c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <ADC_Init+0x1f0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d022      	beq.n	80029d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800299a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6899      	ldr	r1, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e00f      	b.n	80029f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0202 	bic.w	r2, r2, #2
 8002a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	005a      	lsls	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	035a      	lsls	r2, r3, #13
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e007      	b.n	8002a68 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	051a      	lsls	r2, r3, #20
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	025a      	lsls	r2, r3, #9
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	029a      	lsls	r2, r3, #10
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	0f000001 	.word	0x0f000001

08002aec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d13c      	bne.n	8002b80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d12b      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d127      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d119      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0220 	bic.w	r2, r2, #32
 8002b52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fd4b 	bl	8002614 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b7e:	e00e      	b.n	8002b9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fd5f 	bl	8002650 <HAL_ADC_ErrorCallback>
}
 8002b92:	e004      	b.n	8002b9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fd37 	bl	8002628 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff fd34 	bl	8002650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <__NVIC_SetPriorityGrouping+0x40>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x40>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000ed00 	.word	0xe000ed00
 8002c48:	05fa0000 	.word	0x05fa0000

08002c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	db0a      	blt.n	8002cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <__NVIC_SetPriority+0x4c>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	0112      	lsls	r2, r2, #4
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ccc:	e00a      	b.n	8002ce4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4908      	ldr	r1, [pc, #32]	; (8002cf4 <__NVIC_SetPriority+0x50>)
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	3b04      	subs	r3, #4
 8002cdc:	0112      	lsls	r2, r2, #4
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	761a      	strb	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000e100 	.word	0xe000e100
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f1c3 0307 	rsb	r3, r3, #7
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	bf28      	it	cs
 8002d16:	2304      	movcs	r3, #4
 8002d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <NVIC_EncodePriority+0x30>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3b03      	subs	r3, #3
 8002d26:	e000      	b.n	8002d2a <NVIC_EncodePriority+0x32>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43da      	mvns	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d40:	f04f 31ff 	mov.w	r1, #4294967295
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d50:	4313      	orrs	r3, r2
         );
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d70:	d301      	bcc.n	8002d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <SysTick_Config+0x40>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7e:	210f      	movs	r1, #15
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295
 8002d84:	f7ff ff8e 	bl	8002ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <SysTick_Config+0x40>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8e:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SysTick_Config+0x40>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	e000e010 	.word	0xe000e010

08002da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff29 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dcc:	f7ff ff3e 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff8e 	bl	8002cf8 <NVIC_EncodePriority>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff5d 	bl	8002ca4 <__NVIC_SetPriority>
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff31 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ffa2 	bl	8002d60 <SysTick_Config>
 8002e1c:	4603      	mov	r3, r0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e34:	f7ff f8e4 	bl	8002000 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e099      	b.n	8002f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e64:	e00f      	b.n	8002e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e66:	f7ff f8cb 	bl	8002000 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d908      	bls.n	8002e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e078      	b.n	8002f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1e8      	bne.n	8002e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_DMA_Init+0x158>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d107      	bne.n	8002ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d117      	bne.n	8002f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fb09 	bl	8003544 <DMA_CheckFifoParam>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f46:	2301      	movs	r3, #1
 8002f48:	e016      	b.n	8002f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fac0 	bl	80034d8 <DMA_CalcBaseAndBitshift>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	223f      	movs	r2, #63	; 0x3f
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	e010803f 	.word	0xe010803f

08002f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_DMA_Start_IT+0x26>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e048      	b.n	800303c <HAL_DMA_Start_IT+0xb8>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d137      	bne.n	800302e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fa52 	bl	800347c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	223f      	movs	r2, #63	; 0x3f
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0216 	orr.w	r2, r2, #22
 8002ff2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003002:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0208 	orr.w	r2, r2, #8
 800301a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e005      	b.n	800303a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003052:	f7fe ffd5 	bl	8002000 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d008      	beq.n	8003076 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e052      	b.n	800311c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0216 	bic.w	r2, r2, #22
 8003084:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003094:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_DMA_Abort+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d007      	beq.n	80030b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0208 	bic.w	r2, r2, #8
 80030b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c6:	e013      	b.n	80030f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030c8:	f7fe ff9a 	bl	8002000 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b05      	cmp	r3, #5
 80030d4:	d90c      	bls.n	80030f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2203      	movs	r2, #3
 80030e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e015      	b.n	800311c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1e4      	bne.n	80030c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	223f      	movs	r2, #63	; 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00c      	b.n	800315c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2205      	movs	r2, #5
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_DMA_IRQHandler+0x258>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a92      	ldr	r2, [pc, #584]	; (80033c4 <HAL_DMA_IRQHandler+0x25c>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0a9b      	lsrs	r3, r3, #10
 8003180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	2208      	movs	r2, #8
 8003194:	409a      	lsls	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d01a      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	2208      	movs	r2, #8
 80031c2:	409a      	lsls	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2201      	movs	r2, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d012      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	2201      	movs	r2, #1
 80031f8:	409a      	lsls	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2204      	movs	r2, #4
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d012      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	2204      	movs	r2, #4
 800322e:	409a      	lsls	r2, r3
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f043 0204 	orr.w	r2, r3, #4
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	2210      	movs	r2, #16
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d043      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03c      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	2210      	movs	r2, #16
 8003264:	409a      	lsls	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d018      	beq.n	80032aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d108      	bne.n	8003298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d024      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	4798      	blx	r3
 8003296:	e01f      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4798      	blx	r3
 80032a8:	e016      	b.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2220      	movs	r2, #32
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 808e 	beq.w	8003406 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8086 	beq.w	8003406 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2220      	movs	r2, #32
 8003300:	409a      	lsls	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b05      	cmp	r3, #5
 8003310:	d136      	bne.n	8003380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0216 	bic.w	r2, r2, #22
 8003320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695a      	ldr	r2, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d103      	bne.n	8003342 <HAL_DMA_IRQHandler+0x1da>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0208 	bic.w	r2, r2, #8
 8003350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003356:	223f      	movs	r2, #63	; 0x3f
 8003358:	409a      	lsls	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	2b00      	cmp	r3, #0
 8003374:	d07d      	beq.n	8003472 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
        }
        return;
 800337e:	e078      	b.n	8003472 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01c      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d108      	bne.n	80033ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d030      	beq.n	8003406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
 80033ac:	e02b      	b.n	8003406 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d027      	beq.n	8003406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
 80033be:	e022      	b.n	8003406 <HAL_DMA_IRQHandler+0x29e>
 80033c0:	2000005c 	.word	0x2000005c
 80033c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0210 	bic.w	r2, r2, #16
 80033e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	2b00      	cmp	r3, #0
 800340c:	d032      	beq.n	8003474 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d022      	beq.n	8003460 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2205      	movs	r2, #5
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d307      	bcc.n	800344e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f2      	bne.n	8003432 <HAL_DMA_IRQHandler+0x2ca>
 800344c:	e000      	b.n	8003450 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800344e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e000      	b.n	8003474 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003472:	bf00      	nop
    }
  }
}
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d108      	bne.n	80034bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034ba:	e007      	b.n	80034cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	3b10      	subs	r3, #16
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <DMA_CalcBaseAndBitshift+0x60>)
 80034ea:	fba2 2303 	umull	r2, r3, r2, r3
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <DMA_CalcBaseAndBitshift+0x64>)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d908      	bls.n	8003518 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <DMA_CalcBaseAndBitshift+0x68>)
 800350e:	4013      	ands	r3, r2
 8003510:	1d1a      	adds	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	659a      	str	r2, [r3, #88]	; 0x58
 8003516:	e006      	b.n	8003526 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <DMA_CalcBaseAndBitshift+0x68>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	aaaaaaab 	.word	0xaaaaaaab
 800353c:	08009a98 	.word	0x08009a98
 8003540:	fffffc00 	.word	0xfffffc00

08003544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11f      	bne.n	800359e <DMA_CheckFifoParam+0x5a>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d856      	bhi.n	8003612 <DMA_CheckFifoParam+0xce>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <DMA_CheckFifoParam+0x28>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358f 	.word	0x0800358f
 8003574:	0800357d 	.word	0x0800357d
 8003578:	08003613 	.word	0x08003613
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d046      	beq.n	8003616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800358c:	e043      	b.n	8003616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003596:	d140      	bne.n	800361a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359c:	e03d      	b.n	800361a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a6:	d121      	bne.n	80035ec <DMA_CheckFifoParam+0xa8>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d837      	bhi.n	800361e <DMA_CheckFifoParam+0xda>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <DMA_CheckFifoParam+0x70>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035c5 	.word	0x080035c5
 80035b8:	080035cb 	.word	0x080035cb
 80035bc:	080035c5 	.word	0x080035c5
 80035c0:	080035dd 	.word	0x080035dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e030      	b.n	800362c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d025      	beq.n	8003622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035da:	e022      	b.n	8003622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035e4:	d11f      	bne.n	8003626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ea:	e01c      	b.n	8003626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d903      	bls.n	80035fa <DMA_CheckFifoParam+0xb6>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d003      	beq.n	8003600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035f8:	e018      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      break;
 80035fe:	e015      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      break;
 8003610:	e00b      	b.n	800362a <DMA_CheckFifoParam+0xe6>
      break;
 8003612:	bf00      	nop
 8003614:	e00a      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
 8003618:	e008      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800361a:	bf00      	nop
 800361c:	e006      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
 8003620:	e004      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e002      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;   
 8003626:	bf00      	nop
 8003628:	e000      	b.n	800362c <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
    }
  } 
  
  return status; 
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
 800365a:	e175      	b.n	8003948 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	429a      	cmp	r2, r3
 8003676:	f040 8164 	bne.w	8003942 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d00b      	beq.n	800369a <HAL_GPIO_Init+0x5e>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d007      	beq.n	800369a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800368e:	2b11      	cmp	r3, #17
 8003690:	d003      	beq.n	800369a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b12      	cmp	r3, #18
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	2203      	movs	r2, #3
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4313      	orrs	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x100>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d123      	bne.n	8003784 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	08da      	lsrs	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3208      	adds	r2, #8
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	220f      	movs	r2, #15
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08da      	lsrs	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3208      	adds	r2, #8
 800377e:	69b9      	ldr	r1, [r7, #24]
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0203 	and.w	r2, r3, #3
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80be 	beq.w	8003942 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c6:	4b66      	ldr	r3, [pc, #408]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	4a65      	ldr	r2, [pc, #404]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d0:	6453      	str	r3, [r2, #68]	; 0x44
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_GPIO_Init+0x324>)
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037de:	4a61      	ldr	r2, [pc, #388]	; (8003964 <HAL_GPIO_Init+0x328>)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	089b      	lsrs	r3, r3, #2
 80037e4:	3302      	adds	r3, #2
 80037e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	220f      	movs	r2, #15
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4013      	ands	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_GPIO_Init+0x32c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d037      	beq.n	800387a <HAL_GPIO_Init+0x23e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a57      	ldr	r2, [pc, #348]	; (800396c <HAL_GPIO_Init+0x330>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_GPIO_Init+0x23a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a56      	ldr	r2, [pc, #344]	; (8003970 <HAL_GPIO_Init+0x334>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <HAL_GPIO_Init+0x236>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a55      	ldr	r2, [pc, #340]	; (8003974 <HAL_GPIO_Init+0x338>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d025      	beq.n	800386e <HAL_GPIO_Init+0x232>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a54      	ldr	r2, [pc, #336]	; (8003978 <HAL_GPIO_Init+0x33c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01f      	beq.n	800386a <HAL_GPIO_Init+0x22e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a53      	ldr	r2, [pc, #332]	; (800397c <HAL_GPIO_Init+0x340>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0x22a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_GPIO_Init+0x344>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_GPIO_Init+0x348>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_GPIO_Init+0x34c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_GPIO_Init+0x350>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_GPIO_Init+0x21a>
 8003852:	2309      	movs	r3, #9
 8003854:	e012      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003856:	230a      	movs	r3, #10
 8003858:	e010      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385a:	2308      	movs	r3, #8
 800385c:	e00e      	b.n	800387c <HAL_GPIO_Init+0x240>
 800385e:	2307      	movs	r3, #7
 8003860:	e00c      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003862:	2306      	movs	r3, #6
 8003864:	e00a      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003866:	2305      	movs	r3, #5
 8003868:	e008      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386a:	2304      	movs	r3, #4
 800386c:	e006      	b.n	800387c <HAL_GPIO_Init+0x240>
 800386e:	2303      	movs	r3, #3
 8003870:	e004      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003872:	2302      	movs	r3, #2
 8003874:	e002      	b.n	800387c <HAL_GPIO_Init+0x240>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <HAL_GPIO_Init+0x240>
 800387a:	2300      	movs	r3, #0
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f002 0203 	and.w	r2, r2, #3
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	4093      	lsls	r3, r2
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4313      	orrs	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800388c:	4935      	ldr	r1, [pc, #212]	; (8003964 <HAL_GPIO_Init+0x328>)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	089b      	lsrs	r3, r3, #2
 8003892:	3302      	adds	r3, #2
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_GPIO_Init+0x354>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038c4:	4b32      	ldr	r3, [pc, #200]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038e8:	4a29      	ldr	r2, [pc, #164]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x354>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003912:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_GPIO_Init+0x354>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_GPIO_Init+0x354>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_GPIO_Init+0x354>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3301      	adds	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	f67f ae86 	bls.w	800365c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3724      	adds	r7, #36	; 0x24
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	40013800 	.word	0x40013800
 8003968:	40020000 	.word	0x40020000
 800396c:	40020400 	.word	0x40020400
 8003970:	40020800 	.word	0x40020800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40021000 	.word	0x40021000
 800397c:	40021400 	.word	0x40021400
 8003980:	40021800 	.word	0x40021800
 8003984:	40021c00 	.word	0x40021c00
 8003988:	40022000 	.word	0x40022000
 800398c:	40022400 	.word	0x40022400
 8003990:	40013c00 	.word	0x40013c00

08003994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	4613      	mov	r3, r2
 80039a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039b0:	e003      	b.n	80039ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	041a      	lsls	r2, r3, #16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	619a      	str	r2, [r3, #24]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	041a      	lsls	r2, r3, #16
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	400b      	ands	r3, r1
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a2a:	f7fe fae9 	bl	8002000 <HAL_GetTick>
 8003a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a30:	e009      	b.n	8003a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a32:	f7fe fae5 	bl	8002000 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a40:	d901      	bls.n	8003a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e022      	b.n	8003a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a46:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d1ee      	bne.n	8003a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a60:	f7fe face 	bl	8002000 <HAL_GetTick>
 8003a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a66:	e009      	b.n	8003a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a68:	f7fe faca 	bl	8002000 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a76:	d901      	bls.n	8003a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e007      	b.n	8003a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a88:	d1ee      	bne.n	8003a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e29b      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8087 	beq.w	8003bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac0:	4b96      	ldr	r3, [pc, #600]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d00c      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003acc:	4b93      	ldr	r3, [pc, #588]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d112      	bne.n	8003afe <HAL_RCC_OscConfig+0x62>
 8003ad8:	4b90      	ldr	r3, [pc, #576]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae4:	d10b      	bne.n	8003afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae6:	4b8d      	ldr	r3, [pc, #564]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d06c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x130>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d168      	bne.n	8003bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e275      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b06:	d106      	bne.n	8003b16 <HAL_RCC_OscConfig+0x7a>
 8003b08:	4b84      	ldr	r3, [pc, #528]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a83      	ldr	r2, [pc, #524]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	e02e      	b.n	8003b74 <HAL_RCC_OscConfig+0xd8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCC_OscConfig+0x9c>
 8003b1e:	4b7f      	ldr	r3, [pc, #508]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a7e      	ldr	r2, [pc, #504]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b7c      	ldr	r3, [pc, #496]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7b      	ldr	r2, [pc, #492]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xd8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0xc0>
 8003b42:	4b76      	ldr	r3, [pc, #472]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a75      	ldr	r2, [pc, #468]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b73      	ldr	r3, [pc, #460]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a72      	ldr	r2, [pc, #456]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xd8>
 8003b5c:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6e      	ldr	r2, [pc, #440]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fa40 	bl	8002000 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fa3c 	bl	8002000 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e229      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe8>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa2c 	bl	8002000 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fa28 	bl	8002000 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e215      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b57      	ldr	r3, [pc, #348]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x110>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d069      	beq.n	8003cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bda:	4b50      	ldr	r3, [pc, #320]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x190>
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1e9      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	493d      	ldr	r1, [pc, #244]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e040      	b.n	8003cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f9de 	bl	8002000 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fe f9da 	bl	8002000 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1c7      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4929      	ldr	r1, [pc, #164]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	600b      	str	r3, [r1, #0]
 8003c7a:	e018      	b.n	8003cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7c:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe f9ba 	bl	8002000 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fe f9b6 	bl	8002000 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e1a3      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d038      	beq.n	8003d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d019      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	f043 0301 	orr.w	r3, r3, #1
 8003ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe f997 	bl	8002000 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd6:	f7fe f993 	bl	8002000 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e180      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x23a>
 8003cf4:	e01a      	b.n	8003d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <HAL_RCC_OscConfig+0x280>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d02:	f7fe f97d 	bl	8002000 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe f979 	bl	8002000 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d903      	bls.n	8003d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e166      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
 8003d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d20:	4b92      	ldr	r3, [pc, #584]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1ee      	bne.n	8003d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 80a4 	beq.w	8003e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b8c      	ldr	r3, [pc, #560]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b89      	ldr	r3, [pc, #548]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a88      	ldr	r2, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b86      	ldr	r3, [pc, #536]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b83      	ldr	r3, [pc, #524]	; (8003f70 <HAL_RCC_OscConfig+0x4d4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d6e:	4b80      	ldr	r3, [pc, #512]	; (8003f70 <HAL_RCC_OscConfig+0x4d4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7f      	ldr	r2, [pc, #508]	; (8003f70 <HAL_RCC_OscConfig+0x4d4>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe f941 	bl	8002000 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe f93d 	bl	8002000 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e12a      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b76      	ldr	r3, [pc, #472]	; (8003f70 <HAL_RCC_OscConfig+0x4d4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x31a>
 8003da8:	4b70      	ldr	r3, [pc, #448]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a6f      	ldr	r2, [pc, #444]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	e02d      	b.n	8003e12 <HAL_RCC_OscConfig+0x376>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x33c>
 8003dbe:	4b6b      	ldr	r3, [pc, #428]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd6:	e01c      	b.n	8003e12 <HAL_RCC_OscConfig+0x376>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x35e>
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a61      	ldr	r2, [pc, #388]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a5e      	ldr	r2, [pc, #376]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6713      	str	r3, [r2, #112]	; 0x70
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x376>
 8003dfa:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a5b      	ldr	r2, [pc, #364]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
 8003e06:	4b59      	ldr	r3, [pc, #356]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a58      	ldr	r2, [pc, #352]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fe f8f1 	bl	8002000 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fe f8ed 	bl	8002000 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0d8      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x386>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fe f8db 	bl	8002000 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe f8d7 	bl	8002000 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e0c2      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a3c      	ldr	r2, [pc, #240]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80ae 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d06d      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d14b      	bne.n	8003f38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe f8a8 	bl	8002000 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fe f8a4 	bl	8002000 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e091      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec6:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	019b      	lsls	r3, r3, #6
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	3b01      	subs	r3, #1
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	061b      	lsls	r3, r3, #24
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	071b      	lsls	r3, r3, #28
 8003efe:	491b      	ldr	r1, [pc, #108]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe f876 	bl	8002000 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe f872 	bl	8002000 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e05f      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x47c>
 8003f36:	e057      	b.n	8003fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0b      	ldr	r2, [pc, #44]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fe f85c 	bl	8002000 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe f858 	bl	8002000 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e045      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x4b0>
 8003f6a:	e03d      	b.n	8003fe8 <HAL_RCC_OscConfig+0x54c>
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f74:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCC_OscConfig+0x558>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d030      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d129      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d122      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d119      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d107      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d001      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0d0      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d910      	bls.n	8004040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b67      	ldr	r3, [pc, #412]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 020f 	bic.w	r2, r3, #15
 8004026:	4965      	ldr	r1, [pc, #404]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402e:	4b63      	ldr	r3, [pc, #396]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0b8      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004058:	4b59      	ldr	r3, [pc, #356]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a58      	ldr	r2, [pc, #352]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4a52      	ldr	r2, [pc, #328]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800407a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	494d      	ldr	r1, [pc, #308]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d040      	beq.n	800411c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d115      	bne.n	80040da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e07f      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e073      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4936      	ldr	r1, [pc, #216]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fd ff88 	bl	8002000 <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fd ff84 	bl	8002000 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e053      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d210      	bcs.n	800414c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b24      	ldr	r3, [pc, #144]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 020f 	bic.w	r2, r3, #15
 8004132:	4922      	ldr	r1, [pc, #136]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d001      	beq.n	800414c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e032      	b.n	80041b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004158:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4916      	ldr	r1, [pc, #88]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800418a:	f000 f821 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490a      	ldr	r1, [pc, #40]	; (80041c4 <HAL_RCC_ClockConfig+0x1cc>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1d0>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_ClockConfig+0x1d4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fee4 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023c00 	.word	0x40023c00
 80041c0:	40023800 	.word	0x40023800
 80041c4:	08009a80 	.word	0x08009a80
 80041c8:	2000005c 	.word	0x2000005c
 80041cc:	20000060 	.word	0x20000060

080041d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d0:	b5b0      	push	{r4, r5, r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041d6:	2100      	movs	r1, #0
 80041d8:	6079      	str	r1, [r7, #4]
 80041da:	2100      	movs	r1, #0
 80041dc:	60f9      	str	r1, [r7, #12]
 80041de:	2100      	movs	r1, #0
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041e2:	2100      	movs	r1, #0
 80041e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e6:	4952      	ldr	r1, [pc, #328]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 80041e8:	6889      	ldr	r1, [r1, #8]
 80041ea:	f001 010c 	and.w	r1, r1, #12
 80041ee:	2908      	cmp	r1, #8
 80041f0:	d00d      	beq.n	800420e <HAL_RCC_GetSysClockFreq+0x3e>
 80041f2:	2908      	cmp	r1, #8
 80041f4:	f200 8094 	bhi.w	8004320 <HAL_RCC_GetSysClockFreq+0x150>
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d002      	beq.n	8004202 <HAL_RCC_GetSysClockFreq+0x32>
 80041fc:	2904      	cmp	r1, #4
 80041fe:	d003      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x38>
 8004200:	e08e      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004202:	4b4c      	ldr	r3, [pc, #304]	; (8004334 <HAL_RCC_GetSysClockFreq+0x164>)
 8004204:	60bb      	str	r3, [r7, #8]
      break;
 8004206:	e08e      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004208:	4b4b      	ldr	r3, [pc, #300]	; (8004338 <HAL_RCC_GetSysClockFreq+0x168>)
 800420a:	60bb      	str	r3, [r7, #8]
      break;
 800420c:	e08b      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800420e:	4948      	ldr	r1, [pc, #288]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 8004210:	6849      	ldr	r1, [r1, #4]
 8004212:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004216:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004218:	4945      	ldr	r1, [pc, #276]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 800421a:	6849      	ldr	r1, [r1, #4]
 800421c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004220:	2900      	cmp	r1, #0
 8004222:	d024      	beq.n	800426e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004224:	4942      	ldr	r1, [pc, #264]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 8004226:	6849      	ldr	r1, [r1, #4]
 8004228:	0989      	lsrs	r1, r1, #6
 800422a:	4608      	mov	r0, r1
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004234:	f04f 0500 	mov.w	r5, #0
 8004238:	ea00 0204 	and.w	r2, r0, r4
 800423c:	ea01 0305 	and.w	r3, r1, r5
 8004240:	493d      	ldr	r1, [pc, #244]	; (8004338 <HAL_RCC_GetSysClockFreq+0x168>)
 8004242:	fb01 f003 	mul.w	r0, r1, r3
 8004246:	2100      	movs	r1, #0
 8004248:	fb01 f102 	mul.w	r1, r1, r2
 800424c:	1844      	adds	r4, r0, r1
 800424e:	493a      	ldr	r1, [pc, #232]	; (8004338 <HAL_RCC_GetSysClockFreq+0x168>)
 8004250:	fba2 0101 	umull	r0, r1, r2, r1
 8004254:	1863      	adds	r3, r4, r1
 8004256:	4619      	mov	r1, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	f7fc f846 	bl	80002f0 <__aeabi_uldivmod>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4613      	mov	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e04a      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	461a      	mov	r2, r3
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	ea02 0400 	and.w	r4, r2, r0
 8004286:	ea03 0501 	and.w	r5, r3, r1
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	014b      	lsls	r3, r1, #5
 8004298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800429c:	0142      	lsls	r2, r0, #5
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	1b00      	subs	r0, r0, r4
 80042a4:	eb61 0105 	sbc.w	r1, r1, r5
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	018b      	lsls	r3, r1, #6
 80042b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042b6:	0182      	lsls	r2, r0, #6
 80042b8:	1a12      	subs	r2, r2, r0
 80042ba:	eb63 0301 	sbc.w	r3, r3, r1
 80042be:	f04f 0000 	mov.w	r0, #0
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	00d9      	lsls	r1, r3, #3
 80042c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042cc:	00d0      	lsls	r0, r2, #3
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	1912      	adds	r2, r2, r4
 80042d4:	eb45 0303 	adc.w	r3, r5, r3
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	0299      	lsls	r1, r3, #10
 80042e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042e6:	0290      	lsls	r0, r2, #10
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	f7fb fffa 	bl	80002f0 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004304:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <HAL_RCC_GetSysClockFreq+0x160>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	60bb      	str	r3, [r7, #8]
      break;
 800431e:	e002      	b.n	8004326 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <HAL_RCC_GetSysClockFreq+0x164>)
 8004322:	60bb      	str	r3, [r7, #8]
      break;
 8004324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004326:	68bb      	ldr	r3, [r7, #8]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bdb0      	pop	{r4, r5, r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	00f42400 	.word	0x00f42400
 8004338:	017d7840 	.word	0x017d7840

0800433c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_RCC_GetHCLKFreq+0x14>)
 8004342:	681b      	ldr	r3, [r3, #0]
}
 8004344:	4618      	mov	r0, r3
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	2000005c 	.word	0x2000005c

08004354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004358:	f7ff fff0 	bl	800433c <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0a9b      	lsrs	r3, r3, #10
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	08009a90 	.word	0x08009a90

0800437c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004380:	f7ff ffdc 	bl	800433c <HAL_RCC_GetHCLKFreq>
 8004384:	4602      	mov	r2, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	0b5b      	lsrs	r3, r3, #13
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4903      	ldr	r1, [pc, #12]	; (80043a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	08009a90 	.word	0x08009a90

080043a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d012      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043cc:	4b69      	ldr	r3, [pc, #420]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a68      	ldr	r2, [pc, #416]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043d6:	6093      	str	r3, [r2, #8]
 80043d8:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	4964      	ldr	r1, [pc, #400]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d017      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043fe:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	4959      	ldr	r1, [pc, #356]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800443a:	4b4e      	ldr	r3, [pc, #312]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004440:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	494a      	ldr	r1, [pc, #296]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 808b 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	4a39      	ldr	r2, [pc, #228]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	; 0x40
 8004494:	4b37      	ldr	r3, [pc, #220]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fd fda8 	bl	8002000 <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b4:	f7fd fda4 	bl	8002000 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e38f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d2:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d035      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d02e      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f0:	4b20      	ldr	r3, [pc, #128]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004512:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d114      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fd fd6c 	bl	8002000 <HAL_GetTick>
 8004528:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fd fd68 	bl	8002000 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e351      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ee      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455a:	d111      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800456a:	400b      	ands	r3, r1
 800456c:	4901      	ldr	r1, [pc, #4]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
 8004572:	e00b      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004574:	40023800 	.word	0x40023800
 8004578:	40007000 	.word	0x40007000
 800457c:	0ffffcff 	.word	0x0ffffcff
 8004580:	4bb3      	ldr	r3, [pc, #716]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4ab2      	ldr	r2, [pc, #712]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800458a:	6093      	str	r3, [r2, #8]
 800458c:	4bb0      	ldr	r3, [pc, #704]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004598:	49ad      	ldr	r1, [pc, #692]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800459a:	4313      	orrs	r3, r2
 800459c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0310 	and.w	r3, r3, #16
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d010      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045aa:	4ba9      	ldr	r3, [pc, #676]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	4aa7      	ldr	r2, [pc, #668]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80045ba:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	49a2      	ldr	r1, [pc, #648]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045d8:	4b9d      	ldr	r3, [pc, #628]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045e6:	499a      	ldr	r1, [pc, #616]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045fa:	4b95      	ldr	r3, [pc, #596]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004608:	4991      	ldr	r1, [pc, #580]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800461c:	4b8c      	ldr	r3, [pc, #560]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800462a:	4989      	ldr	r1, [pc, #548]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800463e:	4b84      	ldr	r3, [pc, #528]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4980      	ldr	r1, [pc, #512]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004660:	4b7b      	ldr	r3, [pc, #492]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	4978      	ldr	r1, [pc, #480]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004682:	4b73      	ldr	r3, [pc, #460]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f023 020c 	bic.w	r2, r3, #12
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004690:	496f      	ldr	r1, [pc, #444]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046a4:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4967      	ldr	r1, [pc, #412]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046c6:	4b62      	ldr	r3, [pc, #392]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	495e      	ldr	r1, [pc, #376]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	4956      	ldr	r1, [pc, #344]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800470a:	4b51      	ldr	r3, [pc, #324]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	494d      	ldr	r1, [pc, #308]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	4945      	ldr	r1, [pc, #276]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475c:	493c      	ldr	r1, [pc, #240]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004770:	4b37      	ldr	r3, [pc, #220]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477e:	4934      	ldr	r1, [pc, #208]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a0:	492b      	ldr	r1, [pc, #172]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b0:	d101      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d2:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	491b      	ldr	r1, [pc, #108]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047f4:	4b16      	ldr	r3, [pc, #88]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004804:	4912      	ldr	r1, [pc, #72]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004828:	4909      	ldr	r1, [pc, #36]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004842:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	4986      	ldr	r1, [pc, #536]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00b      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004868:	4b81      	ldr	r3, [pc, #516]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004878:	497d      	ldr	r1, [pc, #500]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d006      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80d6 	beq.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004894:	4b76      	ldr	r3, [pc, #472]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a75      	ldr	r2, [pc, #468]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800489a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fd fbae 	bl	8002000 <HAL_GetTick>
 80048a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048a8:	f7fd fbaa 	bl	8002000 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e195      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048ba:	4b6d      	ldr	r3, [pc, #436]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d021      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11d      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048da:	4b65      	ldr	r3, [pc, #404]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048e8:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ee:	0e1b      	lsrs	r3, r3, #24
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	019a      	lsls	r2, r3, #6
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	4958      	ldr	r1, [pc, #352]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d004      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02e      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004940:	d129      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004942:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004950:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004956:	0f1b      	lsrs	r3, r3, #28
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	431a      	orrs	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	493e      	ldr	r1, [pc, #248]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800497e:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f023 021f 	bic.w	r2, r3, #31
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	3b01      	subs	r3, #1
 800498e:	4938      	ldr	r1, [pc, #224]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01d      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049a2:	4b33      	ldr	r3, [pc, #204]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a8:	0e1b      	lsrs	r3, r3, #24
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049b0:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b6:	0f1b      	lsrs	r3, r3, #28
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	019a      	lsls	r2, r3, #6
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	431a      	orrs	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	061b      	lsls	r3, r3, #24
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	071b      	lsls	r3, r3, #28
 80049d6:	4926      	ldr	r1, [pc, #152]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d011      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	019a      	lsls	r2, r3, #6
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	491a      	ldr	r1, [pc, #104]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1a:	f7fd faf1 	bl	8002000 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a22:	f7fd faed 	bl	8002000 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0d8      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f040 80ce 	bne.w	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a08      	ldr	r2, [pc, #32]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a54:	f7fd fad4 	bl	8002000 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a5c:	f7fd fad0 	bl	8002000 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	; 0x64
 8004a68:	d904      	bls.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0bb      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a74:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a80:	d0ec      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02e      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d12a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aaa:	4b51      	ldr	r3, [pc, #324]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ab8:	4b4d      	ldr	r3, [pc, #308]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	0f1b      	lsrs	r3, r3, #28
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	019a      	lsls	r2, r3, #6
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	061b      	lsls	r3, r3, #24
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	071b      	lsls	r3, r3, #28
 8004ade:	4944      	ldr	r1, [pc, #272]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ae6:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	493d      	ldr	r1, [pc, #244]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d022      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b14:	d11d      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b24:	4b32      	ldr	r3, [pc, #200]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	0f1b      	lsrs	r3, r3, #28
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	019a      	lsls	r2, r3, #6
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	431a      	orrs	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	071b      	lsls	r3, r3, #28
 8004b4a:	4929      	ldr	r1, [pc, #164]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b6c:	4b20      	ldr	r3, [pc, #128]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	0c1b      	lsrs	r3, r3, #16
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	4917      	ldr	r1, [pc, #92]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4911      	ldr	r1, [pc, #68]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fd fa20 	bl	8002000 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bc4:	f7fd fa1c 	bl	8002000 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e007      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be2:	d1ef      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e09d      	b.n	8004d42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c16:	d009      	beq.n	8004c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]
 8004c1e:	e005      	b.n	8004c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fba6 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c6c:	d902      	bls.n	8004c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e002      	b.n	8004c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c82:	d007      	beq.n	8004c94 <HAL_SPI_Init+0xa0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c8c:	d002      	beq.n	8004c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	ea42 0103 	orr.w	r1, r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	f003 0204 	and.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	099b      	lsrs	r3, r3, #6
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
    return;
 8004d8e:	e0d7      	b.n	8004f40 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_SPI_IRQHandler+0x66>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
    return;
 8004db0:	e0c6      	b.n	8004f40 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_SPI_IRQHandler+0x8c>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80b4 	beq.w	8004f40 <HAL_SPI_IRQHandler+0x1f4>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80ad 	beq.w	8004f40 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d023      	beq.n	8004e3a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d011      	beq.n	8004e22 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	617b      	str	r3, [r7, #20]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	e00b      	b.n	8004e3a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
        return;
 8004e38:	e082      	b.n	8004f40 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d014      	beq.n	8004e70 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e80:	f043 0208 	orr.w	r2, r3, #8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04f      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004eac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <HAL_SPI_IRQHandler+0x17e>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d034      	beq.n	8004f34 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0203 	bic.w	r2, r2, #3
 8004ed8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d011      	beq.n	8004f06 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_SPI_IRQHandler+0x1fc>)
 8004ee8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe f918 	bl	8003124 <HAL_DMA_Abort_IT>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <HAL_SPI_IRQHandler+0x1fc>)
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe f902 	bl	8003124 <HAL_DMA_Abort_IT>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004f32:	e003      	b.n	8004f3c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f809 	bl	8004f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f3a:	e000      	b.n	8004f3e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f3c:	bf00      	nop
    return;
 8004f3e:	bf00      	nop
  }
}
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	08004f61 	.word	0x08004f61

08004f4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f7ff ffe5 	bl	8004f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f82:	bf00      	nop
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e049      	b.n	8005030 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fc fd51 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fdcb 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d001      	beq.n	8005050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e054      	b.n	80050fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a26      	ldr	r2, [pc, #152]	; (8005108 <HAL_TIM_Base_Start_IT+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d022      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d01d      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_TIM_Base_Start_IT+0xd4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d018      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <HAL_TIM_Base_Start_IT+0xd8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d013      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_TIM_Base_Start_IT+0xdc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00e      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_TIM_Base_Start_IT+0xe0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_TIM_Base_Start_IT+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_TIM_Base_Start_IT+0xe8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d115      	bne.n	80050e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	4b19      	ldr	r3, [pc, #100]	; (8005124 <HAL_TIM_Base_Start_IT+0xec>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d015      	beq.n	80050f6 <HAL_TIM_Base_Start_IT+0xbe>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d011      	beq.n	80050f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0201 	orr.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e2:	e008      	b.n	80050f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40010400 	.word	0x40010400
 800511c:	40014000 	.word	0x40014000
 8005120:	40001800 	.word	0x40001800
 8005124:	00010007 	.word	0x00010007

08005128 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6a1a      	ldr	r2, [r3, #32]
 8005146:	f241 1311 	movw	r3, #4369	; 0x1111
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10f      	bne.n	8005170 <HAL_TIM_Base_Stop_IT+0x48>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	f240 4344 	movw	r3, #1092	; 0x444
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <HAL_TIM_Base_Stop_IT+0x48>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b082      	sub	sp, #8
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e049      	b.n	800522c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7fc fc95 	bl	8001adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3304      	adds	r3, #4
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 fccd 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d109      	bne.n	8005258 <HAL_TIM_PWM_Start+0x24>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	bf14      	ite	ne
 8005250:	2301      	movne	r3, #1
 8005252:	2300      	moveq	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	e03c      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d109      	bne.n	8005272 <HAL_TIM_PWM_Start+0x3e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b01      	cmp	r3, #1
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e02f      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d109      	bne.n	800528c <HAL_TIM_PWM_Start+0x58>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	e022      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d109      	bne.n	80052a6 <HAL_TIM_PWM_Start+0x72>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	e015      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d109      	bne.n	80052c0 <HAL_TIM_PWM_Start+0x8c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e008      	b.n	80052d2 <HAL_TIM_PWM_Start+0x9e>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e092      	b.n	8005400 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d104      	bne.n	80052ea <HAL_TIM_PWM_Start+0xb6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e8:	e023      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_PWM_Start+0xc6>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052f8:	e01b      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0xd6>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	e013      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b0c      	cmp	r3, #12
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0xe6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005318:	e00b      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b10      	cmp	r3, #16
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xf6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005328:	e003      	b.n	8005332 <HAL_TIM_PWM_Start+0xfe>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 ffaa 	bl	8006294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a30      	ldr	r2, [pc, #192]	; (8005408 <HAL_TIM_PWM_Start+0x1d4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_PWM_Start+0x120>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2f      	ldr	r2, [pc, #188]	; (800540c <HAL_TIM_PWM_Start+0x1d8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_TIM_PWM_Start+0x124>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_TIM_PWM_Start+0x126>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <HAL_TIM_PWM_Start+0x1d4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d01d      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a22      	ldr	r2, [pc, #136]	; (8005410 <HAL_TIM_PWM_Start+0x1dc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <HAL_TIM_PWM_Start+0x1e0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <HAL_TIM_PWM_Start+0x1e4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a19      	ldr	r2, [pc, #100]	; (800540c <HAL_TIM_PWM_Start+0x1d8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <HAL_TIM_PWM_Start+0x1e8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_TIM_PWM_Start+0x18a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a19      	ldr	r2, [pc, #100]	; (8005420 <HAL_TIM_PWM_Start+0x1ec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d115      	bne.n	80053ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <HAL_TIM_PWM_Start+0x1f0>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b06      	cmp	r3, #6
 80053ce:	d015      	beq.n	80053fc <HAL_TIM_PWM_Start+0x1c8>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d6:	d011      	beq.n	80053fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e8:	e008      	b.n	80053fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e000      	b.n	80053fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40010000 	.word	0x40010000
 800540c:	40010400 	.word	0x40010400
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800
 8005424:	00010007 	.word	0x00010007

08005428 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2200      	movs	r2, #0
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 ff2a 	bl	8006294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a36      	ldr	r2, [pc, #216]	; (8005520 <HAL_TIM_PWM_Stop+0xf8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d004      	beq.n	8005454 <HAL_TIM_PWM_Stop+0x2c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a35      	ldr	r2, [pc, #212]	; (8005524 <HAL_TIM_PWM_Stop+0xfc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_TIM_PWM_Stop+0x30>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_TIM_PWM_Stop+0x32>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d017      	beq.n	800548e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	f241 1311 	movw	r3, #4369	; 0x1111
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_TIM_PWM_Stop+0x66>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	f240 4344 	movw	r3, #1092	; 0x444
 8005478:	4013      	ands	r3, r2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_TIM_PWM_Stop+0x66>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a1a      	ldr	r2, [r3, #32]
 8005494:	f241 1311 	movw	r3, #4369	; 0x1111
 8005498:	4013      	ands	r3, r2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10f      	bne.n	80054be <HAL_TIM_PWM_Stop+0x96>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6a1a      	ldr	r2, [r3, #32]
 80054a4:	f240 4344 	movw	r3, #1092	; 0x444
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <HAL_TIM_PWM_Stop+0x96>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_PWM_Stop+0xa6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054cc:	e023      	b.n	8005516 <HAL_TIM_PWM_Stop+0xee>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Stop+0xb6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054dc:	e01b      	b.n	8005516 <HAL_TIM_PWM_Stop+0xee>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Stop+0xc6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054ec:	e013      	b.n	8005516 <HAL_TIM_PWM_Stop+0xee>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b0c      	cmp	r3, #12
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Stop+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054fc:	e00b      	b.n	8005516 <HAL_TIM_PWM_Stop+0xee>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b10      	cmp	r3, #16
 8005502:	d104      	bne.n	800550e <HAL_TIM_PWM_Stop+0xe6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800550c:	e003      	b.n	8005516 <HAL_TIM_PWM_Stop+0xee>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40010000 	.word	0x40010000
 8005524:	40010400 	.word	0x40010400

08005528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b02      	cmp	r3, #2
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0202 	mvn.w	r2, #2
 8005554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fadc 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 face 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fadf 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0204 	mvn.w	r2, #4
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fab2 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 faa4 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fab5 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0208 	mvn.w	r2, #8
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2204      	movs	r2, #4
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fa88 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa7a 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fa8b 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b10      	cmp	r3, #16
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b10      	cmp	r3, #16
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0210 	mvn.w	r2, #16
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2208      	movs	r2, #8
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa5e 	bl	8005b28 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa50 	bl	8005b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fa61 	bl	8005b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0201 	mvn.w	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fc fad0 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fe9c 	bl	8006410 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e6:	d10e      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d107      	bne.n	8005706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fe8f 	bl	8006424 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fa0f 	bl	8005b50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b20      	cmp	r3, #32
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b20      	cmp	r3, #32
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0220 	mvn.w	r2, #32
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fe4f 	bl	80063fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800577e:	2302      	movs	r3, #2
 8005780:	e0fd      	b.n	800597e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b14      	cmp	r3, #20
 800578e:	f200 80f0 	bhi.w	8005972 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057ed 	.word	0x080057ed
 800579c:	08005973 	.word	0x08005973
 80057a0:	08005973 	.word	0x08005973
 80057a4:	08005973 	.word	0x08005973
 80057a8:	0800582d 	.word	0x0800582d
 80057ac:	08005973 	.word	0x08005973
 80057b0:	08005973 	.word	0x08005973
 80057b4:	08005973 	.word	0x08005973
 80057b8:	0800586f 	.word	0x0800586f
 80057bc:	08005973 	.word	0x08005973
 80057c0:	08005973 	.word	0x08005973
 80057c4:	08005973 	.word	0x08005973
 80057c8:	080058af 	.word	0x080058af
 80057cc:	08005973 	.word	0x08005973
 80057d0:	08005973 	.word	0x08005973
 80057d4:	08005973 	.word	0x08005973
 80057d8:	080058f1 	.word	0x080058f1
 80057dc:	08005973 	.word	0x08005973
 80057e0:	08005973 	.word	0x08005973
 80057e4:	08005973 	.word	0x08005973
 80057e8:	08005931 	.word	0x08005931
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fa56 	bl	8005ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0204 	bic.w	r2, r2, #4
 8005816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	619a      	str	r2, [r3, #24]
      break;
 800582a:	e0a3      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 faa8 	bl	8005d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005846:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6999      	ldr	r1, [r3, #24]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	021a      	lsls	r2, r3, #8
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	619a      	str	r2, [r3, #24]
      break;
 800586c:	e082      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 faff 	bl	8005e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69da      	ldr	r2, [r3, #28]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0204 	bic.w	r2, r2, #4
 8005898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69d9      	ldr	r1, [r3, #28]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	61da      	str	r2, [r3, #28]
      break;
 80058ac:	e062      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fb55 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	021a      	lsls	r2, r3, #8
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	61da      	str	r2, [r3, #28]
      break;
 80058ee:	e041      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fb8c 	bl	8006014 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0204 	bic.w	r2, r2, #4
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800592e:	e021      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fbbe 	bl	80060b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005970:	e000      	b.n	8005974 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop

08005988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_ConfigClockSource+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e0b3      	b.n	8005b08 <HAL_TIM_ConfigClockSource+0x180>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b55      	ldr	r3, [pc, #340]	; (8005b10 <HAL_TIM_ConfigClockSource+0x188>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xd0>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8085 	beq.w	8005af4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xa2>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x116>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xf6>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x136>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 fc0b 	bl	8006254 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04e      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 fbf4 	bl	8006254 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 fb68 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fbc1 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 fb87 	bl	80061be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fbb1 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 fb48 	bl	8006160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fba1 	bl	800621e <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00b      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 fb98 	bl	800621e <TIM_ITRx_SetConfig>
        break;
 8005aee:	e002      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005af0:	bf00      	nop
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005af4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	fffeff88 	.word	0xfffeff88

08005b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a40      	ldr	r2, [pc, #256]	; (8005c78 <TIM_Base_SetConfig+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d00f      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3d      	ldr	r2, [pc, #244]	; (8005c7c <TIM_Base_SetConfig+0x118>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3c      	ldr	r2, [pc, #240]	; (8005c80 <TIM_Base_SetConfig+0x11c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3b      	ldr	r2, [pc, #236]	; (8005c84 <TIM_Base_SetConfig+0x120>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3a      	ldr	r2, [pc, #232]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d108      	bne.n	8005bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2f      	ldr	r2, [pc, #188]	; (8005c78 <TIM_Base_SetConfig+0x114>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d02b      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d027      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2c      	ldr	r2, [pc, #176]	; (8005c7c <TIM_Base_SetConfig+0x118>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d023      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2b      	ldr	r2, [pc, #172]	; (8005c80 <TIM_Base_SetConfig+0x11c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01f      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	; (8005c84 <TIM_Base_SetConfig+0x120>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01b      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a29      	ldr	r2, [pc, #164]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d017      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a28      	ldr	r2, [pc, #160]	; (8005c8c <TIM_Base_SetConfig+0x128>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d013      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00f      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a26      	ldr	r2, [pc, #152]	; (8005c94 <TIM_Base_SetConfig+0x130>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00b      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d007      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <TIM_Base_SetConfig+0x138>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d003      	beq.n	8005c16 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a23      	ldr	r2, [pc, #140]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d108      	bne.n	8005c28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	; (8005c78 <TIM_Base_SetConfig+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0xf8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d103      	bne.n	8005c64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691a      	ldr	r2, [r3, #16]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	615a      	str	r2, [r3, #20]
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800
 8005c98:	40001800 	.word	0x40001800
 8005c9c:	40001c00 	.word	0x40001c00
 8005ca0:	40002000 	.word	0x40002000

08005ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <TIM_OC1_SetConfig+0xd8>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 0302 	bic.w	r3, r3, #2
 8005cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <TIM_OC1_SetConfig+0xdc>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d003      	beq.n	8005d08 <TIM_OC1_SetConfig+0x64>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <TIM_OC1_SetConfig+0xe0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d10c      	bne.n	8005d22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 0308 	bic.w	r3, r3, #8
 8005d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f023 0304 	bic.w	r3, r3, #4
 8005d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <TIM_OC1_SetConfig+0xdc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d003      	beq.n	8005d32 <TIM_OC1_SetConfig+0x8e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_OC1_SetConfig+0xe0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d111      	bne.n	8005d56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	621a      	str	r2, [r3, #32]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	fffeff8f 	.word	0xfffeff8f
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40010400 	.word	0x40010400

08005d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0210 	bic.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4b2e      	ldr	r3, [pc, #184]	; (8005e6c <TIM_OC2_SetConfig+0xe4>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f023 0320 	bic.w	r3, r3, #32
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a23      	ldr	r2, [pc, #140]	; (8005e70 <TIM_OC2_SetConfig+0xe8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC2_SetConfig+0x68>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <TIM_OC2_SetConfig+0xec>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10d      	bne.n	8005e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a18      	ldr	r2, [pc, #96]	; (8005e70 <TIM_OC2_SetConfig+0xe8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC2_SetConfig+0x94>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <TIM_OC2_SetConfig+0xec>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d113      	bne.n	8005e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	feff8fff 	.word	0xfeff8fff
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <TIM_OC3_SetConfig+0xe0>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	; (8005f5c <TIM_OC3_SetConfig+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_OC3_SetConfig+0x66>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	; (8005f60 <TIM_OC3_SetConfig+0xe8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10d      	bne.n	8005efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <TIM_OC3_SetConfig+0xe4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC3_SetConfig+0x92>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a16      	ldr	r2, [pc, #88]	; (8005f60 <TIM_OC3_SetConfig+0xe8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d113      	bne.n	8005f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	fffeff8f 	.word	0xfffeff8f
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4b1e      	ldr	r3, [pc, #120]	; (8006008 <TIM_OC4_SetConfig+0xa4>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	; (800600c <TIM_OC4_SetConfig+0xa8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_OC4_SetConfig+0x68>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <TIM_OC4_SetConfig+0xac>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d109      	bne.n	8005fe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	019b      	lsls	r3, r3, #6
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	feff8fff 	.word	0xfeff8fff
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <TIM_OC5_SetConfig+0x98>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006054:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a12      	ldr	r2, [pc, #72]	; (80060b0 <TIM_OC5_SetConfig+0x9c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC5_SetConfig+0x5e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a11      	ldr	r2, [pc, #68]	; (80060b4 <TIM_OC5_SetConfig+0xa0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d109      	bne.n	8006086 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	fffeff8f 	.word	0xfffeff8f
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40010400 	.word	0x40010400

080060b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <TIM_OC6_SetConfig+0x9c>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	051b      	lsls	r3, r3, #20
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a13      	ldr	r2, [pc, #76]	; (8006158 <TIM_OC6_SetConfig+0xa0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d003      	beq.n	8006118 <TIM_OC6_SetConfig+0x60>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a12      	ldr	r2, [pc, #72]	; (800615c <TIM_OC6_SetConfig+0xa4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d109      	bne.n	800612c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	029b      	lsls	r3, r3, #10
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	feff8fff 	.word	0xfeff8fff
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800618a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f023 030a 	bic.w	r3, r3, #10
 800619c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061be:	b480      	push	{r7}
 80061c0:	b087      	sub	sp, #28
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	60f8      	str	r0, [r7, #12]
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	031b      	lsls	r3, r3, #12
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	621a      	str	r2, [r3, #32]
}
 8006212:	bf00      	nop
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	f043 0307 	orr.w	r3, r3, #7
 8006240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	431a      	orrs	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	2201      	movs	r2, #1
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	401a      	ands	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	6879      	ldr	r1, [r7, #4]
 80062c8:	fa01 f303 	lsl.w	r3, r1, r3
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e06d      	b.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a30      	ldr	r2, [pc, #192]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d004      	beq.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2f      	ldr	r2, [pc, #188]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006332:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006344:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d01d      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a1c      	ldr	r2, [pc, #112]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1a      	ldr	r2, [pc, #104]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10c      	bne.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40001800 	.word	0x40001800

080063fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e040      	b.n	80064cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb fcbe 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2224      	movs	r2, #36	; 0x24
 8006464:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fa56 	bl	8006928 <UART_SetConfig>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e022      	b.n	80064cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 fcac 	bl	8006dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fd33 	bl	8006f30 <UART_CheckIdleState>
 80064ca:	4603      	mov	r3, r0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064fa:	4013      	ands	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d113      	bne.n	800652c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 81cc 	beq.w	80068ba <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	4798      	blx	r3
      }
      return;
 800652a:	e1c6      	b.n	80068ba <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 80e3 	beq.w	80066fa <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d105      	bne.n	800654a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4ba5      	ldr	r3, [pc, #660]	; (80067d8 <HAL_UART_IRQHandler+0x304>)
 8006542:	4013      	ands	r3, r2
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80d8 	beq.w	80066fa <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d010      	beq.n	8006576 <HAL_UART_IRQHandler+0xa2>
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2201      	movs	r2, #1
 8006564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	f043 0201 	orr.w	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d010      	beq.n	80065a2 <HAL_UART_IRQHandler+0xce>
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2202      	movs	r2, #2
 8006590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d010      	beq.n	80065ce <HAL_UART_IRQHandler+0xfa>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2204      	movs	r2, #4
 80065bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d015      	beq.n	8006604 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2208      	movs	r2, #8
 80065f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fa:	f043 0208 	orr.w	r2, r3, #8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	2b00      	cmp	r3, #0
 800660c:	d011      	beq.n	8006632 <HAL_UART_IRQHandler+0x15e>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00c      	beq.n	8006632 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006628:	f043 0220 	orr.w	r2, r3, #32
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8140 	beq.w	80068be <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00c      	beq.n	8006662 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006668:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d004      	beq.n	8006682 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667e:	2b00      	cmp	r3, #0
 8006680:	d031      	beq.n	80066e6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fd19 	bl	80070ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d123      	bne.n	80066de <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d013      	beq.n	80066d6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b2:	4a4a      	ldr	r2, [pc, #296]	; (80067dc <HAL_UART_IRQHandler+0x308>)
 80066b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fc fd32 	bl	8003124 <HAL_DMA_Abort_IT>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d4:	e00f      	b.n	80066f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f906 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066dc:	e00b      	b.n	80066f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f902 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	e007      	b.n	80066f6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f8fe 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80066f4:	e0e3      	b.n	80068be <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f6:	bf00      	nop
    return;
 80066f8:	e0e1      	b.n	80068be <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	2b01      	cmp	r3, #1
 8006700:	f040 80a7 	bne.w	8006852 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 80a1 	beq.w	8006852 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 809b 	beq.w	8006852 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2210      	movs	r2, #16
 8006722:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d156      	bne.n	80067e0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800673c:	893b      	ldrh	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 80bf 	beq.w	80068c2 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800674a:	893a      	ldrh	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	f080 80b8 	bcs.w	80068c2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	893a      	ldrh	r2, [r7, #8]
 8006756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006764:	d02a      	beq.n	80067bc <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006774:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006794:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0210 	bic.w	r2, r2, #16
 80067b0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fc fc44 	bl	8003044 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	4619      	mov	r1, r3
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f893 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067d6:	e074      	b.n	80068c2 <HAL_UART_IRQHandler+0x3ee>
 80067d8:	04000120 	.word	0x04000120
 80067dc:	08007119 	.word	0x08007119
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d063      	beq.n	80068c6 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80067fe:	897b      	ldrh	r3, [r7, #10]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d060      	beq.n	80068c6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006812:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0210 	bic.w	r2, r2, #16
 8006844:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006846:	897b      	ldrh	r3, [r7, #10]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f856 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006850:	e039      	b.n	80068c6 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <HAL_UART_IRQHandler+0x3a4>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d008      	beq.n	8006878 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800686e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f84f 	bl	8006914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006876:	e029      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01a      	beq.n	80068ca <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
    }
    return;
 800689c:	e015      	b.n	80068ca <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d011      	beq.n	80068cc <HAL_UART_IRQHandler+0x3f8>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fc46 	bl	8007144 <UART_EndTransmit_IT>
    return;
 80068b8:	e008      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80068ba:	bf00      	nop
 80068bc:	e006      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
    return;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
      return;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_UART_IRQHandler+0x3f8>
    return;
 80068ca:	bf00      	nop
  }

}
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006930:	2300      	movs	r3, #0
 8006932:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	4ba7      	ldr	r3, [pc, #668]	; (8006bf0 <UART_SetConfig+0x2c8>)
 8006954:	4013      	ands	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	6979      	ldr	r1, [r7, #20]
 800695c:	430b      	orrs	r3, r1
 800695e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68da      	ldr	r2, [r3, #12]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a95      	ldr	r2, [pc, #596]	; (8006bf4 <UART_SetConfig+0x2cc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d120      	bne.n	80069e6 <UART_SetConfig+0xbe>
 80069a4:	4b94      	ldr	r3, [pc, #592]	; (8006bf8 <UART_SetConfig+0x2d0>)
 80069a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d816      	bhi.n	80069e0 <UART_SetConfig+0xb8>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x90>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069c9 	.word	0x080069c9
 80069bc:	080069d5 	.word	0x080069d5
 80069c0:	080069cf 	.word	0x080069cf
 80069c4:	080069db 	.word	0x080069db
 80069c8:	2301      	movs	r3, #1
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e14f      	b.n	8006c6e <UART_SetConfig+0x346>
 80069ce:	2302      	movs	r3, #2
 80069d0:	77fb      	strb	r3, [r7, #31]
 80069d2:	e14c      	b.n	8006c6e <UART_SetConfig+0x346>
 80069d4:	2304      	movs	r3, #4
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e149      	b.n	8006c6e <UART_SetConfig+0x346>
 80069da:	2308      	movs	r3, #8
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e146      	b.n	8006c6e <UART_SetConfig+0x346>
 80069e0:	2310      	movs	r3, #16
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e143      	b.n	8006c6e <UART_SetConfig+0x346>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a84      	ldr	r2, [pc, #528]	; (8006bfc <UART_SetConfig+0x2d4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d132      	bne.n	8006a56 <UART_SetConfig+0x12e>
 80069f0:	4b81      	ldr	r3, [pc, #516]	; (8006bf8 <UART_SetConfig+0x2d0>)
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d828      	bhi.n	8006a50 <UART_SetConfig+0x128>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <UART_SetConfig+0xdc>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a39 	.word	0x08006a39
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006a45 	.word	0x08006a45
 8006a18:	08006a51 	.word	0x08006a51
 8006a1c:	08006a51 	.word	0x08006a51
 8006a20:	08006a51 	.word	0x08006a51
 8006a24:	08006a3f 	.word	0x08006a3f
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006a4b 	.word	0x08006a4b
 8006a38:	2300      	movs	r3, #0
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e117      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e114      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a44:	2304      	movs	r3, #4
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e111      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e10e      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a50:	2310      	movs	r3, #16
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e10b      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a69      	ldr	r2, [pc, #420]	; (8006c00 <UART_SetConfig+0x2d8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d120      	bne.n	8006aa2 <UART_SetConfig+0x17a>
 8006a60:	4b65      	ldr	r3, [pc, #404]	; (8006bf8 <UART_SetConfig+0x2d0>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a6a:	2b30      	cmp	r3, #48	; 0x30
 8006a6c:	d013      	beq.n	8006a96 <UART_SetConfig+0x16e>
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	d814      	bhi.n	8006a9c <UART_SetConfig+0x174>
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d009      	beq.n	8006a8a <UART_SetConfig+0x162>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d810      	bhi.n	8006a9c <UART_SetConfig+0x174>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0x15c>
 8006a7e:	2b10      	cmp	r3, #16
 8006a80:	d006      	beq.n	8006a90 <UART_SetConfig+0x168>
 8006a82:	e00b      	b.n	8006a9c <UART_SetConfig+0x174>
 8006a84:	2300      	movs	r3, #0
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0f1      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	77fb      	strb	r3, [r7, #31]
 8006a8e:	e0ee      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a90:	2304      	movs	r3, #4
 8006a92:	77fb      	strb	r3, [r7, #31]
 8006a94:	e0eb      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a96:	2308      	movs	r3, #8
 8006a98:	77fb      	strb	r3, [r7, #31]
 8006a9a:	e0e8      	b.n	8006c6e <UART_SetConfig+0x346>
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	77fb      	strb	r3, [r7, #31]
 8006aa0:	e0e5      	b.n	8006c6e <UART_SetConfig+0x346>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a57      	ldr	r2, [pc, #348]	; (8006c04 <UART_SetConfig+0x2dc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d120      	bne.n	8006aee <UART_SetConfig+0x1c6>
 8006aac:	4b52      	ldr	r3, [pc, #328]	; (8006bf8 <UART_SetConfig+0x2d0>)
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ab8:	d013      	beq.n	8006ae2 <UART_SetConfig+0x1ba>
 8006aba:	2bc0      	cmp	r3, #192	; 0xc0
 8006abc:	d814      	bhi.n	8006ae8 <UART_SetConfig+0x1c0>
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d009      	beq.n	8006ad6 <UART_SetConfig+0x1ae>
 8006ac2:	2b80      	cmp	r3, #128	; 0x80
 8006ac4:	d810      	bhi.n	8006ae8 <UART_SetConfig+0x1c0>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <UART_SetConfig+0x1a8>
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d006      	beq.n	8006adc <UART_SetConfig+0x1b4>
 8006ace:	e00b      	b.n	8006ae8 <UART_SetConfig+0x1c0>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e0cb      	b.n	8006c6e <UART_SetConfig+0x346>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e0c8      	b.n	8006c6e <UART_SetConfig+0x346>
 8006adc:	2304      	movs	r3, #4
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e0c5      	b.n	8006c6e <UART_SetConfig+0x346>
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e0c2      	b.n	8006c6e <UART_SetConfig+0x346>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	77fb      	strb	r3, [r7, #31]
 8006aec:	e0bf      	b.n	8006c6e <UART_SetConfig+0x346>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a45      	ldr	r2, [pc, #276]	; (8006c08 <UART_SetConfig+0x2e0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d125      	bne.n	8006b44 <UART_SetConfig+0x21c>
 8006af8:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <UART_SetConfig+0x2d0>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b06:	d017      	beq.n	8006b38 <UART_SetConfig+0x210>
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b0c:	d817      	bhi.n	8006b3e <UART_SetConfig+0x216>
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b12:	d00b      	beq.n	8006b2c <UART_SetConfig+0x204>
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b18:	d811      	bhi.n	8006b3e <UART_SetConfig+0x216>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <UART_SetConfig+0x1fe>
 8006b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b22:	d006      	beq.n	8006b32 <UART_SetConfig+0x20a>
 8006b24:	e00b      	b.n	8006b3e <UART_SetConfig+0x216>
 8006b26:	2300      	movs	r3, #0
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e0a0      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e09d      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b32:	2304      	movs	r3, #4
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e09a      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b38:	2308      	movs	r3, #8
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e097      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b3e:	2310      	movs	r3, #16
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e094      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a30      	ldr	r2, [pc, #192]	; (8006c0c <UART_SetConfig+0x2e4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d125      	bne.n	8006b9a <UART_SetConfig+0x272>
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <UART_SetConfig+0x2d0>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b5c:	d017      	beq.n	8006b8e <UART_SetConfig+0x266>
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b62:	d817      	bhi.n	8006b94 <UART_SetConfig+0x26c>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d00b      	beq.n	8006b82 <UART_SetConfig+0x25a>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6e:	d811      	bhi.n	8006b94 <UART_SetConfig+0x26c>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <UART_SetConfig+0x254>
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d006      	beq.n	8006b88 <UART_SetConfig+0x260>
 8006b7a:	e00b      	b.n	8006b94 <UART_SetConfig+0x26c>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e075      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b82:	2302      	movs	r3, #2
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e072      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e06f      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b8e:	2308      	movs	r3, #8
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e06c      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b94:	2310      	movs	r3, #16
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e069      	b.n	8006c6e <UART_SetConfig+0x346>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1c      	ldr	r2, [pc, #112]	; (8006c10 <UART_SetConfig+0x2e8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d137      	bne.n	8006c14 <UART_SetConfig+0x2ec>
 8006ba4:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <UART_SetConfig+0x2d0>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb2:	d017      	beq.n	8006be4 <UART_SetConfig+0x2bc>
 8006bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bb8:	d817      	bhi.n	8006bea <UART_SetConfig+0x2c2>
 8006bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bbe:	d00b      	beq.n	8006bd8 <UART_SetConfig+0x2b0>
 8006bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc4:	d811      	bhi.n	8006bea <UART_SetConfig+0x2c2>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <UART_SetConfig+0x2aa>
 8006bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bce:	d006      	beq.n	8006bde <UART_SetConfig+0x2b6>
 8006bd0:	e00b      	b.n	8006bea <UART_SetConfig+0x2c2>
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e04a      	b.n	8006c6e <UART_SetConfig+0x346>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e047      	b.n	8006c6e <UART_SetConfig+0x346>
 8006bde:	2304      	movs	r3, #4
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e044      	b.n	8006c6e <UART_SetConfig+0x346>
 8006be4:	2308      	movs	r3, #8
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e041      	b.n	8006c6e <UART_SetConfig+0x346>
 8006bea:	2310      	movs	r3, #16
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e03e      	b.n	8006c6e <UART_SetConfig+0x346>
 8006bf0:	efff69f3 	.word	0xefff69f3
 8006bf4:	40011000 	.word	0x40011000
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40004400 	.word	0x40004400
 8006c00:	40004800 	.word	0x40004800
 8006c04:	40004c00 	.word	0x40004c00
 8006c08:	40005000 	.word	0x40005000
 8006c0c:	40011400 	.word	0x40011400
 8006c10:	40007800 	.word	0x40007800
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a71      	ldr	r2, [pc, #452]	; (8006de0 <UART_SetConfig+0x4b8>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d125      	bne.n	8006c6a <UART_SetConfig+0x342>
 8006c1e:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <UART_SetConfig+0x4bc>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c2c:	d017      	beq.n	8006c5e <UART_SetConfig+0x336>
 8006c2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c32:	d817      	bhi.n	8006c64 <UART_SetConfig+0x33c>
 8006c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c38:	d00b      	beq.n	8006c52 <UART_SetConfig+0x32a>
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3e:	d811      	bhi.n	8006c64 <UART_SetConfig+0x33c>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <UART_SetConfig+0x324>
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c48:	d006      	beq.n	8006c58 <UART_SetConfig+0x330>
 8006c4a:	e00b      	b.n	8006c64 <UART_SetConfig+0x33c>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e00d      	b.n	8006c6e <UART_SetConfig+0x346>
 8006c52:	2302      	movs	r3, #2
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e00a      	b.n	8006c6e <UART_SetConfig+0x346>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e007      	b.n	8006c6e <UART_SetConfig+0x346>
 8006c5e:	2308      	movs	r3, #8
 8006c60:	77fb      	strb	r3, [r7, #31]
 8006c62:	e004      	b.n	8006c6e <UART_SetConfig+0x346>
 8006c64:	2310      	movs	r3, #16
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e001      	b.n	8006c6e <UART_SetConfig+0x346>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c76:	d15b      	bne.n	8006d30 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006c78:	7ffb      	ldrb	r3, [r7, #31]
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d827      	bhi.n	8006cce <UART_SetConfig+0x3a6>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0x35c>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	08006cb9 	.word	0x08006cb9
 8006c90:	08006ccf 	.word	0x08006ccf
 8006c94:	08006cbf 	.word	0x08006cbf
 8006c98:	08006ccf 	.word	0x08006ccf
 8006c9c:	08006ccf 	.word	0x08006ccf
 8006ca0:	08006ccf 	.word	0x08006ccf
 8006ca4:	08006cc7 	.word	0x08006cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca8:	f7fd fb54 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8006cac:	61b8      	str	r0, [r7, #24]
        break;
 8006cae:	e013      	b.n	8006cd8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb0:	f7fd fb64 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 8006cb4:	61b8      	str	r0, [r7, #24]
        break;
 8006cb6:	e00f      	b.n	8006cd8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b4b      	ldr	r3, [pc, #300]	; (8006de8 <UART_SetConfig+0x4c0>)
 8006cba:	61bb      	str	r3, [r7, #24]
        break;
 8006cbc:	e00c      	b.n	8006cd8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cbe:	f7fd fa87 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8006cc2:	61b8      	str	r0, [r7, #24]
        break;
 8006cc4:	e008      	b.n	8006cd8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cca:	61bb      	str	r3, [r7, #24]
        break;
 8006ccc:	e004      	b.n	8006cd8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	77bb      	strb	r3, [r7, #30]
        break;
 8006cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d074      	beq.n	8006dc8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	005a      	lsls	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	085b      	lsrs	r3, r3, #1
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	2b0f      	cmp	r3, #15
 8006cfa:	d916      	bls.n	8006d2a <UART_SetConfig+0x402>
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d02:	d212      	bcs.n	8006d2a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f023 030f 	bic.w	r3, r3, #15
 8006d0c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	89fb      	ldrh	r3, [r7, #14]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	89fa      	ldrh	r2, [r7, #14]
 8006d26:	60da      	str	r2, [r3, #12]
 8006d28:	e04e      	b.n	8006dc8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	77bb      	strb	r3, [r7, #30]
 8006d2e:	e04b      	b.n	8006dc8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d30:	7ffb      	ldrb	r3, [r7, #31]
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d827      	bhi.n	8006d86 <UART_SetConfig+0x45e>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0x414>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d87 	.word	0x08006d87
 8006d4c:	08006d77 	.word	0x08006d77
 8006d50:	08006d87 	.word	0x08006d87
 8006d54:	08006d87 	.word	0x08006d87
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006d7f 	.word	0x08006d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fd faf8 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8006d64:	61b8      	str	r0, [r7, #24]
        break;
 8006d66:	e013      	b.n	8006d90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d68:	f7fd fb08 	bl	800437c <HAL_RCC_GetPCLK2Freq>
 8006d6c:	61b8      	str	r0, [r7, #24]
        break;
 8006d6e:	e00f      	b.n	8006d90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b1d      	ldr	r3, [pc, #116]	; (8006de8 <UART_SetConfig+0x4c0>)
 8006d72:	61bb      	str	r3, [r7, #24]
        break;
 8006d74:	e00c      	b.n	8006d90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7fd fa2b 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 8006d7a:	61b8      	str	r0, [r7, #24]
        break;
 8006d7c:	e008      	b.n	8006d90 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	61bb      	str	r3, [r7, #24]
        break;
 8006d84:	e004      	b.n	8006d90 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d8e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	085a      	lsrs	r2, r3, #1
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	441a      	add	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d908      	bls.n	8006dc4 <UART_SetConfig+0x49c>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db8:	d204      	bcs.n	8006dc4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	60da      	str	r2, [r3, #12]
 8006dc2:	e001      	b.n	8006dc8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006dd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40007c00 	.word	0x40007c00
 8006de4:	40023800 	.word	0x40023800
 8006de8:	00f42400 	.word	0x00f42400

08006dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eea:	d10a      	bne.n	8006f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f40:	f7fb f85e 	bl	8002000 <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d10e      	bne.n	8006f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f82d 	bl	8006fc2 <UART_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e023      	b.n	8006fba <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d10e      	bne.n	8006f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f817 	bl	8006fc2 <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e00d      	b.n	8006fba <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd2:	e05e      	b.n	8007092 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d05a      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fdc:	f7fb f810 	bl	8002000 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d302      	bcc.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d11b      	bne.n	800702a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007000:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2220      	movs	r2, #32
 8007016:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e043      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d02c      	beq.n	8007092 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007046:	d124      	bne.n	8007092 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007050:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007060:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2220      	movs	r2, #32
 800707c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e00f      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4013      	ands	r3, r2
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	461a      	mov	r2, r3
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d091      	beq.n	8006fd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070d0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d107      	bne.n	80070fa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0210 	bic.w	r2, r2, #16
 80070f8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff fbd6 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713c:	bf00      	nop
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fbb3 	bl	80068d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <__errno>:
 8007178:	4b01      	ldr	r3, [pc, #4]	; (8007180 <__errno+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000068 	.word	0x20000068

08007184 <__libc_init_array>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4d0d      	ldr	r5, [pc, #52]	; (80071bc <__libc_init_array+0x38>)
 8007188:	4c0d      	ldr	r4, [pc, #52]	; (80071c0 <__libc_init_array+0x3c>)
 800718a:	1b64      	subs	r4, r4, r5
 800718c:	10a4      	asrs	r4, r4, #2
 800718e:	2600      	movs	r6, #0
 8007190:	42a6      	cmp	r6, r4
 8007192:	d109      	bne.n	80071a8 <__libc_init_array+0x24>
 8007194:	4d0b      	ldr	r5, [pc, #44]	; (80071c4 <__libc_init_array+0x40>)
 8007196:	4c0c      	ldr	r4, [pc, #48]	; (80071c8 <__libc_init_array+0x44>)
 8007198:	f002 fc60 	bl	8009a5c <_init>
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	2600      	movs	r6, #0
 80071a2:	42a6      	cmp	r6, r4
 80071a4:	d105      	bne.n	80071b2 <__libc_init_array+0x2e>
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ac:	4798      	blx	r3
 80071ae:	3601      	adds	r6, #1
 80071b0:	e7ee      	b.n	8007190 <__libc_init_array+0xc>
 80071b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b6:	4798      	blx	r3
 80071b8:	3601      	adds	r6, #1
 80071ba:	e7f2      	b.n	80071a2 <__libc_init_array+0x1e>
 80071bc:	08009e8c 	.word	0x08009e8c
 80071c0:	08009e8c 	.word	0x08009e8c
 80071c4:	08009e8c 	.word	0x08009e8c
 80071c8:	08009e90 	.word	0x08009e90

080071cc <malloc>:
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <malloc+0xc>)
 80071ce:	4601      	mov	r1, r0
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f000 b85b 	b.w	800728c <_malloc_r>
 80071d6:	bf00      	nop
 80071d8:	20000068 	.word	0x20000068

080071dc <memset>:
 80071dc:	4402      	add	r2, r0
 80071de:	4603      	mov	r3, r0
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d100      	bne.n	80071e6 <memset+0xa>
 80071e4:	4770      	bx	lr
 80071e6:	f803 1b01 	strb.w	r1, [r3], #1
 80071ea:	e7f9      	b.n	80071e0 <memset+0x4>

080071ec <_free_r>:
 80071ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d048      	beq.n	8007284 <_free_r+0x98>
 80071f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f6:	9001      	str	r0, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f1a1 0404 	sub.w	r4, r1, #4
 80071fe:	bfb8      	it	lt
 8007200:	18e4      	addlt	r4, r4, r3
 8007202:	f001 fb11 	bl	8008828 <__malloc_lock>
 8007206:	4a20      	ldr	r2, [pc, #128]	; (8007288 <_free_r+0x9c>)
 8007208:	9801      	ldr	r0, [sp, #4]
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	4615      	mov	r5, r2
 800720e:	b933      	cbnz	r3, 800721e <_free_r+0x32>
 8007210:	6063      	str	r3, [r4, #4]
 8007212:	6014      	str	r4, [r2, #0]
 8007214:	b003      	add	sp, #12
 8007216:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800721a:	f001 bb0b 	b.w	8008834 <__malloc_unlock>
 800721e:	42a3      	cmp	r3, r4
 8007220:	d90b      	bls.n	800723a <_free_r+0x4e>
 8007222:	6821      	ldr	r1, [r4, #0]
 8007224:	1862      	adds	r2, r4, r1
 8007226:	4293      	cmp	r3, r2
 8007228:	bf04      	itt	eq
 800722a:	681a      	ldreq	r2, [r3, #0]
 800722c:	685b      	ldreq	r3, [r3, #4]
 800722e:	6063      	str	r3, [r4, #4]
 8007230:	bf04      	itt	eq
 8007232:	1852      	addeq	r2, r2, r1
 8007234:	6022      	streq	r2, [r4, #0]
 8007236:	602c      	str	r4, [r5, #0]
 8007238:	e7ec      	b.n	8007214 <_free_r+0x28>
 800723a:	461a      	mov	r2, r3
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b10b      	cbz	r3, 8007244 <_free_r+0x58>
 8007240:	42a3      	cmp	r3, r4
 8007242:	d9fa      	bls.n	800723a <_free_r+0x4e>
 8007244:	6811      	ldr	r1, [r2, #0]
 8007246:	1855      	adds	r5, r2, r1
 8007248:	42a5      	cmp	r5, r4
 800724a:	d10b      	bne.n	8007264 <_free_r+0x78>
 800724c:	6824      	ldr	r4, [r4, #0]
 800724e:	4421      	add	r1, r4
 8007250:	1854      	adds	r4, r2, r1
 8007252:	42a3      	cmp	r3, r4
 8007254:	6011      	str	r1, [r2, #0]
 8007256:	d1dd      	bne.n	8007214 <_free_r+0x28>
 8007258:	681c      	ldr	r4, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	6053      	str	r3, [r2, #4]
 800725e:	4421      	add	r1, r4
 8007260:	6011      	str	r1, [r2, #0]
 8007262:	e7d7      	b.n	8007214 <_free_r+0x28>
 8007264:	d902      	bls.n	800726c <_free_r+0x80>
 8007266:	230c      	movs	r3, #12
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	e7d3      	b.n	8007214 <_free_r+0x28>
 800726c:	6825      	ldr	r5, [r4, #0]
 800726e:	1961      	adds	r1, r4, r5
 8007270:	428b      	cmp	r3, r1
 8007272:	bf04      	itt	eq
 8007274:	6819      	ldreq	r1, [r3, #0]
 8007276:	685b      	ldreq	r3, [r3, #4]
 8007278:	6063      	str	r3, [r4, #4]
 800727a:	bf04      	itt	eq
 800727c:	1949      	addeq	r1, r1, r5
 800727e:	6021      	streq	r1, [r4, #0]
 8007280:	6054      	str	r4, [r2, #4]
 8007282:	e7c7      	b.n	8007214 <_free_r+0x28>
 8007284:	b003      	add	sp, #12
 8007286:	bd30      	pop	{r4, r5, pc}
 8007288:	20000284 	.word	0x20000284

0800728c <_malloc_r>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	1ccd      	adds	r5, r1, #3
 8007290:	f025 0503 	bic.w	r5, r5, #3
 8007294:	3508      	adds	r5, #8
 8007296:	2d0c      	cmp	r5, #12
 8007298:	bf38      	it	cc
 800729a:	250c      	movcc	r5, #12
 800729c:	2d00      	cmp	r5, #0
 800729e:	4606      	mov	r6, r0
 80072a0:	db01      	blt.n	80072a6 <_malloc_r+0x1a>
 80072a2:	42a9      	cmp	r1, r5
 80072a4:	d903      	bls.n	80072ae <_malloc_r+0x22>
 80072a6:	230c      	movs	r3, #12
 80072a8:	6033      	str	r3, [r6, #0]
 80072aa:	2000      	movs	r0, #0
 80072ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ae:	f001 fabb 	bl	8008828 <__malloc_lock>
 80072b2:	4921      	ldr	r1, [pc, #132]	; (8007338 <_malloc_r+0xac>)
 80072b4:	680a      	ldr	r2, [r1, #0]
 80072b6:	4614      	mov	r4, r2
 80072b8:	b99c      	cbnz	r4, 80072e2 <_malloc_r+0x56>
 80072ba:	4f20      	ldr	r7, [pc, #128]	; (800733c <_malloc_r+0xb0>)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b923      	cbnz	r3, 80072ca <_malloc_r+0x3e>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4630      	mov	r0, r6
 80072c4:	f000 fc7e 	bl	8007bc4 <_sbrk_r>
 80072c8:	6038      	str	r0, [r7, #0]
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 fc79 	bl	8007bc4 <_sbrk_r>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	d123      	bne.n	800731e <_malloc_r+0x92>
 80072d6:	230c      	movs	r3, #12
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	4630      	mov	r0, r6
 80072dc:	f001 faaa 	bl	8008834 <__malloc_unlock>
 80072e0:	e7e3      	b.n	80072aa <_malloc_r+0x1e>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	1b5b      	subs	r3, r3, r5
 80072e6:	d417      	bmi.n	8007318 <_malloc_r+0x8c>
 80072e8:	2b0b      	cmp	r3, #11
 80072ea:	d903      	bls.n	80072f4 <_malloc_r+0x68>
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	441c      	add	r4, r3
 80072f0:	6025      	str	r5, [r4, #0]
 80072f2:	e004      	b.n	80072fe <_malloc_r+0x72>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	42a2      	cmp	r2, r4
 80072f8:	bf0c      	ite	eq
 80072fa:	600b      	streq	r3, [r1, #0]
 80072fc:	6053      	strne	r3, [r2, #4]
 80072fe:	4630      	mov	r0, r6
 8007300:	f001 fa98 	bl	8008834 <__malloc_unlock>
 8007304:	f104 000b 	add.w	r0, r4, #11
 8007308:	1d23      	adds	r3, r4, #4
 800730a:	f020 0007 	bic.w	r0, r0, #7
 800730e:	1ac2      	subs	r2, r0, r3
 8007310:	d0cc      	beq.n	80072ac <_malloc_r+0x20>
 8007312:	1a1b      	subs	r3, r3, r0
 8007314:	50a3      	str	r3, [r4, r2]
 8007316:	e7c9      	b.n	80072ac <_malloc_r+0x20>
 8007318:	4622      	mov	r2, r4
 800731a:	6864      	ldr	r4, [r4, #4]
 800731c:	e7cc      	b.n	80072b8 <_malloc_r+0x2c>
 800731e:	1cc4      	adds	r4, r0, #3
 8007320:	f024 0403 	bic.w	r4, r4, #3
 8007324:	42a0      	cmp	r0, r4
 8007326:	d0e3      	beq.n	80072f0 <_malloc_r+0x64>
 8007328:	1a21      	subs	r1, r4, r0
 800732a:	4630      	mov	r0, r6
 800732c:	f000 fc4a 	bl	8007bc4 <_sbrk_r>
 8007330:	3001      	adds	r0, #1
 8007332:	d1dd      	bne.n	80072f0 <_malloc_r+0x64>
 8007334:	e7cf      	b.n	80072d6 <_malloc_r+0x4a>
 8007336:	bf00      	nop
 8007338:	20000284 	.word	0x20000284
 800733c:	20000288 	.word	0x20000288

08007340 <__cvt>:
 8007340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007342:	ed2d 8b02 	vpush	{d8}
 8007346:	eeb0 8b40 	vmov.f64	d8, d0
 800734a:	b085      	sub	sp, #20
 800734c:	4617      	mov	r7, r2
 800734e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007350:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007352:	ee18 2a90 	vmov	r2, s17
 8007356:	f025 0520 	bic.w	r5, r5, #32
 800735a:	2a00      	cmp	r2, #0
 800735c:	bfb6      	itet	lt
 800735e:	222d      	movlt	r2, #45	; 0x2d
 8007360:	2200      	movge	r2, #0
 8007362:	eeb1 8b40 	vneglt.f64	d8, d0
 8007366:	2d46      	cmp	r5, #70	; 0x46
 8007368:	460c      	mov	r4, r1
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	d004      	beq.n	8007378 <__cvt+0x38>
 800736e:	2d45      	cmp	r5, #69	; 0x45
 8007370:	d100      	bne.n	8007374 <__cvt+0x34>
 8007372:	3401      	adds	r4, #1
 8007374:	2102      	movs	r1, #2
 8007376:	e000      	b.n	800737a <__cvt+0x3a>
 8007378:	2103      	movs	r1, #3
 800737a:	ab03      	add	r3, sp, #12
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	ab02      	add	r3, sp, #8
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4622      	mov	r2, r4
 8007384:	4633      	mov	r3, r6
 8007386:	eeb0 0b48 	vmov.f64	d0, d8
 800738a:	f000 fcb9 	bl	8007d00 <_dtoa_r>
 800738e:	2d47      	cmp	r5, #71	; 0x47
 8007390:	d109      	bne.n	80073a6 <__cvt+0x66>
 8007392:	07fb      	lsls	r3, r7, #31
 8007394:	d407      	bmi.n	80073a6 <__cvt+0x66>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800739a:	1a1b      	subs	r3, r3, r0
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	b005      	add	sp, #20
 80073a0:	ecbd 8b02 	vpop	{d8}
 80073a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a6:	2d46      	cmp	r5, #70	; 0x46
 80073a8:	eb00 0204 	add.w	r2, r0, r4
 80073ac:	d10c      	bne.n	80073c8 <__cvt+0x88>
 80073ae:	7803      	ldrb	r3, [r0, #0]
 80073b0:	2b30      	cmp	r3, #48	; 0x30
 80073b2:	d107      	bne.n	80073c4 <__cvt+0x84>
 80073b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073bc:	bf1c      	itt	ne
 80073be:	f1c4 0401 	rsbne	r4, r4, #1
 80073c2:	6034      	strne	r4, [r6, #0]
 80073c4:	6833      	ldr	r3, [r6, #0]
 80073c6:	441a      	add	r2, r3
 80073c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d0:	bf08      	it	eq
 80073d2:	9203      	streq	r2, [sp, #12]
 80073d4:	2130      	movs	r1, #48	; 0x30
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	4293      	cmp	r3, r2
 80073da:	d2dc      	bcs.n	8007396 <__cvt+0x56>
 80073dc:	1c5c      	adds	r4, r3, #1
 80073de:	9403      	str	r4, [sp, #12]
 80073e0:	7019      	strb	r1, [r3, #0]
 80073e2:	e7f8      	b.n	80073d6 <__cvt+0x96>

080073e4 <__exponent>:
 80073e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e6:	4603      	mov	r3, r0
 80073e8:	2900      	cmp	r1, #0
 80073ea:	bfb8      	it	lt
 80073ec:	4249      	neglt	r1, r1
 80073ee:	f803 2b02 	strb.w	r2, [r3], #2
 80073f2:	bfb4      	ite	lt
 80073f4:	222d      	movlt	r2, #45	; 0x2d
 80073f6:	222b      	movge	r2, #43	; 0x2b
 80073f8:	2909      	cmp	r1, #9
 80073fa:	7042      	strb	r2, [r0, #1]
 80073fc:	dd2a      	ble.n	8007454 <__exponent+0x70>
 80073fe:	f10d 0407 	add.w	r4, sp, #7
 8007402:	46a4      	mov	ip, r4
 8007404:	270a      	movs	r7, #10
 8007406:	46a6      	mov	lr, r4
 8007408:	460a      	mov	r2, r1
 800740a:	fb91 f6f7 	sdiv	r6, r1, r7
 800740e:	fb07 1516 	mls	r5, r7, r6, r1
 8007412:	3530      	adds	r5, #48	; 0x30
 8007414:	2a63      	cmp	r2, #99	; 0x63
 8007416:	f104 34ff 	add.w	r4, r4, #4294967295
 800741a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800741e:	4631      	mov	r1, r6
 8007420:	dcf1      	bgt.n	8007406 <__exponent+0x22>
 8007422:	3130      	adds	r1, #48	; 0x30
 8007424:	f1ae 0502 	sub.w	r5, lr, #2
 8007428:	f804 1c01 	strb.w	r1, [r4, #-1]
 800742c:	1c44      	adds	r4, r0, #1
 800742e:	4629      	mov	r1, r5
 8007430:	4561      	cmp	r1, ip
 8007432:	d30a      	bcc.n	800744a <__exponent+0x66>
 8007434:	f10d 0209 	add.w	r2, sp, #9
 8007438:	eba2 020e 	sub.w	r2, r2, lr
 800743c:	4565      	cmp	r5, ip
 800743e:	bf88      	it	hi
 8007440:	2200      	movhi	r2, #0
 8007442:	4413      	add	r3, r2
 8007444:	1a18      	subs	r0, r3, r0
 8007446:	b003      	add	sp, #12
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007452:	e7ed      	b.n	8007430 <__exponent+0x4c>
 8007454:	2330      	movs	r3, #48	; 0x30
 8007456:	3130      	adds	r1, #48	; 0x30
 8007458:	7083      	strb	r3, [r0, #2]
 800745a:	70c1      	strb	r1, [r0, #3]
 800745c:	1d03      	adds	r3, r0, #4
 800745e:	e7f1      	b.n	8007444 <__exponent+0x60>

08007460 <_printf_float>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	b08b      	sub	sp, #44	; 0x2c
 8007466:	460c      	mov	r4, r1
 8007468:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800746c:	4616      	mov	r6, r2
 800746e:	461f      	mov	r7, r3
 8007470:	4605      	mov	r5, r0
 8007472:	f001 f9c7 	bl	8008804 <_localeconv_r>
 8007476:	f8d0 b000 	ldr.w	fp, [r0]
 800747a:	4658      	mov	r0, fp
 800747c:	f7f8 fee0 	bl	8000240 <strlen>
 8007480:	2300      	movs	r3, #0
 8007482:	9308      	str	r3, [sp, #32]
 8007484:	f8d8 3000 	ldr.w	r3, [r8]
 8007488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800748c:	6822      	ldr	r2, [r4, #0]
 800748e:	3307      	adds	r3, #7
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	f103 0108 	add.w	r1, r3, #8
 8007498:	f8c8 1000 	str.w	r1, [r8]
 800749c:	4682      	mov	sl, r0
 800749e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074a2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80074a6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007708 <_printf_float+0x2a8>
 80074aa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80074ae:	eeb0 6bc0 	vabs.f64	d6, d0
 80074b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80074b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ba:	dd24      	ble.n	8007506 <_printf_float+0xa6>
 80074bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c4:	d502      	bpl.n	80074cc <_printf_float+0x6c>
 80074c6:	232d      	movs	r3, #45	; 0x2d
 80074c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074cc:	4b90      	ldr	r3, [pc, #576]	; (8007710 <_printf_float+0x2b0>)
 80074ce:	4891      	ldr	r0, [pc, #580]	; (8007714 <_printf_float+0x2b4>)
 80074d0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074d4:	bf94      	ite	ls
 80074d6:	4698      	movls	r8, r3
 80074d8:	4680      	movhi	r8, r0
 80074da:	2303      	movs	r3, #3
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	f022 0204 	bic.w	r2, r2, #4
 80074e2:	2300      	movs	r3, #0
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	9700      	str	r7, [sp, #0]
 80074ea:	4633      	mov	r3, r6
 80074ec:	aa09      	add	r2, sp, #36	; 0x24
 80074ee:	4621      	mov	r1, r4
 80074f0:	4628      	mov	r0, r5
 80074f2:	f000 f9d3 	bl	800789c <_printf_common>
 80074f6:	3001      	adds	r0, #1
 80074f8:	f040 808a 	bne.w	8007610 <_printf_float+0x1b0>
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b00b      	add	sp, #44	; 0x2c
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	eeb4 0b40 	vcmp.f64	d0, d0
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	d709      	bvc.n	8007524 <_printf_float+0xc4>
 8007510:	ee10 3a90 	vmov	r3, s1
 8007514:	2b00      	cmp	r3, #0
 8007516:	bfbc      	itt	lt
 8007518:	232d      	movlt	r3, #45	; 0x2d
 800751a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800751e:	487e      	ldr	r0, [pc, #504]	; (8007718 <_printf_float+0x2b8>)
 8007520:	4b7e      	ldr	r3, [pc, #504]	; (800771c <_printf_float+0x2bc>)
 8007522:	e7d5      	b.n	80074d0 <_printf_float+0x70>
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800752a:	9104      	str	r1, [sp, #16]
 800752c:	1c59      	adds	r1, r3, #1
 800752e:	d13c      	bne.n	80075aa <_printf_float+0x14a>
 8007530:	2306      	movs	r3, #6
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	2300      	movs	r3, #0
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	ab08      	add	r3, sp, #32
 800753a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800753e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007542:	ab07      	add	r3, sp, #28
 8007544:	6861      	ldr	r1, [r4, #4]
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	f10d 031b 	add.w	r3, sp, #27
 800754e:	4628      	mov	r0, r5
 8007550:	f7ff fef6 	bl	8007340 <__cvt>
 8007554:	9b04      	ldr	r3, [sp, #16]
 8007556:	9907      	ldr	r1, [sp, #28]
 8007558:	2b47      	cmp	r3, #71	; 0x47
 800755a:	4680      	mov	r8, r0
 800755c:	d108      	bne.n	8007570 <_printf_float+0x110>
 800755e:	1cc8      	adds	r0, r1, #3
 8007560:	db02      	blt.n	8007568 <_printf_float+0x108>
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	4299      	cmp	r1, r3
 8007566:	dd41      	ble.n	80075ec <_printf_float+0x18c>
 8007568:	f1a9 0902 	sub.w	r9, r9, #2
 800756c:	fa5f f989 	uxtb.w	r9, r9
 8007570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007574:	d820      	bhi.n	80075b8 <_printf_float+0x158>
 8007576:	3901      	subs	r1, #1
 8007578:	464a      	mov	r2, r9
 800757a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800757e:	9107      	str	r1, [sp, #28]
 8007580:	f7ff ff30 	bl	80073e4 <__exponent>
 8007584:	9a08      	ldr	r2, [sp, #32]
 8007586:	9004      	str	r0, [sp, #16]
 8007588:	1813      	adds	r3, r2, r0
 800758a:	2a01      	cmp	r2, #1
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	dc02      	bgt.n	8007596 <_printf_float+0x136>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	07d2      	lsls	r2, r2, #31
 8007594:	d501      	bpl.n	800759a <_printf_float+0x13a>
 8007596:	3301      	adds	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0a2      	beq.n	80074e8 <_printf_float+0x88>
 80075a2:	232d      	movs	r3, #45	; 0x2d
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e79e      	b.n	80074e8 <_printf_float+0x88>
 80075aa:	9904      	ldr	r1, [sp, #16]
 80075ac:	2947      	cmp	r1, #71	; 0x47
 80075ae:	d1c1      	bne.n	8007534 <_printf_float+0xd4>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1bf      	bne.n	8007534 <_printf_float+0xd4>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e7bc      	b.n	8007532 <_printf_float+0xd2>
 80075b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075bc:	d118      	bne.n	80075f0 <_printf_float+0x190>
 80075be:	2900      	cmp	r1, #0
 80075c0:	6863      	ldr	r3, [r4, #4]
 80075c2:	dd0b      	ble.n	80075dc <_printf_float+0x17c>
 80075c4:	6121      	str	r1, [r4, #16]
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x16e>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d0      	lsls	r0, r2, #31
 80075cc:	d502      	bpl.n	80075d4 <_printf_float+0x174>
 80075ce:	3301      	adds	r3, #1
 80075d0:	440b      	add	r3, r1
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2300      	movs	r3, #0
 80075d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	e7de      	b.n	800759a <_printf_float+0x13a>
 80075dc:	b913      	cbnz	r3, 80075e4 <_printf_float+0x184>
 80075de:	6822      	ldr	r2, [r4, #0]
 80075e0:	07d2      	lsls	r2, r2, #31
 80075e2:	d501      	bpl.n	80075e8 <_printf_float+0x188>
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7f4      	b.n	80075d2 <_printf_float+0x172>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f2      	b.n	80075d2 <_printf_float+0x172>
 80075ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075f0:	9b08      	ldr	r3, [sp, #32]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	db05      	blt.n	8007602 <_printf_float+0x1a2>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6121      	str	r1, [r4, #16]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d5ea      	bpl.n	80075d4 <_printf_float+0x174>
 80075fe:	1c4b      	adds	r3, r1, #1
 8007600:	e7e7      	b.n	80075d2 <_printf_float+0x172>
 8007602:	2900      	cmp	r1, #0
 8007604:	bfd4      	ite	le
 8007606:	f1c1 0202 	rsble	r2, r1, #2
 800760a:	2201      	movgt	r2, #1
 800760c:	4413      	add	r3, r2
 800760e:	e7e0      	b.n	80075d2 <_printf_float+0x172>
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	055a      	lsls	r2, r3, #21
 8007614:	d407      	bmi.n	8007626 <_printf_float+0x1c6>
 8007616:	6923      	ldr	r3, [r4, #16]
 8007618:	4642      	mov	r2, r8
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	d12a      	bne.n	800767a <_printf_float+0x21a>
 8007624:	e76a      	b.n	80074fc <_printf_float+0x9c>
 8007626:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800762a:	f240 80e2 	bls.w	80077f2 <_printf_float+0x392>
 800762e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007632:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763a:	d133      	bne.n	80076a4 <_printf_float+0x244>
 800763c:	4a38      	ldr	r2, [pc, #224]	; (8007720 <_printf_float+0x2c0>)
 800763e:	2301      	movs	r3, #1
 8007640:	4631      	mov	r1, r6
 8007642:	4628      	mov	r0, r5
 8007644:	47b8      	blx	r7
 8007646:	3001      	adds	r0, #1
 8007648:	f43f af58 	beq.w	80074fc <_printf_float+0x9c>
 800764c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007650:	429a      	cmp	r2, r3
 8007652:	db02      	blt.n	800765a <_printf_float+0x1fa>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07d8      	lsls	r0, r3, #31
 8007658:	d50f      	bpl.n	800767a <_printf_float+0x21a>
 800765a:	4653      	mov	r3, sl
 800765c:	465a      	mov	r2, fp
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f af49 	beq.w	80074fc <_printf_float+0x9c>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	f104 091a 	add.w	r9, r4, #26
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	3b01      	subs	r3, #1
 8007676:	4543      	cmp	r3, r8
 8007678:	dc09      	bgt.n	800768e <_printf_float+0x22e>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	079b      	lsls	r3, r3, #30
 800767e:	f100 8108 	bmi.w	8007892 <_printf_float+0x432>
 8007682:	68e0      	ldr	r0, [r4, #12]
 8007684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007686:	4298      	cmp	r0, r3
 8007688:	bfb8      	it	lt
 800768a:	4618      	movlt	r0, r3
 800768c:	e738      	b.n	8007500 <_printf_float+0xa0>
 800768e:	2301      	movs	r3, #1
 8007690:	464a      	mov	r2, r9
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	f43f af2f 	beq.w	80074fc <_printf_float+0x9c>
 800769e:	f108 0801 	add.w	r8, r8, #1
 80076a2:	e7e6      	b.n	8007672 <_printf_float+0x212>
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dc3c      	bgt.n	8007724 <_printf_float+0x2c4>
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <_printf_float+0x2c0>)
 80076ac:	2301      	movs	r3, #1
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	f43f af21 	beq.w	80074fc <_printf_float+0x9c>
 80076ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076be:	4313      	orrs	r3, r2
 80076c0:	d102      	bne.n	80076c8 <_printf_float+0x268>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	07d9      	lsls	r1, r3, #31
 80076c6:	d5d8      	bpl.n	800767a <_printf_float+0x21a>
 80076c8:	4653      	mov	r3, sl
 80076ca:	465a      	mov	r2, fp
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f af12 	beq.w	80074fc <_printf_float+0x9c>
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	f104 0a1a 	add.w	sl, r4, #26
 80076e0:	9b07      	ldr	r3, [sp, #28]
 80076e2:	425b      	negs	r3, r3
 80076e4:	454b      	cmp	r3, r9
 80076e6:	dc01      	bgt.n	80076ec <_printf_float+0x28c>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	e795      	b.n	8007618 <_printf_float+0x1b8>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	f43f af00 	beq.w	80074fc <_printf_float+0x9c>
 80076fc:	f109 0901 	add.w	r9, r9, #1
 8007700:	e7ee      	b.n	80076e0 <_printf_float+0x280>
 8007702:	bf00      	nop
 8007704:	f3af 8000 	nop.w
 8007708:	ffffffff 	.word	0xffffffff
 800770c:	7fefffff 	.word	0x7fefffff
 8007710:	08009aa4 	.word	0x08009aa4
 8007714:	08009aa8 	.word	0x08009aa8
 8007718:	08009ab0 	.word	0x08009ab0
 800771c:	08009aac 	.word	0x08009aac
 8007720:	08009ab4 	.word	0x08009ab4
 8007724:	9a08      	ldr	r2, [sp, #32]
 8007726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007728:	429a      	cmp	r2, r3
 800772a:	bfa8      	it	ge
 800772c:	461a      	movge	r2, r3
 800772e:	2a00      	cmp	r2, #0
 8007730:	4691      	mov	r9, r2
 8007732:	dc38      	bgt.n	80077a6 <_printf_float+0x346>
 8007734:	2300      	movs	r3, #0
 8007736:	9305      	str	r3, [sp, #20]
 8007738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773c:	f104 021a 	add.w	r2, r4, #26
 8007740:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007742:	9905      	ldr	r1, [sp, #20]
 8007744:	9304      	str	r3, [sp, #16]
 8007746:	eba3 0309 	sub.w	r3, r3, r9
 800774a:	428b      	cmp	r3, r1
 800774c:	dc33      	bgt.n	80077b6 <_printf_float+0x356>
 800774e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007752:	429a      	cmp	r2, r3
 8007754:	db3c      	blt.n	80077d0 <_printf_float+0x370>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	07da      	lsls	r2, r3, #31
 800775a:	d439      	bmi.n	80077d0 <_printf_float+0x370>
 800775c:	9a08      	ldr	r2, [sp, #32]
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	9907      	ldr	r1, [sp, #28]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	eba2 0901 	sub.w	r9, r2, r1
 8007768:	4599      	cmp	r9, r3
 800776a:	bfa8      	it	ge
 800776c:	4699      	movge	r9, r3
 800776e:	f1b9 0f00 	cmp.w	r9, #0
 8007772:	dc35      	bgt.n	80077e0 <_printf_float+0x380>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800777c:	f104 0a1a 	add.w	sl, r4, #26
 8007780:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	eba3 0309 	sub.w	r3, r3, r9
 800778a:	4543      	cmp	r3, r8
 800778c:	f77f af75 	ble.w	800767a <_printf_float+0x21a>
 8007790:	2301      	movs	r3, #1
 8007792:	4652      	mov	r2, sl
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f aeae 	beq.w	80074fc <_printf_float+0x9c>
 80077a0:	f108 0801 	add.w	r8, r8, #1
 80077a4:	e7ec      	b.n	8007780 <_printf_float+0x320>
 80077a6:	4613      	mov	r3, r2
 80077a8:	4631      	mov	r1, r6
 80077aa:	4642      	mov	r2, r8
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	d1bf      	bne.n	8007734 <_printf_float+0x2d4>
 80077b4:	e6a2      	b.n	80074fc <_printf_float+0x9c>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	9204      	str	r2, [sp, #16]
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	f43f ae9b 	beq.w	80074fc <_printf_float+0x9c>
 80077c6:	9b05      	ldr	r3, [sp, #20]
 80077c8:	9a04      	ldr	r2, [sp, #16]
 80077ca:	3301      	adds	r3, #1
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	e7b7      	b.n	8007740 <_printf_float+0x2e0>
 80077d0:	4653      	mov	r3, sl
 80077d2:	465a      	mov	r2, fp
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	d1be      	bne.n	800775c <_printf_float+0x2fc>
 80077de:	e68d      	b.n	80074fc <_printf_float+0x9c>
 80077e0:	9a04      	ldr	r2, [sp, #16]
 80077e2:	464b      	mov	r3, r9
 80077e4:	4442      	add	r2, r8
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	d1c1      	bne.n	8007774 <_printf_float+0x314>
 80077f0:	e684      	b.n	80074fc <_printf_float+0x9c>
 80077f2:	9a08      	ldr	r2, [sp, #32]
 80077f4:	2a01      	cmp	r2, #1
 80077f6:	dc01      	bgt.n	80077fc <_printf_float+0x39c>
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d537      	bpl.n	800786c <_printf_float+0x40c>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4642      	mov	r2, r8
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f ae78 	beq.w	80074fc <_printf_float+0x9c>
 800780c:	4653      	mov	r3, sl
 800780e:	465a      	mov	r2, fp
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f ae70 	beq.w	80074fc <_printf_float+0x9c>
 800781c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007820:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	d01b      	beq.n	8007862 <_printf_float+0x402>
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	f108 0201 	add.w	r2, r8, #1
 8007830:	3b01      	subs	r3, #1
 8007832:	4631      	mov	r1, r6
 8007834:	4628      	mov	r0, r5
 8007836:	47b8      	blx	r7
 8007838:	3001      	adds	r0, #1
 800783a:	d10e      	bne.n	800785a <_printf_float+0x3fa>
 800783c:	e65e      	b.n	80074fc <_printf_float+0x9c>
 800783e:	2301      	movs	r3, #1
 8007840:	464a      	mov	r2, r9
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f ae57 	beq.w	80074fc <_printf_float+0x9c>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	3b01      	subs	r3, #1
 8007856:	4543      	cmp	r3, r8
 8007858:	dcf1      	bgt.n	800783e <_printf_float+0x3de>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007860:	e6db      	b.n	800761a <_printf_float+0x1ba>
 8007862:	f04f 0800 	mov.w	r8, #0
 8007866:	f104 091a 	add.w	r9, r4, #26
 800786a:	e7f2      	b.n	8007852 <_printf_float+0x3f2>
 800786c:	2301      	movs	r3, #1
 800786e:	4642      	mov	r2, r8
 8007870:	e7df      	b.n	8007832 <_printf_float+0x3d2>
 8007872:	2301      	movs	r3, #1
 8007874:	464a      	mov	r2, r9
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	f43f ae3d 	beq.w	80074fc <_printf_float+0x9c>
 8007882:	f108 0801 	add.w	r8, r8, #1
 8007886:	68e3      	ldr	r3, [r4, #12]
 8007888:	9909      	ldr	r1, [sp, #36]	; 0x24
 800788a:	1a5b      	subs	r3, r3, r1
 800788c:	4543      	cmp	r3, r8
 800788e:	dcf0      	bgt.n	8007872 <_printf_float+0x412>
 8007890:	e6f7      	b.n	8007682 <_printf_float+0x222>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	f104 0919 	add.w	r9, r4, #25
 800789a:	e7f4      	b.n	8007886 <_printf_float+0x426>

0800789c <_printf_common>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	4616      	mov	r6, r2
 80078a2:	4699      	mov	r9, r3
 80078a4:	688a      	ldr	r2, [r1, #8]
 80078a6:	690b      	ldr	r3, [r1, #16]
 80078a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	bfb8      	it	lt
 80078b0:	4613      	movlt	r3, r2
 80078b2:	6033      	str	r3, [r6, #0]
 80078b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b8:	4607      	mov	r7, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b10a      	cbz	r2, 80078c2 <_printf_common+0x26>
 80078be:	3301      	adds	r3, #1
 80078c0:	6033      	str	r3, [r6, #0]
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	0699      	lsls	r1, r3, #26
 80078c6:	bf42      	ittt	mi
 80078c8:	6833      	ldrmi	r3, [r6, #0]
 80078ca:	3302      	addmi	r3, #2
 80078cc:	6033      	strmi	r3, [r6, #0]
 80078ce:	6825      	ldr	r5, [r4, #0]
 80078d0:	f015 0506 	ands.w	r5, r5, #6
 80078d4:	d106      	bne.n	80078e4 <_printf_common+0x48>
 80078d6:	f104 0a19 	add.w	sl, r4, #25
 80078da:	68e3      	ldr	r3, [r4, #12]
 80078dc:	6832      	ldr	r2, [r6, #0]
 80078de:	1a9b      	subs	r3, r3, r2
 80078e0:	42ab      	cmp	r3, r5
 80078e2:	dc26      	bgt.n	8007932 <_printf_common+0x96>
 80078e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e8:	1e13      	subs	r3, r2, #0
 80078ea:	6822      	ldr	r2, [r4, #0]
 80078ec:	bf18      	it	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	0692      	lsls	r2, r2, #26
 80078f2:	d42b      	bmi.n	800794c <_printf_common+0xb0>
 80078f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f8:	4649      	mov	r1, r9
 80078fa:	4638      	mov	r0, r7
 80078fc:	47c0      	blx	r8
 80078fe:	3001      	adds	r0, #1
 8007900:	d01e      	beq.n	8007940 <_printf_common+0xa4>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	68e5      	ldr	r5, [r4, #12]
 8007906:	6832      	ldr	r2, [r6, #0]
 8007908:	f003 0306 	and.w	r3, r3, #6
 800790c:	2b04      	cmp	r3, #4
 800790e:	bf08      	it	eq
 8007910:	1aad      	subeq	r5, r5, r2
 8007912:	68a3      	ldr	r3, [r4, #8]
 8007914:	6922      	ldr	r2, [r4, #16]
 8007916:	bf0c      	ite	eq
 8007918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800791c:	2500      	movne	r5, #0
 800791e:	4293      	cmp	r3, r2
 8007920:	bfc4      	itt	gt
 8007922:	1a9b      	subgt	r3, r3, r2
 8007924:	18ed      	addgt	r5, r5, r3
 8007926:	2600      	movs	r6, #0
 8007928:	341a      	adds	r4, #26
 800792a:	42b5      	cmp	r5, r6
 800792c:	d11a      	bne.n	8007964 <_printf_common+0xc8>
 800792e:	2000      	movs	r0, #0
 8007930:	e008      	b.n	8007944 <_printf_common+0xa8>
 8007932:	2301      	movs	r3, #1
 8007934:	4652      	mov	r2, sl
 8007936:	4649      	mov	r1, r9
 8007938:	4638      	mov	r0, r7
 800793a:	47c0      	blx	r8
 800793c:	3001      	adds	r0, #1
 800793e:	d103      	bne.n	8007948 <_printf_common+0xac>
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007948:	3501      	adds	r5, #1
 800794a:	e7c6      	b.n	80078da <_printf_common+0x3e>
 800794c:	18e1      	adds	r1, r4, r3
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	2030      	movs	r0, #48	; 0x30
 8007952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007956:	4422      	add	r2, r4
 8007958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800795c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007960:	3302      	adds	r3, #2
 8007962:	e7c7      	b.n	80078f4 <_printf_common+0x58>
 8007964:	2301      	movs	r3, #1
 8007966:	4622      	mov	r2, r4
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d0e6      	beq.n	8007940 <_printf_common+0xa4>
 8007972:	3601      	adds	r6, #1
 8007974:	e7d9      	b.n	800792a <_printf_common+0x8e>
	...

08007978 <_printf_i>:
 8007978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	460c      	mov	r4, r1
 800797e:	4691      	mov	r9, r2
 8007980:	7e27      	ldrb	r7, [r4, #24]
 8007982:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007984:	2f78      	cmp	r7, #120	; 0x78
 8007986:	4680      	mov	r8, r0
 8007988:	469a      	mov	sl, r3
 800798a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800798e:	d807      	bhi.n	80079a0 <_printf_i+0x28>
 8007990:	2f62      	cmp	r7, #98	; 0x62
 8007992:	d80a      	bhi.n	80079aa <_printf_i+0x32>
 8007994:	2f00      	cmp	r7, #0
 8007996:	f000 80d8 	beq.w	8007b4a <_printf_i+0x1d2>
 800799a:	2f58      	cmp	r7, #88	; 0x58
 800799c:	f000 80a3 	beq.w	8007ae6 <_printf_i+0x16e>
 80079a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a8:	e03a      	b.n	8007a20 <_printf_i+0xa8>
 80079aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ae:	2b15      	cmp	r3, #21
 80079b0:	d8f6      	bhi.n	80079a0 <_printf_i+0x28>
 80079b2:	a001      	add	r0, pc, #4	; (adr r0, 80079b8 <_printf_i+0x40>)
 80079b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	08007a25 	.word	0x08007a25
 80079c0:	080079a1 	.word	0x080079a1
 80079c4:	080079a1 	.word	0x080079a1
 80079c8:	080079a1 	.word	0x080079a1
 80079cc:	080079a1 	.word	0x080079a1
 80079d0:	08007a25 	.word	0x08007a25
 80079d4:	080079a1 	.word	0x080079a1
 80079d8:	080079a1 	.word	0x080079a1
 80079dc:	080079a1 	.word	0x080079a1
 80079e0:	080079a1 	.word	0x080079a1
 80079e4:	08007b31 	.word	0x08007b31
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007b13 	.word	0x08007b13
 80079f0:	080079a1 	.word	0x080079a1
 80079f4:	080079a1 	.word	0x080079a1
 80079f8:	08007b53 	.word	0x08007b53
 80079fc:	080079a1 	.word	0x080079a1
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	080079a1 	.word	0x080079a1
 8007a08:	080079a1 	.word	0x080079a1
 8007a0c:	08007b1b 	.word	0x08007b1b
 8007a10:	680b      	ldr	r3, [r1, #0]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	600a      	str	r2, [r1, #0]
 8007a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0a3      	b.n	8007b6c <_printf_i+0x1f4>
 8007a24:	6825      	ldr	r5, [r4, #0]
 8007a26:	6808      	ldr	r0, [r1, #0]
 8007a28:	062e      	lsls	r6, r5, #24
 8007a2a:	f100 0304 	add.w	r3, r0, #4
 8007a2e:	d50a      	bpl.n	8007a46 <_printf_i+0xce>
 8007a30:	6805      	ldr	r5, [r0, #0]
 8007a32:	600b      	str	r3, [r1, #0]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	da03      	bge.n	8007a40 <_printf_i+0xc8>
 8007a38:	232d      	movs	r3, #45	; 0x2d
 8007a3a:	426d      	negs	r5, r5
 8007a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a40:	485e      	ldr	r0, [pc, #376]	; (8007bbc <_printf_i+0x244>)
 8007a42:	230a      	movs	r3, #10
 8007a44:	e019      	b.n	8007a7a <_printf_i+0x102>
 8007a46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a4a:	6805      	ldr	r5, [r0, #0]
 8007a4c:	600b      	str	r3, [r1, #0]
 8007a4e:	bf18      	it	ne
 8007a50:	b22d      	sxthne	r5, r5
 8007a52:	e7ef      	b.n	8007a34 <_printf_i+0xbc>
 8007a54:	680b      	ldr	r3, [r1, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	1d18      	adds	r0, r3, #4
 8007a5a:	6008      	str	r0, [r1, #0]
 8007a5c:	0628      	lsls	r0, r5, #24
 8007a5e:	d501      	bpl.n	8007a64 <_printf_i+0xec>
 8007a60:	681d      	ldr	r5, [r3, #0]
 8007a62:	e002      	b.n	8007a6a <_printf_i+0xf2>
 8007a64:	0669      	lsls	r1, r5, #25
 8007a66:	d5fb      	bpl.n	8007a60 <_printf_i+0xe8>
 8007a68:	881d      	ldrh	r5, [r3, #0]
 8007a6a:	4854      	ldr	r0, [pc, #336]	; (8007bbc <_printf_i+0x244>)
 8007a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a6e:	bf0c      	ite	eq
 8007a70:	2308      	moveq	r3, #8
 8007a72:	230a      	movne	r3, #10
 8007a74:	2100      	movs	r1, #0
 8007a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a7a:	6866      	ldr	r6, [r4, #4]
 8007a7c:	60a6      	str	r6, [r4, #8]
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	bfa2      	ittt	ge
 8007a82:	6821      	ldrge	r1, [r4, #0]
 8007a84:	f021 0104 	bicge.w	r1, r1, #4
 8007a88:	6021      	strge	r1, [r4, #0]
 8007a8a:	b90d      	cbnz	r5, 8007a90 <_printf_i+0x118>
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	d04d      	beq.n	8007b2c <_printf_i+0x1b4>
 8007a90:	4616      	mov	r6, r2
 8007a92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a96:	fb03 5711 	mls	r7, r3, r1, r5
 8007a9a:	5dc7      	ldrb	r7, [r0, r7]
 8007a9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007aa0:	462f      	mov	r7, r5
 8007aa2:	42bb      	cmp	r3, r7
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	d9f4      	bls.n	8007a92 <_printf_i+0x11a>
 8007aa8:	2b08      	cmp	r3, #8
 8007aaa:	d10b      	bne.n	8007ac4 <_printf_i+0x14c>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	07df      	lsls	r7, r3, #31
 8007ab0:	d508      	bpl.n	8007ac4 <_printf_i+0x14c>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	6861      	ldr	r1, [r4, #4]
 8007ab6:	4299      	cmp	r1, r3
 8007ab8:	bfde      	ittt	le
 8007aba:	2330      	movle	r3, #48	; 0x30
 8007abc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ac0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ac4:	1b92      	subs	r2, r2, r6
 8007ac6:	6122      	str	r2, [r4, #16]
 8007ac8:	f8cd a000 	str.w	sl, [sp]
 8007acc:	464b      	mov	r3, r9
 8007ace:	aa03      	add	r2, sp, #12
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	f7ff fee2 	bl	800789c <_printf_common>
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d14c      	bne.n	8007b76 <_printf_i+0x1fe>
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae0:	b004      	add	sp, #16
 8007ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae6:	4835      	ldr	r0, [pc, #212]	; (8007bbc <_printf_i+0x244>)
 8007ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	680e      	ldr	r6, [r1, #0]
 8007af0:	061f      	lsls	r7, r3, #24
 8007af2:	f856 5b04 	ldr.w	r5, [r6], #4
 8007af6:	600e      	str	r6, [r1, #0]
 8007af8:	d514      	bpl.n	8007b24 <_printf_i+0x1ac>
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	bf44      	itt	mi
 8007afe:	f043 0320 	orrmi.w	r3, r3, #32
 8007b02:	6023      	strmi	r3, [r4, #0]
 8007b04:	b91d      	cbnz	r5, 8007b0e <_printf_i+0x196>
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	f023 0320 	bic.w	r3, r3, #32
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	2310      	movs	r3, #16
 8007b10:	e7b0      	b.n	8007a74 <_printf_i+0xfc>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f043 0320 	orr.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	2378      	movs	r3, #120	; 0x78
 8007b1c:	4828      	ldr	r0, [pc, #160]	; (8007bc0 <_printf_i+0x248>)
 8007b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b22:	e7e3      	b.n	8007aec <_printf_i+0x174>
 8007b24:	065e      	lsls	r6, r3, #25
 8007b26:	bf48      	it	mi
 8007b28:	b2ad      	uxthmi	r5, r5
 8007b2a:	e7e6      	b.n	8007afa <_printf_i+0x182>
 8007b2c:	4616      	mov	r6, r2
 8007b2e:	e7bb      	b.n	8007aa8 <_printf_i+0x130>
 8007b30:	680b      	ldr	r3, [r1, #0]
 8007b32:	6826      	ldr	r6, [r4, #0]
 8007b34:	6960      	ldr	r0, [r4, #20]
 8007b36:	1d1d      	adds	r5, r3, #4
 8007b38:	600d      	str	r5, [r1, #0]
 8007b3a:	0635      	lsls	r5, r6, #24
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0x1cc>
 8007b40:	6018      	str	r0, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0x1d2>
 8007b44:	0671      	lsls	r1, r6, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0x1c8>
 8007b48:	8018      	strh	r0, [r3, #0]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	4616      	mov	r6, r2
 8007b50:	e7ba      	b.n	8007ac8 <_printf_i+0x150>
 8007b52:	680b      	ldr	r3, [r1, #0]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	600a      	str	r2, [r1, #0]
 8007b58:	681e      	ldr	r6, [r3, #0]
 8007b5a:	6862      	ldr	r2, [r4, #4]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7f8 fb76 	bl	8000250 <memchr>
 8007b64:	b108      	cbz	r0, 8007b6a <_printf_i+0x1f2>
 8007b66:	1b80      	subs	r0, r0, r6
 8007b68:	6060      	str	r0, [r4, #4]
 8007b6a:	6863      	ldr	r3, [r4, #4]
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	e7a8      	b.n	8007ac8 <_printf_i+0x150>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	47d0      	blx	sl
 8007b80:	3001      	adds	r0, #1
 8007b82:	d0ab      	beq.n	8007adc <_printf_i+0x164>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	079b      	lsls	r3, r3, #30
 8007b88:	d413      	bmi.n	8007bb2 <_printf_i+0x23a>
 8007b8a:	68e0      	ldr	r0, [r4, #12]
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	bfb8      	it	lt
 8007b92:	4618      	movlt	r0, r3
 8007b94:	e7a4      	b.n	8007ae0 <_printf_i+0x168>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d09b      	beq.n	8007adc <_printf_i+0x164>
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	68e3      	ldr	r3, [r4, #12]
 8007ba8:	9903      	ldr	r1, [sp, #12]
 8007baa:	1a5b      	subs	r3, r3, r1
 8007bac:	42ab      	cmp	r3, r5
 8007bae:	dcf2      	bgt.n	8007b96 <_printf_i+0x21e>
 8007bb0:	e7eb      	b.n	8007b8a <_printf_i+0x212>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	f104 0619 	add.w	r6, r4, #25
 8007bb8:	e7f5      	b.n	8007ba6 <_printf_i+0x22e>
 8007bba:	bf00      	nop
 8007bbc:	08009ab6 	.word	0x08009ab6
 8007bc0:	08009ac7 	.word	0x08009ac7

08007bc4 <_sbrk_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d06      	ldr	r5, [pc, #24]	; (8007be0 <_sbrk_r+0x1c>)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	f7f9 fdec 	bl	80017ac <_sbrk>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_sbrk_r+0x1a>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_sbrk_r+0x1a>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	200007a8 	.word	0x200007a8

08007be4 <quorem>:
 8007be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	6903      	ldr	r3, [r0, #16]
 8007bea:	690c      	ldr	r4, [r1, #16]
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	4607      	mov	r7, r0
 8007bf0:	f2c0 8081 	blt.w	8007cf6 <quorem+0x112>
 8007bf4:	3c01      	subs	r4, #1
 8007bf6:	f101 0814 	add.w	r8, r1, #20
 8007bfa:	f100 0514 	add.w	r5, r0, #20
 8007bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c1c:	d331      	bcc.n	8007c82 <quorem+0x9e>
 8007c1e:	f04f 0e00 	mov.w	lr, #0
 8007c22:	4640      	mov	r0, r8
 8007c24:	46ac      	mov	ip, r5
 8007c26:	46f2      	mov	sl, lr
 8007c28:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c2c:	b293      	uxth	r3, r2
 8007c2e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	ebaa 0303 	sub.w	r3, sl, r3
 8007c3c:	0c12      	lsrs	r2, r2, #16
 8007c3e:	f8dc a000 	ldr.w	sl, [ip]
 8007c42:	fb06 e202 	mla	r2, r6, r2, lr
 8007c46:	fa13 f38a 	uxtah	r3, r3, sl
 8007c4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c4e:	fa1f fa82 	uxth.w	sl, r2
 8007c52:	f8dc 2000 	ldr.w	r2, [ip]
 8007c56:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c64:	4581      	cmp	r9, r0
 8007c66:	f84c 3b04 	str.w	r3, [ip], #4
 8007c6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c6e:	d2db      	bcs.n	8007c28 <quorem+0x44>
 8007c70:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c74:	b92b      	cbnz	r3, 8007c82 <quorem+0x9e>
 8007c76:	9b01      	ldr	r3, [sp, #4]
 8007c78:	3b04      	subs	r3, #4
 8007c7a:	429d      	cmp	r5, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	d32e      	bcc.n	8007cde <quorem+0xfa>
 8007c80:	613c      	str	r4, [r7, #16]
 8007c82:	4638      	mov	r0, r7
 8007c84:	f001 f85a 	bl	8008d3c <__mcmp>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	db24      	blt.n	8007cd6 <quorem+0xf2>
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f04f 0c00 	mov.w	ip, #0
 8007c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c98:	f8d0 e000 	ldr.w	lr, [r0]
 8007c9c:	b293      	uxth	r3, r2
 8007c9e:	ebac 0303 	sub.w	r3, ip, r3
 8007ca2:	0c12      	lsrs	r2, r2, #16
 8007ca4:	fa13 f38e 	uxtah	r3, r3, lr
 8007ca8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cb6:	45c1      	cmp	r9, r8
 8007cb8:	f840 3b04 	str.w	r3, [r0], #4
 8007cbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cc0:	d2e8      	bcs.n	8007c94 <quorem+0xb0>
 8007cc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cca:	b922      	cbnz	r2, 8007cd6 <quorem+0xf2>
 8007ccc:	3b04      	subs	r3, #4
 8007cce:	429d      	cmp	r5, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	d30a      	bcc.n	8007cea <quorem+0x106>
 8007cd4:	613c      	str	r4, [r7, #16]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	b003      	add	sp, #12
 8007cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	3b04      	subs	r3, #4
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d1cc      	bne.n	8007c80 <quorem+0x9c>
 8007ce6:	3c01      	subs	r4, #1
 8007ce8:	e7c7      	b.n	8007c7a <quorem+0x96>
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	3b04      	subs	r3, #4
 8007cee:	2a00      	cmp	r2, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <quorem+0xf0>
 8007cf2:	3c01      	subs	r4, #1
 8007cf4:	e7eb      	b.n	8007cce <quorem+0xea>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	e7ee      	b.n	8007cd8 <quorem+0xf4>
 8007cfa:	0000      	movs	r0, r0
 8007cfc:	0000      	movs	r0, r0
	...

08007d00 <_dtoa_r>:
 8007d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	ec59 8b10 	vmov	r8, r9, d0
 8007d08:	b095      	sub	sp, #84	; 0x54
 8007d0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d0c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007d0e:	9107      	str	r1, [sp, #28]
 8007d10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007d14:	4606      	mov	r6, r0
 8007d16:	9209      	str	r2, [sp, #36]	; 0x24
 8007d18:	9310      	str	r3, [sp, #64]	; 0x40
 8007d1a:	b975      	cbnz	r5, 8007d3a <_dtoa_r+0x3a>
 8007d1c:	2010      	movs	r0, #16
 8007d1e:	f7ff fa55 	bl	80071cc <malloc>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6270      	str	r0, [r6, #36]	; 0x24
 8007d26:	b920      	cbnz	r0, 8007d32 <_dtoa_r+0x32>
 8007d28:	4bab      	ldr	r3, [pc, #684]	; (8007fd8 <_dtoa_r+0x2d8>)
 8007d2a:	21ea      	movs	r1, #234	; 0xea
 8007d2c:	48ab      	ldr	r0, [pc, #684]	; (8007fdc <_dtoa_r+0x2dc>)
 8007d2e:	f001 f915 	bl	8008f5c <__assert_func>
 8007d32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d36:	6005      	str	r5, [r0, #0]
 8007d38:	60c5      	str	r5, [r0, #12]
 8007d3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d3c:	6819      	ldr	r1, [r3, #0]
 8007d3e:	b151      	cbz	r1, 8007d56 <_dtoa_r+0x56>
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	604a      	str	r2, [r1, #4]
 8007d44:	2301      	movs	r3, #1
 8007d46:	4093      	lsls	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f000 fdb8 	bl	80088c0 <_Bfree>
 8007d50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f1b9 0300 	subs.w	r3, r9, #0
 8007d5a:	bfbb      	ittet	lt
 8007d5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d60:	9303      	strlt	r3, [sp, #12]
 8007d62:	2300      	movge	r3, #0
 8007d64:	2201      	movlt	r2, #1
 8007d66:	bfac      	ite	ge
 8007d68:	6023      	strge	r3, [r4, #0]
 8007d6a:	6022      	strlt	r2, [r4, #0]
 8007d6c:	4b9c      	ldr	r3, [pc, #624]	; (8007fe0 <_dtoa_r+0x2e0>)
 8007d6e:	9c03      	ldr	r4, [sp, #12]
 8007d70:	43a3      	bics	r3, r4
 8007d72:	d11a      	bne.n	8007daa <_dtoa_r+0xaa>
 8007d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d80:	ea53 0308 	orrs.w	r3, r3, r8
 8007d84:	f000 8512 	beq.w	80087ac <_dtoa_r+0xaac>
 8007d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d8a:	b953      	cbnz	r3, 8007da2 <_dtoa_r+0xa2>
 8007d8c:	4b95      	ldr	r3, [pc, #596]	; (8007fe4 <_dtoa_r+0x2e4>)
 8007d8e:	e01f      	b.n	8007dd0 <_dtoa_r+0xd0>
 8007d90:	4b95      	ldr	r3, [pc, #596]	; (8007fe8 <_dtoa_r+0x2e8>)
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	3308      	adds	r3, #8
 8007d96:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	9800      	ldr	r0, [sp, #0]
 8007d9c:	b015      	add	sp, #84	; 0x54
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	4b90      	ldr	r3, [pc, #576]	; (8007fe4 <_dtoa_r+0x2e4>)
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	3303      	adds	r3, #3
 8007da8:	e7f5      	b.n	8007d96 <_dtoa_r+0x96>
 8007daa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007dba:	d10b      	bne.n	8007dd4 <_dtoa_r+0xd4>
 8007dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 84ee 	beq.w	80087a6 <_dtoa_r+0xaa6>
 8007dca:	4888      	ldr	r0, [pc, #544]	; (8007fec <_dtoa_r+0x2ec>)
 8007dcc:	6018      	str	r0, [r3, #0]
 8007dce:	1e43      	subs	r3, r0, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	e7e2      	b.n	8007d9a <_dtoa_r+0x9a>
 8007dd4:	a913      	add	r1, sp, #76	; 0x4c
 8007dd6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007dda:	aa12      	add	r2, sp, #72	; 0x48
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f001 f851 	bl	8008e84 <__d2b>
 8007de2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007de6:	4605      	mov	r5, r0
 8007de8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dea:	2900      	cmp	r1, #0
 8007dec:	d047      	beq.n	8007e7e <_dtoa_r+0x17e>
 8007dee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007df0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007df8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007dfc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e00:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007e04:	2400      	movs	r4, #0
 8007e06:	ec43 2b16 	vmov	d6, r2, r3
 8007e0a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007e0e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007fc0 <_dtoa_r+0x2c0>
 8007e12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e16:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007fc8 <_dtoa_r+0x2c8>
 8007e1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007e1e:	eeb0 7b46 	vmov.f64	d7, d6
 8007e22:	ee06 1a90 	vmov	s13, r1
 8007e26:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007e2a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007fd0 <_dtoa_r+0x2d0>
 8007e2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007e32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007e36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3e:	ee16 ba90 	vmov	fp, s13
 8007e42:	9411      	str	r4, [sp, #68]	; 0x44
 8007e44:	d508      	bpl.n	8007e58 <_dtoa_r+0x158>
 8007e46:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007e4a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e52:	bf18      	it	ne
 8007e54:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007e58:	f1bb 0f16 	cmp.w	fp, #22
 8007e5c:	d832      	bhi.n	8007ec4 <_dtoa_r+0x1c4>
 8007e5e:	4b64      	ldr	r3, [pc, #400]	; (8007ff0 <_dtoa_r+0x2f0>)
 8007e60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e64:	ed93 7b00 	vldr	d7, [r3]
 8007e68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007e6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e74:	d501      	bpl.n	8007e7a <_dtoa_r+0x17a>
 8007e76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e023      	b.n	8007ec6 <_dtoa_r+0x1c6>
 8007e7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e80:	4401      	add	r1, r0
 8007e82:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	bfc3      	ittte	gt
 8007e8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e8e:	fa04 f303 	lslgt.w	r3, r4, r3
 8007e92:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007e96:	f1c3 0320 	rsble	r3, r3, #32
 8007e9a:	bfc6      	itte	gt
 8007e9c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007ea0:	ea43 0308 	orrgt.w	r3, r3, r8
 8007ea4:	fa08 f303 	lslle.w	r3, r8, r3
 8007ea8:	ee07 3a90 	vmov	s15, r3
 8007eac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007eb0:	3901      	subs	r1, #1
 8007eb2:	ed8d 7b00 	vstr	d7, [sp]
 8007eb6:	9c01      	ldr	r4, [sp, #4]
 8007eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ebc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007ec0:	2401      	movs	r4, #1
 8007ec2:	e7a0      	b.n	8007e06 <_dtoa_r+0x106>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec8:	1a43      	subs	r3, r0, r1
 8007eca:	1e5a      	subs	r2, r3, #1
 8007ecc:	bf45      	ittet	mi
 8007ece:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ed2:	9305      	strmi	r3, [sp, #20]
 8007ed4:	2300      	movpl	r3, #0
 8007ed6:	2300      	movmi	r3, #0
 8007ed8:	9206      	str	r2, [sp, #24]
 8007eda:	bf54      	ite	pl
 8007edc:	9305      	strpl	r3, [sp, #20]
 8007ede:	9306      	strmi	r3, [sp, #24]
 8007ee0:	f1bb 0f00 	cmp.w	fp, #0
 8007ee4:	db18      	blt.n	8007f18 <_dtoa_r+0x218>
 8007ee6:	9b06      	ldr	r3, [sp, #24]
 8007ee8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007eec:	445b      	add	r3, fp
 8007eee:	9306      	str	r3, [sp, #24]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	2a09      	cmp	r2, #9
 8007ef6:	d849      	bhi.n	8007f8c <_dtoa_r+0x28c>
 8007ef8:	2a05      	cmp	r2, #5
 8007efa:	bfc4      	itt	gt
 8007efc:	3a04      	subgt	r2, #4
 8007efe:	9207      	strgt	r2, [sp, #28]
 8007f00:	9a07      	ldr	r2, [sp, #28]
 8007f02:	f1a2 0202 	sub.w	r2, r2, #2
 8007f06:	bfcc      	ite	gt
 8007f08:	2400      	movgt	r4, #0
 8007f0a:	2401      	movle	r4, #1
 8007f0c:	2a03      	cmp	r2, #3
 8007f0e:	d848      	bhi.n	8007fa2 <_dtoa_r+0x2a2>
 8007f10:	e8df f002 	tbb	[pc, r2]
 8007f14:	3a2c2e0b 	.word	0x3a2c2e0b
 8007f18:	9b05      	ldr	r3, [sp, #20]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	eba3 030b 	sub.w	r3, r3, fp
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	920e      	str	r2, [sp, #56]	; 0x38
 8007f24:	f1cb 0300 	rsb	r3, fp, #0
 8007f28:	e7e3      	b.n	8007ef2 <_dtoa_r+0x1f2>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	9208      	str	r2, [sp, #32]
 8007f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	dc39      	bgt.n	8007fa8 <_dtoa_r+0x2a8>
 8007f34:	f04f 0a01 	mov.w	sl, #1
 8007f38:	46d1      	mov	r9, sl
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f40:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007f42:	2100      	movs	r1, #0
 8007f44:	6079      	str	r1, [r7, #4]
 8007f46:	2004      	movs	r0, #4
 8007f48:	f100 0c14 	add.w	ip, r0, #20
 8007f4c:	4594      	cmp	ip, r2
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	d92f      	bls.n	8007fb2 <_dtoa_r+0x2b2>
 8007f52:	4630      	mov	r0, r6
 8007f54:	930c      	str	r3, [sp, #48]	; 0x30
 8007f56:	f000 fc73 	bl	8008840 <_Balloc>
 8007f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5c:	9000      	str	r0, [sp, #0]
 8007f5e:	4602      	mov	r2, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d149      	bne.n	8007ff8 <_dtoa_r+0x2f8>
 8007f64:	4b23      	ldr	r3, [pc, #140]	; (8007ff4 <_dtoa_r+0x2f4>)
 8007f66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f6a:	e6df      	b.n	8007d2c <_dtoa_r+0x2c>
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	e7dd      	b.n	8007f2c <_dtoa_r+0x22c>
 8007f70:	2200      	movs	r2, #0
 8007f72:	9208      	str	r2, [sp, #32]
 8007f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f76:	eb0b 0a02 	add.w	sl, fp, r2
 8007f7a:	f10a 0901 	add.w	r9, sl, #1
 8007f7e:	464a      	mov	r2, r9
 8007f80:	2a01      	cmp	r2, #1
 8007f82:	bfb8      	it	lt
 8007f84:	2201      	movlt	r2, #1
 8007f86:	e7db      	b.n	8007f40 <_dtoa_r+0x240>
 8007f88:	2201      	movs	r2, #1
 8007f8a:	e7f2      	b.n	8007f72 <_dtoa_r+0x272>
 8007f8c:	2401      	movs	r4, #1
 8007f8e:	2200      	movs	r2, #0
 8007f90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007f94:	f04f 3aff 	mov.w	sl, #4294967295
 8007f98:	2100      	movs	r1, #0
 8007f9a:	46d1      	mov	r9, sl
 8007f9c:	2212      	movs	r2, #18
 8007f9e:	9109      	str	r1, [sp, #36]	; 0x24
 8007fa0:	e7ce      	b.n	8007f40 <_dtoa_r+0x240>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	9208      	str	r2, [sp, #32]
 8007fa6:	e7f5      	b.n	8007f94 <_dtoa_r+0x294>
 8007fa8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007fac:	46d1      	mov	r9, sl
 8007fae:	4652      	mov	r2, sl
 8007fb0:	e7c6      	b.n	8007f40 <_dtoa_r+0x240>
 8007fb2:	3101      	adds	r1, #1
 8007fb4:	6079      	str	r1, [r7, #4]
 8007fb6:	0040      	lsls	r0, r0, #1
 8007fb8:	e7c6      	b.n	8007f48 <_dtoa_r+0x248>
 8007fba:	bf00      	nop
 8007fbc:	f3af 8000 	nop.w
 8007fc0:	636f4361 	.word	0x636f4361
 8007fc4:	3fd287a7 	.word	0x3fd287a7
 8007fc8:	8b60c8b3 	.word	0x8b60c8b3
 8007fcc:	3fc68a28 	.word	0x3fc68a28
 8007fd0:	509f79fb 	.word	0x509f79fb
 8007fd4:	3fd34413 	.word	0x3fd34413
 8007fd8:	08009ae5 	.word	0x08009ae5
 8007fdc:	08009afc 	.word	0x08009afc
 8007fe0:	7ff00000 	.word	0x7ff00000
 8007fe4:	08009ae1 	.word	0x08009ae1
 8007fe8:	08009ad8 	.word	0x08009ad8
 8007fec:	08009ab5 	.word	0x08009ab5
 8007ff0:	08009bf8 	.word	0x08009bf8
 8007ff4:	08009b5b 	.word	0x08009b5b
 8007ff8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007ffa:	9900      	ldr	r1, [sp, #0]
 8007ffc:	6011      	str	r1, [r2, #0]
 8007ffe:	f1b9 0f0e 	cmp.w	r9, #14
 8008002:	d872      	bhi.n	80080ea <_dtoa_r+0x3ea>
 8008004:	2c00      	cmp	r4, #0
 8008006:	d070      	beq.n	80080ea <_dtoa_r+0x3ea>
 8008008:	f1bb 0f00 	cmp.w	fp, #0
 800800c:	f340 80a6 	ble.w	800815c <_dtoa_r+0x45c>
 8008010:	49ca      	ldr	r1, [pc, #808]	; (800833c <_dtoa_r+0x63c>)
 8008012:	f00b 020f 	and.w	r2, fp, #15
 8008016:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800801a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800801e:	ed92 7b00 	vldr	d7, [r2]
 8008022:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008026:	f000 808d 	beq.w	8008144 <_dtoa_r+0x444>
 800802a:	4ac5      	ldr	r2, [pc, #788]	; (8008340 <_dtoa_r+0x640>)
 800802c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008030:	ed92 6b08 	vldr	d6, [r2, #32]
 8008034:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008038:	ed8d 6b02 	vstr	d6, [sp, #8]
 800803c:	f001 010f 	and.w	r1, r1, #15
 8008040:	2203      	movs	r2, #3
 8008042:	48bf      	ldr	r0, [pc, #764]	; (8008340 <_dtoa_r+0x640>)
 8008044:	2900      	cmp	r1, #0
 8008046:	d17f      	bne.n	8008148 <_dtoa_r+0x448>
 8008048:	ed9d 6b02 	vldr	d6, [sp, #8]
 800804c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008050:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008054:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008056:	2900      	cmp	r1, #0
 8008058:	f000 80b2 	beq.w	80081c0 <_dtoa_r+0x4c0>
 800805c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008064:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806c:	f140 80a8 	bpl.w	80081c0 <_dtoa_r+0x4c0>
 8008070:	f1b9 0f00 	cmp.w	r9, #0
 8008074:	f000 80a4 	beq.w	80081c0 <_dtoa_r+0x4c0>
 8008078:	f1ba 0f00 	cmp.w	sl, #0
 800807c:	dd31      	ble.n	80080e2 <_dtoa_r+0x3e2>
 800807e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008082:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008086:	ed8d 7b02 	vstr	d7, [sp, #8]
 800808a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800808e:	3201      	adds	r2, #1
 8008090:	4650      	mov	r0, sl
 8008092:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008096:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800809a:	ee07 2a90 	vmov	s15, r2
 800809e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80080a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80080a6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80080aa:	9c03      	ldr	r4, [sp, #12]
 80080ac:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80080b0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f040 8086 	bne.w	80081c6 <_dtoa_r+0x4c6>
 80080ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80080be:	ee36 6b47 	vsub.f64	d6, d6, d7
 80080c2:	ec42 1b17 	vmov	d7, r1, r2
 80080c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ce:	f300 8272 	bgt.w	80085b6 <_dtoa_r+0x8b6>
 80080d2:	eeb1 7b47 	vneg.f64	d7, d7
 80080d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080de:	f100 8267 	bmi.w	80085b0 <_dtoa_r+0x8b0>
 80080e2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80080e6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80080ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80080ec:	2a00      	cmp	r2, #0
 80080ee:	f2c0 8129 	blt.w	8008344 <_dtoa_r+0x644>
 80080f2:	f1bb 0f0e 	cmp.w	fp, #14
 80080f6:	f300 8125 	bgt.w	8008344 <_dtoa_r+0x644>
 80080fa:	4b90      	ldr	r3, [pc, #576]	; (800833c <_dtoa_r+0x63c>)
 80080fc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008100:	ed93 6b00 	vldr	d6, [r3]
 8008104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	f280 80c3 	bge.w	8008292 <_dtoa_r+0x592>
 800810c:	f1b9 0f00 	cmp.w	r9, #0
 8008110:	f300 80bf 	bgt.w	8008292 <_dtoa_r+0x592>
 8008114:	f040 824c 	bne.w	80085b0 <_dtoa_r+0x8b0>
 8008118:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800811c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008124:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812c:	464c      	mov	r4, r9
 800812e:	464f      	mov	r7, r9
 8008130:	f280 8222 	bge.w	8008578 <_dtoa_r+0x878>
 8008134:	f8dd 8000 	ldr.w	r8, [sp]
 8008138:	2331      	movs	r3, #49	; 0x31
 800813a:	f808 3b01 	strb.w	r3, [r8], #1
 800813e:	f10b 0b01 	add.w	fp, fp, #1
 8008142:	e21e      	b.n	8008582 <_dtoa_r+0x882>
 8008144:	2202      	movs	r2, #2
 8008146:	e77c      	b.n	8008042 <_dtoa_r+0x342>
 8008148:	07cc      	lsls	r4, r1, #31
 800814a:	d504      	bpl.n	8008156 <_dtoa_r+0x456>
 800814c:	ed90 6b00 	vldr	d6, [r0]
 8008150:	3201      	adds	r2, #1
 8008152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008156:	1049      	asrs	r1, r1, #1
 8008158:	3008      	adds	r0, #8
 800815a:	e773      	b.n	8008044 <_dtoa_r+0x344>
 800815c:	d02e      	beq.n	80081bc <_dtoa_r+0x4bc>
 800815e:	f1cb 0100 	rsb	r1, fp, #0
 8008162:	4a76      	ldr	r2, [pc, #472]	; (800833c <_dtoa_r+0x63c>)
 8008164:	f001 000f 	and.w	r0, r1, #15
 8008168:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800816c:	ed92 7b00 	vldr	d7, [r2]
 8008170:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008174:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008178:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800817c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008180:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008184:	486e      	ldr	r0, [pc, #440]	; (8008340 <_dtoa_r+0x640>)
 8008186:	1109      	asrs	r1, r1, #4
 8008188:	2400      	movs	r4, #0
 800818a:	2202      	movs	r2, #2
 800818c:	b939      	cbnz	r1, 800819e <_dtoa_r+0x49e>
 800818e:	2c00      	cmp	r4, #0
 8008190:	f43f af60 	beq.w	8008054 <_dtoa_r+0x354>
 8008194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800819c:	e75a      	b.n	8008054 <_dtoa_r+0x354>
 800819e:	07cf      	lsls	r7, r1, #31
 80081a0:	d509      	bpl.n	80081b6 <_dtoa_r+0x4b6>
 80081a2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80081a6:	ed90 7b00 	vldr	d7, [r0]
 80081aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80081ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80081b2:	3201      	adds	r2, #1
 80081b4:	2401      	movs	r4, #1
 80081b6:	1049      	asrs	r1, r1, #1
 80081b8:	3008      	adds	r0, #8
 80081ba:	e7e7      	b.n	800818c <_dtoa_r+0x48c>
 80081bc:	2202      	movs	r2, #2
 80081be:	e749      	b.n	8008054 <_dtoa_r+0x354>
 80081c0:	465f      	mov	r7, fp
 80081c2:	4648      	mov	r0, r9
 80081c4:	e765      	b.n	8008092 <_dtoa_r+0x392>
 80081c6:	ec42 1b17 	vmov	d7, r1, r2
 80081ca:	4a5c      	ldr	r2, [pc, #368]	; (800833c <_dtoa_r+0x63c>)
 80081cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80081d0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80081d4:	9a00      	ldr	r2, [sp, #0]
 80081d6:	1814      	adds	r4, r2, r0
 80081d8:	9a08      	ldr	r2, [sp, #32]
 80081da:	b352      	cbz	r2, 8008232 <_dtoa_r+0x532>
 80081dc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80081e0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80081e4:	f8dd 8000 	ldr.w	r8, [sp]
 80081e8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80081ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80081f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80081f8:	ee14 2a90 	vmov	r2, s9
 80081fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008200:	3230      	adds	r2, #48	; 0x30
 8008202:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008206:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	f808 2b01 	strb.w	r2, [r8], #1
 8008212:	d439      	bmi.n	8008288 <_dtoa_r+0x588>
 8008214:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008218:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800821c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008220:	d472      	bmi.n	8008308 <_dtoa_r+0x608>
 8008222:	45a0      	cmp	r8, r4
 8008224:	f43f af5d 	beq.w	80080e2 <_dtoa_r+0x3e2>
 8008228:	ee27 7b03 	vmul.f64	d7, d7, d3
 800822c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008230:	e7e0      	b.n	80081f4 <_dtoa_r+0x4f4>
 8008232:	f8dd 8000 	ldr.w	r8, [sp]
 8008236:	ee27 7b04 	vmul.f64	d7, d7, d4
 800823a:	4621      	mov	r1, r4
 800823c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008240:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008244:	ee14 2a90 	vmov	r2, s9
 8008248:	3230      	adds	r2, #48	; 0x30
 800824a:	f808 2b01 	strb.w	r2, [r8], #1
 800824e:	45a0      	cmp	r8, r4
 8008250:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008254:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008258:	d118      	bne.n	800828c <_dtoa_r+0x58c>
 800825a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800825e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008262:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826a:	dc4d      	bgt.n	8008308 <_dtoa_r+0x608>
 800826c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008270:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008278:	f57f af33 	bpl.w	80080e2 <_dtoa_r+0x3e2>
 800827c:	4688      	mov	r8, r1
 800827e:	3901      	subs	r1, #1
 8008280:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008284:	2b30      	cmp	r3, #48	; 0x30
 8008286:	d0f9      	beq.n	800827c <_dtoa_r+0x57c>
 8008288:	46bb      	mov	fp, r7
 800828a:	e02a      	b.n	80082e2 <_dtoa_r+0x5e2>
 800828c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008290:	e7d6      	b.n	8008240 <_dtoa_r+0x540>
 8008292:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008296:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800829a:	f8dd 8000 	ldr.w	r8, [sp]
 800829e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80082a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80082a6:	ee15 3a10 	vmov	r3, s10
 80082aa:	3330      	adds	r3, #48	; 0x30
 80082ac:	f808 3b01 	strb.w	r3, [r8], #1
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	eba8 0303 	sub.w	r3, r8, r3
 80082b6:	4599      	cmp	r9, r3
 80082b8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80082bc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80082c0:	d133      	bne.n	800832a <_dtoa_r+0x62a>
 80082c2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80082c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ce:	dc1a      	bgt.n	8008306 <_dtoa_r+0x606>
 80082d0:	eeb4 7b46 	vcmp.f64	d7, d6
 80082d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d8:	d103      	bne.n	80082e2 <_dtoa_r+0x5e2>
 80082da:	ee15 3a10 	vmov	r3, s10
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d411      	bmi.n	8008306 <_dtoa_r+0x606>
 80082e2:	4629      	mov	r1, r5
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 faeb 	bl	80088c0 <_Bfree>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082ee:	f888 3000 	strb.w	r3, [r8]
 80082f2:	f10b 0301 	add.w	r3, fp, #1
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f43f ad4d 	beq.w	8007d9a <_dtoa_r+0x9a>
 8008300:	f8c3 8000 	str.w	r8, [r3]
 8008304:	e549      	b.n	8007d9a <_dtoa_r+0x9a>
 8008306:	465f      	mov	r7, fp
 8008308:	4643      	mov	r3, r8
 800830a:	4698      	mov	r8, r3
 800830c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008310:	2a39      	cmp	r2, #57	; 0x39
 8008312:	d106      	bne.n	8008322 <_dtoa_r+0x622>
 8008314:	9a00      	ldr	r2, [sp, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d1f7      	bne.n	800830a <_dtoa_r+0x60a>
 800831a:	9900      	ldr	r1, [sp, #0]
 800831c:	2230      	movs	r2, #48	; 0x30
 800831e:	3701      	adds	r7, #1
 8008320:	700a      	strb	r2, [r1, #0]
 8008322:	781a      	ldrb	r2, [r3, #0]
 8008324:	3201      	adds	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e7ae      	b.n	8008288 <_dtoa_r+0x588>
 800832a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800832e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	d1b2      	bne.n	800829e <_dtoa_r+0x59e>
 8008338:	e7d3      	b.n	80082e2 <_dtoa_r+0x5e2>
 800833a:	bf00      	nop
 800833c:	08009bf8 	.word	0x08009bf8
 8008340:	08009bd0 	.word	0x08009bd0
 8008344:	9908      	ldr	r1, [sp, #32]
 8008346:	2900      	cmp	r1, #0
 8008348:	f000 80d1 	beq.w	80084ee <_dtoa_r+0x7ee>
 800834c:	9907      	ldr	r1, [sp, #28]
 800834e:	2901      	cmp	r1, #1
 8008350:	f300 80b4 	bgt.w	80084bc <_dtoa_r+0x7bc>
 8008354:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008356:	2900      	cmp	r1, #0
 8008358:	f000 80ac 	beq.w	80084b4 <_dtoa_r+0x7b4>
 800835c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008360:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008364:	461c      	mov	r4, r3
 8008366:	930a      	str	r3, [sp, #40]	; 0x28
 8008368:	9b05      	ldr	r3, [sp, #20]
 800836a:	4413      	add	r3, r2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	9b06      	ldr	r3, [sp, #24]
 8008370:	2101      	movs	r1, #1
 8008372:	4413      	add	r3, r2
 8008374:	4630      	mov	r0, r6
 8008376:	9306      	str	r3, [sp, #24]
 8008378:	f000 fb5e 	bl	8008a38 <__i2b>
 800837c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837e:	4607      	mov	r7, r0
 8008380:	f1b8 0f00 	cmp.w	r8, #0
 8008384:	dd0d      	ble.n	80083a2 <_dtoa_r+0x6a2>
 8008386:	9a06      	ldr	r2, [sp, #24]
 8008388:	2a00      	cmp	r2, #0
 800838a:	dd0a      	ble.n	80083a2 <_dtoa_r+0x6a2>
 800838c:	4542      	cmp	r2, r8
 800838e:	9905      	ldr	r1, [sp, #20]
 8008390:	bfa8      	it	ge
 8008392:	4642      	movge	r2, r8
 8008394:	1a89      	subs	r1, r1, r2
 8008396:	9105      	str	r1, [sp, #20]
 8008398:	9906      	ldr	r1, [sp, #24]
 800839a:	eba8 0802 	sub.w	r8, r8, r2
 800839e:	1a8a      	subs	r2, r1, r2
 80083a0:	9206      	str	r2, [sp, #24]
 80083a2:	b303      	cbz	r3, 80083e6 <_dtoa_r+0x6e6>
 80083a4:	9a08      	ldr	r2, [sp, #32]
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	f000 80a6 	beq.w	80084f8 <_dtoa_r+0x7f8>
 80083ac:	2c00      	cmp	r4, #0
 80083ae:	dd13      	ble.n	80083d8 <_dtoa_r+0x6d8>
 80083b0:	4639      	mov	r1, r7
 80083b2:	4622      	mov	r2, r4
 80083b4:	4630      	mov	r0, r6
 80083b6:	930c      	str	r3, [sp, #48]	; 0x30
 80083b8:	f000 fbfa 	bl	8008bb0 <__pow5mult>
 80083bc:	462a      	mov	r2, r5
 80083be:	4601      	mov	r1, r0
 80083c0:	4607      	mov	r7, r0
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 fb4e 	bl	8008a64 <__multiply>
 80083c8:	4629      	mov	r1, r5
 80083ca:	900a      	str	r0, [sp, #40]	; 0x28
 80083cc:	4630      	mov	r0, r6
 80083ce:	f000 fa77 	bl	80088c0 <_Bfree>
 80083d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d6:	4615      	mov	r5, r2
 80083d8:	1b1a      	subs	r2, r3, r4
 80083da:	d004      	beq.n	80083e6 <_dtoa_r+0x6e6>
 80083dc:	4629      	mov	r1, r5
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 fbe6 	bl	8008bb0 <__pow5mult>
 80083e4:	4605      	mov	r5, r0
 80083e6:	2101      	movs	r1, #1
 80083e8:	4630      	mov	r0, r6
 80083ea:	f000 fb25 	bl	8008a38 <__i2b>
 80083ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	f340 8082 	ble.w	80084fc <_dtoa_r+0x7fc>
 80083f8:	461a      	mov	r2, r3
 80083fa:	4601      	mov	r1, r0
 80083fc:	4630      	mov	r0, r6
 80083fe:	f000 fbd7 	bl	8008bb0 <__pow5mult>
 8008402:	9b07      	ldr	r3, [sp, #28]
 8008404:	2b01      	cmp	r3, #1
 8008406:	4604      	mov	r4, r0
 8008408:	dd7b      	ble.n	8008502 <_dtoa_r+0x802>
 800840a:	2300      	movs	r3, #0
 800840c:	930a      	str	r3, [sp, #40]	; 0x28
 800840e:	6922      	ldr	r2, [r4, #16]
 8008410:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008414:	6910      	ldr	r0, [r2, #16]
 8008416:	f000 fabf 	bl	8008998 <__hi0bits>
 800841a:	f1c0 0020 	rsb	r0, r0, #32
 800841e:	9b06      	ldr	r3, [sp, #24]
 8008420:	4418      	add	r0, r3
 8008422:	f010 001f 	ands.w	r0, r0, #31
 8008426:	f000 808d 	beq.w	8008544 <_dtoa_r+0x844>
 800842a:	f1c0 0220 	rsb	r2, r0, #32
 800842e:	2a04      	cmp	r2, #4
 8008430:	f340 8086 	ble.w	8008540 <_dtoa_r+0x840>
 8008434:	f1c0 001c 	rsb	r0, r0, #28
 8008438:	9b05      	ldr	r3, [sp, #20]
 800843a:	4403      	add	r3, r0
 800843c:	9305      	str	r3, [sp, #20]
 800843e:	9b06      	ldr	r3, [sp, #24]
 8008440:	4403      	add	r3, r0
 8008442:	4480      	add	r8, r0
 8008444:	9306      	str	r3, [sp, #24]
 8008446:	9b05      	ldr	r3, [sp, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	dd05      	ble.n	8008458 <_dtoa_r+0x758>
 800844c:	4629      	mov	r1, r5
 800844e:	461a      	mov	r2, r3
 8008450:	4630      	mov	r0, r6
 8008452:	f000 fc07 	bl	8008c64 <__lshift>
 8008456:	4605      	mov	r5, r0
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd05      	ble.n	800846a <_dtoa_r+0x76a>
 800845e:	4621      	mov	r1, r4
 8008460:	461a      	mov	r2, r3
 8008462:	4630      	mov	r0, r6
 8008464:	f000 fbfe 	bl	8008c64 <__lshift>
 8008468:	4604      	mov	r4, r0
 800846a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d06b      	beq.n	8008548 <_dtoa_r+0x848>
 8008470:	4621      	mov	r1, r4
 8008472:	4628      	mov	r0, r5
 8008474:	f000 fc62 	bl	8008d3c <__mcmp>
 8008478:	2800      	cmp	r0, #0
 800847a:	da65      	bge.n	8008548 <_dtoa_r+0x848>
 800847c:	2300      	movs	r3, #0
 800847e:	4629      	mov	r1, r5
 8008480:	220a      	movs	r2, #10
 8008482:	4630      	mov	r0, r6
 8008484:	f000 fa3e 	bl	8008904 <__multadd>
 8008488:	9b08      	ldr	r3, [sp, #32]
 800848a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800848e:	4605      	mov	r5, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8192 	beq.w	80087ba <_dtoa_r+0xaba>
 8008496:	4639      	mov	r1, r7
 8008498:	2300      	movs	r3, #0
 800849a:	220a      	movs	r2, #10
 800849c:	4630      	mov	r0, r6
 800849e:	f000 fa31 	bl	8008904 <__multadd>
 80084a2:	f1ba 0f00 	cmp.w	sl, #0
 80084a6:	4607      	mov	r7, r0
 80084a8:	f300 808e 	bgt.w	80085c8 <_dtoa_r+0x8c8>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	dc51      	bgt.n	8008556 <_dtoa_r+0x856>
 80084b2:	e089      	b.n	80085c8 <_dtoa_r+0x8c8>
 80084b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084ba:	e751      	b.n	8008360 <_dtoa_r+0x660>
 80084bc:	f109 34ff 	add.w	r4, r9, #4294967295
 80084c0:	42a3      	cmp	r3, r4
 80084c2:	bfbf      	itttt	lt
 80084c4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80084c6:	1ae3      	sublt	r3, r4, r3
 80084c8:	18d2      	addlt	r2, r2, r3
 80084ca:	4613      	movlt	r3, r2
 80084cc:	bfb7      	itett	lt
 80084ce:	930e      	strlt	r3, [sp, #56]	; 0x38
 80084d0:	1b1c      	subge	r4, r3, r4
 80084d2:	4623      	movlt	r3, r4
 80084d4:	2400      	movlt	r4, #0
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	bfb5      	itete	lt
 80084dc:	9a05      	ldrlt	r2, [sp, #20]
 80084de:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80084e2:	eba2 0809 	sublt.w	r8, r2, r9
 80084e6:	464a      	movge	r2, r9
 80084e8:	bfb8      	it	lt
 80084ea:	2200      	movlt	r2, #0
 80084ec:	e73b      	b.n	8008366 <_dtoa_r+0x666>
 80084ee:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80084f2:	9f08      	ldr	r7, [sp, #32]
 80084f4:	461c      	mov	r4, r3
 80084f6:	e743      	b.n	8008380 <_dtoa_r+0x680>
 80084f8:	461a      	mov	r2, r3
 80084fa:	e76f      	b.n	80083dc <_dtoa_r+0x6dc>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	dc18      	bgt.n	8008534 <_dtoa_r+0x834>
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	b9b3      	cbnz	r3, 8008534 <_dtoa_r+0x834>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800850c:	b9a2      	cbnz	r2, 8008538 <_dtoa_r+0x838>
 800850e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008512:	0d12      	lsrs	r2, r2, #20
 8008514:	0512      	lsls	r2, r2, #20
 8008516:	b18a      	cbz	r2, 800853c <_dtoa_r+0x83c>
 8008518:	9b05      	ldr	r3, [sp, #20]
 800851a:	3301      	adds	r3, #1
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	3301      	adds	r3, #1
 8008522:	9306      	str	r3, [sp, #24]
 8008524:	2301      	movs	r3, #1
 8008526:	930a      	str	r3, [sp, #40]	; 0x28
 8008528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	f47f af6f 	bne.w	800840e <_dtoa_r+0x70e>
 8008530:	2001      	movs	r0, #1
 8008532:	e774      	b.n	800841e <_dtoa_r+0x71e>
 8008534:	2300      	movs	r3, #0
 8008536:	e7f6      	b.n	8008526 <_dtoa_r+0x826>
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	e7f4      	b.n	8008526 <_dtoa_r+0x826>
 800853c:	920a      	str	r2, [sp, #40]	; 0x28
 800853e:	e7f3      	b.n	8008528 <_dtoa_r+0x828>
 8008540:	d081      	beq.n	8008446 <_dtoa_r+0x746>
 8008542:	4610      	mov	r0, r2
 8008544:	301c      	adds	r0, #28
 8008546:	e777      	b.n	8008438 <_dtoa_r+0x738>
 8008548:	f1b9 0f00 	cmp.w	r9, #0
 800854c:	dc37      	bgt.n	80085be <_dtoa_r+0x8be>
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	2b02      	cmp	r3, #2
 8008552:	dd34      	ble.n	80085be <_dtoa_r+0x8be>
 8008554:	46ca      	mov	sl, r9
 8008556:	f1ba 0f00 	cmp.w	sl, #0
 800855a:	d10d      	bne.n	8008578 <_dtoa_r+0x878>
 800855c:	4621      	mov	r1, r4
 800855e:	4653      	mov	r3, sl
 8008560:	2205      	movs	r2, #5
 8008562:	4630      	mov	r0, r6
 8008564:	f000 f9ce 	bl	8008904 <__multadd>
 8008568:	4601      	mov	r1, r0
 800856a:	4604      	mov	r4, r0
 800856c:	4628      	mov	r0, r5
 800856e:	f000 fbe5 	bl	8008d3c <__mcmp>
 8008572:	2800      	cmp	r0, #0
 8008574:	f73f adde 	bgt.w	8008134 <_dtoa_r+0x434>
 8008578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857a:	f8dd 8000 	ldr.w	r8, [sp]
 800857e:	ea6f 0b03 	mvn.w	fp, r3
 8008582:	f04f 0900 	mov.w	r9, #0
 8008586:	4621      	mov	r1, r4
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f999 	bl	80088c0 <_Bfree>
 800858e:	2f00      	cmp	r7, #0
 8008590:	f43f aea7 	beq.w	80082e2 <_dtoa_r+0x5e2>
 8008594:	f1b9 0f00 	cmp.w	r9, #0
 8008598:	d005      	beq.n	80085a6 <_dtoa_r+0x8a6>
 800859a:	45b9      	cmp	r9, r7
 800859c:	d003      	beq.n	80085a6 <_dtoa_r+0x8a6>
 800859e:	4649      	mov	r1, r9
 80085a0:	4630      	mov	r0, r6
 80085a2:	f000 f98d 	bl	80088c0 <_Bfree>
 80085a6:	4639      	mov	r1, r7
 80085a8:	4630      	mov	r0, r6
 80085aa:	f000 f989 	bl	80088c0 <_Bfree>
 80085ae:	e698      	b.n	80082e2 <_dtoa_r+0x5e2>
 80085b0:	2400      	movs	r4, #0
 80085b2:	4627      	mov	r7, r4
 80085b4:	e7e0      	b.n	8008578 <_dtoa_r+0x878>
 80085b6:	46bb      	mov	fp, r7
 80085b8:	4604      	mov	r4, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	e5ba      	b.n	8008134 <_dtoa_r+0x434>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	46ca      	mov	sl, r9
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 8100 	beq.w	80087c8 <_dtoa_r+0xac8>
 80085c8:	f1b8 0f00 	cmp.w	r8, #0
 80085cc:	dd05      	ble.n	80085da <_dtoa_r+0x8da>
 80085ce:	4639      	mov	r1, r7
 80085d0:	4642      	mov	r2, r8
 80085d2:	4630      	mov	r0, r6
 80085d4:	f000 fb46 	bl	8008c64 <__lshift>
 80085d8:	4607      	mov	r7, r0
 80085da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d05d      	beq.n	800869c <_dtoa_r+0x99c>
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	4630      	mov	r0, r6
 80085e4:	f000 f92c 	bl	8008840 <_Balloc>
 80085e8:	4680      	mov	r8, r0
 80085ea:	b928      	cbnz	r0, 80085f8 <_dtoa_r+0x8f8>
 80085ec:	4b82      	ldr	r3, [pc, #520]	; (80087f8 <_dtoa_r+0xaf8>)
 80085ee:	4602      	mov	r2, r0
 80085f0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085f4:	f7ff bb9a 	b.w	8007d2c <_dtoa_r+0x2c>
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	3202      	adds	r2, #2
 80085fc:	0092      	lsls	r2, r2, #2
 80085fe:	f107 010c 	add.w	r1, r7, #12
 8008602:	300c      	adds	r0, #12
 8008604:	f000 f902 	bl	800880c <memcpy>
 8008608:	2201      	movs	r2, #1
 800860a:	4641      	mov	r1, r8
 800860c:	4630      	mov	r0, r6
 800860e:	f000 fb29 	bl	8008c64 <__lshift>
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	3301      	adds	r3, #1
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	9b00      	ldr	r3, [sp, #0]
 800861a:	4453      	add	r3, sl
 800861c:	9309      	str	r3, [sp, #36]	; 0x24
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	46b9      	mov	r9, r7
 8008626:	9308      	str	r3, [sp, #32]
 8008628:	4607      	mov	r7, r0
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	4621      	mov	r1, r4
 800862e:	3b01      	subs	r3, #1
 8008630:	4628      	mov	r0, r5
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	f7ff fad6 	bl	8007be4 <quorem>
 8008638:	4603      	mov	r3, r0
 800863a:	3330      	adds	r3, #48	; 0x30
 800863c:	9006      	str	r0, [sp, #24]
 800863e:	4649      	mov	r1, r9
 8008640:	4628      	mov	r0, r5
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	f000 fb7a 	bl	8008d3c <__mcmp>
 8008648:	463a      	mov	r2, r7
 800864a:	4682      	mov	sl, r0
 800864c:	4621      	mov	r1, r4
 800864e:	4630      	mov	r0, r6
 8008650:	f000 fb90 	bl	8008d74 <__mdiff>
 8008654:	68c2      	ldr	r2, [r0, #12]
 8008656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008658:	4680      	mov	r8, r0
 800865a:	bb0a      	cbnz	r2, 80086a0 <_dtoa_r+0x9a0>
 800865c:	4601      	mov	r1, r0
 800865e:	4628      	mov	r0, r5
 8008660:	f000 fb6c 	bl	8008d3c <__mcmp>
 8008664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008666:	4602      	mov	r2, r0
 8008668:	4641      	mov	r1, r8
 800866a:	4630      	mov	r0, r6
 800866c:	920e      	str	r2, [sp, #56]	; 0x38
 800866e:	930a      	str	r3, [sp, #40]	; 0x28
 8008670:	f000 f926 	bl	80088c0 <_Bfree>
 8008674:	9b07      	ldr	r3, [sp, #28]
 8008676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008678:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800867c:	ea43 0102 	orr.w	r1, r3, r2
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	430b      	orrs	r3, r1
 8008684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008686:	d10d      	bne.n	80086a4 <_dtoa_r+0x9a4>
 8008688:	2b39      	cmp	r3, #57	; 0x39
 800868a:	d029      	beq.n	80086e0 <_dtoa_r+0x9e0>
 800868c:	f1ba 0f00 	cmp.w	sl, #0
 8008690:	dd01      	ble.n	8008696 <_dtoa_r+0x996>
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	3331      	adds	r3, #49	; 0x31
 8008696:	9a02      	ldr	r2, [sp, #8]
 8008698:	7013      	strb	r3, [r2, #0]
 800869a:	e774      	b.n	8008586 <_dtoa_r+0x886>
 800869c:	4638      	mov	r0, r7
 800869e:	e7b8      	b.n	8008612 <_dtoa_r+0x912>
 80086a0:	2201      	movs	r2, #1
 80086a2:	e7e1      	b.n	8008668 <_dtoa_r+0x968>
 80086a4:	f1ba 0f00 	cmp.w	sl, #0
 80086a8:	db06      	blt.n	80086b8 <_dtoa_r+0x9b8>
 80086aa:	9907      	ldr	r1, [sp, #28]
 80086ac:	ea41 0a0a 	orr.w	sl, r1, sl
 80086b0:	9908      	ldr	r1, [sp, #32]
 80086b2:	ea5a 0101 	orrs.w	r1, sl, r1
 80086b6:	d120      	bne.n	80086fa <_dtoa_r+0x9fa>
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	ddec      	ble.n	8008696 <_dtoa_r+0x996>
 80086bc:	4629      	mov	r1, r5
 80086be:	2201      	movs	r2, #1
 80086c0:	4630      	mov	r0, r6
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	f000 face 	bl	8008c64 <__lshift>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4605      	mov	r5, r0
 80086cc:	f000 fb36 	bl	8008d3c <__mcmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	dc02      	bgt.n	80086dc <_dtoa_r+0x9dc>
 80086d6:	d1de      	bne.n	8008696 <_dtoa_r+0x996>
 80086d8:	07da      	lsls	r2, r3, #31
 80086da:	d5dc      	bpl.n	8008696 <_dtoa_r+0x996>
 80086dc:	2b39      	cmp	r3, #57	; 0x39
 80086de:	d1d8      	bne.n	8008692 <_dtoa_r+0x992>
 80086e0:	9a02      	ldr	r2, [sp, #8]
 80086e2:	2339      	movs	r3, #57	; 0x39
 80086e4:	7013      	strb	r3, [r2, #0]
 80086e6:	4643      	mov	r3, r8
 80086e8:	4698      	mov	r8, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80086f0:	2a39      	cmp	r2, #57	; 0x39
 80086f2:	d051      	beq.n	8008798 <_dtoa_r+0xa98>
 80086f4:	3201      	adds	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]
 80086f8:	e745      	b.n	8008586 <_dtoa_r+0x886>
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	dd03      	ble.n	8008706 <_dtoa_r+0xa06>
 80086fe:	2b39      	cmp	r3, #57	; 0x39
 8008700:	d0ee      	beq.n	80086e0 <_dtoa_r+0x9e0>
 8008702:	3301      	adds	r3, #1
 8008704:	e7c7      	b.n	8008696 <_dtoa_r+0x996>
 8008706:	9a05      	ldr	r2, [sp, #20]
 8008708:	9909      	ldr	r1, [sp, #36]	; 0x24
 800870a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800870e:	428a      	cmp	r2, r1
 8008710:	d02b      	beq.n	800876a <_dtoa_r+0xa6a>
 8008712:	4629      	mov	r1, r5
 8008714:	2300      	movs	r3, #0
 8008716:	220a      	movs	r2, #10
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f8f3 	bl	8008904 <__multadd>
 800871e:	45b9      	cmp	r9, r7
 8008720:	4605      	mov	r5, r0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	f04f 020a 	mov.w	r2, #10
 800872a:	4649      	mov	r1, r9
 800872c:	4630      	mov	r0, r6
 800872e:	d107      	bne.n	8008740 <_dtoa_r+0xa40>
 8008730:	f000 f8e8 	bl	8008904 <__multadd>
 8008734:	4681      	mov	r9, r0
 8008736:	4607      	mov	r7, r0
 8008738:	9b05      	ldr	r3, [sp, #20]
 800873a:	3301      	adds	r3, #1
 800873c:	9305      	str	r3, [sp, #20]
 800873e:	e774      	b.n	800862a <_dtoa_r+0x92a>
 8008740:	f000 f8e0 	bl	8008904 <__multadd>
 8008744:	4639      	mov	r1, r7
 8008746:	4681      	mov	r9, r0
 8008748:	2300      	movs	r3, #0
 800874a:	220a      	movs	r2, #10
 800874c:	4630      	mov	r0, r6
 800874e:	f000 f8d9 	bl	8008904 <__multadd>
 8008752:	4607      	mov	r7, r0
 8008754:	e7f0      	b.n	8008738 <_dtoa_r+0xa38>
 8008756:	f1ba 0f00 	cmp.w	sl, #0
 800875a:	9a00      	ldr	r2, [sp, #0]
 800875c:	bfcc      	ite	gt
 800875e:	46d0      	movgt	r8, sl
 8008760:	f04f 0801 	movle.w	r8, #1
 8008764:	4490      	add	r8, r2
 8008766:	f04f 0900 	mov.w	r9, #0
 800876a:	4629      	mov	r1, r5
 800876c:	2201      	movs	r2, #1
 800876e:	4630      	mov	r0, r6
 8008770:	9302      	str	r3, [sp, #8]
 8008772:	f000 fa77 	bl	8008c64 <__lshift>
 8008776:	4621      	mov	r1, r4
 8008778:	4605      	mov	r5, r0
 800877a:	f000 fadf 	bl	8008d3c <__mcmp>
 800877e:	2800      	cmp	r0, #0
 8008780:	dcb1      	bgt.n	80086e6 <_dtoa_r+0x9e6>
 8008782:	d102      	bne.n	800878a <_dtoa_r+0xa8a>
 8008784:	9b02      	ldr	r3, [sp, #8]
 8008786:	07db      	lsls	r3, r3, #31
 8008788:	d4ad      	bmi.n	80086e6 <_dtoa_r+0x9e6>
 800878a:	4643      	mov	r3, r8
 800878c:	4698      	mov	r8, r3
 800878e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008792:	2a30      	cmp	r2, #48	; 0x30
 8008794:	d0fa      	beq.n	800878c <_dtoa_r+0xa8c>
 8008796:	e6f6      	b.n	8008586 <_dtoa_r+0x886>
 8008798:	9a00      	ldr	r2, [sp, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d1a4      	bne.n	80086e8 <_dtoa_r+0x9e8>
 800879e:	f10b 0b01 	add.w	fp, fp, #1
 80087a2:	2331      	movs	r3, #49	; 0x31
 80087a4:	e778      	b.n	8008698 <_dtoa_r+0x998>
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <_dtoa_r+0xafc>)
 80087a8:	f7ff bb12 	b.w	8007dd0 <_dtoa_r+0xd0>
 80087ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f47f aaee 	bne.w	8007d90 <_dtoa_r+0x90>
 80087b4:	4b12      	ldr	r3, [pc, #72]	; (8008800 <_dtoa_r+0xb00>)
 80087b6:	f7ff bb0b 	b.w	8007dd0 <_dtoa_r+0xd0>
 80087ba:	f1ba 0f00 	cmp.w	sl, #0
 80087be:	dc03      	bgt.n	80087c8 <_dtoa_r+0xac8>
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	f73f aec7 	bgt.w	8008556 <_dtoa_r+0x856>
 80087c8:	f8dd 8000 	ldr.w	r8, [sp]
 80087cc:	4621      	mov	r1, r4
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7ff fa08 	bl	8007be4 <quorem>
 80087d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80087d8:	f808 3b01 	strb.w	r3, [r8], #1
 80087dc:	9a00      	ldr	r2, [sp, #0]
 80087de:	eba8 0202 	sub.w	r2, r8, r2
 80087e2:	4592      	cmp	sl, r2
 80087e4:	ddb7      	ble.n	8008756 <_dtoa_r+0xa56>
 80087e6:	4629      	mov	r1, r5
 80087e8:	2300      	movs	r3, #0
 80087ea:	220a      	movs	r2, #10
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 f889 	bl	8008904 <__multadd>
 80087f2:	4605      	mov	r5, r0
 80087f4:	e7ea      	b.n	80087cc <_dtoa_r+0xacc>
 80087f6:	bf00      	nop
 80087f8:	08009b5b 	.word	0x08009b5b
 80087fc:	08009ab4 	.word	0x08009ab4
 8008800:	08009ad8 	.word	0x08009ad8

08008804 <_localeconv_r>:
 8008804:	4800      	ldr	r0, [pc, #0]	; (8008808 <_localeconv_r+0x4>)
 8008806:	4770      	bx	lr
 8008808:	200001bc 	.word	0x200001bc

0800880c <memcpy>:
 800880c:	440a      	add	r2, r1
 800880e:	4291      	cmp	r1, r2
 8008810:	f100 33ff 	add.w	r3, r0, #4294967295
 8008814:	d100      	bne.n	8008818 <memcpy+0xc>
 8008816:	4770      	bx	lr
 8008818:	b510      	push	{r4, lr}
 800881a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800881e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008822:	4291      	cmp	r1, r2
 8008824:	d1f9      	bne.n	800881a <memcpy+0xe>
 8008826:	bd10      	pop	{r4, pc}

08008828 <__malloc_lock>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__malloc_lock+0x8>)
 800882a:	f000 bbc8 	b.w	8008fbe <__retarget_lock_acquire_recursive>
 800882e:	bf00      	nop
 8008830:	200007b0 	.word	0x200007b0

08008834 <__malloc_unlock>:
 8008834:	4801      	ldr	r0, [pc, #4]	; (800883c <__malloc_unlock+0x8>)
 8008836:	f000 bbc3 	b.w	8008fc0 <__retarget_lock_release_recursive>
 800883a:	bf00      	nop
 800883c:	200007b0 	.word	0x200007b0

08008840 <_Balloc>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	b976      	cbnz	r6, 8008868 <_Balloc+0x28>
 800884a:	2010      	movs	r0, #16
 800884c:	f7fe fcbe 	bl	80071cc <malloc>
 8008850:	4602      	mov	r2, r0
 8008852:	6260      	str	r0, [r4, #36]	; 0x24
 8008854:	b920      	cbnz	r0, 8008860 <_Balloc+0x20>
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <_Balloc+0x78>)
 8008858:	4818      	ldr	r0, [pc, #96]	; (80088bc <_Balloc+0x7c>)
 800885a:	2166      	movs	r1, #102	; 0x66
 800885c:	f000 fb7e 	bl	8008f5c <__assert_func>
 8008860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008864:	6006      	str	r6, [r0, #0]
 8008866:	60c6      	str	r6, [r0, #12]
 8008868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800886a:	68f3      	ldr	r3, [r6, #12]
 800886c:	b183      	cbz	r3, 8008890 <_Balloc+0x50>
 800886e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008876:	b9b8      	cbnz	r0, 80088a8 <_Balloc+0x68>
 8008878:	2101      	movs	r1, #1
 800887a:	fa01 f605 	lsl.w	r6, r1, r5
 800887e:	1d72      	adds	r2, r6, #5
 8008880:	0092      	lsls	r2, r2, #2
 8008882:	4620      	mov	r0, r4
 8008884:	f000 fb5a 	bl	8008f3c <_calloc_r>
 8008888:	b160      	cbz	r0, 80088a4 <_Balloc+0x64>
 800888a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800888e:	e00e      	b.n	80088ae <_Balloc+0x6e>
 8008890:	2221      	movs	r2, #33	; 0x21
 8008892:	2104      	movs	r1, #4
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fb51 	bl	8008f3c <_calloc_r>
 800889a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800889c:	60f0      	str	r0, [r6, #12]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e4      	bne.n	800886e <_Balloc+0x2e>
 80088a4:	2000      	movs	r0, #0
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	6802      	ldr	r2, [r0, #0]
 80088aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088ae:	2300      	movs	r3, #0
 80088b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088b4:	e7f7      	b.n	80088a6 <_Balloc+0x66>
 80088b6:	bf00      	nop
 80088b8:	08009ae5 	.word	0x08009ae5
 80088bc:	08009b6c 	.word	0x08009b6c

080088c0 <_Bfree>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088c4:	4605      	mov	r5, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b976      	cbnz	r6, 80088e8 <_Bfree+0x28>
 80088ca:	2010      	movs	r0, #16
 80088cc:	f7fe fc7e 	bl	80071cc <malloc>
 80088d0:	4602      	mov	r2, r0
 80088d2:	6268      	str	r0, [r5, #36]	; 0x24
 80088d4:	b920      	cbnz	r0, 80088e0 <_Bfree+0x20>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <_Bfree+0x3c>)
 80088d8:	4809      	ldr	r0, [pc, #36]	; (8008900 <_Bfree+0x40>)
 80088da:	218a      	movs	r1, #138	; 0x8a
 80088dc:	f000 fb3e 	bl	8008f5c <__assert_func>
 80088e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e4:	6006      	str	r6, [r0, #0]
 80088e6:	60c6      	str	r6, [r0, #12]
 80088e8:	b13c      	cbz	r4, 80088fa <_Bfree+0x3a>
 80088ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088ec:	6862      	ldr	r2, [r4, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088f4:	6021      	str	r1, [r4, #0]
 80088f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	08009ae5 	.word	0x08009ae5
 8008900:	08009b6c 	.word	0x08009b6c

08008904 <__multadd>:
 8008904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008908:	690e      	ldr	r6, [r1, #16]
 800890a:	4607      	mov	r7, r0
 800890c:	4698      	mov	r8, r3
 800890e:	460c      	mov	r4, r1
 8008910:	f101 0014 	add.w	r0, r1, #20
 8008914:	2300      	movs	r3, #0
 8008916:	6805      	ldr	r5, [r0, #0]
 8008918:	b2a9      	uxth	r1, r5
 800891a:	fb02 8101 	mla	r1, r2, r1, r8
 800891e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008922:	0c2d      	lsrs	r5, r5, #16
 8008924:	fb02 c505 	mla	r5, r2, r5, ip
 8008928:	b289      	uxth	r1, r1
 800892a:	3301      	adds	r3, #1
 800892c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008930:	429e      	cmp	r6, r3
 8008932:	f840 1b04 	str.w	r1, [r0], #4
 8008936:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800893a:	dcec      	bgt.n	8008916 <__multadd+0x12>
 800893c:	f1b8 0f00 	cmp.w	r8, #0
 8008940:	d022      	beq.n	8008988 <__multadd+0x84>
 8008942:	68a3      	ldr	r3, [r4, #8]
 8008944:	42b3      	cmp	r3, r6
 8008946:	dc19      	bgt.n	800897c <__multadd+0x78>
 8008948:	6861      	ldr	r1, [r4, #4]
 800894a:	4638      	mov	r0, r7
 800894c:	3101      	adds	r1, #1
 800894e:	f7ff ff77 	bl	8008840 <_Balloc>
 8008952:	4605      	mov	r5, r0
 8008954:	b928      	cbnz	r0, 8008962 <__multadd+0x5e>
 8008956:	4602      	mov	r2, r0
 8008958:	4b0d      	ldr	r3, [pc, #52]	; (8008990 <__multadd+0x8c>)
 800895a:	480e      	ldr	r0, [pc, #56]	; (8008994 <__multadd+0x90>)
 800895c:	21b5      	movs	r1, #181	; 0xb5
 800895e:	f000 fafd 	bl	8008f5c <__assert_func>
 8008962:	6922      	ldr	r2, [r4, #16]
 8008964:	3202      	adds	r2, #2
 8008966:	f104 010c 	add.w	r1, r4, #12
 800896a:	0092      	lsls	r2, r2, #2
 800896c:	300c      	adds	r0, #12
 800896e:	f7ff ff4d 	bl	800880c <memcpy>
 8008972:	4621      	mov	r1, r4
 8008974:	4638      	mov	r0, r7
 8008976:	f7ff ffa3 	bl	80088c0 <_Bfree>
 800897a:	462c      	mov	r4, r5
 800897c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008980:	3601      	adds	r6, #1
 8008982:	f8c3 8014 	str.w	r8, [r3, #20]
 8008986:	6126      	str	r6, [r4, #16]
 8008988:	4620      	mov	r0, r4
 800898a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898e:	bf00      	nop
 8008990:	08009b5b 	.word	0x08009b5b
 8008994:	08009b6c 	.word	0x08009b6c

08008998 <__hi0bits>:
 8008998:	0c03      	lsrs	r3, r0, #16
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	b9d3      	cbnz	r3, 80089d4 <__hi0bits+0x3c>
 800899e:	0400      	lsls	r0, r0, #16
 80089a0:	2310      	movs	r3, #16
 80089a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089a6:	bf04      	itt	eq
 80089a8:	0200      	lsleq	r0, r0, #8
 80089aa:	3308      	addeq	r3, #8
 80089ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089b0:	bf04      	itt	eq
 80089b2:	0100      	lsleq	r0, r0, #4
 80089b4:	3304      	addeq	r3, #4
 80089b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089ba:	bf04      	itt	eq
 80089bc:	0080      	lsleq	r0, r0, #2
 80089be:	3302      	addeq	r3, #2
 80089c0:	2800      	cmp	r0, #0
 80089c2:	db05      	blt.n	80089d0 <__hi0bits+0x38>
 80089c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089c8:	f103 0301 	add.w	r3, r3, #1
 80089cc:	bf08      	it	eq
 80089ce:	2320      	moveq	r3, #32
 80089d0:	4618      	mov	r0, r3
 80089d2:	4770      	bx	lr
 80089d4:	2300      	movs	r3, #0
 80089d6:	e7e4      	b.n	80089a2 <__hi0bits+0xa>

080089d8 <__lo0bits>:
 80089d8:	6803      	ldr	r3, [r0, #0]
 80089da:	f013 0207 	ands.w	r2, r3, #7
 80089de:	4601      	mov	r1, r0
 80089e0:	d00b      	beq.n	80089fa <__lo0bits+0x22>
 80089e2:	07da      	lsls	r2, r3, #31
 80089e4:	d424      	bmi.n	8008a30 <__lo0bits+0x58>
 80089e6:	0798      	lsls	r0, r3, #30
 80089e8:	bf49      	itett	mi
 80089ea:	085b      	lsrmi	r3, r3, #1
 80089ec:	089b      	lsrpl	r3, r3, #2
 80089ee:	2001      	movmi	r0, #1
 80089f0:	600b      	strmi	r3, [r1, #0]
 80089f2:	bf5c      	itt	pl
 80089f4:	600b      	strpl	r3, [r1, #0]
 80089f6:	2002      	movpl	r0, #2
 80089f8:	4770      	bx	lr
 80089fa:	b298      	uxth	r0, r3
 80089fc:	b9b0      	cbnz	r0, 8008a2c <__lo0bits+0x54>
 80089fe:	0c1b      	lsrs	r3, r3, #16
 8008a00:	2010      	movs	r0, #16
 8008a02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a06:	bf04      	itt	eq
 8008a08:	0a1b      	lsreq	r3, r3, #8
 8008a0a:	3008      	addeq	r0, #8
 8008a0c:	071a      	lsls	r2, r3, #28
 8008a0e:	bf04      	itt	eq
 8008a10:	091b      	lsreq	r3, r3, #4
 8008a12:	3004      	addeq	r0, #4
 8008a14:	079a      	lsls	r2, r3, #30
 8008a16:	bf04      	itt	eq
 8008a18:	089b      	lsreq	r3, r3, #2
 8008a1a:	3002      	addeq	r0, #2
 8008a1c:	07da      	lsls	r2, r3, #31
 8008a1e:	d403      	bmi.n	8008a28 <__lo0bits+0x50>
 8008a20:	085b      	lsrs	r3, r3, #1
 8008a22:	f100 0001 	add.w	r0, r0, #1
 8008a26:	d005      	beq.n	8008a34 <__lo0bits+0x5c>
 8008a28:	600b      	str	r3, [r1, #0]
 8008a2a:	4770      	bx	lr
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	e7e8      	b.n	8008a02 <__lo0bits+0x2a>
 8008a30:	2000      	movs	r0, #0
 8008a32:	4770      	bx	lr
 8008a34:	2020      	movs	r0, #32
 8008a36:	4770      	bx	lr

08008a38 <__i2b>:
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	460c      	mov	r4, r1
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	f7ff feff 	bl	8008840 <_Balloc>
 8008a42:	4602      	mov	r2, r0
 8008a44:	b928      	cbnz	r0, 8008a52 <__i2b+0x1a>
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <__i2b+0x24>)
 8008a48:	4805      	ldr	r0, [pc, #20]	; (8008a60 <__i2b+0x28>)
 8008a4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a4e:	f000 fa85 	bl	8008f5c <__assert_func>
 8008a52:	2301      	movs	r3, #1
 8008a54:	6144      	str	r4, [r0, #20]
 8008a56:	6103      	str	r3, [r0, #16]
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08009b5b 	.word	0x08009b5b
 8008a60:	08009b6c 	.word	0x08009b6c

08008a64 <__multiply>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	4614      	mov	r4, r2
 8008a6a:	690a      	ldr	r2, [r1, #16]
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	bfb8      	it	lt
 8008a72:	460b      	movlt	r3, r1
 8008a74:	460d      	mov	r5, r1
 8008a76:	bfbc      	itt	lt
 8008a78:	4625      	movlt	r5, r4
 8008a7a:	461c      	movlt	r4, r3
 8008a7c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a80:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a84:	68ab      	ldr	r3, [r5, #8]
 8008a86:	6869      	ldr	r1, [r5, #4]
 8008a88:	eb0a 0709 	add.w	r7, sl, r9
 8008a8c:	42bb      	cmp	r3, r7
 8008a8e:	b085      	sub	sp, #20
 8008a90:	bfb8      	it	lt
 8008a92:	3101      	addlt	r1, #1
 8008a94:	f7ff fed4 	bl	8008840 <_Balloc>
 8008a98:	b930      	cbnz	r0, 8008aa8 <__multiply+0x44>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	4b42      	ldr	r3, [pc, #264]	; (8008ba8 <__multiply+0x144>)
 8008a9e:	4843      	ldr	r0, [pc, #268]	; (8008bac <__multiply+0x148>)
 8008aa0:	f240 115d 	movw	r1, #349	; 0x15d
 8008aa4:	f000 fa5a 	bl	8008f5c <__assert_func>
 8008aa8:	f100 0614 	add.w	r6, r0, #20
 8008aac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ab0:	4633      	mov	r3, r6
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4543      	cmp	r3, r8
 8008ab6:	d31e      	bcc.n	8008af6 <__multiply+0x92>
 8008ab8:	f105 0c14 	add.w	ip, r5, #20
 8008abc:	f104 0314 	add.w	r3, r4, #20
 8008ac0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ac4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ac8:	9202      	str	r2, [sp, #8]
 8008aca:	ebac 0205 	sub.w	r2, ip, r5
 8008ace:	3a15      	subs	r2, #21
 8008ad0:	f022 0203 	bic.w	r2, r2, #3
 8008ad4:	3204      	adds	r2, #4
 8008ad6:	f105 0115 	add.w	r1, r5, #21
 8008ada:	458c      	cmp	ip, r1
 8008adc:	bf38      	it	cc
 8008ade:	2204      	movcc	r2, #4
 8008ae0:	9201      	str	r2, [sp, #4]
 8008ae2:	9a02      	ldr	r2, [sp, #8]
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d808      	bhi.n	8008afc <__multiply+0x98>
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	dc55      	bgt.n	8008b9a <__multiply+0x136>
 8008aee:	6107      	str	r7, [r0, #16]
 8008af0:	b005      	add	sp, #20
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	f843 2b04 	str.w	r2, [r3], #4
 8008afa:	e7db      	b.n	8008ab4 <__multiply+0x50>
 8008afc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b00:	f1ba 0f00 	cmp.w	sl, #0
 8008b04:	d020      	beq.n	8008b48 <__multiply+0xe4>
 8008b06:	f105 0e14 	add.w	lr, r5, #20
 8008b0a:	46b1      	mov	r9, r6
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b12:	f8d9 b000 	ldr.w	fp, [r9]
 8008b16:	b2a1      	uxth	r1, r4
 8008b18:	fa1f fb8b 	uxth.w	fp, fp
 8008b1c:	fb0a b101 	mla	r1, sl, r1, fp
 8008b20:	4411      	add	r1, r2
 8008b22:	f8d9 2000 	ldr.w	r2, [r9]
 8008b26:	0c24      	lsrs	r4, r4, #16
 8008b28:	0c12      	lsrs	r2, r2, #16
 8008b2a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b32:	b289      	uxth	r1, r1
 8008b34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b38:	45f4      	cmp	ip, lr
 8008b3a:	f849 1b04 	str.w	r1, [r9], #4
 8008b3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b42:	d8e4      	bhi.n	8008b0e <__multiply+0xaa>
 8008b44:	9901      	ldr	r1, [sp, #4]
 8008b46:	5072      	str	r2, [r6, r1]
 8008b48:	9a03      	ldr	r2, [sp, #12]
 8008b4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	f1b9 0f00 	cmp.w	r9, #0
 8008b54:	d01f      	beq.n	8008b96 <__multiply+0x132>
 8008b56:	6834      	ldr	r4, [r6, #0]
 8008b58:	f105 0114 	add.w	r1, r5, #20
 8008b5c:	46b6      	mov	lr, r6
 8008b5e:	f04f 0a00 	mov.w	sl, #0
 8008b62:	880a      	ldrh	r2, [r1, #0]
 8008b64:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b68:	fb09 b202 	mla	r2, r9, r2, fp
 8008b6c:	4492      	add	sl, r2
 8008b6e:	b2a4      	uxth	r4, r4
 8008b70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b74:	f84e 4b04 	str.w	r4, [lr], #4
 8008b78:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b7c:	f8be 2000 	ldrh.w	r2, [lr]
 8008b80:	0c24      	lsrs	r4, r4, #16
 8008b82:	fb09 2404 	mla	r4, r9, r4, r2
 8008b86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008b8a:	458c      	cmp	ip, r1
 8008b8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008b90:	d8e7      	bhi.n	8008b62 <__multiply+0xfe>
 8008b92:	9a01      	ldr	r2, [sp, #4]
 8008b94:	50b4      	str	r4, [r6, r2]
 8008b96:	3604      	adds	r6, #4
 8008b98:	e7a3      	b.n	8008ae2 <__multiply+0x7e>
 8008b9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1a5      	bne.n	8008aee <__multiply+0x8a>
 8008ba2:	3f01      	subs	r7, #1
 8008ba4:	e7a1      	b.n	8008aea <__multiply+0x86>
 8008ba6:	bf00      	nop
 8008ba8:	08009b5b 	.word	0x08009b5b
 8008bac:	08009b6c 	.word	0x08009b6c

08008bb0 <__pow5mult>:
 8008bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	4615      	mov	r5, r2
 8008bb6:	f012 0203 	ands.w	r2, r2, #3
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	d007      	beq.n	8008bd0 <__pow5mult+0x20>
 8008bc0:	4c25      	ldr	r4, [pc, #148]	; (8008c58 <__pow5mult+0xa8>)
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bca:	f7ff fe9b 	bl	8008904 <__multadd>
 8008bce:	4607      	mov	r7, r0
 8008bd0:	10ad      	asrs	r5, r5, #2
 8008bd2:	d03d      	beq.n	8008c50 <__pow5mult+0xa0>
 8008bd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bd6:	b97c      	cbnz	r4, 8008bf8 <__pow5mult+0x48>
 8008bd8:	2010      	movs	r0, #16
 8008bda:	f7fe faf7 	bl	80071cc <malloc>
 8008bde:	4602      	mov	r2, r0
 8008be0:	6270      	str	r0, [r6, #36]	; 0x24
 8008be2:	b928      	cbnz	r0, 8008bf0 <__pow5mult+0x40>
 8008be4:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <__pow5mult+0xac>)
 8008be6:	481e      	ldr	r0, [pc, #120]	; (8008c60 <__pow5mult+0xb0>)
 8008be8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bec:	f000 f9b6 	bl	8008f5c <__assert_func>
 8008bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bf4:	6004      	str	r4, [r0, #0]
 8008bf6:	60c4      	str	r4, [r0, #12]
 8008bf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c00:	b94c      	cbnz	r4, 8008c16 <__pow5mult+0x66>
 8008c02:	f240 2171 	movw	r1, #625	; 0x271
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ff16 	bl	8008a38 <__i2b>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c12:	4604      	mov	r4, r0
 8008c14:	6003      	str	r3, [r0, #0]
 8008c16:	f04f 0900 	mov.w	r9, #0
 8008c1a:	07eb      	lsls	r3, r5, #31
 8008c1c:	d50a      	bpl.n	8008c34 <__pow5mult+0x84>
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4622      	mov	r2, r4
 8008c22:	4630      	mov	r0, r6
 8008c24:	f7ff ff1e 	bl	8008a64 <__multiply>
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff fe47 	bl	80088c0 <_Bfree>
 8008c32:	4647      	mov	r7, r8
 8008c34:	106d      	asrs	r5, r5, #1
 8008c36:	d00b      	beq.n	8008c50 <__pow5mult+0xa0>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	b938      	cbnz	r0, 8008c4c <__pow5mult+0x9c>
 8008c3c:	4622      	mov	r2, r4
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7ff ff0f 	bl	8008a64 <__multiply>
 8008c46:	6020      	str	r0, [r4, #0]
 8008c48:	f8c0 9000 	str.w	r9, [r0]
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e7e4      	b.n	8008c1a <__pow5mult+0x6a>
 8008c50:	4638      	mov	r0, r7
 8008c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c56:	bf00      	nop
 8008c58:	08009cc0 	.word	0x08009cc0
 8008c5c:	08009ae5 	.word	0x08009ae5
 8008c60:	08009b6c 	.word	0x08009b6c

08008c64 <__lshift>:
 8008c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c68:	460c      	mov	r4, r1
 8008c6a:	6849      	ldr	r1, [r1, #4]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	4607      	mov	r7, r0
 8008c76:	4691      	mov	r9, r2
 8008c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c7c:	f108 0601 	add.w	r6, r8, #1
 8008c80:	42b3      	cmp	r3, r6
 8008c82:	db0b      	blt.n	8008c9c <__lshift+0x38>
 8008c84:	4638      	mov	r0, r7
 8008c86:	f7ff fddb 	bl	8008840 <_Balloc>
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b948      	cbnz	r0, 8008ca2 <__lshift+0x3e>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	4b28      	ldr	r3, [pc, #160]	; (8008d34 <__lshift+0xd0>)
 8008c92:	4829      	ldr	r0, [pc, #164]	; (8008d38 <__lshift+0xd4>)
 8008c94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c98:	f000 f960 	bl	8008f5c <__assert_func>
 8008c9c:	3101      	adds	r1, #1
 8008c9e:	005b      	lsls	r3, r3, #1
 8008ca0:	e7ee      	b.n	8008c80 <__lshift+0x1c>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f100 0114 	add.w	r1, r0, #20
 8008ca8:	f100 0210 	add.w	r2, r0, #16
 8008cac:	4618      	mov	r0, r3
 8008cae:	4553      	cmp	r3, sl
 8008cb0:	db33      	blt.n	8008d1a <__lshift+0xb6>
 8008cb2:	6920      	ldr	r0, [r4, #16]
 8008cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cb8:	f104 0314 	add.w	r3, r4, #20
 8008cbc:	f019 091f 	ands.w	r9, r9, #31
 8008cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cc8:	d02b      	beq.n	8008d22 <__lshift+0xbe>
 8008cca:	f1c9 0e20 	rsb	lr, r9, #32
 8008cce:	468a      	mov	sl, r1
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cd8:	4302      	orrs	r2, r0
 8008cda:	f84a 2b04 	str.w	r2, [sl], #4
 8008cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce2:	459c      	cmp	ip, r3
 8008ce4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ce8:	d8f3      	bhi.n	8008cd2 <__lshift+0x6e>
 8008cea:	ebac 0304 	sub.w	r3, ip, r4
 8008cee:	3b15      	subs	r3, #21
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	f104 0015 	add.w	r0, r4, #21
 8008cfa:	4584      	cmp	ip, r0
 8008cfc:	bf38      	it	cc
 8008cfe:	2304      	movcc	r3, #4
 8008d00:	50ca      	str	r2, [r1, r3]
 8008d02:	b10a      	cbz	r2, 8008d08 <__lshift+0xa4>
 8008d04:	f108 0602 	add.w	r6, r8, #2
 8008d08:	3e01      	subs	r6, #1
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	612e      	str	r6, [r5, #16]
 8008d0e:	4621      	mov	r1, r4
 8008d10:	f7ff fdd6 	bl	80088c0 <_Bfree>
 8008d14:	4628      	mov	r0, r5
 8008d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d1e:	3301      	adds	r3, #1
 8008d20:	e7c5      	b.n	8008cae <__lshift+0x4a>
 8008d22:	3904      	subs	r1, #4
 8008d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d2c:	459c      	cmp	ip, r3
 8008d2e:	d8f9      	bhi.n	8008d24 <__lshift+0xc0>
 8008d30:	e7ea      	b.n	8008d08 <__lshift+0xa4>
 8008d32:	bf00      	nop
 8008d34:	08009b5b 	.word	0x08009b5b
 8008d38:	08009b6c 	.word	0x08009b6c

08008d3c <__mcmp>:
 8008d3c:	b530      	push	{r4, r5, lr}
 8008d3e:	6902      	ldr	r2, [r0, #16]
 8008d40:	690c      	ldr	r4, [r1, #16]
 8008d42:	1b12      	subs	r2, r2, r4
 8008d44:	d10e      	bne.n	8008d64 <__mcmp+0x28>
 8008d46:	f100 0314 	add.w	r3, r0, #20
 8008d4a:	3114      	adds	r1, #20
 8008d4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d5c:	42a5      	cmp	r5, r4
 8008d5e:	d003      	beq.n	8008d68 <__mcmp+0x2c>
 8008d60:	d305      	bcc.n	8008d6e <__mcmp+0x32>
 8008d62:	2201      	movs	r2, #1
 8008d64:	4610      	mov	r0, r2
 8008d66:	bd30      	pop	{r4, r5, pc}
 8008d68:	4283      	cmp	r3, r0
 8008d6a:	d3f3      	bcc.n	8008d54 <__mcmp+0x18>
 8008d6c:	e7fa      	b.n	8008d64 <__mcmp+0x28>
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	e7f7      	b.n	8008d64 <__mcmp+0x28>

08008d74 <__mdiff>:
 8008d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	460c      	mov	r4, r1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4617      	mov	r7, r2
 8008d82:	f7ff ffdb 	bl	8008d3c <__mcmp>
 8008d86:	1e05      	subs	r5, r0, #0
 8008d88:	d110      	bne.n	8008dac <__mdiff+0x38>
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	f7ff fd57 	bl	8008840 <_Balloc>
 8008d92:	b930      	cbnz	r0, 8008da2 <__mdiff+0x2e>
 8008d94:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <__mdiff+0x108>)
 8008d96:	4602      	mov	r2, r0
 8008d98:	f240 2132 	movw	r1, #562	; 0x232
 8008d9c:	4838      	ldr	r0, [pc, #224]	; (8008e80 <__mdiff+0x10c>)
 8008d9e:	f000 f8dd 	bl	8008f5c <__assert_func>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dac:	bfa4      	itt	ge
 8008dae:	463b      	movge	r3, r7
 8008db0:	4627      	movge	r7, r4
 8008db2:	4630      	mov	r0, r6
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	bfa6      	itte	ge
 8008db8:	461c      	movge	r4, r3
 8008dba:	2500      	movge	r5, #0
 8008dbc:	2501      	movlt	r5, #1
 8008dbe:	f7ff fd3f 	bl	8008840 <_Balloc>
 8008dc2:	b920      	cbnz	r0, 8008dce <__mdiff+0x5a>
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	; (8008e7c <__mdiff+0x108>)
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dcc:	e7e6      	b.n	8008d9c <__mdiff+0x28>
 8008dce:	693e      	ldr	r6, [r7, #16]
 8008dd0:	60c5      	str	r5, [r0, #12]
 8008dd2:	6925      	ldr	r5, [r4, #16]
 8008dd4:	f107 0114 	add.w	r1, r7, #20
 8008dd8:	f104 0914 	add.w	r9, r4, #20
 8008ddc:	f100 0e14 	add.w	lr, r0, #20
 8008de0:	f107 0210 	add.w	r2, r7, #16
 8008de4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008de8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008dec:	46f2      	mov	sl, lr
 8008dee:	2700      	movs	r7, #0
 8008df0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008df4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008df8:	fa1f f883 	uxth.w	r8, r3
 8008dfc:	fa17 f78b 	uxtah	r7, r7, fp
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	eba7 0808 	sub.w	r8, r7, r8
 8008e06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e0e:	fa1f f888 	uxth.w	r8, r8
 8008e12:	141f      	asrs	r7, r3, #16
 8008e14:	454d      	cmp	r5, r9
 8008e16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e1a:	f84a 3b04 	str.w	r3, [sl], #4
 8008e1e:	d8e7      	bhi.n	8008df0 <__mdiff+0x7c>
 8008e20:	1b2b      	subs	r3, r5, r4
 8008e22:	3b15      	subs	r3, #21
 8008e24:	f023 0303 	bic.w	r3, r3, #3
 8008e28:	3304      	adds	r3, #4
 8008e2a:	3415      	adds	r4, #21
 8008e2c:	42a5      	cmp	r5, r4
 8008e2e:	bf38      	it	cc
 8008e30:	2304      	movcc	r3, #4
 8008e32:	4419      	add	r1, r3
 8008e34:	4473      	add	r3, lr
 8008e36:	469e      	mov	lr, r3
 8008e38:	460d      	mov	r5, r1
 8008e3a:	4565      	cmp	r5, ip
 8008e3c:	d30e      	bcc.n	8008e5c <__mdiff+0xe8>
 8008e3e:	f10c 0203 	add.w	r2, ip, #3
 8008e42:	1a52      	subs	r2, r2, r1
 8008e44:	f022 0203 	bic.w	r2, r2, #3
 8008e48:	3903      	subs	r1, #3
 8008e4a:	458c      	cmp	ip, r1
 8008e4c:	bf38      	it	cc
 8008e4e:	2200      	movcc	r2, #0
 8008e50:	441a      	add	r2, r3
 8008e52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e56:	b17b      	cbz	r3, 8008e78 <__mdiff+0x104>
 8008e58:	6106      	str	r6, [r0, #16]
 8008e5a:	e7a5      	b.n	8008da8 <__mdiff+0x34>
 8008e5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e60:	fa17 f488 	uxtah	r4, r7, r8
 8008e64:	1422      	asrs	r2, r4, #16
 8008e66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e6a:	b2a4      	uxth	r4, r4
 8008e6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e70:	f84e 4b04 	str.w	r4, [lr], #4
 8008e74:	1417      	asrs	r7, r2, #16
 8008e76:	e7e0      	b.n	8008e3a <__mdiff+0xc6>
 8008e78:	3e01      	subs	r6, #1
 8008e7a:	e7ea      	b.n	8008e52 <__mdiff+0xde>
 8008e7c:	08009b5b 	.word	0x08009b5b
 8008e80:	08009b6c 	.word	0x08009b6c

08008e84 <__d2b>:
 8008e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	4689      	mov	r9, r1
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	ec57 6b10 	vmov	r6, r7, d0
 8008e90:	4690      	mov	r8, r2
 8008e92:	f7ff fcd5 	bl	8008840 <_Balloc>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b930      	cbnz	r0, 8008ea8 <__d2b+0x24>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <__d2b+0xb0>)
 8008e9e:	4826      	ldr	r0, [pc, #152]	; (8008f38 <__d2b+0xb4>)
 8008ea0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ea4:	f000 f85a 	bl	8008f5c <__assert_func>
 8008ea8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008eac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008eb0:	bb35      	cbnz	r5, 8008f00 <__d2b+0x7c>
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	d028      	beq.n	8008f0a <__d2b+0x86>
 8008eb8:	4668      	mov	r0, sp
 8008eba:	9600      	str	r6, [sp, #0]
 8008ebc:	f7ff fd8c 	bl	80089d8 <__lo0bits>
 8008ec0:	9900      	ldr	r1, [sp, #0]
 8008ec2:	b300      	cbz	r0, 8008f06 <__d2b+0x82>
 8008ec4:	9a01      	ldr	r2, [sp, #4]
 8008ec6:	f1c0 0320 	rsb	r3, r0, #32
 8008eca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	40c2      	lsrs	r2, r0
 8008ed2:	6163      	str	r3, [r4, #20]
 8008ed4:	9201      	str	r2, [sp, #4]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	61a3      	str	r3, [r4, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bf14      	ite	ne
 8008ede:	2202      	movne	r2, #2
 8008ee0:	2201      	moveq	r2, #1
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	b1d5      	cbz	r5, 8008f1c <__d2b+0x98>
 8008ee6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eea:	4405      	add	r5, r0
 8008eec:	f8c9 5000 	str.w	r5, [r9]
 8008ef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ef4:	f8c8 0000 	str.w	r0, [r8]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	b003      	add	sp, #12
 8008efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f04:	e7d5      	b.n	8008eb2 <__d2b+0x2e>
 8008f06:	6161      	str	r1, [r4, #20]
 8008f08:	e7e5      	b.n	8008ed6 <__d2b+0x52>
 8008f0a:	a801      	add	r0, sp, #4
 8008f0c:	f7ff fd64 	bl	80089d8 <__lo0bits>
 8008f10:	9b01      	ldr	r3, [sp, #4]
 8008f12:	6163      	str	r3, [r4, #20]
 8008f14:	2201      	movs	r2, #1
 8008f16:	6122      	str	r2, [r4, #16]
 8008f18:	3020      	adds	r0, #32
 8008f1a:	e7e3      	b.n	8008ee4 <__d2b+0x60>
 8008f1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f24:	f8c9 0000 	str.w	r0, [r9]
 8008f28:	6918      	ldr	r0, [r3, #16]
 8008f2a:	f7ff fd35 	bl	8008998 <__hi0bits>
 8008f2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f32:	e7df      	b.n	8008ef4 <__d2b+0x70>
 8008f34:	08009b5b 	.word	0x08009b5b
 8008f38:	08009b6c 	.word	0x08009b6c

08008f3c <_calloc_r>:
 8008f3c:	b513      	push	{r0, r1, r4, lr}
 8008f3e:	434a      	muls	r2, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	9201      	str	r2, [sp, #4]
 8008f44:	f7fe f9a2 	bl	800728c <_malloc_r>
 8008f48:	4604      	mov	r4, r0
 8008f4a:	b118      	cbz	r0, 8008f54 <_calloc_r+0x18>
 8008f4c:	9a01      	ldr	r2, [sp, #4]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f7fe f944 	bl	80071dc <memset>
 8008f54:	4620      	mov	r0, r4
 8008f56:	b002      	add	sp, #8
 8008f58:	bd10      	pop	{r4, pc}
	...

08008f5c <__assert_func>:
 8008f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f5e:	4614      	mov	r4, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <__assert_func+0x2c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4605      	mov	r5, r0
 8008f68:	68d8      	ldr	r0, [r3, #12]
 8008f6a:	b14c      	cbz	r4, 8008f80 <__assert_func+0x24>
 8008f6c:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <__assert_func+0x30>)
 8008f6e:	9100      	str	r1, [sp, #0]
 8008f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <__assert_func+0x34>)
 8008f76:	462b      	mov	r3, r5
 8008f78:	f000 f80e 	bl	8008f98 <fiprintf>
 8008f7c:	f000 fa5a 	bl	8009434 <abort>
 8008f80:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <__assert_func+0x38>)
 8008f82:	461c      	mov	r4, r3
 8008f84:	e7f3      	b.n	8008f6e <__assert_func+0x12>
 8008f86:	bf00      	nop
 8008f88:	20000068 	.word	0x20000068
 8008f8c:	08009ccc 	.word	0x08009ccc
 8008f90:	08009cd9 	.word	0x08009cd9
 8008f94:	08009d07 	.word	0x08009d07

08008f98 <fiprintf>:
 8008f98:	b40e      	push	{r1, r2, r3}
 8008f9a:	b503      	push	{r0, r1, lr}
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	ab03      	add	r3, sp, #12
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <fiprintf+0x20>)
 8008fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	f000 f845 	bl	8009038 <_vfiprintf_r>
 8008fae:	b002      	add	sp, #8
 8008fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb4:	b003      	add	sp, #12
 8008fb6:	4770      	bx	lr
 8008fb8:	20000068 	.word	0x20000068

08008fbc <__retarget_lock_init_recursive>:
 8008fbc:	4770      	bx	lr

08008fbe <__retarget_lock_acquire_recursive>:
 8008fbe:	4770      	bx	lr

08008fc0 <__retarget_lock_release_recursive>:
 8008fc0:	4770      	bx	lr

08008fc2 <__ascii_mbtowc>:
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	b901      	cbnz	r1, 8008fc8 <__ascii_mbtowc+0x6>
 8008fc6:	a901      	add	r1, sp, #4
 8008fc8:	b142      	cbz	r2, 8008fdc <__ascii_mbtowc+0x1a>
 8008fca:	b14b      	cbz	r3, 8008fe0 <__ascii_mbtowc+0x1e>
 8008fcc:	7813      	ldrb	r3, [r2, #0]
 8008fce:	600b      	str	r3, [r1, #0]
 8008fd0:	7812      	ldrb	r2, [r2, #0]
 8008fd2:	1e10      	subs	r0, r2, #0
 8008fd4:	bf18      	it	ne
 8008fd6:	2001      	movne	r0, #1
 8008fd8:	b002      	add	sp, #8
 8008fda:	4770      	bx	lr
 8008fdc:	4610      	mov	r0, r2
 8008fde:	e7fb      	b.n	8008fd8 <__ascii_mbtowc+0x16>
 8008fe0:	f06f 0001 	mvn.w	r0, #1
 8008fe4:	e7f8      	b.n	8008fd8 <__ascii_mbtowc+0x16>

08008fe6 <__sfputc_r>:
 8008fe6:	6893      	ldr	r3, [r2, #8]
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	b410      	push	{r4}
 8008fee:	6093      	str	r3, [r2, #8]
 8008ff0:	da08      	bge.n	8009004 <__sfputc_r+0x1e>
 8008ff2:	6994      	ldr	r4, [r2, #24]
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	db01      	blt.n	8008ffc <__sfputc_r+0x16>
 8008ff8:	290a      	cmp	r1, #10
 8008ffa:	d103      	bne.n	8009004 <__sfputc_r+0x1e>
 8008ffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009000:	f000 b94a 	b.w	8009298 <__swbuf_r>
 8009004:	6813      	ldr	r3, [r2, #0]
 8009006:	1c58      	adds	r0, r3, #1
 8009008:	6010      	str	r0, [r2, #0]
 800900a:	7019      	strb	r1, [r3, #0]
 800900c:	4608      	mov	r0, r1
 800900e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009012:	4770      	bx	lr

08009014 <__sfputs_r>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	4606      	mov	r6, r0
 8009018:	460f      	mov	r7, r1
 800901a:	4614      	mov	r4, r2
 800901c:	18d5      	adds	r5, r2, r3
 800901e:	42ac      	cmp	r4, r5
 8009020:	d101      	bne.n	8009026 <__sfputs_r+0x12>
 8009022:	2000      	movs	r0, #0
 8009024:	e007      	b.n	8009036 <__sfputs_r+0x22>
 8009026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902a:	463a      	mov	r2, r7
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff ffda 	bl	8008fe6 <__sfputc_r>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d1f3      	bne.n	800901e <__sfputs_r+0xa>
 8009036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009038 <_vfiprintf_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	460d      	mov	r5, r1
 800903e:	b09d      	sub	sp, #116	; 0x74
 8009040:	4614      	mov	r4, r2
 8009042:	4698      	mov	r8, r3
 8009044:	4606      	mov	r6, r0
 8009046:	b118      	cbz	r0, 8009050 <_vfiprintf_r+0x18>
 8009048:	6983      	ldr	r3, [r0, #24]
 800904a:	b90b      	cbnz	r3, 8009050 <_vfiprintf_r+0x18>
 800904c:	f000 fb14 	bl	8009678 <__sinit>
 8009050:	4b89      	ldr	r3, [pc, #548]	; (8009278 <_vfiprintf_r+0x240>)
 8009052:	429d      	cmp	r5, r3
 8009054:	d11b      	bne.n	800908e <_vfiprintf_r+0x56>
 8009056:	6875      	ldr	r5, [r6, #4]
 8009058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905a:	07d9      	lsls	r1, r3, #31
 800905c:	d405      	bmi.n	800906a <_vfiprintf_r+0x32>
 800905e:	89ab      	ldrh	r3, [r5, #12]
 8009060:	059a      	lsls	r2, r3, #22
 8009062:	d402      	bmi.n	800906a <_vfiprintf_r+0x32>
 8009064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009066:	f7ff ffaa 	bl	8008fbe <__retarget_lock_acquire_recursive>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	071b      	lsls	r3, r3, #28
 800906e:	d501      	bpl.n	8009074 <_vfiprintf_r+0x3c>
 8009070:	692b      	ldr	r3, [r5, #16]
 8009072:	b9eb      	cbnz	r3, 80090b0 <_vfiprintf_r+0x78>
 8009074:	4629      	mov	r1, r5
 8009076:	4630      	mov	r0, r6
 8009078:	f000 f96e 	bl	8009358 <__swsetup_r>
 800907c:	b1c0      	cbz	r0, 80090b0 <_vfiprintf_r+0x78>
 800907e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009080:	07dc      	lsls	r4, r3, #31
 8009082:	d50e      	bpl.n	80090a2 <_vfiprintf_r+0x6a>
 8009084:	f04f 30ff 	mov.w	r0, #4294967295
 8009088:	b01d      	add	sp, #116	; 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	4b7b      	ldr	r3, [pc, #492]	; (800927c <_vfiprintf_r+0x244>)
 8009090:	429d      	cmp	r5, r3
 8009092:	d101      	bne.n	8009098 <_vfiprintf_r+0x60>
 8009094:	68b5      	ldr	r5, [r6, #8]
 8009096:	e7df      	b.n	8009058 <_vfiprintf_r+0x20>
 8009098:	4b79      	ldr	r3, [pc, #484]	; (8009280 <_vfiprintf_r+0x248>)
 800909a:	429d      	cmp	r5, r3
 800909c:	bf08      	it	eq
 800909e:	68f5      	ldreq	r5, [r6, #12]
 80090a0:	e7da      	b.n	8009058 <_vfiprintf_r+0x20>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	0598      	lsls	r0, r3, #22
 80090a6:	d4ed      	bmi.n	8009084 <_vfiprintf_r+0x4c>
 80090a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090aa:	f7ff ff89 	bl	8008fc0 <__retarget_lock_release_recursive>
 80090ae:	e7e9      	b.n	8009084 <_vfiprintf_r+0x4c>
 80090b0:	2300      	movs	r3, #0
 80090b2:	9309      	str	r3, [sp, #36]	; 0x24
 80090b4:	2320      	movs	r3, #32
 80090b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80090be:	2330      	movs	r3, #48	; 0x30
 80090c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009284 <_vfiprintf_r+0x24c>
 80090c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090c8:	f04f 0901 	mov.w	r9, #1
 80090cc:	4623      	mov	r3, r4
 80090ce:	469a      	mov	sl, r3
 80090d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d4:	b10a      	cbz	r2, 80090da <_vfiprintf_r+0xa2>
 80090d6:	2a25      	cmp	r2, #37	; 0x25
 80090d8:	d1f9      	bne.n	80090ce <_vfiprintf_r+0x96>
 80090da:	ebba 0b04 	subs.w	fp, sl, r4
 80090de:	d00b      	beq.n	80090f8 <_vfiprintf_r+0xc0>
 80090e0:	465b      	mov	r3, fp
 80090e2:	4622      	mov	r2, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff94 	bl	8009014 <__sfputs_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	f000 80aa 	beq.w	8009246 <_vfiprintf_r+0x20e>
 80090f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f4:	445a      	add	r2, fp
 80090f6:	9209      	str	r2, [sp, #36]	; 0x24
 80090f8:	f89a 3000 	ldrb.w	r3, [sl]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80a2 	beq.w	8009246 <_vfiprintf_r+0x20e>
 8009102:	2300      	movs	r3, #0
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800910c:	f10a 0a01 	add.w	sl, sl, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009118:	931a      	str	r3, [sp, #104]	; 0x68
 800911a:	4654      	mov	r4, sl
 800911c:	2205      	movs	r2, #5
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	4858      	ldr	r0, [pc, #352]	; (8009284 <_vfiprintf_r+0x24c>)
 8009124:	f7f7 f894 	bl	8000250 <memchr>
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	b9d8      	cbnz	r0, 8009164 <_vfiprintf_r+0x12c>
 800912c:	06d1      	lsls	r1, r2, #27
 800912e:	bf44      	itt	mi
 8009130:	2320      	movmi	r3, #32
 8009132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009136:	0713      	lsls	r3, r2, #28
 8009138:	bf44      	itt	mi
 800913a:	232b      	movmi	r3, #43	; 0x2b
 800913c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009140:	f89a 3000 	ldrb.w	r3, [sl]
 8009144:	2b2a      	cmp	r3, #42	; 0x2a
 8009146:	d015      	beq.n	8009174 <_vfiprintf_r+0x13c>
 8009148:	9a07      	ldr	r2, [sp, #28]
 800914a:	4654      	mov	r4, sl
 800914c:	2000      	movs	r0, #0
 800914e:	f04f 0c0a 	mov.w	ip, #10
 8009152:	4621      	mov	r1, r4
 8009154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009158:	3b30      	subs	r3, #48	; 0x30
 800915a:	2b09      	cmp	r3, #9
 800915c:	d94e      	bls.n	80091fc <_vfiprintf_r+0x1c4>
 800915e:	b1b0      	cbz	r0, 800918e <_vfiprintf_r+0x156>
 8009160:	9207      	str	r2, [sp, #28]
 8009162:	e014      	b.n	800918e <_vfiprintf_r+0x156>
 8009164:	eba0 0308 	sub.w	r3, r0, r8
 8009168:	fa09 f303 	lsl.w	r3, r9, r3
 800916c:	4313      	orrs	r3, r2
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	46a2      	mov	sl, r4
 8009172:	e7d2      	b.n	800911a <_vfiprintf_r+0xe2>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d19      	adds	r1, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9103      	str	r1, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbb      	ittet	lt
 8009180:	425b      	neglt	r3, r3
 8009182:	f042 0202 	orrlt.w	r2, r2, #2
 8009186:	9307      	strge	r3, [sp, #28]
 8009188:	9307      	strlt	r3, [sp, #28]
 800918a:	bfb8      	it	lt
 800918c:	9204      	strlt	r2, [sp, #16]
 800918e:	7823      	ldrb	r3, [r4, #0]
 8009190:	2b2e      	cmp	r3, #46	; 0x2e
 8009192:	d10c      	bne.n	80091ae <_vfiprintf_r+0x176>
 8009194:	7863      	ldrb	r3, [r4, #1]
 8009196:	2b2a      	cmp	r3, #42	; 0x2a
 8009198:	d135      	bne.n	8009206 <_vfiprintf_r+0x1ce>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9203      	str	r2, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfb8      	it	lt
 80091a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091aa:	3402      	adds	r4, #2
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009294 <_vfiprintf_r+0x25c>
 80091b2:	7821      	ldrb	r1, [r4, #0]
 80091b4:	2203      	movs	r2, #3
 80091b6:	4650      	mov	r0, sl
 80091b8:	f7f7 f84a 	bl	8000250 <memchr>
 80091bc:	b140      	cbz	r0, 80091d0 <_vfiprintf_r+0x198>
 80091be:	2340      	movs	r3, #64	; 0x40
 80091c0:	eba0 000a 	sub.w	r0, r0, sl
 80091c4:	fa03 f000 	lsl.w	r0, r3, r0
 80091c8:	9b04      	ldr	r3, [sp, #16]
 80091ca:	4303      	orrs	r3, r0
 80091cc:	3401      	adds	r4, #1
 80091ce:	9304      	str	r3, [sp, #16]
 80091d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d4:	482c      	ldr	r0, [pc, #176]	; (8009288 <_vfiprintf_r+0x250>)
 80091d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091da:	2206      	movs	r2, #6
 80091dc:	f7f7 f838 	bl	8000250 <memchr>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d03f      	beq.n	8009264 <_vfiprintf_r+0x22c>
 80091e4:	4b29      	ldr	r3, [pc, #164]	; (800928c <_vfiprintf_r+0x254>)
 80091e6:	bb1b      	cbnz	r3, 8009230 <_vfiprintf_r+0x1f8>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	3307      	adds	r3, #7
 80091ec:	f023 0307 	bic.w	r3, r3, #7
 80091f0:	3308      	adds	r3, #8
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f6:	443b      	add	r3, r7
 80091f8:	9309      	str	r3, [sp, #36]	; 0x24
 80091fa:	e767      	b.n	80090cc <_vfiprintf_r+0x94>
 80091fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009200:	460c      	mov	r4, r1
 8009202:	2001      	movs	r0, #1
 8009204:	e7a5      	b.n	8009152 <_vfiprintf_r+0x11a>
 8009206:	2300      	movs	r3, #0
 8009208:	3401      	adds	r4, #1
 800920a:	9305      	str	r3, [sp, #20]
 800920c:	4619      	mov	r1, r3
 800920e:	f04f 0c0a 	mov.w	ip, #10
 8009212:	4620      	mov	r0, r4
 8009214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009218:	3a30      	subs	r2, #48	; 0x30
 800921a:	2a09      	cmp	r2, #9
 800921c:	d903      	bls.n	8009226 <_vfiprintf_r+0x1ee>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0c5      	beq.n	80091ae <_vfiprintf_r+0x176>
 8009222:	9105      	str	r1, [sp, #20]
 8009224:	e7c3      	b.n	80091ae <_vfiprintf_r+0x176>
 8009226:	fb0c 2101 	mla	r1, ip, r1, r2
 800922a:	4604      	mov	r4, r0
 800922c:	2301      	movs	r3, #1
 800922e:	e7f0      	b.n	8009212 <_vfiprintf_r+0x1da>
 8009230:	ab03      	add	r3, sp, #12
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	462a      	mov	r2, r5
 8009236:	4b16      	ldr	r3, [pc, #88]	; (8009290 <_vfiprintf_r+0x258>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	4630      	mov	r0, r6
 800923c:	f7fe f910 	bl	8007460 <_printf_float>
 8009240:	4607      	mov	r7, r0
 8009242:	1c78      	adds	r0, r7, #1
 8009244:	d1d6      	bne.n	80091f4 <_vfiprintf_r+0x1bc>
 8009246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009248:	07d9      	lsls	r1, r3, #31
 800924a:	d405      	bmi.n	8009258 <_vfiprintf_r+0x220>
 800924c:	89ab      	ldrh	r3, [r5, #12]
 800924e:	059a      	lsls	r2, r3, #22
 8009250:	d402      	bmi.n	8009258 <_vfiprintf_r+0x220>
 8009252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009254:	f7ff feb4 	bl	8008fc0 <__retarget_lock_release_recursive>
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	065b      	lsls	r3, r3, #25
 800925c:	f53f af12 	bmi.w	8009084 <_vfiprintf_r+0x4c>
 8009260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009262:	e711      	b.n	8009088 <_vfiprintf_r+0x50>
 8009264:	ab03      	add	r3, sp, #12
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	462a      	mov	r2, r5
 800926a:	4b09      	ldr	r3, [pc, #36]	; (8009290 <_vfiprintf_r+0x258>)
 800926c:	a904      	add	r1, sp, #16
 800926e:	4630      	mov	r0, r6
 8009270:	f7fe fb82 	bl	8007978 <_printf_i>
 8009274:	e7e4      	b.n	8009240 <_vfiprintf_r+0x208>
 8009276:	bf00      	nop
 8009278:	08009e44 	.word	0x08009e44
 800927c:	08009e64 	.word	0x08009e64
 8009280:	08009e24 	.word	0x08009e24
 8009284:	08009d12 	.word	0x08009d12
 8009288:	08009d1c 	.word	0x08009d1c
 800928c:	08007461 	.word	0x08007461
 8009290:	08009015 	.word	0x08009015
 8009294:	08009d18 	.word	0x08009d18

08009298 <__swbuf_r>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	460e      	mov	r6, r1
 800929c:	4614      	mov	r4, r2
 800929e:	4605      	mov	r5, r0
 80092a0:	b118      	cbz	r0, 80092aa <__swbuf_r+0x12>
 80092a2:	6983      	ldr	r3, [r0, #24]
 80092a4:	b90b      	cbnz	r3, 80092aa <__swbuf_r+0x12>
 80092a6:	f000 f9e7 	bl	8009678 <__sinit>
 80092aa:	4b21      	ldr	r3, [pc, #132]	; (8009330 <__swbuf_r+0x98>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	d12b      	bne.n	8009308 <__swbuf_r+0x70>
 80092b0:	686c      	ldr	r4, [r5, #4]
 80092b2:	69a3      	ldr	r3, [r4, #24]
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	071a      	lsls	r2, r3, #28
 80092ba:	d52f      	bpl.n	800931c <__swbuf_r+0x84>
 80092bc:	6923      	ldr	r3, [r4, #16]
 80092be:	b36b      	cbz	r3, 800931c <__swbuf_r+0x84>
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	1ac0      	subs	r0, r0, r3
 80092c6:	6963      	ldr	r3, [r4, #20]
 80092c8:	b2f6      	uxtb	r6, r6
 80092ca:	4283      	cmp	r3, r0
 80092cc:	4637      	mov	r7, r6
 80092ce:	dc04      	bgt.n	80092da <__swbuf_r+0x42>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f000 f93c 	bl	8009550 <_fflush_r>
 80092d8:	bb30      	cbnz	r0, 8009328 <__swbuf_r+0x90>
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	3b01      	subs	r3, #1
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	6022      	str	r2, [r4, #0]
 80092e6:	701e      	strb	r6, [r3, #0]
 80092e8:	6963      	ldr	r3, [r4, #20]
 80092ea:	3001      	adds	r0, #1
 80092ec:	4283      	cmp	r3, r0
 80092ee:	d004      	beq.n	80092fa <__swbuf_r+0x62>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	07db      	lsls	r3, r3, #31
 80092f4:	d506      	bpl.n	8009304 <__swbuf_r+0x6c>
 80092f6:	2e0a      	cmp	r6, #10
 80092f8:	d104      	bne.n	8009304 <__swbuf_r+0x6c>
 80092fa:	4621      	mov	r1, r4
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f927 	bl	8009550 <_fflush_r>
 8009302:	b988      	cbnz	r0, 8009328 <__swbuf_r+0x90>
 8009304:	4638      	mov	r0, r7
 8009306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <__swbuf_r+0x9c>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d101      	bne.n	8009312 <__swbuf_r+0x7a>
 800930e:	68ac      	ldr	r4, [r5, #8]
 8009310:	e7cf      	b.n	80092b2 <__swbuf_r+0x1a>
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <__swbuf_r+0xa0>)
 8009314:	429c      	cmp	r4, r3
 8009316:	bf08      	it	eq
 8009318:	68ec      	ldreq	r4, [r5, #12]
 800931a:	e7ca      	b.n	80092b2 <__swbuf_r+0x1a>
 800931c:	4621      	mov	r1, r4
 800931e:	4628      	mov	r0, r5
 8009320:	f000 f81a 	bl	8009358 <__swsetup_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	d0cb      	beq.n	80092c0 <__swbuf_r+0x28>
 8009328:	f04f 37ff 	mov.w	r7, #4294967295
 800932c:	e7ea      	b.n	8009304 <__swbuf_r+0x6c>
 800932e:	bf00      	nop
 8009330:	08009e44 	.word	0x08009e44
 8009334:	08009e64 	.word	0x08009e64
 8009338:	08009e24 	.word	0x08009e24

0800933c <__ascii_wctomb>:
 800933c:	b149      	cbz	r1, 8009352 <__ascii_wctomb+0x16>
 800933e:	2aff      	cmp	r2, #255	; 0xff
 8009340:	bf85      	ittet	hi
 8009342:	238a      	movhi	r3, #138	; 0x8a
 8009344:	6003      	strhi	r3, [r0, #0]
 8009346:	700a      	strbls	r2, [r1, #0]
 8009348:	f04f 30ff 	movhi.w	r0, #4294967295
 800934c:	bf98      	it	ls
 800934e:	2001      	movls	r0, #1
 8009350:	4770      	bx	lr
 8009352:	4608      	mov	r0, r1
 8009354:	4770      	bx	lr
	...

08009358 <__swsetup_r>:
 8009358:	4b32      	ldr	r3, [pc, #200]	; (8009424 <__swsetup_r+0xcc>)
 800935a:	b570      	push	{r4, r5, r6, lr}
 800935c:	681d      	ldr	r5, [r3, #0]
 800935e:	4606      	mov	r6, r0
 8009360:	460c      	mov	r4, r1
 8009362:	b125      	cbz	r5, 800936e <__swsetup_r+0x16>
 8009364:	69ab      	ldr	r3, [r5, #24]
 8009366:	b913      	cbnz	r3, 800936e <__swsetup_r+0x16>
 8009368:	4628      	mov	r0, r5
 800936a:	f000 f985 	bl	8009678 <__sinit>
 800936e:	4b2e      	ldr	r3, [pc, #184]	; (8009428 <__swsetup_r+0xd0>)
 8009370:	429c      	cmp	r4, r3
 8009372:	d10f      	bne.n	8009394 <__swsetup_r+0x3c>
 8009374:	686c      	ldr	r4, [r5, #4]
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800937c:	0719      	lsls	r1, r3, #28
 800937e:	d42c      	bmi.n	80093da <__swsetup_r+0x82>
 8009380:	06dd      	lsls	r5, r3, #27
 8009382:	d411      	bmi.n	80093a8 <__swsetup_r+0x50>
 8009384:	2309      	movs	r3, #9
 8009386:	6033      	str	r3, [r6, #0]
 8009388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	f04f 30ff 	mov.w	r0, #4294967295
 8009392:	e03e      	b.n	8009412 <__swsetup_r+0xba>
 8009394:	4b25      	ldr	r3, [pc, #148]	; (800942c <__swsetup_r+0xd4>)
 8009396:	429c      	cmp	r4, r3
 8009398:	d101      	bne.n	800939e <__swsetup_r+0x46>
 800939a:	68ac      	ldr	r4, [r5, #8]
 800939c:	e7eb      	b.n	8009376 <__swsetup_r+0x1e>
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <__swsetup_r+0xd8>)
 80093a0:	429c      	cmp	r4, r3
 80093a2:	bf08      	it	eq
 80093a4:	68ec      	ldreq	r4, [r5, #12]
 80093a6:	e7e6      	b.n	8009376 <__swsetup_r+0x1e>
 80093a8:	0758      	lsls	r0, r3, #29
 80093aa:	d512      	bpl.n	80093d2 <__swsetup_r+0x7a>
 80093ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ae:	b141      	cbz	r1, 80093c2 <__swsetup_r+0x6a>
 80093b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b4:	4299      	cmp	r1, r3
 80093b6:	d002      	beq.n	80093be <__swsetup_r+0x66>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7fd ff17 	bl	80071ec <_free_r>
 80093be:	2300      	movs	r3, #0
 80093c0:	6363      	str	r3, [r4, #52]	; 0x34
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	2300      	movs	r3, #0
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f043 0308 	orr.w	r3, r3, #8
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	6923      	ldr	r3, [r4, #16]
 80093dc:	b94b      	cbnz	r3, 80093f2 <__swsetup_r+0x9a>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e8:	d003      	beq.n	80093f2 <__swsetup_r+0x9a>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4630      	mov	r0, r6
 80093ee:	f000 fa05 	bl	80097fc <__smakebuf_r>
 80093f2:	89a0      	ldrh	r0, [r4, #12]
 80093f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f8:	f010 0301 	ands.w	r3, r0, #1
 80093fc:	d00a      	beq.n	8009414 <__swsetup_r+0xbc>
 80093fe:	2300      	movs	r3, #0
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	6963      	ldr	r3, [r4, #20]
 8009404:	425b      	negs	r3, r3
 8009406:	61a3      	str	r3, [r4, #24]
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b943      	cbnz	r3, 800941e <__swsetup_r+0xc6>
 800940c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009410:	d1ba      	bne.n	8009388 <__swsetup_r+0x30>
 8009412:	bd70      	pop	{r4, r5, r6, pc}
 8009414:	0781      	lsls	r1, r0, #30
 8009416:	bf58      	it	pl
 8009418:	6963      	ldrpl	r3, [r4, #20]
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	e7f4      	b.n	8009408 <__swsetup_r+0xb0>
 800941e:	2000      	movs	r0, #0
 8009420:	e7f7      	b.n	8009412 <__swsetup_r+0xba>
 8009422:	bf00      	nop
 8009424:	20000068 	.word	0x20000068
 8009428:	08009e44 	.word	0x08009e44
 800942c:	08009e64 	.word	0x08009e64
 8009430:	08009e24 	.word	0x08009e24

08009434 <abort>:
 8009434:	b508      	push	{r3, lr}
 8009436:	2006      	movs	r0, #6
 8009438:	f000 fa48 	bl	80098cc <raise>
 800943c:	2001      	movs	r0, #1
 800943e:	f7f8 f93d 	bl	80016bc <_exit>
	...

08009444 <__sflush_r>:
 8009444:	898a      	ldrh	r2, [r1, #12]
 8009446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	4605      	mov	r5, r0
 800944c:	0710      	lsls	r0, r2, #28
 800944e:	460c      	mov	r4, r1
 8009450:	d458      	bmi.n	8009504 <__sflush_r+0xc0>
 8009452:	684b      	ldr	r3, [r1, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc05      	bgt.n	8009464 <__sflush_r+0x20>
 8009458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	dc02      	bgt.n	8009464 <__sflush_r+0x20>
 800945e:	2000      	movs	r0, #0
 8009460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009466:	2e00      	cmp	r6, #0
 8009468:	d0f9      	beq.n	800945e <__sflush_r+0x1a>
 800946a:	2300      	movs	r3, #0
 800946c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009470:	682f      	ldr	r7, [r5, #0]
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	d032      	beq.n	80094dc <__sflush_r+0x98>
 8009476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	075a      	lsls	r2, r3, #29
 800947c:	d505      	bpl.n	800948a <__sflush_r+0x46>
 800947e:	6863      	ldr	r3, [r4, #4]
 8009480:	1ac0      	subs	r0, r0, r3
 8009482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009484:	b10b      	cbz	r3, 800948a <__sflush_r+0x46>
 8009486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009488:	1ac0      	subs	r0, r0, r3
 800948a:	2300      	movs	r3, #0
 800948c:	4602      	mov	r2, r0
 800948e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009490:	6a21      	ldr	r1, [r4, #32]
 8009492:	4628      	mov	r0, r5
 8009494:	47b0      	blx	r6
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	89a3      	ldrh	r3, [r4, #12]
 800949a:	d106      	bne.n	80094aa <__sflush_r+0x66>
 800949c:	6829      	ldr	r1, [r5, #0]
 800949e:	291d      	cmp	r1, #29
 80094a0:	d82c      	bhi.n	80094fc <__sflush_r+0xb8>
 80094a2:	4a2a      	ldr	r2, [pc, #168]	; (800954c <__sflush_r+0x108>)
 80094a4:	40ca      	lsrs	r2, r1
 80094a6:	07d6      	lsls	r6, r2, #31
 80094a8:	d528      	bpl.n	80094fc <__sflush_r+0xb8>
 80094aa:	2200      	movs	r2, #0
 80094ac:	6062      	str	r2, [r4, #4]
 80094ae:	04d9      	lsls	r1, r3, #19
 80094b0:	6922      	ldr	r2, [r4, #16]
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	d504      	bpl.n	80094c0 <__sflush_r+0x7c>
 80094b6:	1c42      	adds	r2, r0, #1
 80094b8:	d101      	bne.n	80094be <__sflush_r+0x7a>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	b903      	cbnz	r3, 80094c0 <__sflush_r+0x7c>
 80094be:	6560      	str	r0, [r4, #84]	; 0x54
 80094c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094c2:	602f      	str	r7, [r5, #0]
 80094c4:	2900      	cmp	r1, #0
 80094c6:	d0ca      	beq.n	800945e <__sflush_r+0x1a>
 80094c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <__sflush_r+0x92>
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7fd fe8b 	bl	80071ec <_free_r>
 80094d6:	2000      	movs	r0, #0
 80094d8:	6360      	str	r0, [r4, #52]	; 0x34
 80094da:	e7c1      	b.n	8009460 <__sflush_r+0x1c>
 80094dc:	6a21      	ldr	r1, [r4, #32]
 80094de:	2301      	movs	r3, #1
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b0      	blx	r6
 80094e4:	1c41      	adds	r1, r0, #1
 80094e6:	d1c7      	bne.n	8009478 <__sflush_r+0x34>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0c4      	beq.n	8009478 <__sflush_r+0x34>
 80094ee:	2b1d      	cmp	r3, #29
 80094f0:	d001      	beq.n	80094f6 <__sflush_r+0xb2>
 80094f2:	2b16      	cmp	r3, #22
 80094f4:	d101      	bne.n	80094fa <__sflush_r+0xb6>
 80094f6:	602f      	str	r7, [r5, #0]
 80094f8:	e7b1      	b.n	800945e <__sflush_r+0x1a>
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	e7ad      	b.n	8009460 <__sflush_r+0x1c>
 8009504:	690f      	ldr	r7, [r1, #16]
 8009506:	2f00      	cmp	r7, #0
 8009508:	d0a9      	beq.n	800945e <__sflush_r+0x1a>
 800950a:	0793      	lsls	r3, r2, #30
 800950c:	680e      	ldr	r6, [r1, #0]
 800950e:	bf08      	it	eq
 8009510:	694b      	ldreq	r3, [r1, #20]
 8009512:	600f      	str	r7, [r1, #0]
 8009514:	bf18      	it	ne
 8009516:	2300      	movne	r3, #0
 8009518:	eba6 0807 	sub.w	r8, r6, r7
 800951c:	608b      	str	r3, [r1, #8]
 800951e:	f1b8 0f00 	cmp.w	r8, #0
 8009522:	dd9c      	ble.n	800945e <__sflush_r+0x1a>
 8009524:	6a21      	ldr	r1, [r4, #32]
 8009526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009528:	4643      	mov	r3, r8
 800952a:	463a      	mov	r2, r7
 800952c:	4628      	mov	r0, r5
 800952e:	47b0      	blx	r6
 8009530:	2800      	cmp	r0, #0
 8009532:	dc06      	bgt.n	8009542 <__sflush_r+0xfe>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	e78e      	b.n	8009460 <__sflush_r+0x1c>
 8009542:	4407      	add	r7, r0
 8009544:	eba8 0800 	sub.w	r8, r8, r0
 8009548:	e7e9      	b.n	800951e <__sflush_r+0xda>
 800954a:	bf00      	nop
 800954c:	20400001 	.word	0x20400001

08009550 <_fflush_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	690b      	ldr	r3, [r1, #16]
 8009554:	4605      	mov	r5, r0
 8009556:	460c      	mov	r4, r1
 8009558:	b913      	cbnz	r3, 8009560 <_fflush_r+0x10>
 800955a:	2500      	movs	r5, #0
 800955c:	4628      	mov	r0, r5
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	b118      	cbz	r0, 800956a <_fflush_r+0x1a>
 8009562:	6983      	ldr	r3, [r0, #24]
 8009564:	b90b      	cbnz	r3, 800956a <_fflush_r+0x1a>
 8009566:	f000 f887 	bl	8009678 <__sinit>
 800956a:	4b14      	ldr	r3, [pc, #80]	; (80095bc <_fflush_r+0x6c>)
 800956c:	429c      	cmp	r4, r3
 800956e:	d11b      	bne.n	80095a8 <_fflush_r+0x58>
 8009570:	686c      	ldr	r4, [r5, #4]
 8009572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d0ef      	beq.n	800955a <_fflush_r+0xa>
 800957a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800957c:	07d0      	lsls	r0, r2, #31
 800957e:	d404      	bmi.n	800958a <_fflush_r+0x3a>
 8009580:	0599      	lsls	r1, r3, #22
 8009582:	d402      	bmi.n	800958a <_fflush_r+0x3a>
 8009584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009586:	f7ff fd1a 	bl	8008fbe <__retarget_lock_acquire_recursive>
 800958a:	4628      	mov	r0, r5
 800958c:	4621      	mov	r1, r4
 800958e:	f7ff ff59 	bl	8009444 <__sflush_r>
 8009592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009594:	07da      	lsls	r2, r3, #31
 8009596:	4605      	mov	r5, r0
 8009598:	d4e0      	bmi.n	800955c <_fflush_r+0xc>
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	059b      	lsls	r3, r3, #22
 800959e:	d4dd      	bmi.n	800955c <_fflush_r+0xc>
 80095a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a2:	f7ff fd0d 	bl	8008fc0 <__retarget_lock_release_recursive>
 80095a6:	e7d9      	b.n	800955c <_fflush_r+0xc>
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <_fflush_r+0x70>)
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d101      	bne.n	80095b2 <_fflush_r+0x62>
 80095ae:	68ac      	ldr	r4, [r5, #8]
 80095b0:	e7df      	b.n	8009572 <_fflush_r+0x22>
 80095b2:	4b04      	ldr	r3, [pc, #16]	; (80095c4 <_fflush_r+0x74>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	bf08      	it	eq
 80095b8:	68ec      	ldreq	r4, [r5, #12]
 80095ba:	e7da      	b.n	8009572 <_fflush_r+0x22>
 80095bc:	08009e44 	.word	0x08009e44
 80095c0:	08009e64 	.word	0x08009e64
 80095c4:	08009e24 	.word	0x08009e24

080095c8 <std>:
 80095c8:	2300      	movs	r3, #0
 80095ca:	b510      	push	{r4, lr}
 80095cc:	4604      	mov	r4, r0
 80095ce:	e9c0 3300 	strd	r3, r3, [r0]
 80095d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095d6:	6083      	str	r3, [r0, #8]
 80095d8:	8181      	strh	r1, [r0, #12]
 80095da:	6643      	str	r3, [r0, #100]	; 0x64
 80095dc:	81c2      	strh	r2, [r0, #14]
 80095de:	6183      	str	r3, [r0, #24]
 80095e0:	4619      	mov	r1, r3
 80095e2:	2208      	movs	r2, #8
 80095e4:	305c      	adds	r0, #92	; 0x5c
 80095e6:	f7fd fdf9 	bl	80071dc <memset>
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <std+0x38>)
 80095ec:	6263      	str	r3, [r4, #36]	; 0x24
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <std+0x3c>)
 80095f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <std+0x40>)
 80095f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095f6:	4b05      	ldr	r3, [pc, #20]	; (800960c <std+0x44>)
 80095f8:	6224      	str	r4, [r4, #32]
 80095fa:	6323      	str	r3, [r4, #48]	; 0x30
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	bf00      	nop
 8009600:	08009905 	.word	0x08009905
 8009604:	08009927 	.word	0x08009927
 8009608:	0800995f 	.word	0x0800995f
 800960c:	08009983 	.word	0x08009983

08009610 <_cleanup_r>:
 8009610:	4901      	ldr	r1, [pc, #4]	; (8009618 <_cleanup_r+0x8>)
 8009612:	f000 b8af 	b.w	8009774 <_fwalk_reent>
 8009616:	bf00      	nop
 8009618:	08009551 	.word	0x08009551

0800961c <__sfmoreglue>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	1e4a      	subs	r2, r1, #1
 8009620:	2568      	movs	r5, #104	; 0x68
 8009622:	4355      	muls	r5, r2
 8009624:	460e      	mov	r6, r1
 8009626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800962a:	f7fd fe2f 	bl	800728c <_malloc_r>
 800962e:	4604      	mov	r4, r0
 8009630:	b140      	cbz	r0, 8009644 <__sfmoreglue+0x28>
 8009632:	2100      	movs	r1, #0
 8009634:	e9c0 1600 	strd	r1, r6, [r0]
 8009638:	300c      	adds	r0, #12
 800963a:	60a0      	str	r0, [r4, #8]
 800963c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009640:	f7fd fdcc 	bl	80071dc <memset>
 8009644:	4620      	mov	r0, r4
 8009646:	bd70      	pop	{r4, r5, r6, pc}

08009648 <__sfp_lock_acquire>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__sfp_lock_acquire+0x8>)
 800964a:	f7ff bcb8 	b.w	8008fbe <__retarget_lock_acquire_recursive>
 800964e:	bf00      	nop
 8009650:	200007b4 	.word	0x200007b4

08009654 <__sfp_lock_release>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__sfp_lock_release+0x8>)
 8009656:	f7ff bcb3 	b.w	8008fc0 <__retarget_lock_release_recursive>
 800965a:	bf00      	nop
 800965c:	200007b4 	.word	0x200007b4

08009660 <__sinit_lock_acquire>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__sinit_lock_acquire+0x8>)
 8009662:	f7ff bcac 	b.w	8008fbe <__retarget_lock_acquire_recursive>
 8009666:	bf00      	nop
 8009668:	200007af 	.word	0x200007af

0800966c <__sinit_lock_release>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__sinit_lock_release+0x8>)
 800966e:	f7ff bca7 	b.w	8008fc0 <__retarget_lock_release_recursive>
 8009672:	bf00      	nop
 8009674:	200007af 	.word	0x200007af

08009678 <__sinit>:
 8009678:	b510      	push	{r4, lr}
 800967a:	4604      	mov	r4, r0
 800967c:	f7ff fff0 	bl	8009660 <__sinit_lock_acquire>
 8009680:	69a3      	ldr	r3, [r4, #24]
 8009682:	b11b      	cbz	r3, 800968c <__sinit+0x14>
 8009684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009688:	f7ff bff0 	b.w	800966c <__sinit_lock_release>
 800968c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009690:	6523      	str	r3, [r4, #80]	; 0x50
 8009692:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <__sinit+0x68>)
 8009694:	4a13      	ldr	r2, [pc, #76]	; (80096e4 <__sinit+0x6c>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	62a2      	str	r2, [r4, #40]	; 0x28
 800969a:	42a3      	cmp	r3, r4
 800969c:	bf04      	itt	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	61a3      	streq	r3, [r4, #24]
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f820 	bl	80096e8 <__sfp>
 80096a8:	6060      	str	r0, [r4, #4]
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f81c 	bl	80096e8 <__sfp>
 80096b0:	60a0      	str	r0, [r4, #8]
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f818 	bl	80096e8 <__sfp>
 80096b8:	2200      	movs	r2, #0
 80096ba:	60e0      	str	r0, [r4, #12]
 80096bc:	2104      	movs	r1, #4
 80096be:	6860      	ldr	r0, [r4, #4]
 80096c0:	f7ff ff82 	bl	80095c8 <std>
 80096c4:	68a0      	ldr	r0, [r4, #8]
 80096c6:	2201      	movs	r2, #1
 80096c8:	2109      	movs	r1, #9
 80096ca:	f7ff ff7d 	bl	80095c8 <std>
 80096ce:	68e0      	ldr	r0, [r4, #12]
 80096d0:	2202      	movs	r2, #2
 80096d2:	2112      	movs	r1, #18
 80096d4:	f7ff ff78 	bl	80095c8 <std>
 80096d8:	2301      	movs	r3, #1
 80096da:	61a3      	str	r3, [r4, #24]
 80096dc:	e7d2      	b.n	8009684 <__sinit+0xc>
 80096de:	bf00      	nop
 80096e0:	08009aa0 	.word	0x08009aa0
 80096e4:	08009611 	.word	0x08009611

080096e8 <__sfp>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	4607      	mov	r7, r0
 80096ec:	f7ff ffac 	bl	8009648 <__sfp_lock_acquire>
 80096f0:	4b1e      	ldr	r3, [pc, #120]	; (800976c <__sfp+0x84>)
 80096f2:	681e      	ldr	r6, [r3, #0]
 80096f4:	69b3      	ldr	r3, [r6, #24]
 80096f6:	b913      	cbnz	r3, 80096fe <__sfp+0x16>
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7ff ffbd 	bl	8009678 <__sinit>
 80096fe:	3648      	adds	r6, #72	; 0x48
 8009700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009704:	3b01      	subs	r3, #1
 8009706:	d503      	bpl.n	8009710 <__sfp+0x28>
 8009708:	6833      	ldr	r3, [r6, #0]
 800970a:	b30b      	cbz	r3, 8009750 <__sfp+0x68>
 800970c:	6836      	ldr	r6, [r6, #0]
 800970e:	e7f7      	b.n	8009700 <__sfp+0x18>
 8009710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009714:	b9d5      	cbnz	r5, 800974c <__sfp+0x64>
 8009716:	4b16      	ldr	r3, [pc, #88]	; (8009770 <__sfp+0x88>)
 8009718:	60e3      	str	r3, [r4, #12]
 800971a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800971e:	6665      	str	r5, [r4, #100]	; 0x64
 8009720:	f7ff fc4c 	bl	8008fbc <__retarget_lock_init_recursive>
 8009724:	f7ff ff96 	bl	8009654 <__sfp_lock_release>
 8009728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800972c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009730:	6025      	str	r5, [r4, #0]
 8009732:	61a5      	str	r5, [r4, #24]
 8009734:	2208      	movs	r2, #8
 8009736:	4629      	mov	r1, r5
 8009738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800973c:	f7fd fd4e 	bl	80071dc <memset>
 8009740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009748:	4620      	mov	r0, r4
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	3468      	adds	r4, #104	; 0x68
 800974e:	e7d9      	b.n	8009704 <__sfp+0x1c>
 8009750:	2104      	movs	r1, #4
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff ff62 	bl	800961c <__sfmoreglue>
 8009758:	4604      	mov	r4, r0
 800975a:	6030      	str	r0, [r6, #0]
 800975c:	2800      	cmp	r0, #0
 800975e:	d1d5      	bne.n	800970c <__sfp+0x24>
 8009760:	f7ff ff78 	bl	8009654 <__sfp_lock_release>
 8009764:	230c      	movs	r3, #12
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	e7ee      	b.n	8009748 <__sfp+0x60>
 800976a:	bf00      	nop
 800976c:	08009aa0 	.word	0x08009aa0
 8009770:	ffff0001 	.word	0xffff0001

08009774 <_fwalk_reent>:
 8009774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4606      	mov	r6, r0
 800977a:	4688      	mov	r8, r1
 800977c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009780:	2700      	movs	r7, #0
 8009782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009786:	f1b9 0901 	subs.w	r9, r9, #1
 800978a:	d505      	bpl.n	8009798 <_fwalk_reent+0x24>
 800978c:	6824      	ldr	r4, [r4, #0]
 800978e:	2c00      	cmp	r4, #0
 8009790:	d1f7      	bne.n	8009782 <_fwalk_reent+0xe>
 8009792:	4638      	mov	r0, r7
 8009794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009798:	89ab      	ldrh	r3, [r5, #12]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d907      	bls.n	80097ae <_fwalk_reent+0x3a>
 800979e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097a2:	3301      	adds	r3, #1
 80097a4:	d003      	beq.n	80097ae <_fwalk_reent+0x3a>
 80097a6:	4629      	mov	r1, r5
 80097a8:	4630      	mov	r0, r6
 80097aa:	47c0      	blx	r8
 80097ac:	4307      	orrs	r7, r0
 80097ae:	3568      	adds	r5, #104	; 0x68
 80097b0:	e7e9      	b.n	8009786 <_fwalk_reent+0x12>

080097b2 <__swhatbuf_r>:
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	460e      	mov	r6, r1
 80097b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ba:	2900      	cmp	r1, #0
 80097bc:	b096      	sub	sp, #88	; 0x58
 80097be:	4614      	mov	r4, r2
 80097c0:	461d      	mov	r5, r3
 80097c2:	da07      	bge.n	80097d4 <__swhatbuf_r+0x22>
 80097c4:	2300      	movs	r3, #0
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	89b3      	ldrh	r3, [r6, #12]
 80097ca:	061a      	lsls	r2, r3, #24
 80097cc:	d410      	bmi.n	80097f0 <__swhatbuf_r+0x3e>
 80097ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d2:	e00e      	b.n	80097f2 <__swhatbuf_r+0x40>
 80097d4:	466a      	mov	r2, sp
 80097d6:	f000 f8fb 	bl	80099d0 <_fstat_r>
 80097da:	2800      	cmp	r0, #0
 80097dc:	dbf2      	blt.n	80097c4 <__swhatbuf_r+0x12>
 80097de:	9a01      	ldr	r2, [sp, #4]
 80097e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097e8:	425a      	negs	r2, r3
 80097ea:	415a      	adcs	r2, r3
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	e7ee      	b.n	80097ce <__swhatbuf_r+0x1c>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	2000      	movs	r0, #0
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	b016      	add	sp, #88	; 0x58
 80097f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080097fc <__smakebuf_r>:
 80097fc:	898b      	ldrh	r3, [r1, #12]
 80097fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009800:	079d      	lsls	r5, r3, #30
 8009802:	4606      	mov	r6, r0
 8009804:	460c      	mov	r4, r1
 8009806:	d507      	bpl.n	8009818 <__smakebuf_r+0x1c>
 8009808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	6123      	str	r3, [r4, #16]
 8009810:	2301      	movs	r3, #1
 8009812:	6163      	str	r3, [r4, #20]
 8009814:	b002      	add	sp, #8
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	ab01      	add	r3, sp, #4
 800981a:	466a      	mov	r2, sp
 800981c:	f7ff ffc9 	bl	80097b2 <__swhatbuf_r>
 8009820:	9900      	ldr	r1, [sp, #0]
 8009822:	4605      	mov	r5, r0
 8009824:	4630      	mov	r0, r6
 8009826:	f7fd fd31 	bl	800728c <_malloc_r>
 800982a:	b948      	cbnz	r0, 8009840 <__smakebuf_r+0x44>
 800982c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009830:	059a      	lsls	r2, r3, #22
 8009832:	d4ef      	bmi.n	8009814 <__smakebuf_r+0x18>
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	f043 0302 	orr.w	r3, r3, #2
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	e7e3      	b.n	8009808 <__smakebuf_r+0xc>
 8009840:	4b0d      	ldr	r3, [pc, #52]	; (8009878 <__smakebuf_r+0x7c>)
 8009842:	62b3      	str	r3, [r6, #40]	; 0x28
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	9b00      	ldr	r3, [sp, #0]
 8009850:	6163      	str	r3, [r4, #20]
 8009852:	9b01      	ldr	r3, [sp, #4]
 8009854:	6120      	str	r0, [r4, #16]
 8009856:	b15b      	cbz	r3, 8009870 <__smakebuf_r+0x74>
 8009858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800985c:	4630      	mov	r0, r6
 800985e:	f000 f8c9 	bl	80099f4 <_isatty_r>
 8009862:	b128      	cbz	r0, 8009870 <__smakebuf_r+0x74>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	f043 0301 	orr.w	r3, r3, #1
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	89a0      	ldrh	r0, [r4, #12]
 8009872:	4305      	orrs	r5, r0
 8009874:	81a5      	strh	r5, [r4, #12]
 8009876:	e7cd      	b.n	8009814 <__smakebuf_r+0x18>
 8009878:	08009611 	.word	0x08009611

0800987c <_raise_r>:
 800987c:	291f      	cmp	r1, #31
 800987e:	b538      	push	{r3, r4, r5, lr}
 8009880:	4604      	mov	r4, r0
 8009882:	460d      	mov	r5, r1
 8009884:	d904      	bls.n	8009890 <_raise_r+0x14>
 8009886:	2316      	movs	r3, #22
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009892:	b112      	cbz	r2, 800989a <_raise_r+0x1e>
 8009894:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009898:	b94b      	cbnz	r3, 80098ae <_raise_r+0x32>
 800989a:	4620      	mov	r0, r4
 800989c:	f000 f830 	bl	8009900 <_getpid_r>
 80098a0:	462a      	mov	r2, r5
 80098a2:	4601      	mov	r1, r0
 80098a4:	4620      	mov	r0, r4
 80098a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098aa:	f000 b817 	b.w	80098dc <_kill_r>
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d00a      	beq.n	80098c8 <_raise_r+0x4c>
 80098b2:	1c59      	adds	r1, r3, #1
 80098b4:	d103      	bne.n	80098be <_raise_r+0x42>
 80098b6:	2316      	movs	r3, #22
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	2001      	movs	r0, #1
 80098bc:	e7e7      	b.n	800988e <_raise_r+0x12>
 80098be:	2400      	movs	r4, #0
 80098c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098c4:	4628      	mov	r0, r5
 80098c6:	4798      	blx	r3
 80098c8:	2000      	movs	r0, #0
 80098ca:	e7e0      	b.n	800988e <_raise_r+0x12>

080098cc <raise>:
 80098cc:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <raise+0xc>)
 80098ce:	4601      	mov	r1, r0
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	f7ff bfd3 	b.w	800987c <_raise_r>
 80098d6:	bf00      	nop
 80098d8:	20000068 	.word	0x20000068

080098dc <_kill_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	; (80098fc <_kill_r+0x20>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	4611      	mov	r1, r2
 80098e8:	602b      	str	r3, [r5, #0]
 80098ea:	f7f7 fed7 	bl	800169c <_kill>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d102      	bne.n	80098f8 <_kill_r+0x1c>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	b103      	cbz	r3, 80098f8 <_kill_r+0x1c>
 80098f6:	6023      	str	r3, [r4, #0]
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
 80098fa:	bf00      	nop
 80098fc:	200007a8 	.word	0x200007a8

08009900 <_getpid_r>:
 8009900:	f7f7 bec4 	b.w	800168c <_getpid>

08009904 <__sread>:
 8009904:	b510      	push	{r4, lr}
 8009906:	460c      	mov	r4, r1
 8009908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990c:	f000 f894 	bl	8009a38 <_read_r>
 8009910:	2800      	cmp	r0, #0
 8009912:	bfab      	itete	ge
 8009914:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009916:	89a3      	ldrhlt	r3, [r4, #12]
 8009918:	181b      	addge	r3, r3, r0
 800991a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800991e:	bfac      	ite	ge
 8009920:	6563      	strge	r3, [r4, #84]	; 0x54
 8009922:	81a3      	strhlt	r3, [r4, #12]
 8009924:	bd10      	pop	{r4, pc}

08009926 <__swrite>:
 8009926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	461f      	mov	r7, r3
 800992c:	898b      	ldrh	r3, [r1, #12]
 800992e:	05db      	lsls	r3, r3, #23
 8009930:	4605      	mov	r5, r0
 8009932:	460c      	mov	r4, r1
 8009934:	4616      	mov	r6, r2
 8009936:	d505      	bpl.n	8009944 <__swrite+0x1e>
 8009938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993c:	2302      	movs	r3, #2
 800993e:	2200      	movs	r2, #0
 8009940:	f000 f868 	bl	8009a14 <_lseek_r>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800994a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800994e:	81a3      	strh	r3, [r4, #12]
 8009950:	4632      	mov	r2, r6
 8009952:	463b      	mov	r3, r7
 8009954:	4628      	mov	r0, r5
 8009956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800995a:	f000 b817 	b.w	800998c <_write_r>

0800995e <__sseek>:
 800995e:	b510      	push	{r4, lr}
 8009960:	460c      	mov	r4, r1
 8009962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009966:	f000 f855 	bl	8009a14 <_lseek_r>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	bf15      	itete	ne
 8009970:	6560      	strne	r0, [r4, #84]	; 0x54
 8009972:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009976:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800997a:	81a3      	strheq	r3, [r4, #12]
 800997c:	bf18      	it	ne
 800997e:	81a3      	strhne	r3, [r4, #12]
 8009980:	bd10      	pop	{r4, pc}

08009982 <__sclose>:
 8009982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009986:	f000 b813 	b.w	80099b0 <_close_r>
	...

0800998c <_write_r>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	4d07      	ldr	r5, [pc, #28]	; (80099ac <_write_r+0x20>)
 8009990:	4604      	mov	r4, r0
 8009992:	4608      	mov	r0, r1
 8009994:	4611      	mov	r1, r2
 8009996:	2200      	movs	r2, #0
 8009998:	602a      	str	r2, [r5, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	f7f7 feb5 	bl	800170a <_write>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_write_r+0x1e>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_write_r+0x1e>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	200007a8 	.word	0x200007a8

080099b0 <_close_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d06      	ldr	r5, [pc, #24]	; (80099cc <_close_r+0x1c>)
 80099b4:	2300      	movs	r3, #0
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7f7 fec1 	bl	8001742 <_close>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_close_r+0x1a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_close_r+0x1a>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	200007a8 	.word	0x200007a8

080099d0 <_fstat_r>:
 80099d0:	b538      	push	{r3, r4, r5, lr}
 80099d2:	4d07      	ldr	r5, [pc, #28]	; (80099f0 <_fstat_r+0x20>)
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	f7f7 febc 	bl	800175a <_fstat>
 80099e2:	1c43      	adds	r3, r0, #1
 80099e4:	d102      	bne.n	80099ec <_fstat_r+0x1c>
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	b103      	cbz	r3, 80099ec <_fstat_r+0x1c>
 80099ea:	6023      	str	r3, [r4, #0]
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	bf00      	nop
 80099f0:	200007a8 	.word	0x200007a8

080099f4 <_isatty_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	; (8009a10 <_isatty_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f7 febb 	bl	800177a <_isatty>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_isatty_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_isatty_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	200007a8 	.word	0x200007a8

08009a14 <_lseek_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_lseek_r+0x20>)
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f7f7 feb4 	bl	8001790 <_lseek>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_lseek_r+0x1e>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_lseek_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	200007a8 	.word	0x200007a8

08009a38 <_read_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_read_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f7 fe42 	bl	80016d0 <_read>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_read_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_read_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	200007a8 	.word	0x200007a8

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
