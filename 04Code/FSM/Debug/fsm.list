
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f8  080061f8  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080061f8  080061f8  000161f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006200  08006200  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006200  08006200  00016200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000064  0800626c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800626c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf94  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0f  00000000  00000000  0003c026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00040d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af58  00000000  00000000  00041eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195b5  00000000  00000000  0006ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001046c1  00000000  00000000  000863bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018aa7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c70  00000000  00000000  0018aad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000064 	.word	0x20000064
 8000214:	00000000 	.word	0x00000000
 8000218:	080061b4 	.word	0x080061b4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000068 	.word	0x20000068
 8000234:	080061b4 	.word	0x080061b4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_ADC1_Init+0xb0>)
 800054a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <MX_ADC1_Init+0xb0>)
 800055e:	2201      	movs	r2, #1
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_ADC1_Init+0xb0>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000572:	4a1d      	ldr	r2, [pc, #116]	; (80005e8 <MX_ADC1_Init+0xb8>)
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_ADC1_Init+0xb0>)
 800057e:	2202      	movs	r2, #2
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000582:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_ADC1_Init+0xb0>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <MX_ADC1_Init+0xb0>)
 8000592:	f001 f82f 	bl	80015f4 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fa98 	bl	8000ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480b      	ldr	r0, [pc, #44]	; (80005e0 <MX_ADC1_Init+0xb0>)
 80005b2:	f001 f9c5 	bl	8001940 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 fa88 	bl	8000ad0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_ADC1_Init+0xb0>)
 80005ca:	f001 f9b9 	bl	8001940 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80005d4:	f000 fa7c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000098 	.word	0x20000098
 80005e4:	40012000 	.word	0x40012000
 80005e8:	0f000001 	.word	0x0f000001

080005ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <HAL_ADC_MspInit+0xe4>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d15b      	bne.n	80006c6 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	4a30      	ldr	r2, [pc, #192]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 8000614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000618:	6453      	str	r3, [r2, #68]	; 0x44
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a2a      	ldr	r2, [pc, #168]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <HAL_ADC_MspInit+0xe8>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSOR3_Pin|SENSOR6_Pin;
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000642:	2303      	movs	r3, #3
 8000644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4821      	ldr	r0, [pc, #132]	; (80006d8 <HAL_ADC_MspInit+0xec>)
 8000652:	f002 f851 	bl	80026f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <HAL_ADC_MspInit+0xf4>)
 800065a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800066e:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000674:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000680:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000684:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800069a:	4810      	ldr	r0, [pc, #64]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 800069c:	f001 fcb0 	bl	8002000 <HAL_DMA_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80006a6:	f000 fa13 	bl	8000ad0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 80006ae:	639a      	str	r2, [r3, #56]	; 0x38
 80006b0:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <HAL_ADC_MspInit+0xf0>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2012      	movs	r0, #18
 80006bc:	f001 fc69 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006c0:	2012      	movs	r0, #18
 80006c2:	f001 fc82 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40012000 	.word	0x40012000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000
 80006dc:	200000e0 	.word	0x200000e0
 80006e0:	40026410 	.word	0x40026410

080006e4 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	if(hadc == &OBS_DETECTOR_ADC)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_ADC_ConvCpltCallback+0x1c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d101      	bne.n	80006f8 <HAL_ADC_ConvCpltCallback+0x14>
		// obstacle detector ISR
		isr_obs_detector();
 80006f4:	f000 fc84 	bl	8001000 <isr_obs_detector>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000098 	.word	0x20000098

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_DMA_Init+0x38>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <MX_DMA_Init+0x38>)
 8000710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_DMA_Init+0x38>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2038      	movs	r0, #56	; 0x38
 8000728:	f001 fc33 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800072c:	2038      	movs	r0, #56	; 0x38
 800072e:	f001 fc4c 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b45      	ldr	r3, [pc, #276]	; (800086c <MX_GPIO_Init+0x12c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a44      	ldr	r2, [pc, #272]	; (800086c <MX_GPIO_Init+0x12c>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b42      	ldr	r3, [pc, #264]	; (800086c <MX_GPIO_Init+0x12c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b3f      	ldr	r3, [pc, #252]	; (800086c <MX_GPIO_Init+0x12c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a3e      	ldr	r2, [pc, #248]	; (800086c <MX_GPIO_Init+0x12c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b3c      	ldr	r3, [pc, #240]	; (800086c <MX_GPIO_Init+0x12c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <MX_GPIO_Init+0x12c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a38      	ldr	r2, [pc, #224]	; (800086c <MX_GPIO_Init+0x12c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <MX_GPIO_Init+0x12c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <MX_GPIO_Init+0x12c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a32      	ldr	r2, [pc, #200]	; (800086c <MX_GPIO_Init+0x12c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b30      	ldr	r3, [pc, #192]	; (800086c <MX_GPIO_Init+0x12c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_GPIO_Init+0x12c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2c      	ldr	r2, [pc, #176]	; (800086c <MX_GPIO_Init+0x12c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_GPIO_Init+0x12c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|IN1_LEFT_Pin|IN2_RIGHT_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f24b 0101 	movw	r1, #45057	; 0xb001
 80007d4:	4826      	ldr	r0, [pc, #152]	; (8000870 <MX_GPIO_Init+0x130>)
 80007d6:	f002 f953 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN2_LEFT_GPIO_Port, IN2_LEFT_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	4824      	ldr	r0, [pc, #144]	; (8000874 <MX_GPIO_Init+0x134>)
 80007e2:	f002 f94d 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SENSOR8_Pin|SENSOR4_Pin|SENSOR5_Pin|USER_BTN_Pin;
 80007e6:	f242 032c 	movw	r3, #8236	; 0x202c
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	481f      	ldr	r0, [pc, #124]	; (8000878 <MX_GPIO_Init+0x138>)
 80007fc:	f001 ff7c 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000800:	2301      	movs	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_GPIO_Init+0x13c>)
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x140>)
 8000814:	f001 ff70 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|IN1_LEFT_Pin|IN2_RIGHT_Pin|IN1_RIGHT_Pin;
 8000818:	f24b 0301 	movw	r3, #45057	; 0xb001
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480f      	ldr	r0, [pc, #60]	; (8000870 <MX_GPIO_Init+0x130>)
 8000832:	f001 ff61 	bl	80026f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin;
 8000836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN2_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_GPIO_Init+0x134>)
 8000850:	f001 ff52 	bl	80026f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2006      	movs	r0, #6
 800085a:	f001 fb9a 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800085e:	2006      	movs	r0, #6
 8000860:	f001 fbb3 	bl	8001fca <HAL_NVIC_EnableIRQ>

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020400 	.word	0x40020400
 8000874:	40020000 	.word	0x40020000
 8000878:	40021400 	.word	0x40021400
 800087c:	10110000 	.word	0x10110000
 8000880:	40020800 	.word	0x40020800

08000884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PIN_A)
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d105      	bne.n	80008a0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000894:	2101      	movs	r1, #1
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000898:	f002 f90b 	bl	8002ab2 <HAL_GPIO_TogglePin>
		// Stop detector ISR
		isr_stop_detector();
 800089c:	f000 fbd8 	bl	8001050 <isr_stop_detector>
	}
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40020400 	.word	0x40020400
 80008ac:	00000000 	.word	0x00000000

080008b0 <lfollower_pid>:
		line.
@param	none
@retval	none
******************************************************************************/
void lfollower_pid(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	static float mean_err;

	// Apply PID to adjust motor PWM/velocity
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, 	DIG_TO_ANALOG(lf_sens[SENSOR_LEFT]),
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <lfollower_pid+0xa8>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	ee07 3a90 	vmov	s15, r3
 80008bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008c0:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000948 <lfollower_pid+0x98>
 80008c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008c8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000950 <lfollower_pid+0xa0>
 80008cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d0:	eef7 4bc7 	vcvt.f32.f64	s9, d7
						DIG_TO_ANALOG(lf_sens[SENSOR_RIGHT]));
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <lfollower_pid+0xa8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008e0:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000948 <lfollower_pid+0x98>
 80008e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008e8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000950 <lfollower_pid+0xa0>
 80008ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
	pid_calcule(&pid, 	DIG_TO_ANALOG(lf_sens[SENSOR_LEFT]),
 80008f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008f4:	eef0 0a67 	vmov.f32	s1, s15
 80008f8:	eeb0 0a64 	vmov.f32	s0, s9
 80008fc:	4817      	ldr	r0, [pc, #92]	; (800095c <lfollower_pid+0xac>)
 80008fe:	f000 f9d7 	bl	8000cb0 <pid_calcule>
	//sprintf(Tx_buffer, "sensor left %f\r\nsensor right %f\r\n", DIG_TO_ANALOG(lf_sens[SENSOR_LEFT]), DIG_TO_ANALOG(lf_sens[SENSOR_RIGHT]));
	//transmit_string(Tx_buffer);
	// according to calculated error = S_LEFT_VAL - S_RIGHT_VAL:
	// command var. LEFT is equal to (+pid.u)
	// command var. RIGHT is equal to (-pid.u)
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <lfollower_pid+0xac>)
 8000904:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000908:	eef1 7a67 	vneg.f32	s15, s15
 800090c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000960 <lfollower_pid+0xb0>
 8000910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000914:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000964 <lfollower_pid+0xb4>
 8000918:	ee37 7a87 	vadd.f32	s14, s15, s14
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <lfollower_pid+0xac>)
 800091e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000922:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000960 <lfollower_pid+0xb0>
 8000926:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800092a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000964 <lfollower_pid+0xb4>
 800092e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000932:	eef0 0a67 	vmov.f32	s1, s15
 8000936:	eeb0 0a47 	vmov.f32	s0, s14
 800093a:	f000 f949 	bl	8000bd0 <move_control>
	//move_control(GET_SPEED_P(-pid.u, mean_err), GET_SPEED_P(+pid.u, mean_err));
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	f3af 8000 	nop.w
 8000948:	66666666 	.word	0x66666666
 800094c:	400a6666 	.word	0x400a6666
 8000950:	00000000 	.word	0x00000000
 8000954:	40affe00 	.word	0x40affe00
 8000958:	20000084 	.word	0x20000084
 800095c:	20000000 	.word	0x20000000
 8000960:	3eb33334 	.word	0x3eb33334
 8000964:	3f266666 	.word	0x3f266666

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fde5 	bl	800153a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f81e 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff fee4 	bl	8000740 <MX_GPIO_Init>
  MX_DMA_Init();
 8000978:	f7ff fec4 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 800097c:	f7ff fdd8 	bl	8000530 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000980:	f000 fa22 	bl	8000dc8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000984:	f000 fd34 	bl	80013f0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000988:	f000 fbb6 	bl	80010f8 <MX_TIM3_Init>
  MX_TIM6_Init();
 800098c:	f000 fc36 	bl	80011fc <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = S_STOPPED;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <main+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <main+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  test_stop_sensor();
 800099c:	f000 fb8e 	bl	80010bc <test_stop_sensor>
	  break;
 80009a0:	bf00      	nop
 80009a2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000080 	.word	0x20000080
 80009ac:	20000081 	.word	0x20000081

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0b8      	sub	sp, #224	; 0xe0
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80009ba:	2234      	movs	r2, #52	; 0x34
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f005 fbf0 	bl	80061a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2290      	movs	r2, #144	; 0x90
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f005 fbe1 	bl	80061a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <SystemClock_Config+0x118>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <SystemClock_Config+0x118>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <SystemClock_Config+0x118>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fa:	4b34      	ldr	r3, [pc, #208]	; (8000acc <SystemClock_Config+0x11c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a33      	ldr	r2, [pc, #204]	; (8000acc <SystemClock_Config+0x11c>)
 8000a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <SystemClock_Config+0x11c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a36:	23d8      	movs	r3, #216	; 0xd8
 8000a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 f8b3 	bl	8002bb8 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000a58:	f000 f83a 	bl	8000ad0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a5c:	f002 f85c 	bl	8002b18 <HAL_PWREx_EnableOverDrive>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000a66:	f000 f833 	bl	8000ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a8c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a90:	2107      	movs	r1, #7
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fb3e 	bl	8003114 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000a9e:	f000 f817 	bl	8000ad0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fd05 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000abc:	f000 f808 	bl	8000ad0 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	37e0      	adds	r7, #224	; 0xe0
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <Error_Handler+0x8>
	...

08000adc <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <motor_init+0x1c>)
 8000aec:	f003 fb94 	bl	8004218 <HAL_TIM_PWM_Start>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000208 	.word	0x20000208

08000afc <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4803      	ldr	r0, [pc, #12]	; (8000b18 <motor_kill+0x1c>)
 8000b0c:	f003 fc7e 	bl	800440c <HAL_TIM_PWM_Stop>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000208 	.word	0x20000208

08000b1c <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6858      	ldr	r0, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8919      	ldrh	r1, [r3, #8]
 8000b34:	78bb      	ldrb	r3, [r7, #2]
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <motor_control+0x58>)
 8000b38:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	f001 ff9f 	bl	8002a80 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	68d8      	ldr	r0, [r3, #12]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	8a19      	ldrh	r1, [r3, #16]
 8000b4a:	78bb      	ldrb	r3, [r7, #2]
 8000b4c:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <motor_control+0x58>)
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	461a      	mov	r2, r3
 8000b56:	f001 ff93 	bl	8002a80 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	78fa      	ldrb	r2, [r7, #3]
 8000b62:	b292      	uxth	r2, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <motor_control+0x5c>)
 8000b68:	f000 fbf8 	bl	800135c <set_pwm>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	080061cc 	.word	0x080061cc
 8000b78:	20000208 	.word	0x20000208

08000b7c <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <move_start+0x1c>)
 8000b82:	f7ff ffab 	bl	8000adc <motor_init>
	motor_init(&motor_left);
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <move_start+0x20>)
 8000b88:	f7ff ffa8 	bl	8000adc <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <move_start+0x24>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000030 	.word	0x20000030
 8000b9c:	20000044 	.word	0x20000044
 8000ba0:	2000008c 	.word	0x2000008c

08000ba4 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <move_stop+0x1c>)
 8000baa:	f7ff ffa7 	bl	8000afc <motor_kill>
	motor_kill(&motor_left);
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <move_stop+0x20>)
 8000bb0:	f7ff ffa4 	bl	8000afc <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <move_stop+0x24>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000030 	.word	0x20000030
 8000bc4:	20000044 	.word	0x20000044
 8000bc8:	2000008c 	.word	0x2000008c
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <move_control>:
		// FORWARD
		MOTOR_FORWARD
};

void move_control(float speedL, float speedR)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bda:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <move_control+0xd0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8000be6:	f7ff ffc9 	bl	8000b7c <move_start>

	// check if speedL and speedR are positive/negative
	uint8_t dirL = 0.99 + speedL;
 8000bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf2:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000c90 <move_control+0xc0>
 8000bf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bfa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bfe:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c02:	793b      	ldrb	r3, [r7, #4]
 8000c04:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8000c06:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000c90 <move_control+0xc0>
 8000c12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c1e:	793b      	ldrb	r3, [r7, #4]
 8000c20:	75bb      	strb	r3, [r7, #22]

	motor_control(&motor_right, fabs(speedR) * 100, move_dir[dirR & 0x01]);
 8000c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c26:	eef0 7ae7 	vabs.f32	s15, s15
 8000c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000c98 <move_control+0xc8>
 8000c32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c3e:	793b      	ldrb	r3, [r7, #4]
 8000c40:	b2d9      	uxtb	r1, r3
 8000c42:	7dbb      	ldrb	r3, [r7, #22]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <move_control+0xd4>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <move_control+0xd8>)
 8000c50:	f7ff ff64 	bl	8000b1c <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, move_dir[dirL & 0x01]);
 8000c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c58:	eef0 7ae7 	vabs.f32	s15, s15
 8000c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c60:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000c98 <move_control+0xc8>
 8000c64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c68:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c6c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c70:	793b      	ldrb	r3, [r7, #4]
 8000c72:	b2d9      	uxtb	r1, r3
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <move_control+0xd4>)
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	480a      	ldr	r0, [pc, #40]	; (8000cac <move_control+0xdc>)
 8000c82:	f7ff ff4b 	bl	8000b1c <motor_control>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	7ae147ae 	.word	0x7ae147ae
 8000c94:	3fefae14 	.word	0x3fefae14
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40590000 	.word	0x40590000
 8000ca0:	2000008c 	.word	0x2000008c
 8000ca4:	080061d4 	.word	0x080061d4
 8000ca8:	20000030 	.word	0x20000030
 8000cac:	20000044 	.word	0x20000044

08000cb0 <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000cbc:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 8000cc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d10:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000dc4 <pid_calcule+0x114>
 8000d14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	ed93 7a00 	vldr	s14, [r3]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	68da      	ldr	r2, [r3, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	69da      	ldr	r2, [r3, #28]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	dd08      	ble.n	8000d8e <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	699a      	ldr	r2, [r3, #24]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8000d8c:	e013      	b.n	8000db6 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d400      	bmi.n	8000da6 <pid_calcule+0xf6>
}
 8000da4:	e007      	b.n	8000db6 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	699a      	ldr	r2, [r3, #24]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	615a      	str	r2, [r3, #20]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	3e99999a 	.word	0x3e99999a

08000dc8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <MX_SPI3_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000de2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000de6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dfa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000dfe:	2218      	movs	r2, #24
 8000e00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e16:	2207      	movs	r2, #7
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_SPI3_Init+0x74>)
 8000e28:	f002 ff72 	bl	8003d10 <HAL_SPI_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f7ff fe4d 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000140 	.word	0x20000140
 8000e40:	40003c00 	.word	0x40003c00

08000e44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a1b      	ldr	r2, [pc, #108]	; (8000ed0 <HAL_SPI_MspInit+0x8c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d130      	bne.n	8000ec8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_SPI_MspInit+0x90>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_SPI_MspInit+0x94>)
 8000eb4:	f001 fc20 	bl	80026f8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2033      	movs	r0, #51	; 0x33
 8000ebe:	f001 f868 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000ec2:	2033      	movs	r0, #51	; 0x33
 8000ec4:	f001 f881 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40003c00 	.word	0x40003c00
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020800 	.word	0x40020800

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_MspInit+0x44>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x44>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x44>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x44>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 fb20 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f001 fdb3 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <ADC_IRQHandler+0x10>)
 8000f8e:	f000 fb75 	bl	800167c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000098 	.word	0x20000098

08000f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM3_IRQHandler+0x10>)
 8000fa2:	f003 fab3 	bl	800450c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000208 	.word	0x20000208

08000fb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART3_IRQHandler+0x10>)
 8000fb6:	f004 fa7f 	bl	80054b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	200002a0 	.word	0x200002a0

08000fc4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <SPI3_IRQHandler+0x10>)
 8000fca:	f002 ff4d 	bl	8003e68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000140 	.word	0x20000140

08000fd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM6_DAC_IRQHandler+0x10>)
 8000fde:	f003 fa95 	bl	800450c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000254 	.word	0x20000254

08000fec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA2_Stream0_IRQHandler+0x10>)
 8000ff2:	f001 f945 	bl	8002280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000e0 	.word	0x200000e0

08001000 <isr_obs_detector>:
- The closer the object is to the sensor, the higher value will be measured
  by the sensor.
- ADC_DISTANCE_LIMIT is the limit that defines that an object has been found.
******************************************************************************/
void isr_obs_detector(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	// Digital value of distance
	static uint32_t distance;
	static uint32_t old_distance = 0;

	// read ADC value
	distance = HAL_ADC_GetValue(&OBS_DETECTOR_ADC);
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <isr_obs_detector+0x40>)
 8001006:	f000 fc7a 	bl	80018fe <HAL_ADC_GetValue>
 800100a:	4603      	mov	r3, r0
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <isr_obs_detector+0x44>)
 800100e:	6013      	str	r3, [r2, #0]

	// Obstacle found flag update
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <isr_obs_detector+0x44>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f240 4272 	movw	r2, #1138	; 0x472
 8001018:	4293      	cmp	r3, r2
 800101a:	d907      	bls.n	800102c <isr_obs_detector+0x2c>
						(old_distance >= ADC_DISTANCE_LIMIT));
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <isr_obs_detector+0x48>)
 800101e:	681b      	ldr	r3, [r3, #0]
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8001020:	f240 4272 	movw	r2, #1138	; 0x472
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <isr_obs_detector+0x2c>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <isr_obs_detector+0x2e>
 800102c:	2300      	movs	r3, #0
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <isr_obs_detector+0x4c>)
 8001032:	701a      	strb	r2, [r3, #0]
	// update old distance variable
	old_distance = distance;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <isr_obs_detector+0x44>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a03      	ldr	r2, [pc, #12]	; (8001048 <isr_obs_detector+0x48>)
 800103a:	6013      	str	r3, [r2, #0]
	char str[32];
	snprintf(str, sizeof(str), "Dist: %d, flag%d\n\r", (int)distance,
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000098 	.word	0x20000098
 8001044:	20000090 	.word	0x20000090
 8001048:	20000094 	.word	0x20000094
 800104c:	2000008d 	.word	0x2000008d

08001050 <isr_stop_detector>:

- An external interrupt is generated when PIN_A = 1. There this function is
  used to check PinB value.
******************************************************************************/
void isr_stop_detector(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	GPIO_PinState pinB;
	pinB = HAL_GPIO_ReadPin(PIN_B_PORT, PIN_B);
 8001056:	2104      	movs	r1, #4
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <isr_stop_detector+0x3c>)
 800105a:	f001 fcf9 	bl	8002a50 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]

	cross_found_flag = pinB & 0x01;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <isr_stop_detector+0x40>)
 800106c:	701a      	strb	r2, [r3, #0]
	room_found_flag = (~pinB) & 0x01;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <isr_stop_detector+0x44>)
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021400 	.word	0x40021400
 8001090:	2000008e 	.word	0x2000008e
 8001094:	2000008f 	.word	0x2000008f

08001098 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <test_stop_sensor>:
	  move_stop();
	  HAL_Delay(2000);
}

void test_stop_sensor(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	// init stop sensors
	//stop_sensors_init();

	// start moving forwards
	move_start();
 80010c0:	f7ff fd5c 	bl	8000b7c <move_start>
	move_forward(0.7);
 80010c4:	eddf 0a09 	vldr	s1, [pc, #36]	; 80010ec <test_stop_sensor+0x30>
 80010c8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80010ec <test_stop_sensor+0x30>
 80010cc:	f7ff fd80 	bl	8000bd0 <move_control>

	// wait for extern interrupt
	while((!cross_found_flag) && (!room_found_flag))
 80010d0:	bf00      	nop
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <test_stop_sensor+0x34>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <test_stop_sensor+0x26>
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <test_stop_sensor+0x38>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f7      	beq.n	80010d2 <test_stop_sensor+0x16>
		;

	// stop movement
	move_stop();
 80010e2:	f7ff fd5f 	bl	8000ba4 <move_stop>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	3f333333 	.word	0x3f333333
 80010f0:	2000008e 	.word	0x2000008e
 80010f4:	2000008f 	.word	0x2000008f

080010f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800112c:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <MX_TIM3_Init+0x100>)
 800112e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_TIM3_Init+0xfc>)
 8001132:	226b      	movs	r2, #107	; 0x6b
 8001134:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_TIM3_Init+0xfc>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-0;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800113e:	2264      	movs	r2, #100	; 0x64
 8001140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_TIM3_Init+0xfc>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <MX_TIM3_Init+0xfc>)
 8001150:	f002 ffa9 	bl	80040a6 <HAL_TIM_Base_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800115a:	f7ff fcb9 	bl	8000ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001168:	4619      	mov	r1, r3
 800116a:	4822      	ldr	r0, [pc, #136]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800116c:	f003 fbfe 	bl	800496c <HAL_TIM_ConfigClockSource>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001176:	f7ff fcab 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800117a:	481e      	ldr	r0, [pc, #120]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800117c:	f002 ffea 	bl	8004154 <HAL_TIM_PWM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001186:	f7ff fca3 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4816      	ldr	r0, [pc, #88]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800119a:	f004 f893 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011a4:	f7ff fc94 	bl	8000ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM3_Init+0xfc>)
 80011c0:	f003 fac4 	bl	800474c <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80011ca:	f7ff fc81 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	2204      	movs	r2, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	4807      	ldr	r0, [pc, #28]	; (80011f4 <MX_TIM3_Init+0xfc>)
 80011d6:	f003 fab9 	bl	800474c <HAL_TIM_PWM_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011e0:	f7ff fc76 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <MX_TIM3_Init+0xfc>)
 80011e6:	f000 f881 	bl	80012ec <HAL_TIM_MspPostInit>

}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	; 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000208 	.word	0x20000208
 80011f8:	40000400 	.word	0x40000400

080011fc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_TIM6_Init+0x64>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_TIM6_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_TIM6_Init+0x64>)
 8001214:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001218:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_TIM6_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_TIM6_Init+0x64>)
 8001222:	2263      	movs	r2, #99	; 0x63
 8001224:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_TIM6_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_TIM6_Init+0x64>)
 800122e:	f002 ff3a 	bl	80040a6 <HAL_TIM_Base_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001238:	f7ff fc4a 	bl	8000ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800123c:	2320      	movs	r3, #32
 800123e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_TIM6_Init+0x64>)
 800124a:	f004 f83b 	bl	80052c4 <HAL_TIMEx_MasterConfigSynchronization>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001254:	f7ff fc3c 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000254 	.word	0x20000254
 8001264:	40001000 	.word	0x40001000

08001268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <HAL_TIM_Base_MspInit+0x78>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d114      	bne.n	80012a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201d      	movs	r0, #29
 8001298:	f000 fe7b 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800129c:	201d      	movs	r0, #29
 800129e:	f000 fe94 	bl	8001fca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80012a2:	e018      	b.n	80012d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_TIM_Base_MspInit+0x80>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d113      	bne.n	80012d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x7c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	2036      	movs	r0, #54	; 0x36
 80012cc:	f000 fe61 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d0:	2036      	movs	r0, #54	; 0x36
 80012d2:	f000 fe7a 	bl	8001fca <HAL_NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40000400 	.word	0x40000400
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40001000 	.word	0x40001000

080012ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_TIM_MspPostInit+0x64>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d11b      	bne.n	8001346 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_TIM_MspPostInit+0x68>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_TIM_MspPostInit+0x68>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_TIM_MspPostInit+0x68>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin|PWM_LEFT_Pin;
 8001326:	23c0      	movs	r3, #192	; 0xc0
 8001328:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001336:	2302      	movs	r3, #2
 8001338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <HAL_TIM_MspPostInit+0x6c>)
 8001342:	f001 f9d9 	bl	80026f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40000400 	.word	0x40000400
 8001354:	40023800 	.word	0x40023800
 8001358:	40020800 	.word	0x40020800

0800135c <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d104      	bne.n	800137c <set_pwm+0x20>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	883a      	ldrh	r2, [r7, #0]
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
}
 800137a:	e023      	b.n	80013c4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d104      	bne.n	800138c <set_pwm+0x30>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	883b      	ldrh	r3, [r7, #0]
 8001388:	6393      	str	r3, [r2, #56]	; 0x38
}
 800138a:	e01b      	b.n	80013c4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	2b08      	cmp	r3, #8
 8001390:	d104      	bne.n	800139c <set_pwm+0x40>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	883b      	ldrh	r3, [r7, #0]
 8001398:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800139a:	e013      	b.n	80013c4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d104      	bne.n	80013ac <set_pwm+0x50>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	883b      	ldrh	r3, [r7, #0]
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80013aa:	e00b      	b.n	80013c4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d104      	bne.n	80013bc <set_pwm+0x60>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	883b      	ldrh	r3, [r7, #0]
 80013b8:	6593      	str	r3, [r2, #88]	; 0x58
}
 80013ba:	e003      	b.n	80013c4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	883b      	ldrh	r3, [r7, #0]
 80013c2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		lfollower_pid();
 80013e0:	f7ff fa66 	bl	80008b0 <lfollower_pid>
	}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000254 	.word	0x20000254

080013f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_USART3_UART_Init+0x58>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <MX_USART3_UART_Init+0x5c>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_USART3_UART_Init+0x58>)
 80013fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001400:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_USART3_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_USART3_UART_Init+0x58>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_USART3_UART_Init+0x58>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_USART3_UART_Init+0x58>)
 8001434:	f003 fff2 	bl	800541c <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800143e:	f7ff fb47 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002a0 	.word	0x200002a0
 800144c:	40004800 	.word	0x40004800

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <HAL_UART_MspInit+0x8c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d130      	bne.n	80014d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_UART_MspInit+0x90>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_UART_MspInit+0x90>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x90>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_UART_MspInit+0x90>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0x90>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_UART_MspInit+0x90>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b4:	2307      	movs	r3, #7
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <HAL_UART_MspInit+0x94>)
 80014c0:	f001 f91a 	bl	80026f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2027      	movs	r0, #39	; 0x27
 80014ca:	f000 fd62 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ce:	2027      	movs	r0, #39	; 0x27
 80014d0:	f000 fd7b 	bl	8001fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40004800 	.word	0x40004800
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020c00 	.word	0x40020c00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001504:	4c0b      	ldr	r4, [pc, #44]	; (8001534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001512:	f7ff fdc1 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001516:	f004 fe21 	bl	800615c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fa25 	bl	8000968 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800152c:	08006208 	.word	0x08006208
  ldr r2, =_sbss
 8001530:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001534:	20000328 	.word	0x20000328

08001538 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <CAN1_RX0_IRQHandler>

0800153a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 fd1c 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f805 	bl	8001554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800154a:	f7ff fcc7 	bl	8000edc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x54>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x58>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156a:	fbb3 f3f1 	udiv	r3, r3, r1
 800156e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd37 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e00e      	b.n	80015a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b0f      	cmp	r3, #15
 8001586:	d80a      	bhi.n	800159e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001588:	2200      	movs	r2, #0
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f000 fcff 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_InitTick+0x5c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	e000      	b.n	80015a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000058 	.word	0x20000058
 80015ac:	20000060 	.word	0x20000060
 80015b0:	2000005c 	.word	0x2000005c

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000060 	.word	0x20000060
 80015d8:	20000324 	.word	0x20000324

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000324 	.word	0x20000324

080015f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e031      	b.n	800166e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe ffea 	bl	80005ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_ADC_Init+0x84>)
 8001638:	4013      	ands	r3, r2
 800163a:	f043 0202 	orr.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fac6 	bl	8001bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
 800165e:	e001      	b.n	8001664 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	ffffeefd 	.word	0xffffeefd

0800167c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	bf0c      	ite	eq
 80016b0:	2301      	moveq	r3, #1
 80016b2:	2300      	movne	r3, #0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d049      	beq.n	8001752 <HAL_ADC_IRQHandler+0xd6>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d046      	beq.n	8001752 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d105      	bne.n	80016dc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d12b      	bne.n	8001742 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d127      	bne.n	8001742 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800170a:	2b00      	cmp	r3, #0
 800170c:	d119      	bne.n	8001742 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0220 	bic.w	r2, r2, #32
 800171c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f043 0201 	orr.w	r2, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe ffce 	bl	80006e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f06f 0212 	mvn.w	r2, #18
 8001750:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001772:	2b80      	cmp	r3, #128	; 0x80
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d057      	beq.n	8001834 <HAL_ADC_IRQHandler+0x1b8>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d054      	beq.n	8001834 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d139      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d006      	beq.n	80017cc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d12b      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d124      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d11d      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 facf 	bl	8001dc8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f06f 020c 	mvn.w	r2, #12
 8001832:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b40      	cmp	r3, #64	; 0x40
 8001856:	bf0c      	ite	eq
 8001858:	2301      	moveq	r3, #1
 800185a:	2300      	movne	r3, #0
 800185c:	b2db      	uxtb	r3, r3
 800185e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d017      	beq.n	8001896 <HAL_ADC_IRQHandler+0x21a>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d014      	beq.n	8001896 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b01      	cmp	r3, #1
 8001878:	d10d      	bne.n	8001896 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f846 	bl	8001918 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0201 	mvn.w	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d015      	beq.n	80018f6 <HAL_ADC_IRQHandler+0x27a>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d012      	beq.n	80018f6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0202 	orr.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0220 	mvn.w	r2, #32
 80018e4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f820 	bl	800192c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0220 	mvn.w	r2, #32
 80018f4:	601a      	str	r2, [r3, #0]
  }
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1c>
 8001958:	2302      	movs	r3, #2
 800195a:	e12a      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0x272>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d93a      	bls.n	80019e2 <HAL_ADC_ConfigChannel+0xa2>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001974:	d035      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1e      	subs	r3, #30
 800198c:	2207      	movs	r2, #7
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a87      	ldr	r2, [pc, #540]	; (8001bc0 <HAL_ADC_ConfigChannel+0x280>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d10a      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68d9      	ldr	r1, [r3, #12]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	061a      	lsls	r2, r3, #24
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019ba:	e035      	b.n	8001a28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4403      	add	r3, r0
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	409a      	lsls	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e0:	e022      	b.n	8001a28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	2207      	movs	r2, #7
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43da      	mvns	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6919      	ldr	r1, [r3, #16]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4403      	add	r3, r0
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b06      	cmp	r3, #6
 8001a2e:	d824      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b05      	subs	r3, #5
 8001a42:	221f      	movs	r2, #31
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43da      	mvns	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	400a      	ands	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
 8001a78:	e04c      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d824      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b23      	subs	r3, #35	; 0x23
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	3b23      	subs	r3, #35	; 0x23
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aca:	e023      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b41      	subs	r3, #65	; 0x41
 8001ade:	221f      	movs	r2, #31
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	400a      	ands	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3b41      	subs	r3, #65	; 0x41
 8001b08:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_ADC_ConfigChannel+0x284>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d10a      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1f4>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b26:	d105      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <HAL_ADC_ConfigChannel+0x284>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d109      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x212>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <HAL_ADC_ConfigChannel+0x284>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d125      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x268>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_ADC_ConfigChannel+0x280>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d003      	beq.n	8001b6e <HAL_ADC_ConfigChannel+0x22e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b11      	cmp	r3, #17
 8001b6c:	d11c      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_ADC_ConfigChannel+0x288>)
 8001b74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_ADC_ConfigChannel+0x280>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d111      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_ADC_ConfigChannel+0x28c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_ADC_ConfigChannel+0x290>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9a      	lsrs	r2, r3, #18
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	10000012 	.word	0x10000012
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	20000058 	.word	0x20000058
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001bdc:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <ADC_Init+0x1ec>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4a77      	ldr	r2, [pc, #476]	; (8001dc0 <ADC_Init+0x1ec>)
 8001be2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001be6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001be8:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <ADC_Init+0x1ec>)
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4973      	ldr	r1, [pc, #460]	; (8001dc0 <ADC_Init+0x1ec>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	021a      	lsls	r2, r3, #8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <ADC_Init+0x1f0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d022      	beq.n	8001cae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	e00f      	b.n	8001cce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0202 	bic.w	r2, r2, #2
 8001cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	005a      	lsls	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	3b01      	subs	r3, #1
 8001d28:	035a      	lsls	r2, r3, #13
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e007      	b.n	8001d44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	051a      	lsls	r2, r3, #20
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d86:	025a      	lsls	r2, r3, #9
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	029a      	lsls	r2, r3, #10
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	0f000001 	.word	0x0f000001

08001dc8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	05fa0000 	.word	0x05fa0000

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff29 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa4:	f7ff ff3e 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	6978      	ldr	r0, [r7, #20]
 8001fb0:	f7ff ff8e 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff5d 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff31 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffa2 	bl	8001f38 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800200c:	f7ff fae6 	bl	80015dc <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e099      	b.n	8002150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203c:	e00f      	b.n	800205e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203e:	f7ff facd 	bl	80015dc <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b05      	cmp	r3, #5
 800204a:	d908      	bls.n	800205e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e078      	b.n	8002150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1e8      	bne.n	800203e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_DMA_Init+0x158>)
 8002078:	4013      	ands	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d107      	bne.n	80020c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4313      	orrs	r3, r2
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f023 0307 	bic.w	r3, r3, #7
 80020de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d117      	bne.n	8002122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00e      	beq.n	8002122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fa7b 	bl	8002600 <DMA_CheckFifoParam>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800211e:	2301      	movs	r3, #1
 8002120:	e016      	b.n	8002150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa32 	bl	8002594 <DMA_CalcBaseAndBitshift>
 8002130:	4603      	mov	r3, r0
 8002132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	223f      	movs	r2, #63	; 0x3f
 800213a:	409a      	lsls	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	e010803f 	.word	0xe010803f

0800215c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800216a:	f7ff fa37 	bl	80015dc <HAL_GetTick>
 800216e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d008      	beq.n	800218e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e052      	b.n	8002234 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0216 	bic.w	r2, r2, #22
 800219c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_DMA_Abort+0x62>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0208 	bic.w	r2, r2, #8
 80021cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021de:	e013      	b.n	8002208 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e0:	f7ff f9fc 	bl	80015dc <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d90c      	bls.n	8002208 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2220      	movs	r2, #32
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e015      	b.n	8002234 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1e4      	bne.n	80021e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221a:	223f      	movs	r2, #63	; 0x3f
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d004      	beq.n	800225a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00c      	b.n	8002274 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2205      	movs	r2, #5
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0201 	bic.w	r2, r2, #1
 8002270:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_DMA_IRQHandler+0x258>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a92      	ldr	r2, [pc, #584]	; (80024dc <HAL_DMA_IRQHandler+0x25c>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022aa:	2208      	movs	r2, #8
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01a      	beq.n	80022ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0204 	bic.w	r2, r2, #4
 80022d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2208      	movs	r2, #8
 80022da:	409a      	lsls	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	2201      	movs	r2, #1
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d012      	beq.n	8002322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230e:	2201      	movs	r2, #1
 8002310:	409a      	lsls	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231a:	f043 0202 	orr.w	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2204      	movs	r2, #4
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d012      	beq.n	8002358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2204      	movs	r2, #4
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f043 0204 	orr.w	r2, r3, #4
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235c:	2210      	movs	r2, #16
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d043      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d03c      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2210      	movs	r2, #16
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d018      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d024      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
 80023ae:	e01f      	b.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
 80023c0:	e016      	b.n	80023f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0208 	bic.w	r2, r2, #8
 80023de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2220      	movs	r2, #32
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 808e 	beq.w	800251e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8086 	beq.w	800251e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002416:	2220      	movs	r2, #32
 8002418:	409a      	lsls	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b05      	cmp	r3, #5
 8002428:	d136      	bne.n	8002498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0216 	bic.w	r2, r2, #22
 8002438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_DMA_IRQHandler+0x1da>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0208 	bic.w	r2, r2, #8
 8002468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	223f      	movs	r2, #63	; 0x3f
 8002470:	409a      	lsls	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248a:	2b00      	cmp	r3, #0
 800248c:	d07d      	beq.n	800258a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
        }
        return;
 8002496:	e078      	b.n	800258a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01c      	beq.n	80024e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d108      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d030      	beq.n	800251e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e02b      	b.n	800251e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d027      	beq.n	800251e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	4798      	blx	r3
 80024d6:	e022      	b.n	800251e <HAL_DMA_IRQHandler+0x29e>
 80024d8:	20000058 	.word	0x20000058
 80024dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0210 	bic.w	r2, r2, #16
 80024fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	2b00      	cmp	r3, #0
 8002524:	d032      	beq.n	800258c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d022      	beq.n	8002578 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2205      	movs	r2, #5
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3301      	adds	r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	429a      	cmp	r2, r3
 8002554:	d307      	bcc.n	8002566 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f2      	bne.n	800254a <HAL_DMA_IRQHandler+0x2ca>
 8002564:	e000      	b.n	8002568 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002566:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	4798      	blx	r3
 8002588:	e000      	b.n	800258c <HAL_DMA_IRQHandler+0x30c>
        return;
 800258a:	bf00      	nop
    }
  }
}
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop

08002594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	3b10      	subs	r3, #16
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <DMA_CalcBaseAndBitshift+0x60>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ae:	4a12      	ldr	r2, [pc, #72]	; (80025f8 <DMA_CalcBaseAndBitshift+0x64>)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d908      	bls.n	80025d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <DMA_CalcBaseAndBitshift+0x68>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	1d1a      	adds	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58
 80025d2:	e006      	b.n	80025e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <DMA_CalcBaseAndBitshift+0x68>)
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	aaaaaaab 	.word	0xaaaaaaab
 80025f8:	080061f0 	.word	0x080061f0
 80025fc:	fffffc00 	.word	0xfffffc00

08002600 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d11f      	bne.n	800265a <DMA_CheckFifoParam+0x5a>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d856      	bhi.n	80026ce <DMA_CheckFifoParam+0xce>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <DMA_CheckFifoParam+0x28>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	0800264b 	.word	0x0800264b
 8002630:	08002639 	.word	0x08002639
 8002634:	080026cf 	.word	0x080026cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d046      	beq.n	80026d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002648:	e043      	b.n	80026d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002652:	d140      	bne.n	80026d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e03d      	b.n	80026d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002662:	d121      	bne.n	80026a8 <DMA_CheckFifoParam+0xa8>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d837      	bhi.n	80026da <DMA_CheckFifoParam+0xda>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <DMA_CheckFifoParam+0x70>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	08002681 	.word	0x08002681
 8002674:	08002687 	.word	0x08002687
 8002678:	08002681 	.word	0x08002681
 800267c:	08002699 	.word	0x08002699
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e030      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d025      	beq.n	80026de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e022      	b.n	80026de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a0:	d11f      	bne.n	80026e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026a6:	e01c      	b.n	80026e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d903      	bls.n	80026b6 <DMA_CheckFifoParam+0xb6>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d003      	beq.n	80026bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b4:	e018      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ba:	e015      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e00b      	b.n	80026e6 <DMA_CheckFifoParam+0xe6>
      break;
 80026ce:	bf00      	nop
 80026d0:	e00a      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d2:	bf00      	nop
 80026d4:	e008      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e006      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e004      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <DMA_CheckFifoParam+0xe8>
      break;
 80026e6:	bf00      	nop
    }
  } 
  
  return status; 
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop

080026f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e175      	b.n	8002a04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8164 	bne.w	80029fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d00b      	beq.n	8002756 <HAL_GPIO_Init+0x5e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274a:	2b11      	cmp	r3, #17
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b12      	cmp	r3, #18
 8002754:	d130      	bne.n	80027b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0201 	and.w	r2, r3, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x100>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b12      	cmp	r3, #18
 80027f6:	d123      	bne.n	8002840 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80be 	beq.w	80029fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a65      	ldr	r2, [pc, #404]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_GPIO_Init+0x324>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800289a:	4a61      	ldr	r2, [pc, #388]	; (8002a20 <HAL_GPIO_Init+0x328>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	3302      	adds	r3, #2
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_GPIO_Init+0x32c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d037      	beq.n	8002936 <HAL_GPIO_Init+0x23e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a57      	ldr	r2, [pc, #348]	; (8002a28 <HAL_GPIO_Init+0x330>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d031      	beq.n	8002932 <HAL_GPIO_Init+0x23a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a56      	ldr	r2, [pc, #344]	; (8002a2c <HAL_GPIO_Init+0x334>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d02b      	beq.n	800292e <HAL_GPIO_Init+0x236>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a55      	ldr	r2, [pc, #340]	; (8002a30 <HAL_GPIO_Init+0x338>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_Init+0x232>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <HAL_GPIO_Init+0x33c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_Init+0x22e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a53      	ldr	r2, [pc, #332]	; (8002a38 <HAL_GPIO_Init+0x340>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x22a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_GPIO_Init+0x344>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x226>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a51      	ldr	r2, [pc, #324]	; (8002a40 <HAL_GPIO_Init+0x348>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x222>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_GPIO_Init+0x34c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x21e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <HAL_GPIO_Init+0x350>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x21a>
 800290e:	2309      	movs	r3, #9
 8002910:	e012      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002912:	230a      	movs	r3, #10
 8002914:	e010      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002916:	2308      	movs	r3, #8
 8002918:	e00e      	b.n	8002938 <HAL_GPIO_Init+0x240>
 800291a:	2307      	movs	r3, #7
 800291c:	e00c      	b.n	8002938 <HAL_GPIO_Init+0x240>
 800291e:	2306      	movs	r3, #6
 8002920:	e00a      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002922:	2305      	movs	r3, #5
 8002924:	e008      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002926:	2304      	movs	r3, #4
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x240>
 800292a:	2303      	movs	r3, #3
 800292c:	e004      	b.n	8002938 <HAL_GPIO_Init+0x240>
 800292e:	2302      	movs	r3, #2
 8002930:	e002      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_GPIO_Init+0x240>
 8002936:	2300      	movs	r3, #0
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f002 0203 	and.w	r2, r2, #3
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	4093      	lsls	r3, r2
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002948:	4935      	ldr	r1, [pc, #212]	; (8002a20 <HAL_GPIO_Init+0x328>)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	089b      	lsrs	r3, r3, #2
 800294e:	3302      	adds	r3, #2
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_GPIO_Init+0x354>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297a:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <HAL_GPIO_Init+0x354>)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_GPIO_Init+0x354>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <HAL_GPIO_Init+0x354>)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029aa:	4b28      	ldr	r3, [pc, #160]	; (8002a4c <HAL_GPIO_Init+0x354>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ce:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_GPIO_Init+0x354>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_GPIO_Init+0x354>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f8:	4a14      	ldr	r2, [pc, #80]	; (8002a4c <HAL_GPIO_Init+0x354>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3301      	adds	r3, #1
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	f67f ae86 	bls.w	8002718 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40020000 	.word	0x40020000
 8002a28:	40020400 	.word	0x40020400
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40020c00 	.word	0x40020c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40021400 	.word	0x40021400
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	40021c00 	.word	0x40021c00
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40022400 	.word	0x40022400
 8002a4c:	40013c00 	.word	0x40013c00

08002a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac4:	887a      	ldrh	r2, [r7, #2]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	041a      	lsls	r2, r3, #16
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43d9      	mvns	r1, r3
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afe:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd febc 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b46:	f7fe fd49 	bl	80015dc <HAL_GetTick>
 8002b4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4c:	e009      	b.n	8002b62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b4e:	f7fe fd45 	bl	80015dc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5c:	d901      	bls.n	8002b62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e022      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7fe fd2e 	bl	80015dc <HAL_GetTick>
 8002b80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b82:	e009      	b.n	8002b98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b84:	f7fe fd2a 	bl	80015dc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b92:	d901      	bls.n	8002b98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e007      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e29b      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8087 	beq.w	8002cea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bdc:	4b96      	ldr	r3, [pc, #600]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d00c      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be8:	4b93      	ldr	r3, [pc, #588]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d112      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
 8002bf4:	4b90      	ldr	r3, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c00:	d10b      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c02:	4b8d      	ldr	r3, [pc, #564]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d06c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x130>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d168      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e275      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c22:	d106      	bne.n	8002c32 <HAL_RCC_OscConfig+0x7a>
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e02e      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x9c>
 8002c3a:	4b7f      	ldr	r3, [pc, #508]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7e      	ldr	r2, [pc, #504]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b7c      	ldr	r3, [pc, #496]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7b      	ldr	r2, [pc, #492]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a75      	ldr	r2, [pc, #468]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b73      	ldr	r3, [pc, #460]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a72      	ldr	r2, [pc, #456]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xd8>
 8002c78:	4b6f      	ldr	r3, [pc, #444]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6b      	ldr	r2, [pc, #428]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe fca0 	bl	80015dc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fc9c 	bl	80015dc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	; 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e229      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xe8>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe fc8c 	bl	80015dc <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fc88 	bl	80015dc <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e215      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x110>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d069      	beq.n	8002dca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d11c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d116      	bne.n	8002d48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e1e9      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	493d      	ldr	r1, [pc, #244]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	e040      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fc3e 	bl	80015dc <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fe fc3a 	bl	80015dc <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1c7      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4929      	ldr	r1, [pc, #164]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d98:	4b27      	ldr	r3, [pc, #156]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fc1a 	bl	80015dc <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dac:	f7fe fc16 	bl	80015dc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1a3      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d038      	beq.n	8002e48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de2:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dea:	f7fe fbf7 	bl	80015dc <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe fbf3 	bl	80015dc <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e180      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x23a>
 8002e10:	e01a      	b.n	8002e48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_RCC_OscConfig+0x280>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fbdd 	bl	80015dc <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e26:	f7fe fbd9 	bl	80015dc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d903      	bls.n	8002e3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e166      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
 8002e38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ee      	bne.n	8002e26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a4 	beq.w	8002f9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	4b8c      	ldr	r3, [pc, #560]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b89      	ldr	r3, [pc, #548]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a88      	ldr	r2, [pc, #544]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b86      	ldr	r3, [pc, #536]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	4b83      	ldr	r3, [pc, #524]	; (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e8a:	4b80      	ldr	r3, [pc, #512]	; (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7f      	ldr	r2, [pc, #508]	; (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fba1 	bl	80015dc <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe fb9d 	bl	80015dc <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	; 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e12a      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x4d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31a>
 8002ec4:	4b70      	ldr	r3, [pc, #448]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a6f      	ldr	r2, [pc, #444]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e02d      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x33c>
 8002eda:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a67      	ldr	r2, [pc, #412]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	e01c      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b05      	cmp	r3, #5
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x35e>
 8002efc:	4b62      	ldr	r3, [pc, #392]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a61      	ldr	r2, [pc, #388]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a5e      	ldr	r2, [pc, #376]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e00b      	b.n	8002f2e <HAL_RCC_OscConfig+0x376>
 8002f16:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a5b      	ldr	r2, [pc, #364]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	4b59      	ldr	r3, [pc, #356]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	f023 0304 	bic.w	r3, r3, #4
 8002f2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fb51 	bl	80015dc <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fb4d 	bl	80015dc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0d8      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f54:	4b4c      	ldr	r3, [pc, #304]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0ee      	beq.n	8002f3e <HAL_RCC_OscConfig+0x386>
 8002f60:	e014      	b.n	8002f8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f62:	f7fe fb3b 	bl	80015dc <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f68:	e00a      	b.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7fe fb37 	bl	80015dc <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0c2      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ee      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d105      	bne.n	8002f9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b3d      	ldr	r3, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a3c      	ldr	r2, [pc, #240]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80ae 	beq.w	8003104 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa8:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d06d      	beq.n	8003090 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d14b      	bne.n	8003054 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fb08 	bl	80015dc <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fb04 	bl	80015dc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e091      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	019b      	lsls	r3, r3, #6
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	3b01      	subs	r3, #1
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fe fad6 	bl	80015dc <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fad2 	bl	80015dc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05f      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x47c>
 8003052:	e057      	b.n	8003104 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003054:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800305a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fe fabc 	bl	80015dc <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fab8 	bl	80015dc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e045      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x4b0>
 8003086:	e03d      	b.n	8003104 <HAL_RCC_OscConfig+0x54c>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_RCC_OscConfig+0x558>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d030      	beq.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d129      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d122      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d119      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d10f      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0d0      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d910      	bls.n	800315c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 020f 	bic.w	r2, r3, #15
 8003142:	4965      	ldr	r1, [pc, #404]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314a:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0b8      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d020      	beq.n	80031aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a52      	ldr	r2, [pc, #328]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003196:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003198:	4b50      	ldr	r3, [pc, #320]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	494d      	ldr	r1, [pc, #308]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d040      	beq.n	8003238 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d115      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e07f      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e073      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3d      	ldr	r3, [pc, #244]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06b      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4936      	ldr	r1, [pc, #216]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fe f9e8 	bl	80015dc <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe f9e4 	bl	80015dc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e053      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2d      	ldr	r3, [pc, #180]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d210      	bcs.n	8003268 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 020f 	bic.w	r2, r3, #15
 800324e:	4922      	ldr	r1, [pc, #136]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e032      	b.n	80032ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4916      	ldr	r1, [pc, #88]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	490e      	ldr	r1, [pc, #56]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032a6:	f000 f821 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 80032aa:	4602      	mov	r2, r0
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	490a      	ldr	r1, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x1cc>)
 80032b8:	5ccb      	ldrb	r3, [r1, r3]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1d0>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <HAL_RCC_ClockConfig+0x1d4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f944 	bl	8001554 <HAL_InitTick>

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023c00 	.word	0x40023c00
 80032dc:	40023800 	.word	0x40023800
 80032e0:	080061d8 	.word	0x080061d8
 80032e4:	20000058 	.word	0x20000058
 80032e8:	2000005c 	.word	0x2000005c

080032ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032f2:	2100      	movs	r1, #0
 80032f4:	6079      	str	r1, [r7, #4]
 80032f6:	2100      	movs	r1, #0
 80032f8:	60f9      	str	r1, [r7, #12]
 80032fa:	2100      	movs	r1, #0
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032fe:	2100      	movs	r1, #0
 8003300:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003302:	4952      	ldr	r1, [pc, #328]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 8003304:	6889      	ldr	r1, [r1, #8]
 8003306:	f001 010c 	and.w	r1, r1, #12
 800330a:	2908      	cmp	r1, #8
 800330c:	d00d      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x3e>
 800330e:	2908      	cmp	r1, #8
 8003310:	f200 8094 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x150>
 8003314:	2900      	cmp	r1, #0
 8003316:	d002      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x32>
 8003318:	2904      	cmp	r1, #4
 800331a:	d003      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x38>
 800331c:	e08e      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800331e:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_GetSysClockFreq+0x164>)
 8003320:	60bb      	str	r3, [r7, #8]
      break;
 8003322:	e08e      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003324:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_RCC_GetSysClockFreq+0x168>)
 8003326:	60bb      	str	r3, [r7, #8]
      break;
 8003328:	e08b      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800332a:	4948      	ldr	r1, [pc, #288]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 800332c:	6849      	ldr	r1, [r1, #4]
 800332e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003332:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003334:	4945      	ldr	r1, [pc, #276]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 8003336:	6849      	ldr	r1, [r1, #4]
 8003338:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800333c:	2900      	cmp	r1, #0
 800333e:	d024      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003340:	4942      	ldr	r1, [pc, #264]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 8003342:	6849      	ldr	r1, [r1, #4]
 8003344:	0989      	lsrs	r1, r1, #6
 8003346:	4608      	mov	r0, r1
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003350:	f04f 0500 	mov.w	r5, #0
 8003354:	ea00 0204 	and.w	r2, r0, r4
 8003358:	ea01 0305 	and.w	r3, r1, r5
 800335c:	493d      	ldr	r1, [pc, #244]	; (8003454 <HAL_RCC_GetSysClockFreq+0x168>)
 800335e:	fb01 f003 	mul.w	r0, r1, r3
 8003362:	2100      	movs	r1, #0
 8003364:	fb01 f102 	mul.w	r1, r1, r2
 8003368:	1844      	adds	r4, r0, r1
 800336a:	493a      	ldr	r1, [pc, #232]	; (8003454 <HAL_RCC_GetSysClockFreq+0x168>)
 800336c:	fba2 0101 	umull	r0, r1, r2, r1
 8003370:	1863      	adds	r3, r4, r1
 8003372:	4619      	mov	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	461a      	mov	r2, r3
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	f7fc ff5c 	bl	8000238 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4613      	mov	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e04a      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338a:	4b30      	ldr	r3, [pc, #192]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	099b      	lsrs	r3, r3, #6
 8003390:	461a      	mov	r2, r3
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f240 10ff 	movw	r0, #511	; 0x1ff
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	ea02 0400 	and.w	r4, r2, r0
 80033a2:	ea03 0501 	and.w	r5, r3, r1
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	014b      	lsls	r3, r1, #5
 80033b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033b8:	0142      	lsls	r2, r0, #5
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	1b00      	subs	r0, r0, r4
 80033c0:	eb61 0105 	sbc.w	r1, r1, r5
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	018b      	lsls	r3, r1, #6
 80033ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033d2:	0182      	lsls	r2, r0, #6
 80033d4:	1a12      	subs	r2, r2, r0
 80033d6:	eb63 0301 	sbc.w	r3, r3, r1
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	00d9      	lsls	r1, r3, #3
 80033e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033e8:	00d0      	lsls	r0, r2, #3
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	1912      	adds	r2, r2, r4
 80033f0:	eb45 0303 	adc.w	r3, r5, r3
 80033f4:	f04f 0000 	mov.w	r0, #0
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	0299      	lsls	r1, r3, #10
 80033fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003402:	0290      	lsls	r0, r2, #10
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4610      	mov	r0, r2
 800340a:	4619      	mov	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	f7fc ff10 	bl	8000238 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_GetSysClockFreq+0x160>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	60bb      	str	r3, [r7, #8]
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b04      	ldr	r3, [pc, #16]	; (8003450 <HAL_RCC_GetSysClockFreq+0x164>)
 800343e:	60bb      	str	r3, [r7, #8]
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	68bb      	ldr	r3, [r7, #8]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bdb0      	pop	{r4, r5, r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	00f42400 	.word	0x00f42400
 8003454:	017d7840 	.word	0x017d7840

08003458 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_GetHCLKFreq+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	20000058 	.word	0x20000058

08003470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003474:	f7ff fff0 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4903      	ldr	r1, [pc, #12]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	080061e8 	.word	0x080061e8

08003498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800349c:	f7ff ffdc 	bl	8003458 <HAL_RCC_GetHCLKFreq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	0b5b      	lsrs	r3, r3, #13
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	4903      	ldr	r1, [pc, #12]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	080061e8 	.word	0x080061e8

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034e8:	4b69      	ldr	r3, [pc, #420]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a68      	ldr	r2, [pc, #416]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034f2:	6093      	str	r3, [r2, #8]
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	4964      	ldr	r1, [pc, #400]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d017      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351a:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	4959      	ldr	r1, [pc, #356]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003538:	d101      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003546:	2301      	movs	r3, #1
 8003548:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003556:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	494a      	ldr	r1, [pc, #296]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003582:	2301      	movs	r3, #1
 8003584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 808b 	beq.w	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a4:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	4a39      	ldr	r2, [pc, #228]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ae:	6413      	str	r3, [r2, #64]	; 0x40
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a34      	ldr	r2, [pc, #208]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fe f808 	bl	80015dc <HAL_GetTick>
 80035cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe f804 	bl	80015dc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e38f      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e2:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d035      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d02e      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360c:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003614:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800361c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	4a1a      	ldr	r2, [pc, #104]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d114      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd ffcc 	bl	80015dc <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003648:	f7fd ffc8 	bl	80015dc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e351      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0ee      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003676:	d111      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003686:	400b      	ands	r3, r1
 8003688:	4901      	ldr	r1, [pc, #4]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
 800368e:	e00b      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003690:	40023800 	.word	0x40023800
 8003694:	40007000 	.word	0x40007000
 8003698:	0ffffcff 	.word	0x0ffffcff
 800369c:	4bb3      	ldr	r3, [pc, #716]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4ab2      	ldr	r2, [pc, #712]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036a6:	6093      	str	r3, [r2, #8]
 80036a8:	4bb0      	ldr	r3, [pc, #704]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b4:	49ad      	ldr	r1, [pc, #692]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d010      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036c6:	4ba9      	ldr	r3, [pc, #676]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036cc:	4aa7      	ldr	r2, [pc, #668]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036d6:	4ba5      	ldr	r3, [pc, #660]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	49a2      	ldr	r1, [pc, #648]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f4:	4b9d      	ldr	r3, [pc, #628]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003702:	499a      	ldr	r1, [pc, #616]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003716:	4b95      	ldr	r3, [pc, #596]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003724:	4991      	ldr	r1, [pc, #580]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003738:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003746:	4989      	ldr	r1, [pc, #548]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800375a:	4b84      	ldr	r3, [pc, #528]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4980      	ldr	r1, [pc, #512]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800377c:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378a:	4978      	ldr	r1, [pc, #480]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800379e:	4b73      	ldr	r3, [pc, #460]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a4:	f023 020c 	bic.w	r2, r3, #12
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ac:	496f      	ldr	r1, [pc, #444]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c0:	4b6a      	ldr	r3, [pc, #424]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ce:	4967      	ldr	r1, [pc, #412]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e2:	4b62      	ldr	r3, [pc, #392]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f0:	495e      	ldr	r1, [pc, #376]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003804:	4b59      	ldr	r3, [pc, #356]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	4956      	ldr	r1, [pc, #344]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003826:	4b51      	ldr	r3, [pc, #324]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003834:	494d      	ldr	r1, [pc, #308]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003848:	4b48      	ldr	r3, [pc, #288]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	4945      	ldr	r1, [pc, #276]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	493c      	ldr	r1, [pc, #240]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800388c:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d011      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038ae:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038bc:	492b      	ldr	r1, [pc, #172]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038cc:	d101      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038ce:	2301      	movs	r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fc:	491b      	ldr	r1, [pc, #108]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003920:	4912      	ldr	r1, [pc, #72]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003944:	4909      	ldr	r1, [pc, #36]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00f      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800395e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	e002      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800396a:	bf00      	nop
 800396c:	40023800 	.word	0x40023800
 8003970:	4986      	ldr	r1, [pc, #536]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003984:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003994:	497d      	ldr	r1, [pc, #500]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d006      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80d6 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039b0:	4b76      	ldr	r3, [pc, #472]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a75      	ldr	r2, [pc, #468]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039bc:	f7fd fe0e 	bl	80015dc <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039c4:	f7fd fe0a 	bl	80015dc <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e195      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d021      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d11d      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0a:	0e1b      	lsrs	r3, r3, #24
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	019a      	lsls	r2, r3, #6
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	071b      	lsls	r3, r3, #28
 8003a2a:	4958      	ldr	r1, [pc, #352]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02e      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5c:	d129      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a72:	0f1b      	lsrs	r3, r3, #28
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	019a      	lsls	r2, r3, #6
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	493e      	ldr	r1, [pc, #248]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a9a:	4b3c      	ldr	r3, [pc, #240]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	f023 021f 	bic.w	r2, r3, #31
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	4938      	ldr	r1, [pc, #224]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01d      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003abe:	4b33      	ldr	r3, [pc, #204]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac4:	0e1b      	lsrs	r3, r3, #24
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003acc:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad2:	0f1b      	lsrs	r3, r3, #28
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	019a      	lsls	r2, r3, #6
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	041b      	lsls	r3, r3, #16
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	061b      	lsls	r3, r3, #24
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	071b      	lsls	r3, r3, #28
 8003af2:	4926      	ldr	r1, [pc, #152]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	019a      	lsls	r2, r3, #6
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	071b      	lsls	r3, r3, #28
 8003b22:	491a      	ldr	r1, [pc, #104]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a17      	ldr	r2, [pc, #92]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b36:	f7fd fd51 	bl	80015dc <HAL_GetTick>
 8003b3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b3e:	f7fd fd4d 	bl	80015dc <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	; 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e0d8      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80ce 	bne.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd fd34 	bl	80015dc <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b76:	e00b      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b78:	f7fd fd30 	bl	80015dc <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d904      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0bb      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b90:	4b5e      	ldr	r3, [pc, #376]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b9c:	d0ec      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d02e      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d12a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bd4:	4b4d      	ldr	r3, [pc, #308]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	0f1b      	lsrs	r3, r3, #28
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	019a      	lsls	r2, r3, #6
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	061b      	lsls	r3, r3, #24
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	071b      	lsls	r3, r3, #28
 8003bfa:	4944      	ldr	r1, [pc, #272]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c02:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	493d      	ldr	r1, [pc, #244]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c30:	d11d      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c32:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c40:	4b32      	ldr	r3, [pc, #200]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c46:	0f1b      	lsrs	r3, r3, #28
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	019a      	lsls	r2, r3, #6
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	4929      	ldr	r1, [pc, #164]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d028      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	0c1b      	lsrs	r3, r3, #16
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	019a      	lsls	r2, r3, #6
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	4917      	ldr	r1, [pc, #92]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4911      	ldr	r1, [pc, #68]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fd fc80 	bl	80015dc <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ce0:	f7fd fc7c 	bl	80015dc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e007      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfe:	d1ef      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e09d      	b.n	8003e5e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d32:	d009      	beq.n	8003d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
 8003d3a:	e005      	b.n	8003d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fd f86e 	bl	8000e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d88:	d902      	bls.n	8003d90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e002      	b.n	8003d96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003d9e:	d007      	beq.n	8003db0 <HAL_SPI_Init+0xa0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 0204 	and.w	r2, r3, #4
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69da      	ldr	r2, [r3, #28]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10f      	bne.n	8003eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
    return;
 8003eaa:	e0d7      	b.n	800405c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_SPI_IRQHandler+0x66>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	09db      	lsrs	r3, r3, #7
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
    return;
 8003ecc:	e0c6      	b.n	800405c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_SPI_IRQHandler+0x8c>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80b4 	beq.w	800405c <HAL_SPI_IRQHandler+0x1f4>
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80ad 	beq.w	800405c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d023      	beq.n	8003f56 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d011      	beq.n	8003f3e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	f043 0204 	orr.w	r2, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	e00b      	b.n	8003f56 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]
        return;
 8003f54:	e082      	b.n	800405c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	f043 0208 	orr.w	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04f      	beq.n	800405a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fc8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d104      	bne.n	8003fe6 <HAL_SPI_IRQHandler+0x17e>
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d034      	beq.n	8004050 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0203 	bic.w	r2, r2, #3
 8003ff4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d011      	beq.n	8004022 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_SPI_IRQHandler+0x1fc>)
 8004004:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f916 	bl	800223c <HAL_DMA_Abort_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_SPI_IRQHandler+0x1fc>)
 8004030:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe f900 	bl	800223c <HAL_DMA_Abort_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800404e:	e003      	b.n	8004058 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f809 	bl	8004068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004056:	e000      	b.n	800405a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004058:	bf00      	nop
    return;
 800405a:	bf00      	nop
  }
}
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	0800407d 	.word	0x0800407d

08004068 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff ffe5 	bl	8004068 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e049      	b.n	800414c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fd f8cb 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f000 fd2f 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e049      	b.n	80041fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f841 	bl	8004202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4619      	mov	r1, r3
 8004192:	4610      	mov	r0, r2
 8004194:	f000 fcd8 	bl	8004b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_TIM_PWM_Start+0x24>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e03c      	b.n	80042b6 <HAL_TIM_PWM_Start+0x9e>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d109      	bne.n	8004256 <HAL_TIM_PWM_Start+0x3e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	e02f      	b.n	80042b6 <HAL_TIM_PWM_Start+0x9e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d109      	bne.n	8004270 <HAL_TIM_PWM_Start+0x58>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e022      	b.n	80042b6 <HAL_TIM_PWM_Start+0x9e>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b0c      	cmp	r3, #12
 8004274:	d109      	bne.n	800428a <HAL_TIM_PWM_Start+0x72>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	e015      	b.n	80042b6 <HAL_TIM_PWM_Start+0x9e>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b10      	cmp	r3, #16
 800428e:	d109      	bne.n	80042a4 <HAL_TIM_PWM_Start+0x8c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_PWM_Start+0x9e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e092      	b.n	80043e4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xb6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	e023      	b.n	8004316 <HAL_TIM_PWM_Start+0xfe>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0xc6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_PWM_Start+0xfe>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xd6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ec:	e013      	b.n	8004316 <HAL_TIM_PWM_Start+0xfe>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xe6>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042fc:	e00b      	b.n	8004316 <HAL_TIM_PWM_Start+0xfe>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d104      	bne.n	800430e <HAL_TIM_PWM_Start+0xf6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800430c:	e003      	b.n	8004316 <HAL_TIM_PWM_Start+0xfe>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 ffaa 	bl	8005278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	; (80043ec <HAL_TIM_PWM_Start+0x1d4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_PWM_Start+0x120>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <HAL_TIM_PWM_Start+0x1d8>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_TIM_PWM_Start+0x124>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <HAL_TIM_PWM_Start+0x126>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a25      	ldr	r2, [pc, #148]	; (80043ec <HAL_TIM_PWM_Start+0x1d4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d022      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d01d      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <HAL_TIM_PWM_Start+0x1dc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <HAL_TIM_PWM_Start+0x1e0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1f      	ldr	r2, [pc, #124]	; (80043fc <HAL_TIM_PWM_Start+0x1e4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_TIM_PWM_Start+0x1d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_TIM_PWM_Start+0x1e8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x18a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_TIM_PWM_Start+0x1ec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d115      	bne.n	80043ce <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_TIM_PWM_Start+0x1f0>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d015      	beq.n	80043e0 <HAL_TIM_PWM_Start+0x1c8>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ba:	d011      	beq.n	80043e0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	e008      	b.n	80043e0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0201 	orr.w	r2, r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e000      	b.n	80043e2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800
 8004408:	00010007 	.word	0x00010007

0800440c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 ff2a 	bl	8005278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a36      	ldr	r2, [pc, #216]	; (8004504 <HAL_TIM_PWM_Stop+0xf8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d004      	beq.n	8004438 <HAL_TIM_PWM_Stop+0x2c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a35      	ldr	r2, [pc, #212]	; (8004508 <HAL_TIM_PWM_Stop+0xfc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d101      	bne.n	800443c <HAL_TIM_PWM_Stop+0x30>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <HAL_TIM_PWM_Stop+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	f241 1311 	movw	r3, #4369	; 0x1111
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <HAL_TIM_PWM_Stop+0x66>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a1a      	ldr	r2, [r3, #32]
 8004458:	f240 4344 	movw	r3, #1092	; 0x444
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d107      	bne.n	8004472 <HAL_TIM_PWM_Stop+0x66>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a1a      	ldr	r2, [r3, #32]
 8004478:	f241 1311 	movw	r3, #4369	; 0x1111
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10f      	bne.n	80044a2 <HAL_TIM_PWM_Stop+0x96>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a1a      	ldr	r2, [r3, #32]
 8004488:	f240 4344 	movw	r3, #1092	; 0x444
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_PWM_Stop+0x96>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d104      	bne.n	80044b2 <HAL_TIM_PWM_Stop+0xa6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b0:	e023      	b.n	80044fa <HAL_TIM_PWM_Stop+0xee>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_PWM_Stop+0xb6>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c0:	e01b      	b.n	80044fa <HAL_TIM_PWM_Stop+0xee>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Stop+0xc6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d0:	e013      	b.n	80044fa <HAL_TIM_PWM_Stop+0xee>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Stop+0xd6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_PWM_Stop+0xee>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Stop+0xe6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f0:	e003      	b.n	80044fa <HAL_TIM_PWM_Stop+0xee>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010000 	.word	0x40010000
 8004508:	40010400 	.word	0x40010400

0800450c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d122      	bne.n	8004568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d11b      	bne.n	8004568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0202 	mvn.w	r2, #2
 8004538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fadc 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 face 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fadf 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d122      	bne.n	80045bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b04      	cmp	r3, #4
 8004582:	d11b      	bne.n	80045bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0204 	mvn.w	r2, #4
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2202      	movs	r2, #2
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fab2 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 faa4 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fab5 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d122      	bne.n	8004610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d11b      	bne.n	8004610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0208 	mvn.w	r2, #8
 80045e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2204      	movs	r2, #4
 80045e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa88 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 80045fc:	e005      	b.n	800460a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fa7a 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fa8b 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0310 	and.w	r3, r3, #16
 800461a:	2b10      	cmp	r3, #16
 800461c:	d122      	bne.n	8004664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	2b10      	cmp	r3, #16
 800462a:	d11b      	bne.n	8004664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0210 	mvn.w	r2, #16
 8004634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2208      	movs	r2, #8
 800463a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa5e 	bl	8004b0c <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa50 	bl	8004af8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa61 	bl	8004b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d10e      	bne.n	8004690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b01      	cmp	r3, #1
 800467e:	d107      	bne.n	8004690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0201 	mvn.w	r2, #1
 8004688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fea0 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b80      	cmp	r3, #128	; 0x80
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fe9c 	bl	80053f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fe8f 	bl	8005408 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d10e      	bne.n	8004716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d107      	bne.n	8004716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fa0f 	bl	8004b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d10e      	bne.n	8004742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b20      	cmp	r3, #32
 8004730:	d107      	bne.n	8004742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f06f 0220 	mvn.w	r2, #32
 800473a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fe4f 	bl	80053e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004762:	2302      	movs	r3, #2
 8004764:	e0fd      	b.n	8004962 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b14      	cmp	r3, #20
 8004772:	f200 80f0 	bhi.w	8004956 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047d1 	.word	0x080047d1
 8004780:	08004957 	.word	0x08004957
 8004784:	08004957 	.word	0x08004957
 8004788:	08004957 	.word	0x08004957
 800478c:	08004811 	.word	0x08004811
 8004790:	08004957 	.word	0x08004957
 8004794:	08004957 	.word	0x08004957
 8004798:	08004957 	.word	0x08004957
 800479c:	08004853 	.word	0x08004853
 80047a0:	08004957 	.word	0x08004957
 80047a4:	08004957 	.word	0x08004957
 80047a8:	08004957 	.word	0x08004957
 80047ac:	08004893 	.word	0x08004893
 80047b0:	08004957 	.word	0x08004957
 80047b4:	08004957 	.word	0x08004957
 80047b8:	08004957 	.word	0x08004957
 80047bc:	080048d5 	.word	0x080048d5
 80047c0:	08004957 	.word	0x08004957
 80047c4:	08004957 	.word	0x08004957
 80047c8:	08004957 	.word	0x08004957
 80047cc:	08004915 	.word	0x08004915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fa56 	bl	8004c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0204 	bic.w	r2, r2, #4
 80047fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6999      	ldr	r1, [r3, #24]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	619a      	str	r2, [r3, #24]
      break;
 800480e:	e0a3      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	4618      	mov	r0, r3
 8004818:	f000 faa8 	bl	8004d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699a      	ldr	r2, [r3, #24]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	619a      	str	r2, [r3, #24]
      break;
 8004850:	e082      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68b9      	ldr	r1, [r7, #8]
 8004858:	4618      	mov	r0, r3
 800485a:	f000 faff 	bl	8004e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0208 	orr.w	r2, r2, #8
 800486c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0204 	bic.w	r2, r2, #4
 800487c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	61da      	str	r2, [r3, #28]
      break;
 8004890:	e062      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fb55 	bl	8004f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69da      	ldr	r2, [r3, #28]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69d9      	ldr	r1, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	61da      	str	r2, [r3, #28]
      break;
 80048d2:	e041      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fb8c 	bl	8004ff8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0208 	orr.w	r2, r2, #8
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0204 	bic.w	r2, r2, #4
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004912:	e021      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fbbe 	bl	800509c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800492e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	021a      	lsls	r2, r3, #8
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004954:	e000      	b.n	8004958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop

0800496c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIM_ConfigClockSource+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e0b3      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x180>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4b55      	ldr	r3, [pc, #340]	; (8004af4 <HAL_TIM_ConfigClockSource+0x188>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049bc:	d03e      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xd0>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	f200 8087 	bhi.w	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ca:	f000 8085 	beq.w	8004ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80049ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d2:	d87f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049d4:	2b70      	cmp	r3, #112	; 0x70
 80049d6:	d01a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0xa2>
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d87b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049dc:	2b60      	cmp	r3, #96	; 0x60
 80049de:	d050      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x116>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d877      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049e4:	2b50      	cmp	r3, #80	; 0x50
 80049e6:	d03c      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xf6>
 80049e8:	2b50      	cmp	r3, #80	; 0x50
 80049ea:	d873      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b40      	cmp	r3, #64	; 0x40
 80049ee:	d058      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x136>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d86f      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049f4:	2b30      	cmp	r3, #48	; 0x30
 80049f6:	d064      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x156>
 80049f8:	2b30      	cmp	r3, #48	; 0x30
 80049fa:	d86b      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d060      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x156>
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d867      	bhi.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d05c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x156>
 8004a08:	2b10      	cmp	r3, #16
 8004a0a:	d05a      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a0c:	e062      	b.n	8004ad4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f000 fc0b 	bl	8005238 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e04e      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f000 fbf4 	bl	8005238 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e03b      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 fb68 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	; 0x50
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fbc1 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004a80:	e02b      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 fb87 	bl	80051a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	; 0x60
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fbb1 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e01b      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 fb48 	bl	8005144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fba1 	bl	8005202 <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 fb98 	bl	8005202 <TIM_ITRx_SetConfig>
        break;
 8004ad2:	e002      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ad4:	bf00      	nop
 8004ad6:	e000      	b.n	8004ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ad8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	fffeff88 	.word	0xfffeff88

08004af8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a40      	ldr	r2, [pc, #256]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d013      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b66:	d00f      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3d      	ldr	r2, [pc, #244]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3c      	ldr	r2, [pc, #240]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3b      	ldr	r2, [pc, #236]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x40>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a3a      	ldr	r2, [pc, #232]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2f      	ldr	r2, [pc, #188]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d027      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <TIM_Base_SetConfig+0x118>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d023      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <TIM_Base_SetConfig+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2a      	ldr	r2, [pc, #168]	; (8004c68 <TIM_Base_SetConfig+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d017      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a28      	ldr	r2, [pc, #160]	; (8004c70 <TIM_Base_SetConfig+0x128>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <TIM_Base_SetConfig+0x12c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <TIM_Base_SetConfig+0x130>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <TIM_Base_SetConfig+0x134>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a24      	ldr	r2, [pc, #144]	; (8004c80 <TIM_Base_SetConfig+0x138>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a23      	ldr	r2, [pc, #140]	; (8004c84 <TIM_Base_SetConfig+0x13c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0a      	ldr	r2, [pc, #40]	; (8004c5c <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0xf8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	615a      	str	r2, [r3, #20]
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40000400 	.word	0x40000400
 8004c64:	40000800 	.word	0x40000800
 8004c68:	40000c00 	.word	0x40000c00
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800
 8004c7c:	40001800 	.word	0x40001800
 8004c80:	40001c00 	.word	0x40001c00
 8004c84:	40002000 	.word	0x40002000

08004c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <TIM_OC1_SetConfig+0xd8>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0302 	bic.w	r3, r3, #2
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <TIM_OC1_SetConfig+0xdc>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC1_SetConfig+0x64>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <TIM_OC1_SetConfig+0xe0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d10c      	bne.n	8004d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0308 	bic.w	r3, r3, #8
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a16      	ldr	r2, [pc, #88]	; (8004d64 <TIM_OC1_SetConfig+0xdc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d003      	beq.n	8004d16 <TIM_OC1_SetConfig+0x8e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <TIM_OC1_SetConfig+0xe0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d111      	bne.n	8004d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	fffeff8f 	.word	0xfffeff8f
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40010400 	.word	0x40010400

08004d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f023 0210 	bic.w	r2, r3, #16
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4b2e      	ldr	r3, [pc, #184]	; (8004e50 <TIM_OC2_SetConfig+0xe4>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <TIM_OC2_SetConfig+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC2_SetConfig+0x68>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a22      	ldr	r2, [pc, #136]	; (8004e58 <TIM_OC2_SetConfig+0xec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10d      	bne.n	8004df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <TIM_OC2_SetConfig+0xe8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC2_SetConfig+0x94>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <TIM_OC2_SetConfig+0xec>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d113      	bne.n	8004e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	feff8fff 	.word	0xfeff8fff
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40010400 	.word	0x40010400

08004e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <TIM_OC3_SetConfig+0xe0>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <TIM_OC3_SetConfig+0xe4>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <TIM_OC3_SetConfig+0x66>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a21      	ldr	r2, [pc, #132]	; (8004f44 <TIM_OC3_SetConfig+0xe8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10d      	bne.n	8004ede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a17      	ldr	r2, [pc, #92]	; (8004f40 <TIM_OC3_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC3_SetConfig+0x92>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <TIM_OC3_SetConfig+0xe8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	fffeff8f 	.word	0xfffeff8f
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40010400 	.word	0x40010400

08004f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <TIM_OC4_SetConfig+0xa4>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	021b      	lsls	r3, r3, #8
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a13      	ldr	r2, [pc, #76]	; (8004ff0 <TIM_OC4_SetConfig+0xa8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC4_SetConfig+0x68>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <TIM_OC4_SetConfig+0xac>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d109      	bne.n	8004fc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	feff8fff 	.word	0xfeff8fff
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4b1b      	ldr	r3, [pc, #108]	; (8005090 <TIM_OC5_SetConfig+0x98>)
 8005024:	4013      	ands	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	041b      	lsls	r3, r3, #16
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a12      	ldr	r2, [pc, #72]	; (8005094 <TIM_OC5_SetConfig+0x9c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC5_SetConfig+0x5e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a11      	ldr	r2, [pc, #68]	; (8005098 <TIM_OC5_SetConfig+0xa0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d109      	bne.n	800506a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	fffeff8f 	.word	0xfffeff8f
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <TIM_OC6_SetConfig+0x9c>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	051b      	lsls	r3, r3, #20
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <TIM_OC6_SetConfig+0xa0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC6_SetConfig+0x60>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <TIM_OC6_SetConfig+0xa4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	029b      	lsls	r3, r3, #10
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	feff8fff 	.word	0xfeff8fff
 800513c:	40010000 	.word	0x40010000
 8005140:	40010400 	.word	0x40010400

08005144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005144:	b480      	push	{r7}
 8005146:	b087      	sub	sp, #28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	f023 0201 	bic.w	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 030a 	bic.w	r3, r3, #10
 8005180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0210 	bic.w	r2, r3, #16
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	031b      	lsls	r3, r3, #12
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	f043 0307 	orr.w	r3, r3, #7
 8005224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	021a      	lsls	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	431a      	orrs	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4313      	orrs	r3, r2
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bf00      	nop
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	2201      	movs	r2, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1a      	ldr	r2, [r3, #32]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a1a      	ldr	r2, [r3, #32]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d8:	2302      	movs	r3, #2
 80052da:	e06d      	b.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a30      	ldr	r2, [pc, #192]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d108      	bne.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005316:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a20      	ldr	r2, [pc, #128]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d022      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d01d      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d018      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d00e      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005392:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	4313      	orrs	r3, r2
 800539c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40001800 	.word	0x40001800

080053e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e040      	b.n	80054b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc f806 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa56 	bl	800590c <UART_SetConfig>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e022      	b.n	80054b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fcac 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005486:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005496:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fd33 	bl	8005f14 <UART_CheckIdleState>
 80054ae:	4603      	mov	r3, r0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	f640 030f 	movw	r3, #2063	; 0x80f
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d113      	bne.n	8005510 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 81cc 	beq.w	800589e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      }
      return;
 800550e:	e1c6      	b.n	800589e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80e3 	beq.w	80056de <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d105      	bne.n	800552e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4ba5      	ldr	r3, [pc, #660]	; (80057bc <HAL_UART_IRQHandler+0x304>)
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80d8 	beq.w	80056de <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d010      	beq.n	800555a <HAL_UART_IRQHandler+0xa2>
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2201      	movs	r2, #1
 8005548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005550:	f043 0201 	orr.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_UART_IRQHandler+0xce>
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2202      	movs	r2, #2
 8005574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557c:	f043 0204 	orr.w	r2, r3, #4
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HAL_UART_IRQHandler+0xfa>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2204      	movs	r2, #4
 80055a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a8:	f043 0202 	orr.w	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d015      	beq.n	80055e8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2208      	movs	r2, #8
 80055d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	f043 0208 	orr.w	r2, r3, #8
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d011      	beq.n	8005616 <HAL_UART_IRQHandler+0x15e>
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00c      	beq.n	8005616 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8140 	beq.w	80058a2 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d004      	beq.n	8005666 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d031      	beq.n	80056ca <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fd19 	bl	800609e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d123      	bne.n	80056c2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005688:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	2b00      	cmp	r3, #0
 8005690:	d013      	beq.n	80056ba <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a4a      	ldr	r2, [pc, #296]	; (80057c0 <HAL_UART_IRQHandler+0x308>)
 8005698:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fc fdcc 	bl	800223c <HAL_DMA_Abort_IT>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d017      	beq.n	80056da <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056b4:	4610      	mov	r0, r2
 80056b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b8:	e00f      	b.n	80056da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f906 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c0:	e00b      	b.n	80056da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f902 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c8:	e007      	b.n	80056da <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f8fe 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80056d8:	e0e3      	b.n	80058a2 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056da:	bf00      	nop
    return;
 80056dc:	e0e1      	b.n	80058a2 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	f040 80a7 	bne.w	8005836 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80a1 	beq.w	8005836 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 809b 	beq.w	8005836 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2210      	movs	r2, #16
 8005706:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b40      	cmp	r3, #64	; 0x40
 8005714:	d156      	bne.n	80057c4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80bf 	beq.w	80058a6 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800572e:	893a      	ldrh	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	f080 80b8 	bcs.w	80058a6 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	893a      	ldrh	r2, [r7, #8]
 800573a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005748:	d02a      	beq.n	80057a0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005778:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0210 	bic.w	r2, r2, #16
 8005794:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc fcde 	bl	800215c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f893 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057ba:	e074      	b.n	80058a6 <HAL_UART_IRQHandler+0x3ee>
 80057bc:	04000120 	.word	0x04000120
 80057c0:	080060fd 	.word	0x080060fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d063      	beq.n	80058aa <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80057e2:	897b      	ldrh	r3, [r7, #10]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d060      	beq.n	80058aa <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057f6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0210 	bic.w	r2, r2, #16
 8005828:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800582a:	897b      	ldrh	r3, [r7, #10]
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f856 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005834:	e039      	b.n	80058aa <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <HAL_UART_IRQHandler+0x3a4>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005852:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f84f 	bl	80058f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800585a:	e029      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01a      	beq.n	80058ae <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
    }
    return;
 8005880:	e015      	b.n	80058ae <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00c      	beq.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fc46 	bl	8006128 <UART_EndTransmit_IT>
    return;
 800589c:	e008      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 800589e:	bf00      	nop
 80058a0:	e006      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80058a2:	bf00      	nop
 80058a4:	e004      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80058a6:	bf00      	nop
 80058a8:	e002      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
      return;
 80058aa:	bf00      	nop
 80058ac:	e000      	b.n	80058b0 <HAL_UART_IRQHandler+0x3f8>
    return;
 80058ae:	bf00      	nop
  }

}
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4ba7      	ldr	r3, [pc, #668]	; (8005bd4 <UART_SetConfig+0x2c8>)
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	6979      	ldr	r1, [r7, #20]
 8005940:	430b      	orrs	r3, r1
 8005942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a95      	ldr	r2, [pc, #596]	; (8005bd8 <UART_SetConfig+0x2cc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d120      	bne.n	80059ca <UART_SetConfig+0xbe>
 8005988:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <UART_SetConfig+0x2d0>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b03      	cmp	r3, #3
 8005994:	d816      	bhi.n	80059c4 <UART_SetConfig+0xb8>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <UART_SetConfig+0x90>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059b3 	.word	0x080059b3
 80059a8:	080059bf 	.word	0x080059bf
 80059ac:	2301      	movs	r3, #1
 80059ae:	77fb      	strb	r3, [r7, #31]
 80059b0:	e14f      	b.n	8005c52 <UART_SetConfig+0x346>
 80059b2:	2302      	movs	r3, #2
 80059b4:	77fb      	strb	r3, [r7, #31]
 80059b6:	e14c      	b.n	8005c52 <UART_SetConfig+0x346>
 80059b8:	2304      	movs	r3, #4
 80059ba:	77fb      	strb	r3, [r7, #31]
 80059bc:	e149      	b.n	8005c52 <UART_SetConfig+0x346>
 80059be:	2308      	movs	r3, #8
 80059c0:	77fb      	strb	r3, [r7, #31]
 80059c2:	e146      	b.n	8005c52 <UART_SetConfig+0x346>
 80059c4:	2310      	movs	r3, #16
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e143      	b.n	8005c52 <UART_SetConfig+0x346>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a84      	ldr	r2, [pc, #528]	; (8005be0 <UART_SetConfig+0x2d4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d132      	bne.n	8005a3a <UART_SetConfig+0x12e>
 80059d4:	4b81      	ldr	r3, [pc, #516]	; (8005bdc <UART_SetConfig+0x2d0>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f003 030c 	and.w	r3, r3, #12
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d828      	bhi.n	8005a34 <UART_SetConfig+0x128>
 80059e2:	a201      	add	r2, pc, #4	; (adr r2, 80059e8 <UART_SetConfig+0xdc>)
 80059e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e8:	08005a1d 	.word	0x08005a1d
 80059ec:	08005a35 	.word	0x08005a35
 80059f0:	08005a35 	.word	0x08005a35
 80059f4:	08005a35 	.word	0x08005a35
 80059f8:	08005a29 	.word	0x08005a29
 80059fc:	08005a35 	.word	0x08005a35
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a35 	.word	0x08005a35
 8005a08:	08005a23 	.word	0x08005a23
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a2f 	.word	0x08005a2f
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77fb      	strb	r3, [r7, #31]
 8005a20:	e117      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a22:	2302      	movs	r3, #2
 8005a24:	77fb      	strb	r3, [r7, #31]
 8005a26:	e114      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	77fb      	strb	r3, [r7, #31]
 8005a2c:	e111      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a2e:	2308      	movs	r3, #8
 8005a30:	77fb      	strb	r3, [r7, #31]
 8005a32:	e10e      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a34:	2310      	movs	r3, #16
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e10b      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a69      	ldr	r2, [pc, #420]	; (8005be4 <UART_SetConfig+0x2d8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d120      	bne.n	8005a86 <UART_SetConfig+0x17a>
 8005a44:	4b65      	ldr	r3, [pc, #404]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a4e:	2b30      	cmp	r3, #48	; 0x30
 8005a50:	d013      	beq.n	8005a7a <UART_SetConfig+0x16e>
 8005a52:	2b30      	cmp	r3, #48	; 0x30
 8005a54:	d814      	bhi.n	8005a80 <UART_SetConfig+0x174>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d009      	beq.n	8005a6e <UART_SetConfig+0x162>
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d810      	bhi.n	8005a80 <UART_SetConfig+0x174>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <UART_SetConfig+0x15c>
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d006      	beq.n	8005a74 <UART_SetConfig+0x168>
 8005a66:	e00b      	b.n	8005a80 <UART_SetConfig+0x174>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
 8005a6c:	e0f1      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	77fb      	strb	r3, [r7, #31]
 8005a72:	e0ee      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a74:	2304      	movs	r3, #4
 8005a76:	77fb      	strb	r3, [r7, #31]
 8005a78:	e0eb      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e0e8      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a80:	2310      	movs	r3, #16
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e0e5      	b.n	8005c52 <UART_SetConfig+0x346>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a57      	ldr	r2, [pc, #348]	; (8005be8 <UART_SetConfig+0x2dc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d120      	bne.n	8005ad2 <UART_SetConfig+0x1c6>
 8005a90:	4b52      	ldr	r3, [pc, #328]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9c:	d013      	beq.n	8005ac6 <UART_SetConfig+0x1ba>
 8005a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8005aa0:	d814      	bhi.n	8005acc <UART_SetConfig+0x1c0>
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d009      	beq.n	8005aba <UART_SetConfig+0x1ae>
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d810      	bhi.n	8005acc <UART_SetConfig+0x1c0>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <UART_SetConfig+0x1a8>
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d006      	beq.n	8005ac0 <UART_SetConfig+0x1b4>
 8005ab2:	e00b      	b.n	8005acc <UART_SetConfig+0x1c0>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e0cb      	b.n	8005c52 <UART_SetConfig+0x346>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e0c8      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e0c5      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e0c2      	b.n	8005c52 <UART_SetConfig+0x346>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0bf      	b.n	8005c52 <UART_SetConfig+0x346>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a45      	ldr	r2, [pc, #276]	; (8005bec <UART_SetConfig+0x2e0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d125      	bne.n	8005b28 <UART_SetConfig+0x21c>
 8005adc:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aea:	d017      	beq.n	8005b1c <UART_SetConfig+0x210>
 8005aec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af0:	d817      	bhi.n	8005b22 <UART_SetConfig+0x216>
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af6:	d00b      	beq.n	8005b10 <UART_SetConfig+0x204>
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005afc:	d811      	bhi.n	8005b22 <UART_SetConfig+0x216>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <UART_SetConfig+0x1fe>
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d006      	beq.n	8005b16 <UART_SetConfig+0x20a>
 8005b08:	e00b      	b.n	8005b22 <UART_SetConfig+0x216>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	77fb      	strb	r3, [r7, #31]
 8005b0e:	e0a0      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b10:	2302      	movs	r3, #2
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e09d      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b16:	2304      	movs	r3, #4
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e09a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e097      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b22:	2310      	movs	r3, #16
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e094      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	; (8005bf0 <UART_SetConfig+0x2e4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d125      	bne.n	8005b7e <UART_SetConfig+0x272>
 8005b32:	4b2a      	ldr	r3, [pc, #168]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b40:	d017      	beq.n	8005b72 <UART_SetConfig+0x266>
 8005b42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b46:	d817      	bhi.n	8005b78 <UART_SetConfig+0x26c>
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d00b      	beq.n	8005b66 <UART_SetConfig+0x25a>
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d811      	bhi.n	8005b78 <UART_SetConfig+0x26c>
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <UART_SetConfig+0x254>
 8005b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b5c:	d006      	beq.n	8005b6c <UART_SetConfig+0x260>
 8005b5e:	e00b      	b.n	8005b78 <UART_SetConfig+0x26c>
 8005b60:	2301      	movs	r3, #1
 8005b62:	77fb      	strb	r3, [r7, #31]
 8005b64:	e075      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b66:	2302      	movs	r3, #2
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e072      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e06f      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b72:	2308      	movs	r3, #8
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e06c      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e069      	b.n	8005c52 <UART_SetConfig+0x346>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <UART_SetConfig+0x2e8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d137      	bne.n	8005bf8 <UART_SetConfig+0x2ec>
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <UART_SetConfig+0x2d0>)
 8005b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b96:	d017      	beq.n	8005bc8 <UART_SetConfig+0x2bc>
 8005b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b9c:	d817      	bhi.n	8005bce <UART_SetConfig+0x2c2>
 8005b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba2:	d00b      	beq.n	8005bbc <UART_SetConfig+0x2b0>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba8:	d811      	bhi.n	8005bce <UART_SetConfig+0x2c2>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <UART_SetConfig+0x2aa>
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d006      	beq.n	8005bc2 <UART_SetConfig+0x2b6>
 8005bb4:	e00b      	b.n	8005bce <UART_SetConfig+0x2c2>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	77fb      	strb	r3, [r7, #31]
 8005bba:	e04a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e047      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bc2:	2304      	movs	r3, #4
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e044      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e041      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bce:	2310      	movs	r3, #16
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e03e      	b.n	8005c52 <UART_SetConfig+0x346>
 8005bd4:	efff69f3 	.word	0xefff69f3
 8005bd8:	40011000 	.word	0x40011000
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40004400 	.word	0x40004400
 8005be4:	40004800 	.word	0x40004800
 8005be8:	40004c00 	.word	0x40004c00
 8005bec:	40005000 	.word	0x40005000
 8005bf0:	40011400 	.word	0x40011400
 8005bf4:	40007800 	.word	0x40007800
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a71      	ldr	r2, [pc, #452]	; (8005dc4 <UART_SetConfig+0x4b8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d125      	bne.n	8005c4e <UART_SetConfig+0x342>
 8005c02:	4b71      	ldr	r3, [pc, #452]	; (8005dc8 <UART_SetConfig+0x4bc>)
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c10:	d017      	beq.n	8005c42 <UART_SetConfig+0x336>
 8005c12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c16:	d817      	bhi.n	8005c48 <UART_SetConfig+0x33c>
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1c:	d00b      	beq.n	8005c36 <UART_SetConfig+0x32a>
 8005c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c22:	d811      	bhi.n	8005c48 <UART_SetConfig+0x33c>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <UART_SetConfig+0x324>
 8005c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2c:	d006      	beq.n	8005c3c <UART_SetConfig+0x330>
 8005c2e:	e00b      	b.n	8005c48 <UART_SetConfig+0x33c>
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e00d      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c36:	2302      	movs	r3, #2
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e00a      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e007      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c42:	2308      	movs	r3, #8
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e004      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e001      	b.n	8005c52 <UART_SetConfig+0x346>
 8005c4e:	2310      	movs	r3, #16
 8005c50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5a:	d15b      	bne.n	8005d14 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005c5c:	7ffb      	ldrb	r3, [r7, #31]
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d827      	bhi.n	8005cb2 <UART_SetConfig+0x3a6>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x35c>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fd fbf0 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8005c90:	61b8      	str	r0, [r7, #24]
        break;
 8005c92:	e013      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fd fc00 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61b8      	str	r0, [r7, #24]
        break;
 8005c9a:	e00f      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <UART_SetConfig+0x4c0>)
 8005c9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ca0:	e00c      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fd fb23 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8005ca6:	61b8      	str	r0, [r7, #24]
        break;
 8005ca8:	e008      	b.n	8005cbc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cae:	61bb      	str	r3, [r7, #24]
        break;
 8005cb0:	e004      	b.n	8005cbc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d074      	beq.n	8005dac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	005a      	lsls	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b0f      	cmp	r3, #15
 8005cde:	d916      	bls.n	8005d0e <UART_SetConfig+0x402>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce6:	d212      	bcs.n	8005d0e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f023 030f 	bic.w	r3, r3, #15
 8005cf0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	89fb      	ldrh	r3, [r7, #14]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	89fa      	ldrh	r2, [r7, #14]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	e04e      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	77bb      	strb	r3, [r7, #30]
 8005d12:	e04b      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d827      	bhi.n	8005d6a <UART_SetConfig+0x45e>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x414>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d6b 	.word	0x08005d6b
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d6b 	.word	0x08005d6b
 8005d38:	08005d6b 	.word	0x08005d6b
 8005d3c:	08005d6b 	.word	0x08005d6b
 8005d40:	08005d63 	.word	0x08005d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fd fb94 	bl	8003470 <HAL_RCC_GetPCLK1Freq>
 8005d48:	61b8      	str	r0, [r7, #24]
        break;
 8005d4a:	e013      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7fd fba4 	bl	8003498 <HAL_RCC_GetPCLK2Freq>
 8005d50:	61b8      	str	r0, [r7, #24]
        break;
 8005d52:	e00f      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <UART_SetConfig+0x4c0>)
 8005d56:	61bb      	str	r3, [r7, #24]
        break;
 8005d58:	e00c      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7fd fac7 	bl	80032ec <HAL_RCC_GetSysClockFreq>
 8005d5e:	61b8      	str	r0, [r7, #24]
        break;
 8005d60:	e008      	b.n	8005d74 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	61bb      	str	r3, [r7, #24]
        break;
 8005d68:	e004      	b.n	8005d74 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	77bb      	strb	r3, [r7, #30]
        break;
 8005d72:	bf00      	nop
    }

    if (pclk != 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d018      	beq.n	8005dac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085a      	lsrs	r2, r3, #1
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	441a      	add	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b0f      	cmp	r3, #15
 8005d94:	d908      	bls.n	8005da8 <UART_SetConfig+0x49c>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d204      	bcs.n	8005da8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e001      	b.n	8005dac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40007c00 	.word	0x40007c00
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	00f42400 	.word	0x00f42400

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d10a      	bne.n	8005ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f24:	f7fb fb5a 	bl	80015dc <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10e      	bne.n	8005f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f82d 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e023      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f817 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00d      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	e05e      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d05a      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7fb fb0c 	bl	80015dc <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11b      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e043      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02c      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d124      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d091      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0210 	bic.w	r2, r2, #16
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff fbd6 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fbb3 	bl	80058b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <__libc_init_array>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	4d0d      	ldr	r5, [pc, #52]	; (8006194 <__libc_init_array+0x38>)
 8006160:	4c0d      	ldr	r4, [pc, #52]	; (8006198 <__libc_init_array+0x3c>)
 8006162:	1b64      	subs	r4, r4, r5
 8006164:	10a4      	asrs	r4, r4, #2
 8006166:	2600      	movs	r6, #0
 8006168:	42a6      	cmp	r6, r4
 800616a:	d109      	bne.n	8006180 <__libc_init_array+0x24>
 800616c:	4d0b      	ldr	r5, [pc, #44]	; (800619c <__libc_init_array+0x40>)
 800616e:	4c0c      	ldr	r4, [pc, #48]	; (80061a0 <__libc_init_array+0x44>)
 8006170:	f000 f820 	bl	80061b4 <_init>
 8006174:	1b64      	subs	r4, r4, r5
 8006176:	10a4      	asrs	r4, r4, #2
 8006178:	2600      	movs	r6, #0
 800617a:	42a6      	cmp	r6, r4
 800617c:	d105      	bne.n	800618a <__libc_init_array+0x2e>
 800617e:	bd70      	pop	{r4, r5, r6, pc}
 8006180:	f855 3b04 	ldr.w	r3, [r5], #4
 8006184:	4798      	blx	r3
 8006186:	3601      	adds	r6, #1
 8006188:	e7ee      	b.n	8006168 <__libc_init_array+0xc>
 800618a:	f855 3b04 	ldr.w	r3, [r5], #4
 800618e:	4798      	blx	r3
 8006190:	3601      	adds	r6, #1
 8006192:	e7f2      	b.n	800617a <__libc_init_array+0x1e>
 8006194:	08006200 	.word	0x08006200
 8006198:	08006200 	.word	0x08006200
 800619c:	08006200 	.word	0x08006200
 80061a0:	08006204 	.word	0x08006204

080061a4 <memset>:
 80061a4:	4402      	add	r2, r0
 80061a6:	4603      	mov	r3, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d100      	bne.n	80061ae <memset+0xa>
 80061ac:	4770      	bx	lr
 80061ae:	f803 1b01 	strb.w	r1, [r3], #1
 80061b2:	e7f9      	b.n	80061a8 <memset+0x4>

080061b4 <_init>:
 80061b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b6:	bf00      	nop
 80061b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ba:	bc08      	pop	{r3}
 80061bc:	469e      	mov	lr, r3
 80061be:	4770      	bx	lr

080061c0 <_fini>:
 80061c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c2:	bf00      	nop
 80061c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c6:	bc08      	pop	{r3}
 80061c8:	469e      	mov	lr, r3
 80061ca:	4770      	bx	lr
