
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00009ce4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009ee8  08009ee8  00019ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2f4  0800a2f4  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2fc  0800a2fc  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2fc  0800a2fc  0001a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a300  0800a300  0001a300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000234  0800a538  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800a538  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f826  00000000  00000000  00020262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004273  00000000  00000000  0003fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00043d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  000451c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8ea  00000000  00000000  000464a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b55b  00000000  00000000  00072d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001063b8  00000000  00000000  0008e2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001946a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060c4  00000000  00000000  001946f8  2**2
=======
  1 .text         0000ad0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800af10  0800af10  0001af10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b334  0800b334  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b33c  0800b33c  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b33c  0800b33c  0001b33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b340  0800b340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800b344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000234  0800b578  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0800b578  00020800  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211c5  00000000  00000000  00020262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004559  00000000  00000000  00041427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  00045980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00046ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cc74  00000000  00000000  00048268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2b8  00000000  00000000  00074edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001066f8  00000000  00000000  00091194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019788c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006358  00000000  00000000  001978e0  2**2
>>>>>>> fsm_rd_rfid
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000234 	.word	0x20000234
 800021c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000220:	08009ecc 	.word	0x08009ecc
=======
 8000220:	0800aef4 	.word	0x0800aef4
>>>>>>> fsm_rd_rfid

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000238 	.word	0x20000238
<<<<<<< HEAD
 800023c:	08009ecc 	.word	0x08009ecc
=======
 800023c:	0800aef4 	.word	0x0800aef4
>>>>>>> fsm_rd_rfid

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b22      	ldr	r3, [pc, #136]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fc:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MX_ADC2_Init+0xa0>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC2_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC2_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
<<<<<<< HEAD
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC2_Init+0x9c>)
 800062c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC2_Init+0x9c>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC2_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC2_Init+0x9c>)
 800064e:	f001 fccd 	bl	8001fec <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000658:	f000 fbfe 	bl	8000e58 <Error_Handler>
=======
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <MX_ADC1_Init+0xb4>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC1_Init+0xb4>)
 800062a:	4a1e      	ldr	r2, [pc, #120]	; (80006a4 <MX_ADC1_Init+0xbc>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ADC1_Init+0xb4>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000634:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC1_Init+0xb4>)
 8000636:	2202      	movs	r2, #2
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_ADC1_Init+0xb4>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_ADC1_Init+0xb4>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <MX_ADC1_Init+0xb4>)
 800064a:	f001 fff5 	bl	8002638 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fbec 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
<<<<<<< HEAD
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC2_Init+0x9c>)
 800066e:	f002 f8d9 	bl	8002824 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000678:	f000 fbee 	bl	8000e58 <Error_Handler>
=======
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_ADC1_Init+0xb4>)
 800066a:	f002 fbf3 	bl	8002e54 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fbdc 	bl	8000e30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000678:	2307      	movs	r3, #7
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800067c:	2302      	movs	r3, #2
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0xb4>)
 8000686:	f002 fbe5 	bl	8002e54 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000690:	f000 fbce 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
<<<<<<< HEAD
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000270 	.word	0x20000270
 8000688:	40012100 	.word	0x40012100

0800068c <MX_ADC3_Init>:
=======
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200002d0 	.word	0x200002d0
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_ADC3_Init>:
>>>>>>> fsm_rd_rfid
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
<<<<<<< HEAD
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fc7d 	bl	8001fec <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fbae 	bl	8000e58 <Error_Handler>
=======
 8000708:	4822      	ldr	r0, [pc, #136]	; (8000794 <MX_ADC3_Init+0xec>)
 800070a:	f001 ff95 	bl	8002638 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 fb8c 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000704:	2307      	movs	r3, #7
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f002 f889 	bl	8002824 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fb9e 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
<<<<<<< HEAD
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f002 f87b 	bl	8002824 <HAL_ADC_ConfigChannel>
=======
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <MX_ADC3_Init+0xec>)
 800072a:	f002 fb93 	bl	8002e54 <HAL_ADC_ConfigChannel>
>>>>>>> fsm_rd_rfid
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
<<<<<<< HEAD
 8000734:	f000 fb90 	bl	8000e58 <Error_Handler>
=======
 8000734:	f000 fb7c 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
<<<<<<< HEAD
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f002 f86d 	bl	8002824 <HAL_ADC_ConfigChannel>
=======
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_ADC3_Init+0xec>)
 8000746:	f002 fb85 	bl	8002e54 <HAL_ADC_ConfigChannel>
>>>>>>> fsm_rd_rfid
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
<<<<<<< HEAD
 8000750:	f000 fb82 	bl	8000e58 <Error_Handler>
=======
 8000750:	f000 fb6e 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
<<<<<<< HEAD
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f002 f85f 	bl	8002824 <HAL_ADC_ConfigChannel>
=======
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_ADC3_Init+0xec>)
 8000762:	f002 fb77 	bl	8002e54 <HAL_ADC_ConfigChannel>
>>>>>>> fsm_rd_rfid
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
<<<<<<< HEAD
 800076c:	f000 fb74 	bl	8000e58 <Error_Handler>
=======
 800076c:	f000 fb60 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
<<<<<<< HEAD
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f002 f851 	bl	8002824 <HAL_ADC_ConfigChannel>
=======
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC3_Init+0xec>)
 800077e:	f002 fb69 	bl	8002e54 <HAL_ADC_ConfigChannel>
>>>>>>> fsm_rd_rfid
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
<<<<<<< HEAD
 8000788:	f000 fb66 	bl	8000e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f002 f843 	bl	8002824 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fb58 	bl	8000e58 <Error_Handler>
=======
 8000788:	f000 fb52 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
<<<<<<< HEAD
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000318 	.word	0x20000318
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001
=======
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000318 	.word	0x20000318
 8000798:	40012200 	.word	0x40012200
 800079c:	0f000001 	.word	0x0f000001
>>>>>>> fsm_rd_rfid

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a63      	ldr	r2, [pc, #396]	; (8000968 <HAL_ADC_MspInit+0x1ac>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12c      	bne.n	8000838 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a62      	ldr	r2, [pc, #392]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b60      	ldr	r3, [pc, #384]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a5c      	ldr	r2, [pc, #368]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b5a      	ldr	r3, [pc, #360]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4853      	ldr	r0, [pc, #332]	; (8000970 <HAL_ADC_MspInit+0x1b4>)
 8000822:	f002 ffeb 	bl	80037fc <HAL_GPIO_Init>

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2012      	movs	r0, #18
 800082c:	f002 fba5 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000830:	2012      	movs	r0, #18
 8000832:	f002 fbbe 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4865      	ldr	r0, [pc, #404]	; (80009b4 <HAL_ADC_MspInit+0x214>)
 800081e:	f003 fb05 	bl	8003e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1A3_Pin|SENSOR8_Pin;
 8000822:	2388      	movs	r3, #136	; 0x88
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000832:	4619      	mov	r1, r3
 8000834:	4860      	ldr	r0, [pc, #384]	; (80009b8 <HAL_ADC_MspInit+0x218>)
 8000836:	f003 faf9 	bl	8003e2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800083a:	4b60      	ldr	r3, [pc, #384]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 800083c:	4a60      	ldr	r2, [pc, #384]	; (80009c0 <HAL_ADC_MspInit+0x220>)
 800083e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000840:	4b5e      	ldr	r3, [pc, #376]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000846:	4b5d      	ldr	r3, [pc, #372]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084c:	4b5b      	ldr	r3, [pc, #364]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000852:	4b5a      	ldr	r3, [pc, #360]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000858:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800085a:	4b58      	ldr	r3, [pc, #352]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 800085c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000860:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000864:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000868:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800086a:	4b54      	ldr	r3, [pc, #336]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 800086c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000870:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000878:	4b50      	ldr	r3, [pc, #320]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087e:	484f      	ldr	r0, [pc, #316]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000880:	f002 feca 	bl	8003618 <HAL_DMA_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800088a:	f000 fad1 	bl	8000e30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a4a      	ldr	r2, [pc, #296]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000892:	639a      	str	r2, [r3, #56]	; 0x38
 8000894:	4a49      	ldr	r2, [pc, #292]	; (80009bc <HAL_ADC_MspInit+0x21c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2100      	movs	r1, #0
 800089e:	2012      	movs	r0, #18
 80008a0:	f002 fe83 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008a4:	2012      	movs	r0, #18
 80008a6:	f002 fe9c 	bl	80035e2 <HAL_NVIC_EnableIRQ>
>>>>>>> fsm_rd_rfid
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000836:	e093      	b.n	8000960 <HAL_ADC_MspInit+0x1a4>
  else if(adcHandle->Instance==ADC3)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a4d      	ldr	r2, [pc, #308]	; (8000974 <HAL_ADC_MspInit+0x1b8>)
 800083e:	4293      	cmp	r3, r2
 8000840:	f040 808e 	bne.w	8000960 <HAL_ADC_MspInit+0x1a4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000844:	4b49      	ldr	r3, [pc, #292]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000848:	4a48      	ldr	r2, [pc, #288]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6453      	str	r3, [r2, #68]	; 0x44
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000858:	61bb      	str	r3, [r7, #24]
 800085a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a42      	ldr	r2, [pc, #264]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	f003 0320 	and.w	r3, r3, #32
 8000870:	617b      	str	r3, [r7, #20]
 8000872:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a3c      	ldr	r2, [pc, #240]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a36      	ldr	r2, [pc, #216]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6313      	str	r3, [r2, #48]	; 0x30
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <HAL_ADC_MspInit+0x1b0>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	f003 0301 	and.w	r3, r3, #1
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 80008a4:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008aa:	2303      	movs	r3, #3
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
<<<<<<< HEAD
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	482f      	ldr	r0, [pc, #188]	; (8000978 <HAL_ADC_MspInit+0x1bc>)
 80008ba:	f002 ff9f 	bl	80037fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 80008be:	2309      	movs	r3, #9
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	482a      	ldr	r0, [pc, #168]	; (800097c <HAL_ADC_MspInit+0x1c0>)
 80008d2:	f002 ff93 	bl	80037fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	482d      	ldr	r0, [pc, #180]	; (80009c8 <HAL_ADC_MspInit+0x228>)
 8000914:	f003 fa8a 	bl	8003e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR3_Pin;
 8000918:	2308      	movs	r3, #8
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> fsm_rd_rfid
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008da:	2303      	movs	r3, #3
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
<<<<<<< HEAD
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <HAL_ADC_MspInit+0x1b4>)
 80008ea:	f002 ff87 	bl	80037fc <HAL_GPIO_Init>
=======
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR3_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	4822      	ldr	r0, [pc, #136]	; (80009b4 <HAL_ADC_MspInit+0x214>)
 800092c:	f003 fa7e 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid
    hdma_adc3.Instance = DMA2_Stream1;
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 80008f0:	4a24      	ldr	r2, [pc, #144]	; (8000984 <HAL_ADC_MspInit+0x1c8>)
 80008f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 80008f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008fa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008fc:	4b20      	ldr	r3, [pc, #128]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000902:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000908:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 800090a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000916:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000918:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000930:	2200      	movs	r2, #0
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
<<<<<<< HEAD
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000936:	f002 fb57 	bl	8002fe8 <HAL_DMA_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_ADC_MspInit+0x188>
      Error_Handler();
 8000940:	f000 fa8a 	bl	8000e58 <Error_Handler>
=======
 8000976:	4815      	ldr	r0, [pc, #84]	; (80009cc <HAL_ADC_MspInit+0x22c>)
 8000978:	f002 fe4e 	bl	8003618 <HAL_DMA_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_ADC_MspInit+0x1e6>
      Error_Handler();
 8000982:	f000 fa55 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_ADC_MspInit+0x1c4>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
<<<<<<< HEAD
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2012      	movs	r0, #18
 8000956:	f002 fb10 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800095a:	2012      	movs	r0, #18
 800095c:	f002 fb29 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	; 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40012100 	.word	0x40012100
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	40012200 	.word	0x40012200
 8000978:	40021400 	.word	0x40021400
 800097c:	40020800 	.word	0x40020800
 8000980:	200002b8 	.word	0x200002b8
 8000984:	40026428 	.word	0x40026428

08000988 <HAL_ADC_ConvCpltCallback>:
=======
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2012      	movs	r0, #18
 8000998:	f002 fe07 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800099c:	2012      	movs	r0, #18
 800099e:	f002 fe20 	bl	80035e2 <HAL_NVIC_EnableIRQ>
}
 80009a2:	bf00      	nop
 80009a4:	3738      	adds	r7, #56	; 0x38
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40012000 	.word	0x40012000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	20000360 	.word	0x20000360
 80009c0:	40026410 	.word	0x40026410
 80009c4:	40012200 	.word	0x40012200
 80009c8:	40021400 	.word	0x40021400
 80009cc:	20000270 	.word	0x20000270
 80009d0:	40026428 	.word	0x40026428

080009d4 <HAL_ADC_ConvCpltCallback>:
>>>>>>> fsm_rd_rfid
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	if(hadc == &OBS_DETECTOR_ADC)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d101      	bne.n	800099c <HAL_ADC_ConvCpltCallback+0x14>
		// obstacle detector ISR
		isr_obs_detector();
 8000998:	f000 fd46 	bl	8001428 <isr_obs_detector>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000270 	.word	0x20000270

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_DMA_Init+0x38>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_DMA_Init+0x38>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_DMA_Init+0x38>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
<<<<<<< HEAD
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2039      	movs	r0, #57	; 0x39
 80009cc:	f002 fad5 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009d0:	2039      	movs	r0, #57	; 0x39
 80009d2:	f002 faee 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2038      	movs	r0, #56	; 0x38
 8000a0c:	f002 fdcd 	bl	80035aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a10:	2038      	movs	r0, #56	; 0x38
 8000a12:	f002 fde6 	bl	80035e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2039      	movs	r0, #57	; 0x39
 8000a1c:	f002 fdc5 	bl	80035aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a20:	2039      	movs	r0, #57	; 0x39
 8000a22:	f002 fdde 	bl	80035e2 <HAL_NVIC_EnableIRQ>
>>>>>>> fsm_rd_rfid

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <MX_GPIO_Init+0x16c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a54      	ldr	r2, [pc, #336]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0320 	and.w	r3, r3, #32
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a4e      	ldr	r2, [pc, #312]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b4c      	ldr	r3, [pc, #304]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b49      	ldr	r3, [pc, #292]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a48      	ldr	r2, [pc, #288]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b46      	ldr	r3, [pc, #280]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4b43      	ldr	r3, [pc, #268]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a42      	ldr	r2, [pc, #264]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <MX_GPIO_Init+0x16c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000a72:	2200      	movs	r2, #0
 8000a74:	2160      	movs	r1, #96	; 0x60
 8000a76:	4837      	ldr	r0, [pc, #220]	; (8000b54 <MX_GPIO_Init+0x170>)
 8000a78:	f003 f86c 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f244 2101 	movw	r1, #16897	; 0x4201
 8000a82:	4835      	ldr	r0, [pc, #212]	; (8000b58 <MX_GPIO_Init+0x174>)
 8000a84:	f003 f866 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f244 0104 	movw	r1, #16388	; 0x4004
 8000a8e:	4833      	ldr	r0, [pc, #204]	; (8000b5c <MX_GPIO_Init+0x178>)
 8000a90:	f003 f860 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_RSET_GPIO_Port, SPI3_RSET_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	4831      	ldr	r0, [pc, #196]	; (8000b60 <MX_GPIO_Init+0x17c>)
 8000a9c:	f003 f85a 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482b      	ldr	r0, [pc, #172]	; (8000b60 <MX_GPIO_Init+0x17c>)
 8000ab4:	f002 fea2 	bl	80037fc <HAL_GPIO_Init>
=======
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2160      	movs	r1, #96	; 0x60
 8000ac6:	4831      	ldr	r0, [pc, #196]	; (8000b8c <MX_GPIO_Init+0x158>)
 8000ac8:	f003 fb5c 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f244 2101 	movw	r1, #16897	; 0x4201
 8000ad2:	482f      	ldr	r0, [pc, #188]	; (8000b90 <MX_GPIO_Init+0x15c>)
 8000ad4:	f003 fb56 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f244 0104 	movw	r1, #16388	; 0x4004
 8000ade:	482d      	ldr	r0, [pc, #180]	; (8000b94 <MX_GPIO_Init+0x160>)
 8000ae0:	f003 fb50 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_RSET_GPIO_Port, SPI3_RSET_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aea:	482b      	ldr	r0, [pc, #172]	; (8000b98 <MX_GPIO_Init+0x164>)
 8000aec:	f003 fb4a 	bl	8004184 <HAL_GPIO_WritePin>
>>>>>>> fsm_rd_rfid

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000ab8:	2360      	movs	r3, #96	; 0x60
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4821      	ldr	r0, [pc, #132]	; (8000b54 <MX_GPIO_Init+0x170>)
 8000ad0:	f002 fe94 	bl	80037fc <HAL_GPIO_Init>
=======
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MX_GPIO_Init+0x158>)
 8000b08:	f003 f990 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|IN1_RIGHT_Pin;
 8000ad4:	f244 2301 	movw	r3, #16897	; 0x4201
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	481a      	ldr	r0, [pc, #104]	; (8000b58 <MX_GPIO_Init+0x174>)
 8000aee:	f002 fe85 	bl	80037fc <HAL_GPIO_Init>
=======
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <MX_GPIO_Init+0x15c>)
 8000b26:	f003 f981 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000af2:	f244 0304 	movw	r3, #16388	; 0x4004
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_GPIO_Init+0x178>)
 8000b0c:	f002 fe76 	bl	80037fc <HAL_GPIO_Init>
=======
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_GPIO_Init+0x160>)
 8000b44:	f003 f972 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MX_GPIO_Init+0x17c>)
 8000b26:	f002 fe69 	bl	80037fc <HAL_GPIO_Init>
=======
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480e      	ldr	r0, [pc, #56]	; (8000b98 <MX_GPIO_Init+0x164>)
 8000b5e:	f003 f965 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_RSET_Pin;
 8000b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_RSET_GPIO_Port, &GPIO_InitStruct);
<<<<<<< HEAD
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_GPIO_Init+0x17c>)
 8000b44:	f002 fe5a 	bl	80037fc <HAL_GPIO_Init>
=======
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_GPIO_Init+0x164>)
 8000b7c:	f003 f956 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40020c00 	.word	0x40020c00
 8000b60:	40020800 	.word	0x40020800

08000b64 <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// start storing QTR Sensor values
	qtr_init();
 8000b68:	f000 faf4 	bl	8001154 <qtr_init>
	// start sampling for PID application
	HAL_TIM_Base_Start_IT(&TIM_LF_PID);
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <lfollower_start+0x20>)
 8000b6e:	f004 fbc1 	bl	80052f4 <HAL_TIM_Base_Start_IT>

	// start movement
	move_start();
 8000b72:	f000 f9cd 	bl	8000f10 <move_start>

	// start obstacle detectors
	obs_detector_init();
 8000b76:	f000 fc3b 	bl	80013f0 <obs_detector_init>

	// mark line follower is enabled
	lfollower_status = 1;
 8000b7a:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <lfollower_start+0x24>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
}
 8000b80:	bf00      	nop
<<<<<<< HEAD
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000048c 	.word	0x2000048c
 8000b88:	20000252 	.word	0x20000252

08000b8c <lfollower_stop>:
=======
 8000b82:	3728      	adds	r7, #40	; 0x28
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	40020c00 	.word	0x40020c00
 8000b98:	40020800 	.word	0x40020800

08000b9c <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	// start storing QTR Sensor values
	qtr_init();
 8000ba0:	f000 fac4 	bl	800112c <qtr_init>
	// start sampling for PID application
	HAL_TIM_Base_Start_IT(&TIM_LFOLLOWER_PID);
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <lfollower_start+0x20>)
 8000ba6:	f005 fbb9 	bl	800631c <HAL_TIM_Base_Start_IT>

	// start movement
	move_start();
 8000baa:	f000 f99d 	bl	8000ee8 <move_start>

	// start obstacle detectors
	obs_detector_init();
 8000bae:	f000 ffe3 	bl	8001b78 <obs_detector_init>

	// mark line follower is enabled
	lfollower_status = 1;
 8000bb2:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <lfollower_start+0x24>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000538 	.word	0x20000538
 8000bc0:	20000252 	.word	0x20000252

08000bc4 <lfollower_stop>:
>>>>>>> fsm_rd_rfid
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
<<<<<<< HEAD
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	// stop storing QTR sensor values
	qtr_kill();
 8000b90:	f000 faee 	bl	8001170 <qtr_kill>
	// stop sampling for PID application
	HAL_TIM_Base_Stop_IT(&TIM_LF_PID);
 8000b94:	4805      	ldr	r0, [pc, #20]	; (8000bac <lfollower_stop+0x20>)
 8000b96:	f004 fc25 	bl	80053e4 <HAL_TIM_Base_Stop_IT>

	// stop movement
	move_stop();
 8000b9a:	f000 f9cd 	bl	8000f38 <move_stop>

	// stop obstacle detectors
	obs_detector_deInit();
 8000b9e:	f000 fc35 	bl	800140c <obs_detector_deInit>

	// mark line follower is disabled
	lfollower_status = 0;
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <lfollower_stop+0x24>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000048c 	.word	0x2000048c
 8000bb0:	20000252 	.word	0x20000252
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <lfollower_pid>:
=======
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	// stop storing QTR sensor values
	qtr_kill();
 8000bc8:	f000 fabe 	bl	8001148 <qtr_kill>
	// stop sampling for PID application
	HAL_TIM_Base_Stop_IT(&TIM_LFOLLOWER_PID);
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <lfollower_stop+0x20>)
 8000bce:	f005 fc1d 	bl	800640c <HAL_TIM_Base_Stop_IT>

	// stop movement
	move_stop();
 8000bd2:	f000 f99d 	bl	8000f10 <move_stop>

	// stop obstacle detectors
	obs_detector_deInit();
 8000bd6:	f000 ffdd 	bl	8001b94 <obs_detector_deInit>

	// mark line follower is disabled
	lfollower_status = 0;
 8000bda:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <lfollower_stop+0x24>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000538 	.word	0x20000538
 8000be8:	20000252 	.word	0x20000252
 8000bec:	00000000 	.word	0x00000000

08000bf0 <lfollower_pid>:
>>>>>>> fsm_rd_rfid
	.u_sat_a	= +1.0,
	.u_sat_b	= -1.0
};

void lfollower_pid(void)
{
<<<<<<< HEAD
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	// is line follower disabled?
	if(lfollower_status == 0)
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <lfollower_pid+0xb0>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d045      	beq.n	8000c50 <lfollower_pid+0x98>
=======
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	// is line follower disabled?
	if(lfollower_status == 0)
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <lfollower_pid+0xb0>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d045      	beq.n	8000c88 <lfollower_pid+0x98>
>>>>>>> fsm_rd_rfid
		return;

	// Apply PID to adjust motor PWM/velocity
	// error = S_LEFT_VAL - S_RIGHT_VAL
<<<<<<< HEAD
	pid_calcule(&pid, 	DIG_TO_ANALOG(qtr_sens[LF_SENSOR_L]),
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <lfollower_pid+0xb4>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bd0:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000c58 <lfollower_pid+0xa0>
 8000bd4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bd8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c60 <lfollower_pid+0xa8>
 8000bdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000be0:	eef7 4bc7 	vcvt.f32.f64	s9, d7
						DIG_TO_ANALOG(qtr_sens[LF_SENSOR_R]));
 8000be4:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <lfollower_pid+0xb4>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bf0:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000c58 <lfollower_pid+0xa0>
 8000bf4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bf8:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c60 <lfollower_pid+0xa8>
 8000bfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
	pid_calcule(&pid, 	DIG_TO_ANALOG(qtr_sens[LF_SENSOR_L]),
 8000c00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c04:	eef0 0a67 	vmov.f32	s1, s15
 8000c08:	eeb0 0a64 	vmov.f32	s0, s9
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <lfollower_pid+0xb8>)
 8000c0e:	f000 fa15 	bl	800103c <pid_calcule>

	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <lfollower_pid+0xb8>)
 8000c14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c18:	eef1 7a67 	vneg.f32	s15, s15
 8000c1c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000c74 <lfollower_pid+0xbc>
 8000c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000c78 <lfollower_pid+0xc0>
 8000c28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <lfollower_pid+0xb8>)
 8000c2e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c32:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000c74 <lfollower_pid+0xbc>
 8000c36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c3a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000c78 <lfollower_pid+0xc0>
 8000c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c42:	eef0 0a67 	vmov.f32	s1, s15
 8000c46:	eeb0 0a47 	vmov.f32	s0, s14
 8000c4a:	f000 f989 	bl	8000f60 <move_control>
 8000c4e:	e000      	b.n	8000c52 <lfollower_pid+0x9a>
		return;
 8000c50:	bf00      	nop
}
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	f3af 8000 	nop.w
 8000c58:	66666666 	.word	0x66666666
 8000c5c:	400a6666 	.word	0x400a6666
 8000c60:	00000000 	.word	0x00000000
 8000c64:	40affe00 	.word	0x40affe00
 8000c68:	20000252 	.word	0x20000252
 8000c6c:	20000360 	.word	0x20000360
 8000c70:	20000000 	.word	0x20000000
 8000c74:	3eb33334 	.word	0x3eb33334
 8000c78:	3f266666 	.word	0x3f266666

08000c7c <lfollower_control>:
@brief
@param	none
@retval	none
******************************************************************************/
uint8_t lfollower_control(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t err = EXIT_SUCCESS;
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]

	// line follower already started?
	if(lfollower_status == 0)
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <lfollower_control+0x58>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <lfollower_control+0x16>
		// start line follower
		lfollower_start();
 8000c8e:	f7ff ff69 	bl	8000b64 <lfollower_start>

	if(cross_detector() == 1)
 8000c92:	f000 fbf1 	bl	8001478 <cross_detector>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d102      	bne.n	8000ca2 <lfollower_control+0x26>
		// cross detected
		err = E_CROSS_FOUND;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e00d      	b.n	8000cbe <lfollower_control+0x42>
	else if(room_detector() == 1)
 8000ca2:	f000 fc35 	bl	8001510 <room_detector>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d102      	bne.n	8000cb2 <lfollower_control+0x36>
		// room detected
		err = E_ROOM_FOUND;
 8000cac:	2302      	movs	r3, #2
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	e005      	b.n	8000cbe <lfollower_control+0x42>
	else if(obs_found_flag == 1)
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <lfollower_control+0x5c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d101      	bne.n	8000cbe <lfollower_control+0x42>
		// obstacle found
		err = E_OBS_FOUND;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	71fb      	strb	r3, [r7, #7]

	// error found?
	if(err)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <lfollower_control+0x4c>
		// stop line follower
		lfollower_stop();
 8000cc4:	f7ff ff62 	bl	8000b8c <lfollower_stop>

	// return error code
	return err;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000252 	.word	0x20000252
 8000cd8:	20000254 	.word	0x20000254

08000cdc <main>:
=======
	pid_calcule(&pid, 	DIG_TO_ANALOG(qtr_sens[SENSOR6]),
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <lfollower_pid+0xb4>)
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c08:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000c90 <lfollower_pid+0xa0>
 8000c0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c10:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c98 <lfollower_pid+0xa8>
 8000c14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c18:	eef7 4bc7 	vcvt.f32.f64	s9, d7
						DIG_TO_ANALOG(qtr_sens[SENSOR3]));
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <lfollower_pid+0xb4>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c28:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000c90 <lfollower_pid+0xa0>
 8000c2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c30:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c98 <lfollower_pid+0xa8>
 8000c34:	ee86 7b05 	vdiv.f64	d7, d6, d5
	pid_calcule(&pid, 	DIG_TO_ANALOG(qtr_sens[SENSOR6]),
 8000c38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c3c:	eef0 0a67 	vmov.f32	s1, s15
 8000c40:	eeb0 0a64 	vmov.f32	s0, s9
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <lfollower_pid+0xb8>)
 8000c46:	f000 f9e5 	bl	8001014 <pid_calcule>

	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000c4a:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <lfollower_pid+0xb8>)
 8000c4c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c50:	eef1 7a67 	vneg.f32	s15, s15
 8000c54:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000cac <lfollower_pid+0xbc>
 8000c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000cb0 <lfollower_pid+0xc0>
 8000c60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <lfollower_pid+0xb8>)
 8000c66:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c6a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000cac <lfollower_pid+0xbc>
 8000c6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c72:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000cb0 <lfollower_pid+0xc0>
 8000c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c7a:	eef0 0a67 	vmov.f32	s1, s15
 8000c7e:	eeb0 0a47 	vmov.f32	s0, s14
 8000c82:	f000 f959 	bl	8000f38 <move_control>
 8000c86:	e000      	b.n	8000c8a <lfollower_pid+0x9a>
		return;
 8000c88:	bf00      	nop
}
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	f3af 8000 	nop.w
 8000c90:	66666666 	.word	0x66666666
 8000c94:	400a6666 	.word	0x400a6666
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40affe00 	.word	0x40affe00
 8000ca0:	20000252 	.word	0x20000252
 8000ca4:	200003c0 	.word	0x200003c0
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	3eb33334 	.word	0x3eb33334
 8000cb0:	3f266666 	.word	0x3f266666

08000cb4 <main>:
>>>>>>> fsm_rd_rfid
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
=======
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000ce0:	f001 f927 	bl	8001f32 <HAL_Init>
=======
 8000cb8:	f001 fc3d 	bl	8002536 <HAL_Init>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000ce4:	f000 f826 	bl	8000d34 <SystemClock_Config>
=======
 8000cbc:	f000 f826 	bl	8000d0c <SystemClock_Config>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000ce8:	f7ff fe7c 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cec:	f7ff fe5c 	bl	80009a8 <MX_DMA_Init>
  MX_SPI3_Init();
 8000cf0:	f000 fa48 	bl	8001184 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000cf4:	f001 f82c 	bl	8001d50 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000cf8:	f000 fe30 	bl	800195c <MX_TIM6_Init>
  MX_ADC3_Init();
 8000cfc:	f7ff fcc6 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000d00:	f000 fdc8 	bl	8001894 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d04:	f000 fff4 	bl	8001cf0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d08:	f000 fd4c 	bl	80017a4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000d0c:	f000 fe5e 	bl	80019cc <MX_TIM7_Init>
  MX_ADC2_Init();
 8000d10:	f7ff fc6a 	bl	80005e8 <MX_ADC2_Init>
=======
 8000cc0:	f7ff feb8 	bl	8000a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f7ff fe90 	bl	80009e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cc8:	f7ff fc8e 	bl	80005e8 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000ccc:	f000 fe1e 	bl	800190c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000cd0:	f001 fb40 	bl	8002354 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000cd4:	f001 f948 	bl	8001f68 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000cd8:	f7ff fce6 	bl	80006a8 <MX_ADC3_Init>
  MX_TIM4_Init();
 8000cdc:	f001 f8e0 	bl	8001ea0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000ce0:	f001 fb08 	bl	80022f4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000ce4:	f001 f864 	bl	8001db0 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000ce8:	f001 f974 	bl	8001fd4 <MX_TIM7_Init>
>>>>>>> fsm_rd_rfid

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = S_STOPPED;
<<<<<<< HEAD
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <main+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <main+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
=======
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <main+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <main+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
>>>>>>> fsm_rd_rfid

  while (1)
  {
	  test_modules();
<<<<<<< HEAD
 8000d20:	f000 fd38 	bl	8001794 <test_modules>
	  break;
 8000d24:	bf00      	nop
 8000d26:	2300      	movs	r3, #0
=======
 8000cf8:	f001 f854 	bl	8001da4 <test_modules>
	  break;
 8000cfc:	bf00      	nop
 8000cfe:	2300      	movs	r3, #0
>>>>>>> fsm_rd_rfid
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
<<<<<<< HEAD
 8000d28:	4618      	mov	r0, r3
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000250 	.word	0x20000250
 8000d30:	20000251 	.word	0x20000251

08000d34 <SystemClock_Config>:
=======
 8000d00:	4618      	mov	r0, r3
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000250 	.word	0x20000250
 8000d08:	20000251 	.word	0x20000251

08000d0c <SystemClock_Config>:
>>>>>>> fsm_rd_rfid
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0b8      	sub	sp, #224	; 0xe0
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d3e:	2234      	movs	r2, #52	; 0x34
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 fc80 	bl	8007648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	2290      	movs	r2, #144	; 0x90
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f006 fc71 	bl	8007648 <memset>
=======
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0b8      	sub	sp, #224	; 0xe0
 8000d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d16:	2234      	movs	r2, #52	; 0x34
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f007 fca8 	bl	8008670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	2290      	movs	r2, #144	; 0x90
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f007 fc99 	bl	8008670 <memset>
>>>>>>> fsm_rd_rfid

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <SystemClock_Config+0x11c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <SystemClock_Config+0x11c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <SystemClock_Config+0x11c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7e:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <SystemClock_Config+0x120>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <SystemClock_Config+0x120>)
 8000d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <SystemClock_Config+0x120>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
=======
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <SystemClock_Config+0x11c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a39      	ldr	r2, [pc, #228]	; (8000e28 <SystemClock_Config+0x11c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <SystemClock_Config+0x11c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d56:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <SystemClock_Config+0x120>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a34      	ldr	r2, [pc, #208]	; (8000e2c <SystemClock_Config+0x120>)
 8000d5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <SystemClock_Config+0x120>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
>>>>>>> fsm_rd_rfid
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2310      	movs	r3, #16
 8000da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000db4:	2308      	movs	r3, #8
 8000db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000dba:	23d8      	movs	r3, #216	; 0xd8
 8000dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 ff29 	bl	8003c28 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ddc:	f000 f83c 	bl	8000e58 <Error_Handler>
=======
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d92:	23d8      	movs	r3, #216	; 0xd8
 8000d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fa6f 	bl	800428c <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000db4:	f000 f83c 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< HEAD
 8000de0:	f002 fed2 	bl	8003b88 <HAL_PWREx_EnableOverDrive>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dea:	f000 f835 	bl	8000e58 <Error_Handler>
=======
 8000db8:	f003 fa18 	bl	80041ec <HAL_PWREx_EnableOverDrive>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dc2:	f000 f835 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000dee:	230f      	movs	r3, #15
 8000df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2302      	movs	r3, #2
 8000df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e14:	2107      	movs	r1, #7
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 f9b4 	bl	8004184 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e22:	f000 f819 	bl	8000e58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000e26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e2a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	f107 0308 	add.w	r3, r7, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fb79 	bl	8004530 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e44:	f000 f808 	bl	8000e58 <Error_Handler>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	37e0      	adds	r7, #224	; 0xe0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40007000 	.word	0x40007000

08000e58 <Error_Handler>:
=======
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000de8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dec:	2107      	movs	r1, #7
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fcfa 	bl	80047e8 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000dfa:	f000 f819 	bl	8000e30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000dfe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e02:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e04:	2300      	movs	r3, #0
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 febf 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e1c:	f000 f808 	bl	8000e30 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	37e0      	adds	r7, #224	; 0xe0
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <Error_Handler>:
>>>>>>> fsm_rd_rfid
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
=======
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
=======
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <motor_init>:
=======
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <motor_init>:
>>>>>>> fsm_rd_rfid
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
<<<<<<< HEAD
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <motor_init+0x1c>)
 8000e74:	f004 fb9e 	bl	80055b4 <HAL_TIM_PWM_Start>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000440 	.word	0x20000440

08000e84 <motor_kill>:
=======
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <motor_init+0x1c>)
 8000e4c:	f005 fbc6 	bl	80065dc <HAL_TIM_PWM_Start>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200004a0 	.word	0x200004a0

08000e5c <motor_kill>:
>>>>>>> fsm_rd_rfid
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
<<<<<<< HEAD
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <motor_kill+0x28>)
 8000e94:	f004 fc88 	bl	80057a8 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8000e98:	2202      	movs	r2, #2
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f807 	bl	8000eb0 <motor_control>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000440 	.word	0x20000440

08000eb0 <motor_control>:
=======
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <motor_kill+0x28>)
 8000e6c:	f005 fcb0 	bl	80067d0 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8000e70:	2202      	movs	r2, #2
 8000e72:	2100      	movs	r1, #0
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f807 	bl	8000e88 <motor_control>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200004a0 	.word	0x200004a0

08000e88 <motor_control>:
>>>>>>> fsm_rd_rfid
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
<<<<<<< HEAD
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6858      	ldr	r0, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8919      	ldrh	r1, [r3, #8]
 8000ec8:	78bb      	ldrb	r3, [r7, #2]
 8000eca:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <motor_control+0x58>)
 8000ecc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f002 fe3f 	bl	8003b54 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68d8      	ldr	r0, [r3, #12]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	8a19      	ldrh	r1, [r3, #16]
 8000ede:	78bb      	ldrb	r3, [r7, #2]
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <motor_control+0x58>)
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f002 fe33 	bl	8003b54 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	78fa      	ldrb	r2, [r7, #3]
 8000ef6:	b292      	uxth	r2, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <motor_control+0x5c>)
 8000efc:	f000 fe9e 	bl	8001c3c <set_pwm>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08009ee8 	.word	0x08009ee8
 8000f0c:	20000440 	.word	0x20000440

08000f10 <move_start>:
=======
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
 8000e94:	4613      	mov	r3, r2
 8000e96:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6858      	ldr	r0, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	8919      	ldrh	r1, [r3, #8]
 8000ea0:	78bb      	ldrb	r3, [r7, #2]
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <motor_control+0x58>)
 8000ea4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	f003 f96b 	bl	8004184 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68d8      	ldr	r0, [r3, #12]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	8a19      	ldrh	r1, [r3, #16]
 8000eb6:	78bb      	ldrb	r3, [r7, #2]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <motor_control+0x58>)
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	785b      	ldrb	r3, [r3, #1]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	f003 f95f 	bl	8004184 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	78fa      	ldrb	r2, [r7, #3]
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <motor_control+0x5c>)
 8000ed4:	f001 f9ae 	bl	8002234 <set_pwm>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	0800af28 	.word	0x0800af28
 8000ee4:	200004a0 	.word	0x200004a0

08000ee8 <move_start>:
>>>>>>> fsm_rd_rfid
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
<<<<<<< HEAD
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <move_start+0x1c>)
 8000f16:	f7ff ffa5 	bl	8000e64 <motor_init>
	motor_init(&motor_left);
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <move_start+0x20>)
 8000f1c:	f7ff ffa2 	bl	8000e64 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <move_start+0x24>)
 8000f22:	2201      	movs	r2, #1
=======
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <move_start+0x1c>)
 8000eee:	f7ff ffa5 	bl	8000e3c <motor_init>
	motor_init(&motor_left);
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <move_start+0x20>)
 8000ef4:	f7ff ffa2 	bl	8000e3c <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <move_start+0x24>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000030 	.word	0x20000030
 8000f08:	20000044 	.word	0x20000044
 8000f0c:	20000253 	.word	0x20000253

08000f10 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <move_stop+0x1c>)
 8000f16:	f7ff ffa1 	bl	8000e5c <motor_kill>
	motor_kill(&motor_left);
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <move_stop+0x20>)
 8000f1c:	f7ff ff9e 	bl	8000e5c <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <move_stop+0x24>)
 8000f22:	2200      	movs	r2, #0
>>>>>>> fsm_rd_rfid
 8000f24:	701a      	strb	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000030 	.word	0x20000030
 8000f30:	20000044 	.word	0x20000044
 8000f34:	20000253 	.word	0x20000253

<<<<<<< HEAD
08000f38 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <move_stop+0x1c>)
 8000f3e:	f7ff ffa1 	bl	8000e84 <motor_kill>
	motor_kill(&motor_left);
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <move_stop+0x20>)
 8000f44:	f7ff ff9e 	bl	8000e84 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <move_stop+0x24>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000030 	.word	0x20000030
 8000f58:	20000044 	.word	0x20000044
 8000f5c:	20000253 	.word	0x20000253

08000f60 <move_control>:
=======
08000f38 <move_control>:
>>>>>>> fsm_rd_rfid
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
<<<<<<< HEAD
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f6a:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <move_control+0xd0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8000f76:	f7ff ffcb 	bl	8000f10 <move_start>
=======
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f42:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <move_control+0xd0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8000f4e:	f7ff ffcb 	bl	8000ee8 <move_start>
>>>>>>> fsm_rd_rfid
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
<<<<<<< HEAD
 8000f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001020 <move_control+0xc0>
 8000f86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f92:	793b      	ldrb	r3, [r7, #4]
 8000f94:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8000f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f9e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001020 <move_control+0xc0>
 8000fa2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000fa6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000faa:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fae:	793b      	ldrb	r3, [r7, #4]
 8000fb0:	75bb      	strb	r3, [r7, #22]
=======
 8000f52:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000ff8 <move_control+0xc0>
 8000f5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f6a:	793b      	ldrb	r3, [r7, #4]
 8000f6c:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8000f6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f76:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000ff8 <move_control+0xc0>
 8000f7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f82:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f86:	793b      	ldrb	r3, [r7, #4]
 8000f88:	75bb      	strb	r3, [r7, #22]
>>>>>>> fsm_rd_rfid

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
<<<<<<< HEAD
 8000fb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fbe:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001028 <move_control+0xc8>
 8000fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fc6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fca:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	b2d9      	uxtb	r1, r3
 8000fd2:	7dbb      	ldrb	r3, [r7, #22]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <move_control+0xd4>)
 8000fde:	f7ff ff67 	bl	8000eb0 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8000fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fee:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001028 <move_control+0xc8>
 8000ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ff6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ffa:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ffe:	793b      	ldrb	r3, [r7, #4]
 8001000:	b2d9      	uxtb	r1, r3
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	461a      	mov	r2, r3
 800100c:	480a      	ldr	r0, [pc, #40]	; (8001038 <move_control+0xd8>)
 800100e:	f7ff ff4f 	bl	8000eb0 <motor_control>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	7ae147ae 	.word	0x7ae147ae
 8001024:	3fefae14 	.word	0x3fefae14
 8001028:	00000000 	.word	0x00000000
 800102c:	40590000 	.word	0x40590000
 8001030:	20000253 	.word	0x20000253
 8001034:	20000030 	.word	0x20000030
 8001038:	20000044 	.word	0x20000044

0800103c <pid_calcule>:
=======
 8000f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8e:	eef0 7ae7 	vabs.f32	s15, s15
 8000f92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f96:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001000 <move_control+0xc8>
 8000f9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f9e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fa2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fa6:	793b      	ldrb	r3, [r7, #4]
 8000fa8:	b2d9      	uxtb	r1, r3
 8000faa:	7dbb      	ldrb	r3, [r7, #22]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4815      	ldr	r0, [pc, #84]	; (800100c <move_control+0xd4>)
 8000fb6:	f7ff ff67 	bl	8000e88 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8000fba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fbe:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001000 <move_control+0xc8>
 8000fca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fd6:	793b      	ldrb	r3, [r7, #4]
 8000fd8:	b2d9      	uxtb	r1, r3
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <move_control+0xd8>)
 8000fe6:	f7ff ff4f 	bl	8000e88 <motor_control>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	7ae147ae 	.word	0x7ae147ae
 8000ffc:	3fefae14 	.word	0x3fefae14
 8001000:	00000000 	.word	0x00000000
 8001004:	40590000 	.word	0x40590000
 8001008:	20000253 	.word	0x20000253
 800100c:	20000030 	.word	0x20000030
 8001010:	20000044 	.word	0x20000044

08001014 <pid_calcule>:
>>>>>>> fsm_rd_rfid
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
<<<<<<< HEAD
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	ed87 0a02 	vstr	s0, [r7, #8]
 8001048:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 800104c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001050:	edd7 7a01 	vldr	s15, [r7, #4]
 8001054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	ed93 7a05 	vldr	s14, [r3, #20]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 6a03 	vldr	s13, [r3, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	edd3 7a04 	vldr	s15, [r3, #16]
 800108e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a08 	vldr	s15, [r3, #32]
 800109c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001150 <pid_calcule+0x114>
 80010a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	ed93 7a00 	vldr	s14, [r3]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	69da      	ldr	r2, [r3, #28]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd08      	ble.n	800111a <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	699a      	ldr	r2, [r3, #24]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	615a      	str	r2, [r3, #20]
=======
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001020:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 8001024:	ed97 7a02 	vldr	s14, [r7, #8]
 8001028:	edd7 7a01 	vldr	s15, [r7, #4]
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	ed93 7a05 	vldr	s14, [r3, #20]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	edd3 7a04 	vldr	s15, [r3, #16]
 800104a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	ed93 7a02 	vldr	s14, [r3, #8]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	edd3 7a04 	vldr	s15, [r3, #16]
 8001066:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800106a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 7a08 	vldr	s15, [r3, #32]
 8001074:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001128 <pid_calcule+0x114>
 8001078:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800107c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 6a01 	vldr	s13, [r3, #4]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	edd3 7a05 	vldr	s15, [r3, #20]
 80010a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd08      	ble.n	80010f2 <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	615a      	str	r2, [r3, #20]
>>>>>>> fsm_rd_rfid
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
<<<<<<< HEAD
 8001118:	e013      	b.n	8001142 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d400      	bmi.n	8001132 <pid_calcule+0xf6>
}
 8001130:	e007      	b.n	8001142 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	615a      	str	r2, [r3, #20]
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	3e99999a 	.word	0x3e99999a

08001154 <qtr_init>:
=======
 80010f0:	e013      	b.n	800111a <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	d400      	bmi.n	800110a <pid_calcule+0xf6>
}
 8001108:	e007      	b.n	800111a <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	615a      	str	r2, [r3, #20]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	3e99999a 	.word	0x3e99999a

0800112c <qtr_init>:
>>>>>>> fsm_rd_rfid
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
<<<<<<< HEAD
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001158:	2206      	movs	r2, #6
 800115a:	4903      	ldr	r1, [pc, #12]	; (8001168 <qtr_init+0x14>)
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <qtr_init+0x18>)
 800115e:	f001 f9e1 	bl	8002524 <HAL_ADC_Start_DMA>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000360 	.word	0x20000360
 800116c:	20000318 	.word	0x20000318

08001170 <qtr_kill>:
=======
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 8001130:	2206      	movs	r2, #6
 8001132:	4903      	ldr	r1, [pc, #12]	; (8001140 <qtr_init+0x14>)
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <qtr_init+0x18>)
 8001136:	f001 fd1b 	bl	8002b70 <HAL_ADC_Start_DMA>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003c0 	.word	0x200003c0
 8001144:	200002d0 	.word	0x200002d0

08001148 <qtr_kill>:
>>>>>>> fsm_rd_rfid
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
<<<<<<< HEAD
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <qtr_kill+0x10>)
 8001176:	f001 facf 	bl	8002718 <HAL_ADC_Stop_DMA>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000318 	.word	0x20000318

08001184 <MX_SPI3_Init>:
=======
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <qtr_kill+0x10>)
 800114e:	f001 fe09 	bl	8002d64 <HAL_ADC_Stop_DMA>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200002d0 	.word	0x200002d0

0800115c <RFID_RC522_Init>:
#include "rfid-rc522.h"
#include <stdlib.h>

//SPI_HandleTypeDef SpiHandle = hspi1;

void RFID_RC522_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0

	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fb5d 	bl	8001820 <TM_MFRC522_CS_Write>

	TM_MFRC522_Reset();
 8001166:	f000 f932 	bl	80013ce <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800116a:	218d      	movs	r1, #141	; 0x8d
 800116c:	202a      	movs	r0, #42	; 0x2a
 800116e:	f000 f86b 	bl	8001248 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8001172:	213e      	movs	r1, #62	; 0x3e
 8001174:	202b      	movs	r0, #43	; 0x2b
 8001176:	f000 f867 	bl	8001248 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 800117a:	2103      	movs	r1, #3
 800117c:	202c      	movs	r0, #44	; 0x2c
 800117e:	f000 f863 	bl	8001248 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 8001182:	21e8      	movs	r1, #232	; 0xe8
 8001184:	202d      	movs	r0, #45	; 0x2d
 8001186:	f000 f85f 	bl	8001248 <TM_MFRC522_WriteRegister>

	// 48dB gain
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800118a:	2170      	movs	r1, #112	; 0x70
 800118c:	2026      	movs	r0, #38	; 0x26
 800118e:	f000 f85b 	bl	8001248 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	2015      	movs	r0, #21
 8001196:	f000 f857 	bl	8001248 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(ModeReg, 0x3D);
 800119a:	213d      	movs	r1, #61	; 0x3d
 800119c:	2011      	movs	r0, #17
 800119e:	f000 f853 	bl	8001248 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 80011a2:	f000 f8ff 	bl	80013a4 <TM_MFRC522_AntennaOn>
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}

080011aa <read_RFID>:
@brief 	Reads RFID card
@para 	rfid struct
@retval rfid status
******************************************************************************/
uint8_t read_RFID(rfid_t rfid)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// RFID status reading
	int status;

  	// enable RFID reader
  	RFID_RC522_Init();
 80011b6:	f7ff ffd1 	bl	800115c <RFID_RC522_Init>

	do
	{
		// check if rfid was read
		status = TM_MFRC522_Check(rfid.CardID, &rfid.type);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	1d1a      	adds	r2, r3, #4
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f816 	bl	80011f4 <TM_MFRC522_Check>
 80011c8:	4603      	mov	r3, r0
 80011ca:	617b      	str	r3, [r7, #20]

		if (status == MI_OK)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <read_RFID+0x38>
			// rfid read
			// converts CardID to an hexadecimal string
			bin_to_strhex((unsigned char *)rfid.CardID, sizeof(rfid.CardID), &rfid.result);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	f103 0208 	add.w	r2, r3, #8
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2104      	movs	r1, #4
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fb31 	bl	8001844 <bin_to_strhex>

	} while(status != MI_OK); // && (!read_rfid_timeout));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e8      	bne.n	80011ba <read_RFID+0x10>

	return status;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <TM_MFRC522_Check>:


TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id, uint8_t* type) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	TM_MFRC522_Status_t status;
	//Find cards, return card type

	// REQuest command, Type A. Invites PICCs in state IDLE to go to READY and prepare for anticollision or selection. 7 bit frame.
	status = TM_MFRC522_Request(PICC_REQIDL, id);
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2026      	movs	r0, #38	; 0x26
 8001202:	f000 f8ef 	bl	80013e4 <TM_MFRC522_Request>
 8001206:	4603      	mov	r3, r0
 8001208:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10a      	bne.n	8001226 <TM_MFRC522_Check+0x32>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f9fe 	bl	8001612 <TM_MFRC522_Anticoll>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
		//select, return sak and crc
		status = TM_MFRC522_SelectTag(id, type);
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fa89 	bl	8001734 <TM_MFRC522_SelectTag>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
	}

	TM_MFRC522_Halt();			//Command card into hibernation
 8001226:	f000 fadf 	bl	80017e8 <TM_MFRC522_Halt>

	return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <handleError>:
		}
	}
	return MI_OK;
}

void handleError() {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	while(1) {
		//BSP_LED_On(LED_RED);
		HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f001 f9d9 	bl	80025f0 <HAL_Delay>
		//BSP_LED_Off(LED_RED);
		HAL_Delay(100);
 800123e:	2064      	movs	r0, #100	; 0x64
 8001240:	f001 f9d6 	bl	80025f0 <HAL_Delay>
		HAL_Delay(100);
 8001244:	e7f8      	b.n	8001238 <handleError+0x4>
	...

08001248 <TM_MFRC522_WriteRegister>:
	}
}

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 8001258:	2000      	movs	r0, #0
 800125a:	f000 fae1 	bl	8001820 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	
	//Send address ## HAL_MAX_DELAY --> infinite poll until process is successful
	addr = (addr << 1) & 0x7E;
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001268:	b2db      	uxtb	r3, r3
 800126a:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 800126c:	1df9      	adds	r1, r7, #7
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	2201      	movs	r2, #1
 8001274:	480f      	ldr	r0, [pc, #60]	; (80012b4 <TM_MFRC522_WriteRegister+0x6c>)
 8001276:	f004 f960 	bl	800553a <HAL_SPI_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <TM_MFRC522_WriteRegister+0x40>
		handleError();
 8001284:	f7ff ffd6 	bl	8001234 <handleError>
	}
	//Send data
	transmitStatus = HAL_SPI_Transmit(&hspi3, &val, 1, HAL_MAX_DELAY);
 8001288:	1db9      	adds	r1, r7, #6
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	2201      	movs	r2, #1
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <TM_MFRC522_WriteRegister+0x6c>)
 8001292:	f004 f952 	bl	800553a <HAL_SPI_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <TM_MFRC522_WriteRegister+0x5c>
		handleError();
 80012a0:	f7ff ffc8 	bl	8001234 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fabb 	bl	8001820 <TM_MFRC522_CS_Write>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200003d8 	.word	0x200003d8

080012b8 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
	//uint8_t retval = 0x00;
	//CS low
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 faaa 	bl	8001820 <TM_MFRC522_CS_Write>

	HAL_StatusTypeDef transmitStatus;
	addr = (addr << 1) | 0x80;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	71fb      	strb	r3, [r7, #7]

	transmitStatus = HAL_SPI_Transmit(&hspi3, &addr, 1, HAL_MAX_DELAY);
 80012dc:	1df9      	adds	r1, r7, #7
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	2201      	movs	r2, #1
 80012e4:	4812      	ldr	r0, [pc, #72]	; (8001330 <TM_MFRC522_ReadRegister+0x78>)
 80012e6:	f004 f928 	bl	800553a <HAL_SPI_Transmit>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <TM_MFRC522_ReadRegister+0x40>
		handleError();
 80012f4:	f7ff ff9e 	bl	8001234 <handleError>
	}

	uint8_t dummy = MFRC522_DUMMY;
 80012f8:	2300      	movs	r3, #0
 80012fa:	737b      	strb	r3, [r7, #13]
	transmitStatus = HAL_SPI_TransmitReceive(&hspi3, &dummy, &val, 1, HAL_MAX_DELAY);
 80012fc:	f107 020e 	add.w	r2, r7, #14
 8001300:	f107 010d 	add.w	r1, r7, #13
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <TM_MFRC522_ReadRegister+0x78>)
 800130e:	f004 fa82 	bl	8005816 <HAL_SPI_TransmitReceive>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <TM_MFRC522_ReadRegister+0x68>
		handleError();
 800131c:	f7ff ff8a 	bl	8001234 <handleError>
	}

	//CS high
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fa7d 	bl	8001820 <TM_MFRC522_CS_Write>

	return val;
 8001326:	7bbb      	ldrb	r3, [r7, #14]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200003d8 	.word	0x200003d8

08001334 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	460a      	mov	r2, r1
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffb6 	bl	80012b8 <TM_MFRC522_ReadRegister>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	4313      	orrs	r3, r2
 8001354:	b2da      	uxtb	r2, r3
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff74 	bl	8001248 <TM_MFRC522_WriteRegister>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff9c 	bl	80012b8 <TM_MFRC522_ReadRegister>
 8001380:	4603      	mov	r3, r0
 8001382:	b25a      	sxtb	r2, r3
 8001384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001388:	43db      	mvns	r3, r3
 800138a:	b25b      	sxtb	r3, r3
 800138c:	4013      	ands	r3, r2
 800138e:	b25b      	sxtb	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff56 	bl	8001248 <TM_MFRC522_WriteRegister>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80013aa:	2014      	movs	r0, #20
 80013ac:	f7ff ff84 	bl	80012b8 <TM_MFRC522_ReadRegister>
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 80013be:	2103      	movs	r1, #3
 80013c0:	2014      	movs	r0, #20
 80013c2:	f7ff ffb7 	bl	8001334 <TM_MFRC522_SetBitMask>
	}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80013d2:	210f      	movs	r1, #15
 80013d4:	2001      	movs	r0, #1
 80013d6:	f7ff ff37 	bl	8001248 <TM_MFRC522_WriteRegister>
	HAL_Delay(50);
 80013da:	2032      	movs	r0, #50	; 0x32
 80013dc:	f001 f908 	bl	80025f0 <HAL_Delay>
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 80013f0:	2107      	movs	r1, #7
 80013f2:	200d      	movs	r0, #13
 80013f4:	f7ff ff28 	bl	8001248 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	79fa      	ldrb	r2, [r7, #7]
 80013fc:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	200c      	movs	r0, #12
 800140c:	f000 f80f 	bl	800142e <TM_MFRC522_ToCard>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK && backBits != 0x10) {
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d104      	bne.n	8001424 <TM_MFRC522_Request+0x40>
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	2b10      	cmp	r3, #16
 800141e:	d001      	beq.n	8001424 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001420:	2302      	movs	r3, #2
 8001422:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <TM_MFRC522_ToCard>:
TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, // the command to execute - one of the PCD_Command enums
										uint8_t* sendData, // pointer to the data to transfer to the FIFO
										uint8_t sendLen, // number of bytes to transfer to the FIFO
										uint8_t* backData, // NULL or pointer to buffer if data should be read back after executing the command
										uint16_t* backLen // in: max number of bytes to write to *backData, out: the number of bytes returned
									) {
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	4613      	mov	r3, r2
 800143e:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001440:	2302      	movs	r3, #2
 8001442:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001448:	2300      	movs	r3, #0
 800144a:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b0c      	cmp	r3, #12
 8001450:	d006      	beq.n	8001460 <TM_MFRC522_ToCard+0x32>
 8001452:	2b0e      	cmp	r3, #14
 8001454:	d109      	bne.n	800146a <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001456:	2312      	movs	r3, #18
 8001458:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10; // bit 4
 800145a:	2310      	movs	r3, #16
 800145c:	757b      	strb	r3, [r7, #21]
			break;
 800145e:	e005      	b.n	800146c <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77; //
 8001460:	2377      	movs	r3, #119	; 0x77
 8001462:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30; // bit 4 IdleIRq, 5 RxIRq
 8001464:	2330      	movs	r3, #48	; 0x30
 8001466:	757b      	strb	r3, [r7, #21]
			break;
 8001468:	e000      	b.n	800146c <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800146a:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4619      	mov	r1, r3
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff fee6 	bl	8001248 <TM_MFRC522_WriteRegister>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 800147c:	2100      	movs	r1, #0
 800147e:	2001      	movs	r0, #1
 8001480:	f7ff fee2 	bl	8001248 <TM_MFRC522_WriteRegister>

	TM_MFRC522_ClearBitMask(MFRC522_REG_COLL, 0x80); // clear collision register
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	200e      	movs	r0, #14
 8001488:	f7ff ff6e 	bl	8001368 <TM_MFRC522_ClearBitMask>

	//TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80); // Clear all seven interrupt request bits
	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IRQ, 0x7F); // Clear all seven interrupt request bits via ComIrqReg[7] - Set1, when 0, clear interrupts
 800148c:	217f      	movs	r1, #127	; 0x7f
 800148e:	2004      	movs	r0, #4
 8001490:	f7ff feda 	bl	8001248 <TM_MFRC522_WriteRegister>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80); // FlushBuffer = 1, FIFO initialization
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	200a      	movs	r0, #10
 8001498:	f7ff ff4c 	bl	8001334 <TM_MFRC522_SetBitMask>
	//TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00); // make sure to clear bit adjustments (should be calculated though, missing some parameters)

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	827b      	strh	r3, [r7, #18]
 80014a0:	e00a      	b.n	80014b8 <TM_MFRC522_ToCard+0x8a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80014a2:	8a7b      	ldrh	r3, [r7, #18]
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	2009      	movs	r0, #9
 80014ae:	f7ff fecb 	bl	8001248 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {
 80014b2:	8a7b      	ldrh	r3, [r7, #18]
 80014b4:	3301      	adds	r3, #1
 80014b6:	827b      	strh	r3, [r7, #18]
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8a7a      	ldrh	r2, [r7, #18]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d3ef      	bcc.n	80014a2 <TM_MFRC522_ToCard+0x74>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4619      	mov	r1, r3
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff febe 	bl	8001248 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d103      	bne.n	80014da <TM_MFRC522_ToCard+0xac>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	200d      	movs	r0, #13
 80014d6:	f7ff ff2d 	bl	8001334 <TM_MFRC522_SetBitMask>
	}

	//Waiting to receive data to complete
	i = 36000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80014da:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80014de:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80014e0:	2004      	movs	r0, #4
 80014e2:	f7ff fee9 	bl	80012b8 <TM_MFRC522_ReadRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	753b      	strb	r3, [r7, #20]
		i--;
 80014ea:	8a7b      	ldrh	r3, [r7, #18]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) // i=0 is timeout
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
			);
 80014f0:	8a7b      	ldrh	r3, [r7, #18]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <TM_MFRC522_ToCard+0xde>
				&& !(n&0x01) // timer interrupt - nothing received in 25ms
 80014f6:	7d3b      	ldrb	r3, [r7, #20]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d105      	bne.n	800150c <TM_MFRC522_ToCard+0xde>
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
 8001500:	7d3a      	ldrb	r2, [r7, #20]
 8001502:	7d7b      	ldrb	r3, [r7, #21]
 8001504:	4013      	ands	r3, r2
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0e9      	beq.n	80014e0 <TM_MFRC522_ToCard+0xb2>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	200d      	movs	r0, #13
 8001510:	f7ff ff2a 	bl	8001368 <TM_MFRC522_ClearBitMask>

	uint8_t errorRegValue = 0x00;
 8001514:	2300      	movs	r3, #0
 8001516:	747b      	strb	r3, [r7, #17]
	errorRegValue = TM_MFRC522_ReadRegister(MFRC522_REG_ERROR);
 8001518:	2006      	movs	r0, #6
 800151a:	f7ff fecd 	bl	80012b8 <TM_MFRC522_ReadRegister>
 800151e:	4603      	mov	r3, r0
 8001520:	747b      	strb	r3, [r7, #17]
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr	
 8001522:	7c7b      	ldrb	r3, [r7, #17]
 8001524:	f003 0313 	and.w	r3, r3, #19
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <TM_MFRC522_ToCard+0x106>
		status = MI_ERR;
 800152c:	2302      	movs	r3, #2
 800152e:	75fb      	strb	r3, [r7, #23]
		return status;
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	e06a      	b.n	800160a <TM_MFRC522_ToCard+0x1dc>
	}

	if (i == 0) {
 8001534:	8a7b      	ldrh	r3, [r7, #18]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <TM_MFRC522_ToCard+0x110>
		return MI_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e065      	b.n	800160a <TM_MFRC522_ToCard+0x1dc>
	}

	if (n & 0x01 && !(n&waitIRq)) {
 800153e:	7d3b      	ldrb	r3, [r7, #20]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <TM_MFRC522_ToCard+0x12a>
 8001548:	7d3a      	ldrb	r2, [r7, #20]
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	4013      	ands	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <TM_MFRC522_ToCard+0x12a>
		return MI_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e058      	b.n	800160a <TM_MFRC522_ToCard+0x1dc>
	}

	if (i != 0)  {
 8001558:	8a7b      	ldrh	r3, [r7, #18]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d04d      	beq.n	80015fa <TM_MFRC522_ToCard+0x1cc>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800155e:	2006      	movs	r0, #6
 8001560:	f7ff feaa 	bl	80012b8 <TM_MFRC522_ReadRegister>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 031b 	and.w	r3, r3, #27
 800156a:	2b00      	cmp	r3, #0
 800156c:	d143      	bne.n	80015f6 <TM_MFRC522_ToCard+0x1c8>


			status = MI_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

			if (command == PCD_TRANSCEIVE) {
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b0c      	cmp	r3, #12
 8001576:	d140      	bne.n	80015fa <TM_MFRC522_ToCard+0x1cc>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001578:	200a      	movs	r0, #10
 800157a:	f7ff fe9d 	bl	80012b8 <TM_MFRC522_ReadRegister>
 800157e:	4603      	mov	r3, r0
 8001580:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001582:	200c      	movs	r0, #12
 8001584:	f7ff fe98 	bl	80012b8 <TM_MFRC522_ReadRegister>
 8001588:	4603      	mov	r3, r0
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	743b      	strb	r3, [r7, #16]

				if (n == 0) {
 8001590:	7d3b      	ldrb	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <TM_MFRC522_ToCard+0x16c>
					n = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	753b      	strb	r3, [r7, #20]
				}

				if (lastBits) {
 800159a:	7c3b      	ldrb	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <TM_MFRC522_ToCard+0x18a>
					*backLen = (n - 1) * 8 + lastBits;
 80015a0:	7d3b      	ldrb	r3, [r7, #20]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	7c3b      	ldrb	r3, [r7, #16]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b4:	801a      	strh	r2, [r3, #0]
 80015b6:	e005      	b.n	80015c4 <TM_MFRC522_ToCard+0x196>
				} else {
					*backLen = n * 8;
 80015b8:	7d3b      	ldrb	r3, [r7, #20]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	b29a      	uxth	r2, r3
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c2:	801a      	strh	r2, [r3, #0]
				}

				if (n > MFRC522_MAX_LEN) {
 80015c4:	7d3b      	ldrb	r3, [r7, #20]
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d901      	bls.n	80015ce <TM_MFRC522_ToCard+0x1a0>
					n = MFRC522_MAX_LEN;
 80015ca:	2310      	movs	r3, #16
 80015cc:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	827b      	strh	r3, [r7, #18]
 80015d2:	e00a      	b.n	80015ea <TM_MFRC522_ToCard+0x1bc>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 80015d4:	8a7b      	ldrh	r3, [r7, #18]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	18d4      	adds	r4, r2, r3
 80015da:	2009      	movs	r0, #9
 80015dc:	f7ff fe6c 	bl	80012b8 <TM_MFRC522_ReadRegister>
 80015e0:	4603      	mov	r3, r0
 80015e2:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80015e4:	8a7b      	ldrh	r3, [r7, #18]
 80015e6:	3301      	adds	r3, #1
 80015e8:	827b      	strh	r3, [r7, #18]
 80015ea:	7d3b      	ldrb	r3, [r7, #20]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	8a7a      	ldrh	r2, [r7, #18]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ef      	bcc.n	80015d4 <TM_MFRC522_ToCard+0x1a6>
 80015f4:	e001      	b.n	80015fa <TM_MFRC522_ToCard+0x1cc>
				}
			}
		} else {
			return MI_ERR;
 80015f6:	2302      	movs	r3, #2
 80015f8:	e007      	b.n	800160a <TM_MFRC522_ToCard+0x1dc>
		}
	} else {

	}

	if (errorRegValue & 0x08) {		// CollErr
 80015fa:	7c7b      	ldrb	r3, [r7, #17]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <TM_MFRC522_ToCard+0x1da>
		return MI_ERR;
 8001604:	2302      	movs	r3, #2
 8001606:	e000      	b.n	800160a <TM_MFRC522_ToCard+0x1dc>
	}

	return status;
 8001608:	7dfb      	ldrb	r3, [r7, #23]
}
 800160a:	4618      	mov	r0, r3
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd90      	pop	{r4, r7, pc}

08001612 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af02      	add	r7, sp, #8
 8001618:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800161e:	2100      	movs	r1, #0
 8001620:	200d      	movs	r0, #13
 8001622:	f7ff fe11 	bl	8001248 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2293      	movs	r2, #147	; 0x93
 800162a:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3301      	adds	r3, #1
 8001630:	2220      	movs	r2, #32
 8001632:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001634:	f107 030a 	add.w	r3, r7, #10
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2202      	movs	r2, #2
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	200c      	movs	r0, #12
 8001642:	f7ff fef4 	bl	800142e <TM_MFRC522_ToCard>
 8001646:	4603      	mov	r3, r0
 8001648:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d118      	bne.n	8001682 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8001650:	2300      	movs	r3, #0
 8001652:	73bb      	strb	r3, [r7, #14]
 8001654:	e009      	b.n	800166a <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	4053      	eors	r3, r2
 8001662:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8001664:	7bbb      	ldrb	r3, [r7, #14]
 8001666:	3301      	adds	r3, #1
 8001668:	73bb      	strb	r3, [r7, #14]
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d9f2      	bls.n	8001656 <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	7b7a      	ldrb	r2, [r7, #13]
 800167a:	429a      	cmp	r2, r3
 800167c:	d001      	beq.n	8001682 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;
 800167e:	2302      	movs	r3, #2
 8001680:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <TM_MFRC522_CalculateCRC>:

TM_MFRC522_Status_t TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	460b      	mov	r3, r1
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800169a:	2104      	movs	r1, #4
 800169c:	2005      	movs	r0, #5
 800169e:	f7ff fe63 	bl	8001368 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	200a      	movs	r0, #10
 80016a6:	f7ff fe45 	bl	8001334 <TM_MFRC522_SetBitMask>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 80016aa:	2100      	movs	r1, #0
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fdcb 	bl	8001248 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
 80016b6:	e00a      	b.n	80016ce <TM_MFRC522_CalculateCRC+0x42>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	2009      	movs	r0, #9
 80016c4:	f7ff fdc0 	bl	8001248 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	3301      	adds	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
 80016ce:	7dfa      	ldrb	r2, [r7, #23]
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3f0      	bcc.n	80016b8 <TM_MFRC522_CalculateCRC+0x2c>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80016d6:	2103      	movs	r1, #3
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fdb5 	bl	8001248 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 80016de:	23ff      	movs	r3, #255	; 0xff
 80016e0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80016e2:	2005      	movs	r0, #5
 80016e4:	f7ff fde8 	bl	80012b8 <TM_MFRC522_ReadRegister>
 80016e8:	4603      	mov	r3, r0
 80016ea:	75bb      	strb	r3, [r7, #22]
		i--;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <TM_MFRC522_CalculateCRC+0x76>
 80016f8:	7dbb      	ldrb	r3, [r7, #22]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ef      	beq.n	80016e2 <TM_MFRC522_CalculateCRC+0x56>

	if (i == 0) {
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <TM_MFRC522_CalculateCRC+0x80>
		return MI_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e00e      	b.n	800172a <TM_MFRC522_CalculateCRC+0x9e>
	}

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800170c:	2022      	movs	r0, #34	; 0x22
 800170e:	f7ff fdd3 	bl	80012b8 <TM_MFRC522_ReadRegister>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	1c5c      	adds	r4, r3, #1
 800171e:	2021      	movs	r0, #33	; 0x21
 8001720:	f7ff fdca 	bl	80012b8 <TM_MFRC522_ReadRegister>
 8001724:	4603      	mov	r3, r0
 8001726:	7023      	strb	r3, [r4, #0]

	return MI_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd90      	pop	{r4, r7, pc}
	...

08001734 <TM_MFRC522_SelectTag>:

TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af02      	add	r7, sp, #8
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	TM_MFRC522_Status_t status;
//	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9];
	uint8_t sak[3] = {0};
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <TM_MFRC522_SelectTag+0xb0>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	81bb      	strh	r3, [r7, #12]
 8001744:	2300      	movs	r3, #0
 8001746:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PICC_SElECTTAG;
 8001748:	2393      	movs	r3, #147	; 0x93
 800174a:	743b      	strb	r3, [r7, #16]
	buffer[1] = 0x70;
 800174c:	2370      	movs	r3, #112	; 0x70
 800174e:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 4; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
 8001754:	e00d      	b.n	8001772 <TM_MFRC522_SelectTag+0x3e>
		buffer[i+2] = *(serNum+i);
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	441a      	add	r2, r3
 800175c:	7ffb      	ldrb	r3, [r7, #31]
 800175e:	3302      	adds	r3, #2
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	f107 0120 	add.w	r1, r7, #32
 8001766:	440b      	add	r3, r1
 8001768:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (i = 0; i < 4; i++) {
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	3301      	adds	r3, #1
 8001770:	77fb      	strb	r3, [r7, #31]
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d9ee      	bls.n	8001756 <TM_MFRC522_SelectTag+0x22>
	}
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 8001778:	7cba      	ldrb	r2, [r7, #18]
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	4053      	eors	r3, r2
 800177e:	b2da      	uxtb	r2, r3
 8001780:	7d3b      	ldrb	r3, [r7, #20]
 8001782:	4053      	eors	r3, r2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	7d7b      	ldrb	r3, [r7, #21]
 8001788:	4053      	eors	r3, r2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	75bb      	strb	r3, [r7, #22]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	1dda      	adds	r2, r3, #7
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	2107      	movs	r1, #7
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff76 	bl	800168c <TM_MFRC522_CalculateCRC>
 80017a0:	4603      	mov	r3, r0
 80017a2:	77bb      	strb	r3, [r7, #30]

	if (status != MI_OK) {
 80017a4:	7fbb      	ldrb	r3, [r7, #30]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <TM_MFRC522_SelectTag+0x7a>
		return status;
 80017aa:	7fbb      	ldrb	r3, [r7, #30]
 80017ac:	e016      	b.n	80017dc <TM_MFRC522_SelectTag+0xa8>
	}

	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, sak, &recvBits);
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	f107 0110 	add.w	r1, r7, #16
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	2209      	movs	r2, #9
 80017c0:	200c      	movs	r0, #12
 80017c2:	f7ff fe34 	bl	800142e <TM_MFRC522_ToCard>
 80017c6:	4603      	mov	r3, r0
 80017c8:	77bb      	strb	r3, [r7, #30]
//		size = buffer[0];
//	} else {
//		size = 0;
//	}

	if (recvBits != 24) { // SAK must be exactly 24 bits (1 byte + CRC_A).
 80017ca:	8bbb      	ldrh	r3, [r7, #28]
 80017cc:	2b18      	cmp	r3, #24
 80017ce:	d001      	beq.n	80017d4 <TM_MFRC522_SelectTag+0xa0>
		return MI_ERR;
 80017d0:	2302      	movs	r3, #2
 80017d2:	e003      	b.n	80017dc <TM_MFRC522_SelectTag+0xa8>
	}

	*type = sak[0];
 80017d4:	7b3a      	ldrb	r2, [r7, #12]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	701a      	strb	r2, [r3, #0]

	return status;
 80017da:	7fbb      	ldrb	r3, [r7, #30]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	0800af10 	.word	0x0800af10

080017e8 <TM_MFRC522_Halt>:

void TM_MFRC522_Halt(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80017ee:	2350      	movs	r3, #80	; 0x50
 80017f0:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 80017f6:	463b      	mov	r3, r7
 80017f8:	1c9a      	adds	r2, r3, #2
 80017fa:	463b      	mov	r3, r7
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff44 	bl	800168c <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001804:	463a      	mov	r2, r7
 8001806:	4639      	mov	r1, r7
 8001808:	1dbb      	adds	r3, r7, #6
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4613      	mov	r3, r2
 800180e:	2204      	movs	r2, #4
 8001810:	200c      	movs	r0, #12
 8001812:	f7ff fe0c 	bl	800142e <TM_MFRC522_ToCard>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <TM_MFRC522_CS_Write>:

void TM_MFRC522_CS_Write(uint8_t val) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPIx_CS_GPIO_PORT, SPIx_CS_PIN, val);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	461a      	mov	r2, r3
 800182e:	2102      	movs	r1, #2
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <TM_MFRC522_CS_Write+0x20>)
 8001832:	f002 fca7 	bl	8004184 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40021400 	.word	0x40021400

08001844 <bin_to_strhex>:

void bin_to_strhex(unsigned char *bin, unsigned int binsz, char **result)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  char          hex_str[]= "0123456789abcdef";
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <bin_to_strhex+0xc4>)
 8001852:	f107 0410 	add.w	r4, r7, #16
 8001856:	461d      	mov	r5, r3
 8001858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	7023      	strb	r3, [r4, #0]
  unsigned int  i;

  *result = (char *)malloc(binsz * 2 + 3);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	3303      	adds	r3, #3
 8001866:	4618      	mov	r0, r3
 8001868:	f006 fefa 	bl	8008660 <malloc>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	601a      	str	r2, [r3, #0]
  (*result)[binsz * 2 + 2] = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]

  if (!binsz)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d039      	beq.n	80018fe <bin_to_strhex+0xba>
    return;

  (*result)[0] = '0';
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2230      	movs	r2, #48	; 0x30
 8001890:	701a      	strb	r2, [r3, #0]
  (*result)[1] = 'x';
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	2278      	movs	r2, #120	; 0x78
 800189a:	701a      	strb	r2, [r3, #0]

  for (i = 0; i < binsz; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e028      	b.n	80018f4 <bin_to_strhex+0xb0>
    {
      (*result)[i * 2 + 2] = hex_str[(bin[i] >> 4) & 0x0F];
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	3301      	adds	r3, #1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	440b      	add	r3, r1
 80018be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018c2:	440a      	add	r2, r1
 80018c4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80018c8:	701a      	strb	r2, [r3, #0]
      (*result)[i * 2 + 3] = hex_str[(bin[i]     ) & 0x0F];
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	f003 020f 	and.w	r2, r3, #15
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	3303      	adds	r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018e6:	440a      	add	r2, r1
 80018e8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80018ec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < binsz; i++)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3301      	adds	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d3d2      	bcc.n	80018a2 <bin_to_strhex+0x5e>
 80018fc:	e000      	b.n	8001900 <bin_to_strhex+0xbc>
    return;
 80018fe:	bf00      	nop
    }  
}
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bdb0      	pop	{r4, r5, r7, pc}
 8001906:	bf00      	nop
 8001908:	0800af14 	.word	0x0800af14

0800190c <MX_SPI3_Init>:
>>>>>>> fsm_rd_rfid

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
<<<<<<< HEAD
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
=======
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
<<<<<<< HEAD
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_SPI3_Init+0x74>)
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <MX_SPI3_Init+0x78>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_SPI3_Init+0x74>)
 8001190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_SPI3_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI3_Init+0x74>)
 800119e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011ba:	2218      	movs	r2, #24
 80011bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_SPI3_Init+0x74>)
 80011e4:	f003 fdcc 	bl	8004d80 <HAL_SPI_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f7ff fe33 	bl	8000e58 <Error_Handler>
=======
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_SPI3_Init+0x74>)
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <MX_SPI3_Init+0x78>)
 8001914:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_SPI3_Init+0x74>)
 8001918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800191c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_SPI3_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_SPI3_Init+0x74>)
 8001926:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800192a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_SPI3_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_SPI3_Init+0x74>)
 8001934:	2200      	movs	r2, #0
 8001936:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_SPI3_Init+0x74>)
 800193a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800193e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_SPI3_Init+0x74>)
 8001942:	2218      	movs	r2, #24
 8001944:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_SPI3_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_SPI3_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_SPI3_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_SPI3_Init+0x74>)
 800195a:	2207      	movs	r2, #7
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_SPI3_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_SPI3_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_SPI3_Init+0x74>)
 800196c:	f003 fd3a 	bl	80053e4 <HAL_SPI_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001976:	f7ff fa5b 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
<<<<<<< HEAD
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000378 	.word	0x20000378
 80011fc:	40003c00 	.word	0x40003c00

08001200 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_SPI_MspInit+0x8c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d130      	bne.n	8001284 <HAL_SPI_MspInit+0x84>
=======
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200003d8 	.word	0x200003d8
 8001984:	40003c00 	.word	0x40003c00

08001988 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <HAL_SPI_MspInit+0x8c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d130      	bne.n	8001a0c <HAL_SPI_MspInit+0x84>
>>>>>>> fsm_rd_rfid
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
<<<<<<< HEAD
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_SPI_MspInit+0x90>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_SPI_MspInit+0x90>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_SPI_MspInit+0x90>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_SPI_MspInit+0x90>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_SPI_MspInit+0x90>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_SPI_MspInit+0x90>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
=======
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_SPI_MspInit+0x90>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 8001252:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001264:	2306      	movs	r3, #6
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_SPI_MspInit+0x94>)
 8001270:	f002 fac4 	bl	80037fc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2033      	movs	r0, #51	; 0x33
 800127a:	f001 fe7e 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800127e:	2033      	movs	r0, #51	; 0x33
 8001280:	f001 fe97 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
 80019da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ec:	2306      	movs	r3, #6
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_SPI_MspInit+0x94>)
 80019f8:	f002 fa18 	bl	8003e2c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	2033      	movs	r0, #51	; 0x33
 8001a02:	f001 fdd2 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a06:	2033      	movs	r0, #51	; 0x33
 8001a08:	f001 fdeb 	bl	80035e2 <HAL_NVIC_EnableIRQ>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40003c00 	.word	0x40003c00
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800

08001298 <HAL_MspInit>:
=======
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40003c00 	.word	0x40003c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020800 	.word	0x40020800

08001a20 <HAL_MspInit>:
>>>>>>> fsm_rd_rfid
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
=======
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_MspInit+0x44>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_MspInit+0x44>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x44>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x44>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x44>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
=======
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_MspInit+0x44>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_MspInit+0x44>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_MspInit+0x44>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_MspInit+0x44>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_MspInit+0x44>)
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_MspInit+0x44>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
>>>>>>> fsm_rd_rfid
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <NMI_Handler>:
=======
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <NMI_Handler>:
>>>>>>> fsm_rd_rfid
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
=======
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:
=======
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
=======
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:
=======
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
=======
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:
=======
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
=======
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:
=======
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
=======
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:
=======
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
=======
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:
=======
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
=======
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:
=======
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
=======
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:
=======
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
=======
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 800132c:	f000 fe3e 	bl	8001fac <HAL_IncTick>
=======
 8001ab4:	f000 fd7c 	bl	80025b0 <HAL_IncTick>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <ADC_IRQHandler>:
=======
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <ADC_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
<<<<<<< HEAD
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <ADC_IRQHandler+0x14>)
 800133a:	f000 ffb1 	bl	80022a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <ADC_IRQHandler+0x18>)
 8001340:	f000 ffae 	bl	80022a0 <HAL_ADC_IRQHandler>
=======
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <ADC_IRQHandler+0x14>)
 8001ac2:	f000 ff13 	bl	80028ec <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ADC_IRQHandler+0x18>)
 8001ac8:	f000 ff10 	bl	80028ec <HAL_ADC_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
<<<<<<< HEAD
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000270 	.word	0x20000270
 800134c:	20000318 	.word	0x20000318

08001350 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <TIM3_IRQHandler+0x10>)
 8001356:	f004 faa7 	bl	80058a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000048c 	.word	0x2000048c

08001364 <TIM4_IRQHandler>:
=======
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002d0 	.word	0x200002d0
 8001ad4:	20000318 	.word	0x20000318

08001ad8 <TIM4_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
=======
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM4_IRQHandler+0x10>)
 800136a:	f004 fa9d 	bl	80058a8 <HAL_TIM_IRQHandler>
=======
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <TIM4_IRQHandler+0x10>)
 8001ade:	f004 fef7 	bl	80068d0 <HAL_TIM_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000440 	.word	0x20000440

08001378 <USART1_IRQHandler>:
=======
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200004a0 	.word	0x200004a0

08001aec <USART1_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
=======
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <USART1_IRQHandler+0x10>)
 800137e:	f005 fadf 	bl	8006940 <HAL_UART_IRQHandler>
=======
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <USART1_IRQHandler+0x10>)
 8001af2:	f005 ff39 	bl	8007968 <HAL_UART_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200006f4 	.word	0x200006f4

0800138c <USART3_IRQHandler>:
=======
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000754 	.word	0x20000754

08001b00 <USART3_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< HEAD
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
=======
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< HEAD
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <USART3_IRQHandler+0x10>)
 8001392:	f005 fad5 	bl	8006940 <HAL_UART_IRQHandler>
=======
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <USART3_IRQHandler+0x10>)
 8001b06:	f005 ff2f 	bl	8007968 <HAL_UART_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< HEAD
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000570 	.word	0x20000570

080013a0 <SPI3_IRQHandler>:
=======
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200005d0 	.word	0x200005d0

08001b14 <SPI3_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
<<<<<<< HEAD
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
=======
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
<<<<<<< HEAD
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <SPI3_IRQHandler+0x10>)
 80013a6:	f003 fd97 	bl	8004ed8 <HAL_SPI_IRQHandler>
=======
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <SPI3_IRQHandler+0x10>)
 8001b1a:	f004 f88f 	bl	8005c3c <HAL_SPI_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
<<<<<<< HEAD
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000378 	.word	0x20000378

080013b4 <TIM6_DAC_IRQHandler>:
=======
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003d8 	.word	0x200003d8

08001b28 <TIM6_DAC_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
=======
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 80013b8:	4802      	ldr	r0, [pc, #8]	; (80013c4 <TIM6_DAC_IRQHandler+0x10>)
 80013ba:	f004 fa75 	bl	80058a8 <HAL_TIM_IRQHandler>
=======
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM6_DAC_IRQHandler+0x10>)
 8001b2e:	f004 fecf 	bl	80068d0 <HAL_TIM_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< HEAD
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200004d8 	.word	0x200004d8

080013c8 <TIM7_IRQHandler>:
=======
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000538 	.word	0x20000538

08001b3c <TIM7_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
=======
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <TIM7_IRQHandler+0x10>)
 80013ce:	f004 fa6b 	bl	80058a8 <HAL_TIM_IRQHandler>
=======
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <TIM7_IRQHandler+0x10>)
 8001b42:	f004 fec5 	bl	80068d0 <HAL_TIM_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< HEAD
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000524 	.word	0x20000524

080013dc <DMA2_Stream1_IRQHandler>:
=======
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000584 	.word	0x20000584

08001b50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA2_Stream0_IRQHandler+0x10>)
 8001b56:	f001 feff 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000360 	.word	0x20000360

08001b64 <DMA2_Stream1_IRQHandler>:
>>>>>>> fsm_rd_rfid

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
<<<<<<< HEAD
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
=======
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
<<<<<<< HEAD
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <DMA2_Stream1_IRQHandler+0x10>)
 80013e2:	f001 ffa1 	bl	8003328 <HAL_DMA_IRQHandler>
=======
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <DMA2_Stream1_IRQHandler+0x10>)
 8001b6a:	f001 fef5 	bl	8003958 <HAL_DMA_IRQHandler>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
<<<<<<< HEAD
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002b8 	.word	0x200002b8

080013f0 <obs_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void obs_detector_init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Start(&OBS_DETECTOR_TIM);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <obs_detector_init+0x14>)
 80013f6:	f003 fee5 	bl	80051c4 <HAL_TIM_Base_Start>
	// start Obstacle detector ADC
	HAL_ADC_Start_IT(&OBS_DETECTOR_ADC);
 80013fa:	4803      	ldr	r0, [pc, #12]	; (8001408 <obs_detector_init+0x18>)
 80013fc:	f000 fe3a 	bl	8002074 <HAL_ADC_Start_IT>
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200004d8 	.word	0x200004d8
 8001408:	20000270 	.word	0x20000270

0800140c <obs_detector_deInit>:

void obs_detector_deInit(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Stop(&OBS_DETECTOR_TIM);
 8001410:	4803      	ldr	r0, [pc, #12]	; (8001420 <obs_detector_deInit+0x14>)
 8001412:	f003 ff47 	bl	80052a4 <HAL_TIM_Base_Stop>
	// start Obstacle detector ADC
	HAL_ADC_Stop_IT(&OBS_DETECTOR_ADC);
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <obs_detector_deInit+0x18>)
 8001418:	f000 ff04 	bl	8002224 <HAL_ADC_Stop_IT>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200004d8 	.word	0x200004d8
 8001424:	20000270 	.word	0x20000270

08001428 <isr_obs_detector>:
- The closer the object is to the sensor, the higher value will be measured
  by the sensor.
- ADC_DISTANCE_LIMIT is the limit that defines that an object has been found.
******************************************************************************/
void isr_obs_detector(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	// Digital value of distance
	static uint32_t distance;
	static uint32_t old_distance = 0;

	// read ADC value
	distance = HAL_ADC_GetValue(&OBS_DETECTOR_ADC);
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <isr_obs_detector+0x40>)
 800142e:	f001 f9cd 	bl	80027cc <HAL_ADC_GetValue>
 8001432:	4603      	mov	r3, r0
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <isr_obs_detector+0x44>)
 8001436:	6013      	str	r3, [r2, #0]

	// Obstacle found flag update
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8001438:	4b0c      	ldr	r3, [pc, #48]	; (800146c <isr_obs_detector+0x44>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f240 4272 	movw	r2, #1138	; 0x472
 8001440:	4293      	cmp	r3, r2
 8001442:	d907      	bls.n	8001454 <isr_obs_detector+0x2c>
						(old_distance >= ADC_DISTANCE_LIMIT));
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <isr_obs_detector+0x48>)
 8001446:	681b      	ldr	r3, [r3, #0]
	obs_found_flag = ((distance >= ADC_DISTANCE_LIMIT) &&
 8001448:	f240 4272 	movw	r2, #1138	; 0x472
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <isr_obs_detector+0x2c>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <isr_obs_detector+0x2e>
 8001454:	2300      	movs	r3, #0
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <isr_obs_detector+0x4c>)
 800145a:	701a      	strb	r2, [r3, #0]
	// update old distance variable
	old_distance = distance;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <isr_obs_detector+0x44>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <isr_obs_detector+0x48>)
 8001462:	6013      	str	r3, [r2, #0]
	char str[32];
	snprintf(str, sizeof(str), "Dist: %d, flag%d\n\r", (int)distance,
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000270 	.word	0x20000270
 800146c:	20000258 	.word	0x20000258
 8001470:	2000025c 	.word	0x2000025c
 8001474:	20000254 	.word	0x20000254

08001478 <cross_detector>:
		i.e, at logical state HIGH (GET_SENS_LOGVAL(SENSOR_x) == 1)
@param	none
@retval	Cross found flag
******************************************************************************/
uint8_t cross_detector(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	// check if both sensors are above the line, at logical state HIGH
	return (cross_found_flag = ((GET_SENS_LOGVAL(SENSOR_R) == 1) &&
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <cross_detector+0x90>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001488:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80014f0 <cross_detector+0x78>
 800148c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001490:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80014f8 <cross_detector+0x80>
 8001494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001498:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001500 <cross_detector+0x88>
 800149c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd16      	ble.n	80014d4 <cross_detector+0x5c>
			(GET_SENS_LOGVAL(SENSOR_L) == 1)));
 80014a6:	4b18      	ldr	r3, [pc, #96]	; (8001508 <cross_detector+0x90>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80014b2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80014f0 <cross_detector+0x78>
 80014b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80014ba:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 80014f8 <cross_detector+0x80>
 80014be:	ee86 7b05 	vdiv.f64	d7, d6, d5
	return (cross_found_flag = ((GET_SENS_LOGVAL(SENSOR_R) == 1) &&
 80014c2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001500 <cross_detector+0x88>
 80014c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	dd01      	ble.n	80014d4 <cross_detector+0x5c>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <cross_detector+0x5e>
 80014d4:	2300      	movs	r3, #0
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <cross_detector+0x94>)
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <cross_detector+0x94>)
 80014de:	781b      	ldrb	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	f3af 8000 	nop.w
 80014f0:	66666666 	.word	0x66666666
 80014f4:	400a6666 	.word	0x400a6666
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40affe00 	.word	0x40affe00
 8001500:	9999999a 	.word	0x9999999a
 8001504:	40039999 	.word	0x40039999
 8001508:	20000360 	.word	0x20000360
 800150c:	20000255 	.word	0x20000255

08001510 <room_detector>:
		with SENSOR_L at logical state LOW.
@param	none
@retval	Room found flag
******************************************************************************/
uint8_t room_detector(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	// check if SENSOR_R is over the line (logical state HIGH) and SENSOR_L isnt.
	return (room_found_flag = ((GET_SENS_LOGVAL(SENSOR_R) == 1) &&
 8001514:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <room_detector+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001520:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8001598 <room_detector+0x88>
 8001524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001528:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80015a0 <room_detector+0x90>
 800152c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001530:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80015a8 <room_detector+0x98>
 8001534:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	dd1e      	ble.n	800157c <room_detector+0x6c>
			(GET_SENS_LOGVAL(SENSOR_L) == 0)));
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <room_detector+0xa0>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800154a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8001598 <room_detector+0x88>
 800154e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001552:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80015a0 <room_detector+0x90>
 8001556:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800155a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80015a8 <room_detector+0x98>
 800155e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	bfcc      	ite	gt
 8001568:	2301      	movgt	r3, #1
 800156a:	2300      	movle	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f083 0301 	eor.w	r3, r3, #1
 8001572:	b2db      	uxtb	r3, r3
	return (room_found_flag = ((GET_SENS_LOGVAL(SENSOR_R) == 1) &&
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <room_detector+0x6c>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <room_detector+0x6e>
 800157c:	2300      	movs	r3, #0
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <room_detector+0xa4>)
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <room_detector+0xa4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	f3af 8000 	nop.w
 8001598:	66666666 	.word	0x66666666
 800159c:	400a6666 	.word	0x400a6666
 80015a0:	00000000 	.word	0x00000000
 80015a4:	40affe00 	.word	0x40affe00
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	40039999 	.word	0x40039999
 80015b0:	20000360 	.word	0x20000360
 80015b4:	20000256 	.word	0x20000256

080015b8 <_getpid>:
=======
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000270 	.word	0x20000270

08001b78 <obs_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void obs_detector_init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Start(&OBS_DETECTOR_TIM);
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <obs_detector_init+0x14>)
 8001b7e:	f004 fb35 	bl	80061ec <HAL_TIM_Base_Start>
	// start Obstacle detector ADC
	HAL_ADC_Start_IT(&OBS_DETECTOR_ADC);
 8001b82:	4803      	ldr	r0, [pc, #12]	; (8001b90 <obs_detector_init+0x18>)
 8001b84:	f000 fd9c 	bl	80026c0 <HAL_ADC_Start_IT>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200004ec 	.word	0x200004ec
 8001b90:	20000318 	.word	0x20000318

08001b94 <obs_detector_deInit>:

void obs_detector_deInit(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Stop(&OBS_DETECTOR_TIM);
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <obs_detector_deInit+0x14>)
 8001b9a:	f004 fb97 	bl	80062cc <HAL_TIM_Base_Stop>
	// start Obstacle detector ADC
	HAL_ADC_Stop_IT(&OBS_DETECTOR_ADC);
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <obs_detector_deInit+0x18>)
 8001ba0:	f000 fe66 	bl	8002870 <HAL_ADC_Stop_IT>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200004ec 	.word	0x200004ec
 8001bac:	20000318 	.word	0x20000318

08001bb0 <_getpid>:
>>>>>>> fsm_rd_rfid
void initialise_monitor_handles()
{
}

int _getpid(void)
{
<<<<<<< HEAD
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
	return 1;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_kill>:

int _kill(int pid, int sig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015d2:	f006 f807 	bl	80075e4 <__errno>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2216      	movs	r2, #22
 80015da:	601a      	str	r2, [r3, #0]
	return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_exit>:

void _exit (int status)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe7 	bl	80015c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015fa:	e7fe      	b.n	80015fa <_exit+0x12>

080015fc <_read>:
=======
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
	return 1;
 8001bb4:	2301      	movs	r3, #1
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_kill>:

int _kill(int pid, int sig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bca:	f006 fd1f 	bl	800860c <__errno>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2216      	movs	r2, #22
 8001bd2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_exit>:

void _exit (int status)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ffe7 	bl	8001bc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bf2:	e7fe      	b.n	8001bf2 <_exit+0x12>

08001bf4 <_read>:
>>>>>>> fsm_rd_rfid
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	4601      	mov	r1, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf0      	blt.n	800160e <_read+0x12>
	}

return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e009      	b.n	800165c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <_write+0x12>
	}
	return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <_fstat>:
=======
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c06:	f3af 8000 	nop.w
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60ba      	str	r2, [r7, #8]
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf0      	blt.n	8001c06 <_read+0x12>
	}

return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e009      	b.n	8001c54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf1      	blt.n	8001c40 <_write+0x12>
	}
	return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:
>>>>>>> fsm_rd_rfid


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	605a      	str	r2, [r3, #4]
	return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_isatty>:

int _isatty(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return 1;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
=======
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
>>>>>>> fsm_rd_rfid
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
=======
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
=======
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
=======
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f005 ff6c 	bl	80075e4 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20080000 	.word	0x20080000
 8001738:	00000400 	.word	0x00000400
 800173c:	20000260 	.word	0x20000260
 8001740:	200007a0 	.word	0x200007a0

08001744 <SystemInit>:
=======
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f006 fc84 	bl	800860c <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20080000 	.word	0x20080000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	20000254 	.word	0x20000254
 8001d38:	20000800 	.word	0x20000800

08001d3c <SystemInit>:
>>>>>>> fsm_rd_rfid
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> fsm_rd_rfid

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <test_stop_sensor>:

/******************************************************************************
Test stop sensors module
******************************************************************************/
void test_stop_sensor(uint8_t val)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	uint8_t err = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]

	while(err != val)
 8001776:	e003      	b.n	8001780 <test_stop_sensor+0x18>
		err = lfollower_control();
 8001778:	f7ff fa80 	bl	8000c7c <lfollower_control>
 800177c:	4603      	mov	r3, r0
 800177e:	73fb      	strb	r3, [r7, #15]
	while(err != val)
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	429a      	cmp	r2, r3
 8001786:	d1f7      	bne.n	8001778 <test_stop_sensor+0x10>

	// stop movement
	lfollower_stop();
 8001788:	f7ff fa00 	bl	8000b8c <lfollower_stop>
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <test_modules>:
=======
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <test_rfid>:

/******************************************************************************
Test RFID module
******************************************************************************/
void test_rfid(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	uint8_t status;

	// follow line
	lfollower_start();
 8001d66:	f7fe ff19 	bl	8000b9c <lfollower_start>
	// detect cross
//	while (!cross_found_flag)
//		;

	// stop following line
	lfollower_stop();
 8001d6a:	f7fe ff2b 	bl	8000bc4 <lfollower_stop>

	// moves forward until read the rfid card
	move_forward(0.7);
 8001d6e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001d9c <test_rfid+0x3c>
 8001d72:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d9c <test_rfid+0x3c>
 8001d76:	f7ff f8df 	bl	8000f38 <move_control>

	while (status != MI_OK)
 8001d7a:	e006      	b.n	8001d8a <test_rfid+0x2a>
	{
		status = read_RFID(rfid_test);
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <test_rfid+0x40>)
 8001d7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d82:	f7ff fa12 	bl	80011aa <read_RFID>
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	while (status != MI_OK)
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f5      	bne.n	8001d7c <test_rfid+0x1c>
	}

	// stop movement
	move_stop();
 8001d90:	f7ff f8be 	bl	8000f10 <move_stop>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	3f333333 	.word	0x3f333333
 8001da0:	20000258 	.word	0x20000258

08001da4 <test_modules>:
>>>>>>> fsm_rd_rfid

/******************************************************************************
Test modules functions
******************************************************************************/
void test_modules(void)
{
<<<<<<< HEAD
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	//test_move(0.7);
	//test_lfollower_rotate(MOVE_RIGHT);
	//test_print_qtr();
	//lfollower_start();

	test_stop_sensor(E_ROOM_FOUND);
 8001798:	2002      	movs	r0, #2
 800179a:	f7ff ffe5 	bl	8001768 <test_stop_sensor>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <MX_TIM3_Init>:
=======
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	//test_lfollower_rotate(MOVE_RIGHT);
	//test_print_qtr();

	//lfollower_start();

	test_rfid();
 8001da8:	f7ff ffda 	bl	8001d60 <test_rfid>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <MX_TIM3_Init>:
>>>>>>> fsm_rd_rfid
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
=======
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	; 0x38
 8001db4:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	619a      	str	r2, [r3, #24]
=======
 8001db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	619a      	str	r2, [r3, #24]
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <MX_TIM3_Init+0xe8>)
 80017d8:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <MX_TIM3_Init+0xec>)
 80017da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_TIM3_Init+0xe8>)
 80017de:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80017e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <MX_TIM3_Init+0xe8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_TIM3_Init+0xe8>)
 80017ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80017f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_TIM3_Init+0xe8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f8:	4b24      	ldr	r3, [pc, #144]	; (800188c <MX_TIM3_Init+0xe8>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017fe:	4823      	ldr	r0, [pc, #140]	; (800188c <MX_TIM3_Init+0xe8>)
 8001800:	f003 fc89 	bl	8005116 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800180a:	f7ff fb25 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001818:	4619      	mov	r1, r3
 800181a:	481c      	ldr	r0, [pc, #112]	; (800188c <MX_TIM3_Init+0xe8>)
 800181c:	f004 faea 	bl	8005df4 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001826:	f7ff fb17 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM3_Init+0xe8>)
 800182c:	f003 fe09 	bl	8005442 <HAL_TIM_OC_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001836:	f7ff fb0f 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <MX_TIM3_Init+0xe8>)
 800184a:	f004 ff7f 	bl	800674c <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001854:	f7ff fb00 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001858:	2330      	movs	r3, #48	; 0x30
 800185a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	220c      	movs	r2, #12
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM3_Init+0xe8>)
 8001870:	f004 f93a 	bl	8005ae8 <HAL_TIM_OC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800187a:	f7ff faed 	bl	8000e58 <Error_Handler>
=======
 8001de2:	4b2d      	ldr	r3, [pc, #180]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001de4:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <MX_TIM3_Init+0xec>)
 8001de6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 864-1;
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001dea:	f240 325f 	movw	r2, #863	; 0x35f
 8001dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500-1;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001df8:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e04:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e06:	2280      	movs	r2, #128	; 0x80
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e0a:	4823      	ldr	r0, [pc, #140]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e0c:	f004 f996 	bl	800613c <HAL_TIM_Base_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001e16:	f7ff f80b 	bl	8000e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e28:	f004 fff8 	bl	8006e1c <HAL_TIM_ConfigClockSource>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001e32:	f7fe fffd 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001e36:	4818      	ldr	r0, [pc, #96]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e38:	f004 fb17 	bl	800646a <HAL_TIM_OC_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001e42:	f7fe fff5 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4810      	ldr	r0, [pc, #64]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e56:	f005 fc8d 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001e60:	f7fe ffe6 	bl	8000e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e64:	2330      	movs	r3, #48	; 0x30
 8001e66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e74:	463b      	mov	r3, r7
 8001e76:	220c      	movs	r2, #12
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4807      	ldr	r0, [pc, #28]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e7c:	f004 fe48 	bl	8006b10 <HAL_TIM_OC_ConfigChannel>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001e86:	f7fe ffd3 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM3_Init+0xe8>)
 8001880:	f000 f960 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000048c 	.word	0x2000048c
 8001890:	40000400 	.word	0x40000400

08001894 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
=======
 8001e8a:	4803      	ldr	r0, [pc, #12]	; (8001e98 <MX_TIM3_Init+0xe8>)
 8001e8c:	f000 f956 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001e90:	bf00      	nop
 8001e92:	3738      	adds	r7, #56	; 0x38
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200004ec 	.word	0x200004ec
 8001e9c:	40000400 	.word	0x40000400

08001ea0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]
=======
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	619a      	str	r2, [r3, #24]
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018ba:	4a27      	ldr	r2, [pc, #156]	; (8001958 <MX_TIM4_Init+0xc4>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 80018be:	4b25      	ldr	r3, [pc, #148]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018c0:	226b      	movs	r2, #107	; 0x6b
 80018c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018cc:	2264      	movs	r2, #100	; 0x64
 80018ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018dc:	481d      	ldr	r0, [pc, #116]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018de:	f003 fe11 	bl	8005504 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80018e8:	f7ff fab6 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <MX_TIM4_Init+0xc0>)
 80018fc:	f004 ff26 	bl	800674c <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001906:	f7ff faa7 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190a:	2360      	movs	r3, #96	; 0x60
 800190c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_TIM4_Init+0xc0>)
 8001922:	f004 f957 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800192c:	f7ff fa94 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	220c      	movs	r2, #12
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_TIM4_Init+0xc0>)
 8001938:	f004 f94c 	bl	8005bd4 <HAL_TIM_PWM_ConfigChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001942:	f7ff fa89 	bl	8000e58 <Error_Handler>
=======
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ec6:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <MX_TIM4_Init+0xc4>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ecc:	226b      	movs	r2, #107	; 0x6b
 8001ece:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ed8:	2264      	movs	r2, #100	; 0x64
 8001eda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ee8:	481d      	ldr	r0, [pc, #116]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001eea:	f004 fb1f 	bl	800652c <HAL_TIM_PWM_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ef4:	f7fe ff9c 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	4816      	ldr	r0, [pc, #88]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001f08:	f005 fc34 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f12:	f7fe ff8d 	bl	8000e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f16:	2360      	movs	r3, #96	; 0x60
 8001f18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f26:	463b      	mov	r3, r7
 8001f28:	2208      	movs	r2, #8
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480c      	ldr	r0, [pc, #48]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001f2e:	f004 fe65 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001f38:	f7fe ff7a 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	220c      	movs	r2, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001f44:	f004 fe5a 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001f4e:	f7fe ff6f 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <MX_TIM4_Init+0xc0>)
 8001948:	f000 f8fc 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000440 	.word	0x20000440
 8001958:	40000800 	.word	0x40000800

0800195c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
=======
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <MX_TIM4_Init+0xc0>)
 8001f54:	f000 f8f2 	bl	800213c <HAL_TIM_MspPostInit>

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200004a0 	.word	0x200004a0
 8001f64:	40000800 	.word	0x40000800

08001f68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
=======
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
<<<<<<< HEAD
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM6_Init+0x68>)
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <MX_TIM6_Init+0x6c>)
 8001970:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 864-1;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_TIM6_Init+0x68>)
 8001974:	f240 325f 	movw	r2, #863	; 0x35f
 8001978:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_TIM6_Init+0x68>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 62500-1;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_TIM6_Init+0x68>)
 8001982:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001986:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_TIM6_Init+0x68>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800198e:	480d      	ldr	r0, [pc, #52]	; (80019c4 <MX_TIM6_Init+0x68>)
 8001990:	f003 fbc1 	bl	8005116 <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800199a:	f7ff fa5d 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800199e:	2320      	movs	r3, #32
 80019a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_TIM6_Init+0x68>)
 80019ac:	f004 fece 	bl	800674c <HAL_TIMEx_MasterConfigSynchronization>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80019b6:	f7ff fa4f 	bl	8000e58 <Error_Handler>
=======
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f7a:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <MX_TIM6_Init+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f80:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001f84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f8e:	2263      	movs	r2, #99	; 0x63
 8001f90:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001f9a:	f004 f8cf 	bl	800613c <HAL_TIM_Base_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001fa4:	f7fe ff44 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_TIM6_Init+0x64>)
 8001fb6:	f005 fbdd 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f7fe ff36 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
<<<<<<< HEAD
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200004d8 	.word	0x200004d8
 80019c8:	40001000 	.word	0x40001000

080019cc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
=======
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000538 	.word	0x20000538
 8001fd0:	40001000 	.word	0x40001000

08001fd4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
=======
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< HEAD
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM7_Init+0x68>)
 80019de:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <MX_TIM7_Init+0x6c>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_TIM7_Init+0x68>)
 80019e4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80019e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_TIM7_Init+0x68>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <MX_TIM7_Init+0x68>)
 80019f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_TIM7_Init+0x68>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_TIM7_Init+0x68>)
 8001a00:	f003 fb89 	bl	8005116 <HAL_TIM_Base_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001a0a:	f7ff fa25 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_TIM7_Init+0x68>)
 8001a1c:	f004 fe96 	bl	800674c <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001a26:	f7ff fa17 	bl	8000e58 <Error_Handler>
=======
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_TIM7_Init+0x68>)
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <MX_TIM7_Init+0x6c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_TIM7_Init+0x68>)
 8001fec:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001ff0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_TIM7_Init+0x68>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_TIM7_Init+0x68>)
 8001ffa:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ffe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_TIM7_Init+0x68>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <MX_TIM7_Init+0x68>)
 8002008:	f004 f898 	bl	800613c <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002012:	f7fe ff0d 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002016:	2320      	movs	r3, #32
 8002018:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	4619      	mov	r1, r3
 8002022:	4806      	ldr	r0, [pc, #24]	; (800203c <MX_TIM7_Init+0x68>)
 8002024:	f005 fba6 	bl	8007774 <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800202e:	f7fe feff 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< HEAD
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000524 	.word	0x20000524
 8001a38:	40001400 	.word	0x40001400

08001a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_TIM_Base_MspInit+0xac>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d114      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x3c>
=======
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000584 	.word	0x20000584
 8002040:	40001400 	.word	0x40001400

08002044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_TIM_Base_MspInit+0x9c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10c      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x2c>
>>>>>>> fsm_rd_rfid
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	201d      	movs	r0, #29
 8001a6c:	f001 fa85 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a70:	201d      	movs	r0, #29
 8001a72:	f001 fa9e 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697b      	ldr	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001a76:	e032      	b.n	8001ade <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_TIM_Base_MspInit+0xb4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d114      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a88:	f043 0310 	orr.w	r3, r3, #16
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f001 fa6b 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa4:	2036      	movs	r0, #54	; 0x36
 8001aa6:	f001 fa84 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8001aaa:	e018      	b.n	8001ade <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <HAL_TIM_Base_MspInit+0xb8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d113      	bne.n	8001ade <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_TIM_Base_MspInit+0xb0>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2037      	movs	r0, #55	; 0x37
 8001ad4:	f001 fa51 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ad8:	2037      	movs	r0, #55	; 0x37
 8001ada:	f001 fa6a 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40001000 	.word	0x40001000
 8001af4:	40001400 	.word	0x40001400

08001af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_TIM_PWM_MspInit+0x44>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d113      	bne.n	8001b32 <HAL_TIM_PWM_MspInit+0x3a>
=======
 800206e:	e032      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_TIM_Base_MspInit+0xa4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d114      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	2036      	movs	r0, #54	; 0x36
 8002098:	f001 fa87 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800209c:	2036      	movs	r0, #54	; 0x36
 800209e:	f001 faa0 	bl	80035e2 <HAL_NVIC_EnableIRQ>
}
 80020a2:	e018      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_TIM_Base_MspInit+0xa8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 80020b4:	f043 0320 	orr.w	r3, r3, #32
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_TIM_Base_MspInit+0xa0>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2037      	movs	r0, #55	; 0x37
 80020cc:	f001 fa6d 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80020d0:	2037      	movs	r0, #55	; 0x37
 80020d2:	f001 fa86 	bl	80035e2 <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40001000 	.word	0x40001000
 80020ec:	40001400 	.word	0x40001400

080020f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_TIM_PWM_MspInit+0x44>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d113      	bne.n	800212a <HAL_TIM_PWM_MspInit+0x3a>
>>>>>>> fsm_rd_rfid
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
<<<<<<< HEAD
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_TIM_PWM_MspInit+0x48>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	201e      	movs	r0, #30
 8001b28:	f001 fa27 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b2c:	201e      	movs	r0, #30
 8001b2e:	f001 fa40 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_PWM_MspInit+0x48>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_TIM_PWM_MspInit+0x48>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6413      	str	r3, [r2, #64]	; 0x40
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_PWM_MspInit+0x48>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	201e      	movs	r0, #30
 8002120:	f001 fa43 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002124:	201e      	movs	r0, #30
 8002126:	f001 fa5c 	bl	80035e2 <HAL_NVIC_EnableIRQ>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40000800 	.word	0x40000800
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a31      	ldr	r2, [pc, #196]	; (8001c28 <HAL_TIM_MspPostInit+0xe4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d11c      	bne.n	8001ba0 <HAL_TIM_MspPostInit+0x5c>
=======
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40000800 	.word	0x40000800
 8002138:	40023800 	.word	0x40023800

0800213c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_TIM_MspPostInit+0xe4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d11c      	bne.n	8002198 <HAL_TIM_MspPostInit+0x5c>
>>>>>>> fsm_rd_rfid
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a30      	ldr	r2, [pc, #192]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]
=======
 800215e:	4b31      	ldr	r3, [pc, #196]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
<<<<<<< HEAD
 8001b7e:	2302      	movs	r3, #2
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4825      	ldr	r0, [pc, #148]	; (8001c30 <HAL_TIM_MspPostInit+0xec>)
 8001b9a:	f001 fe2f 	bl	80037fc <HAL_GPIO_Init>
=======
 8002176:	2302      	movs	r3, #2
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002186:	2302      	movs	r3, #2
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4825      	ldr	r0, [pc, #148]	; (8002228 <HAL_TIM_MspPostInit+0xec>)
 8002192:	f001 fe4b 	bl	8003e2c <HAL_GPIO_Init>
>>>>>>> fsm_rd_rfid
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8001b9e:	e03e      	b.n	8001c1e <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM4)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a23      	ldr	r2, [pc, #140]	; (8001c34 <HAL_TIM_MspPostInit+0xf0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d139      	bne.n	8001c1e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_TIM_MspPostInit+0xe8>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bec:	2302      	movs	r3, #2
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4810      	ldr	r0, [pc, #64]	; (8001c38 <HAL_TIM_MspPostInit+0xf4>)
 8001bf8:	f001 fe00 	bl	80037fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_TIM_MspPostInit+0xec>)
 8001c1a:	f001 fdef 	bl	80037fc <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <set_pwm>:
=======
 8002196:	e03e      	b.n	8002216 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM4)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a23      	ldr	r2, [pc, #140]	; (800222c <HAL_TIM_MspPostInit+0xf0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d139      	bne.n	8002216 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021a8:	f043 0308 	orr.w	r3, r3, #8
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_TIM_MspPostInit+0xe8>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 80021d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021e4:	2302      	movs	r3, #2
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4810      	ldr	r0, [pc, #64]	; (8002230 <HAL_TIM_MspPostInit+0xf4>)
 80021f0:	f001 fe1c 	bl	8003e2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 80021f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002206:	2302      	movs	r3, #2
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <HAL_TIM_MspPostInit+0xec>)
 8002212:	f001 fe0b 	bl	8003e2c <HAL_GPIO_Init>
}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40000400 	.word	0x40000400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40000800 	.word	0x40000800
 8002230:	40020c00 	.word	0x40020c00

08002234 <set_pwm>:
>>>>>>> fsm_rd_rfid
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
<<<<<<< HEAD
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d104      	bne.n	8001c5c <set_pwm+0x20>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	883a      	ldrh	r2, [r7, #0]
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c5a:	e023      	b.n	8001ca4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d104      	bne.n	8001c6c <set_pwm+0x30>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	883b      	ldrh	r3, [r7, #0]
 8001c68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c6a:	e01b      	b.n	8001ca4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d104      	bne.n	8001c7c <set_pwm+0x40>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	883b      	ldrh	r3, [r7, #0]
 8001c78:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c7a:	e013      	b.n	8001ca4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d104      	bne.n	8001c8c <set_pwm+0x50>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	883b      	ldrh	r3, [r7, #0]
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c8a:	e00b      	b.n	8001ca4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d104      	bne.n	8001c9c <set_pwm+0x60>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	883b      	ldrh	r3, [r7, #0]
 8001c98:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001c9a:	e003      	b.n	8001ca4 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	883b      	ldrh	r3, [r7, #0]
 8001ca2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
=======
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <set_pwm+0x20>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	883a      	ldrh	r2, [r7, #0]
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002252:	e023      	b.n	800229c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002254:	887b      	ldrh	r3, [r7, #2]
 8002256:	2b04      	cmp	r3, #4
 8002258:	d104      	bne.n	8002264 <set_pwm+0x30>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	883b      	ldrh	r3, [r7, #0]
 8002260:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002262:	e01b      	b.n	800229c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	2b08      	cmp	r3, #8
 8002268:	d104      	bne.n	8002274 <set_pwm+0x40>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	883b      	ldrh	r3, [r7, #0]
 8002270:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002272:	e013      	b.n	800229c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d104      	bne.n	8002284 <set_pwm+0x50>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	883b      	ldrh	r3, [r7, #0]
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002282:	e00b      	b.n	800229c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d104      	bne.n	8002294 <set_pwm+0x60>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	883b      	ldrh	r3, [r7, #0]
 8002290:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002292:	e003      	b.n	800229c <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	883b      	ldrh	r3, [r7, #0]
 800229a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> fsm_rd_rfid
	// stop Rotate_Timeout
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
<<<<<<< HEAD
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d102      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
=======
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d102      	bne.n	80022be <HAL_TIM_PeriodElapsedCallback+0x16>
>>>>>>> fsm_rd_rfid
	{// enters every 10ms

		// line follower PID
		lfollower_pid();
<<<<<<< HEAD
 8001cc0:	f7fe ff7a 	bl	8000bb8 <lfollower_pid>
=======
 80022b8:	f7fe fc9a 	bl	8000bf0 <lfollower_pid>
>>>>>>> fsm_rd_rfid
		// count 2sec cycle
		num_timeout_2sec++;
		// toggle LED GREEN
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	}
}
<<<<<<< HEAD
 8001cc4:	e009      	b.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == &TIM_TIMEOUTS)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d105      	bne.n	8001cda <HAL_TIM_PeriodElapsedCallback+0x2a>
		num_timeout_2sec++;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cd8:	701a      	strb	r2, [r3, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000048c 	.word	0x2000048c
 8001ce8:	20000524 	.word	0x20000524
 8001cec:	20000264 	.word	0x20000264

08001cf0 <MX_USART1_UART_Init>:
=======
 80022bc:	e00d      	b.n	80022da <HAL_TIM_PeriodElapsedCallback+0x32>
	else if(htim == &TIM_TIMEOUTS)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d109      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x32>
		num_timeout_2sec++;
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80022d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80022d2:	2101      	movs	r1, #1
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80022d6:	f001 ff6e 	bl	80041b6 <HAL_GPIO_TogglePin>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000538 	.word	0x20000538
 80022e8:	20000584 	.word	0x20000584
 80022ec:	20000264 	.word	0x20000264
 80022f0:	40020400 	.word	0x40020400

080022f4 <MX_USART1_UART_Init>:
>>>>>>> fsm_rd_rfid
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
=======
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_USART1_UART_Init+0x5c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001cfc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART1_UART_Init+0x58>)
 8001d34:	f004 fdb6 	bl	80068a4 <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f7ff f88b 	bl	8000e58 <Error_Handler>
=======
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_USART1_UART_Init+0x58>)
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <MX_USART1_UART_Init+0x5c>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002300:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_USART1_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART1_UART_Init+0x58>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART1_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002338:	f005 fac8 	bl	80078cc <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002342:	f7fe fd75 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200006f4 	.word	0x200006f4
 8001d4c:	40011000 	.word	0x40011000

08001d50 <MX_USART3_UART_Init>:
=======
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000754 	.word	0x20000754
 8002350:	40011000 	.word	0x40011000

08002354 <MX_USART3_UART_Init>:
>>>>>>> fsm_rd_rfid
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
=======
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <MX_USART3_UART_Init+0x5c>)
 8001d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART3_UART_Init+0x58>)
 8001d94:	f004 fd86 	bl	80068a4 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d9e:	f7ff f85b 	bl	8000e58 <Error_Handler>
=======
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <MX_USART3_UART_Init+0x5c>)
 800235c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002398:	f005 fa98 	bl	80078cc <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023a2:	f7fe fd45 	bl	8000e30 <Error_Handler>
>>>>>>> fsm_rd_rfid
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000570 	.word	0x20000570
 8001dac:	40004800 	.word	0x40004800

08001db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a3f      	ldr	r2, [pc, #252]	; (8001ecc <HAL_UART_MspInit+0x11c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d141      	bne.n	8001e56 <HAL_UART_MspInit+0xa6>
=======
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200005d0 	.word	0x200005d0
 80023b0:	40004800 	.word	0x40004800

080023b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <HAL_UART_MspInit+0x11c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d141      	bne.n	800245a <HAL_UART_MspInit+0xa6>
>>>>>>> fsm_rd_rfid
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8001dd2:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001dd8:	f043 0310 	orr.w	r3, r3, #16
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a38      	ldr	r2, [pc, #224]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
=======
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023dc:	f043 0310 	orr.w	r3, r3, #16
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b36      	ldr	r3, [pc, #216]	; (80024d4 <HAL_UART_MspInit+0x120>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697b      	ldr	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
<<<<<<< HEAD
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001e14:	2304      	movs	r3, #4
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482d      	ldr	r0, [pc, #180]	; (8001ed4 <HAL_UART_MspInit+0x124>)
 8001e20:	f001 fcec 	bl	80037fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001e24:	2340      	movs	r3, #64	; 0x40
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e34:	2307      	movs	r3, #7
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4825      	ldr	r0, [pc, #148]	; (8001ed4 <HAL_UART_MspInit+0x124>)
 8001e40:	f001 fcdc 	bl	80037fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	2025      	movs	r0, #37	; 0x25
 8001e4a:	f001 f896 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e4e:	2025      	movs	r0, #37	; 0x25
 8001e50:	f001 f8af 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
=======
 8002406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002418:	2304      	movs	r3, #4
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	482d      	ldr	r0, [pc, #180]	; (80024d8 <HAL_UART_MspInit+0x124>)
 8002424:	f001 fd02 	bl	8003e2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8002428:	2340      	movs	r3, #64	; 0x40
 800242a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002438:	2307      	movs	r3, #7
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4825      	ldr	r0, [pc, #148]	; (80024d8 <HAL_UART_MspInit+0x124>)
 8002444:	f001 fcf2 	bl	8003e2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2025      	movs	r0, #37	; 0x25
 800244e:	f001 f8ac 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002452:	2025      	movs	r0, #37	; 0x25
 8002454:	f001 f8c5 	bl	80035e2 <HAL_NVIC_EnableIRQ>
>>>>>>> fsm_rd_rfid
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001e54:	e035      	b.n	8001ec2 <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_UART_MspInit+0x128>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e60:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e7e:	f043 0308 	orr.w	r3, r3, #8
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_UART_MspInit+0x120>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <HAL_UART_MspInit+0x12c>)
 8001eae:	f001 fca5 	bl	80037fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2027      	movs	r0, #39	; 0x27
 8001eb8:	f001 f85f 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ebc:	2027      	movs	r0, #39	; 0x27
 8001ebe:	f001 f878 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	40020c00 	.word	0x40020c00

08001ee0 <Reset_Handler>:
=======
 8002458:	e035      	b.n	80024c6 <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_UART_MspInit+0x128>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d130      	bne.n	80024c6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_UART_MspInit+0x120>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_UART_MspInit+0x120>)
 800246a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246e:	6413      	str	r3, [r2, #64]	; 0x40
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_UART_MspInit+0x120>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_UART_MspInit+0x120>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <HAL_UART_MspInit+0x120>)
 8002482:	f043 0308 	orr.w	r3, r3, #8
 8002486:	6313      	str	r3, [r2, #48]	; 0x30
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_UART_MspInit+0x120>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024a6:	2307      	movs	r3, #7
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	4619      	mov	r1, r3
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <HAL_UART_MspInit+0x12c>)
 80024b2:	f001 fcbb 	bl	8003e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2027      	movs	r0, #39	; 0x27
 80024bc:	f001 f875 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024c0:	2027      	movs	r0, #39	; 0x27
 80024c2:	f001 f88e 	bl	80035e2 <HAL_NVIC_EnableIRQ>
}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40004800 	.word	0x40004800
 80024e0:	40020c00 	.word	0x40020c00

080024e4 <Reset_Handler>:
>>>>>>> fsm_rd_rfid

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001efc:	4c0b      	ldr	r4, [pc, #44]	; (8001f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0a:	f7ff fc1b 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f005 fb6f 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7fe fee3 	bl	8000cdc <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001f24:	0800a304 	.word	0x0800a304
  ldr r2, =_sbss
 8001f28:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001f2c:	200007a0 	.word	0x200007a0

08001f30 <CAN1_RX0_IRQHandler>:
=======
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ea:	490e      	ldr	r1, [pc, #56]	; (8002524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002500:	4c0b      	ldr	r4, [pc, #44]	; (8002530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250e:	f7ff fc15 	bl	8001d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002512:	f006 f881 	bl	8008618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7fe fbcd 	bl	8000cb4 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800251c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002528:	0800b344 	.word	0x0800b344
  ldr r2, =_sbss
 800252c:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002530:	20000800 	.word	0x20000800

08002534 <CAN1_RX0_IRQHandler>:
>>>>>>> fsm_rd_rfid
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001f30:	e7fe      	b.n	8001f30 <CAN1_RX0_IRQHandler>

08001f32 <HAL_Init>:
=======
 8002534:	e7fe      	b.n	8002534 <CAN1_RX0_IRQHandler>

08002536 <HAL_Init>:
>>>>>>> fsm_rd_rfid
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
=======
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
>>>>>>> fsm_rd_rfid
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001f36:	2003      	movs	r0, #3
 8001f38:	f001 f814 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f805 	bl	8001f4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff f9a9 	bl	8001298 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_InitTick>:
=======
 800253a:	2003      	movs	r0, #3
 800253c:	f001 f82a 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002540:	2000      	movs	r0, #0
 8002542:	f000 f805 	bl	8002550 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002546:	f7ff fa6b 	bl	8001a20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_InitTick>:
>>>>>>> fsm_rd_rfid
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f82f 	bl	8002fce <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
=======
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_InitTick+0x54>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_InitTick+0x58>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f001 f845 	bl	80035fe <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x4c>
>>>>>>> fsm_rd_rfid
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 fff7 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
=======
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f001 f80d 	bl	80035aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_InitTick+0x5c>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
>>>>>>> fsm_rd_rfid
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000058 	.word	0x20000058
 8001fa4:	20000060 	.word	0x20000060
 8001fa8:	2000005c 	.word	0x2000005c

08001fac <HAL_IncTick>:
=======
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000058 	.word	0x20000058
 80025a8:	20000060 	.word	0x20000060
 80025ac:	2000005c 	.word	0x2000005c

080025b0 <HAL_IncTick>:
>>>>>>> fsm_rd_rfid
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000060 	.word	0x20000060
 8001fd0:	2000078c 	.word	0x2000078c

08001fd4 <HAL_GetTick>:
=======
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000060 	.word	0x20000060
 80025d4:	200007ec 	.word	0x200007ec

080025d8 <HAL_GetTick>:
>>>>>>> fsm_rd_rfid
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000078c 	.word	0x2000078c

08001fec <HAL_ADC_Init>:
=======
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200007ec 	.word	0x200007ec

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d005      	beq.n	8002616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_Delay+0x44>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002616:	bf00      	nop
 8002618:	f7ff ffde 	bl	80025d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8f7      	bhi.n	8002618 <HAL_Delay+0x28>
  {
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000060 	.word	0x20000060

08002638 <HAL_ADC_Init>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e031      	b.n	8002066 <HAL_ADC_Init+0x7a>
=======
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e031      	b.n	80026b2 <HAL_ADC_Init+0x7a>
>>>>>>> fsm_rd_rfid
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_ADC_Init+0x32>
=======
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_ADC_Init+0x32>
>>>>>>> fsm_rd_rfid

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fbd6 	bl	80007bc <HAL_ADC_MspInit>
=======
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe f8a2 	bl	80007a0 <HAL_ADC_MspInit>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> fsm_rd_rfid
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_ADC_Init+0x84>)
 8002030:	4013      	ands	r3, r2
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_ADC_Init+0x84>)
 800267c:	4013      	ands	r3, r2
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fd3c 	bl	8002ab8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
 8002056:	e001      	b.n	800205c <HAL_ADC_Init+0x70>
=======
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fd2e 	bl	80030e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_Init+0x70>
>>>>>>> fsm_rd_rfid
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
=======
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
>>>>>>> fsm_rd_rfid
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	ffffeefd 	.word	0xffffeefd

08002074 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_Start_IT+0x1a>
 800208a:	2302      	movs	r3, #2
 800208c:	e0b5      	b.n	80021fa <HAL_ADC_Start_IT+0x186>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d018      	beq.n	80020d6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020b4:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_ADC_Start_IT+0x194>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a54      	ldr	r2, [pc, #336]	; (800220c <HAL_ADC_Start_IT+0x198>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0c9a      	lsrs	r2, r3, #18
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f9      	bne.n	80020ca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d17d      	bne.n	80021e0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <HAL_ADC_Start_IT+0x19c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800210a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800211a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211e:	d106      	bne.n	800212e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f023 0206 	bic.w	r2, r3, #6
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
 800212c:	e002      	b.n	8002134 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002144:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_ADC_Start_IT+0x1a0>)
 8002152:	430b      	orrs	r3, r1
 8002154:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_ADC_Start_IT+0x1a4>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d143      	bne.n	80021f8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e03a      	b.n	80021f8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <HAL_ADC_Start_IT+0x1a8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10e      	bne.n	80021aa <HAL_ADC_Start_IT+0x136>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_ADC_Start_IT+0x1a4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d120      	bne.n	80021f8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_ADC_Start_IT+0x1ac>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d11b      	bne.n	80021f8 <HAL_ADC_Start_IT+0x184>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d114      	bne.n	80021f8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	e00b      	b.n	80021f8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000058 	.word	0x20000058
 800220c:	431bde83 	.word	0x431bde83
 8002210:	fffff8fe 	.word	0xfffff8fe
 8002214:	04000020 	.word	0x04000020
 8002218:	40012300 	.word	0x40012300
 800221c:	40012000 	.word	0x40012000
 8002220:	40012200 	.word	0x40012200

08002224 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_ADC_Stop_IT+0x16>
 8002236:	2302      	movs	r3, #2
 8002238:	e027      	b.n	800228a <HAL_ADC_Stop_IT+0x66>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10f      	bne.n	8002280 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_ADC_Stop_IT+0x74>)
 800226c:	400b      	ands	r3, r1
 800226e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <HAL_ADC_Stop_IT+0x78>)
 8002276:	4013      	ands	r3, r2
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	fbffffdf 	.word	0xfbffffdf
 800229c:	ffffeefe 	.word	0xffffeefe

080022a0 <HAL_ADC_IRQHandler>:
=======
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	ffffeefd 	.word	0xffffeefd

080026c0 <HAL_ADC_Start_IT>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
=======
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
<<<<<<< HEAD
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	bf0c      	ite	eq
 80022be:	2301      	moveq	r3, #1
 80022c0:	2300      	movne	r3, #0
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d049      	beq.n	8002376 <HAL_ADC_IRQHandler+0xd6>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d046      	beq.n	8002376 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d12b      	bne.n	8002366 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d127      	bne.n	8002366 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d006      	beq.n	8002332 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800232e:	2b00      	cmp	r3, #0
 8002330:	d119      	bne.n	8002366 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0220 	bic.w	r2, r2, #32
 8002340:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fb0e 	bl	8000988 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0212 	mvn.w	r2, #18
 8002374:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b04      	cmp	r3, #4
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b80      	cmp	r3, #128	; 0x80
 8002398:	bf0c      	ite	eq
 800239a:	2301      	moveq	r3, #1
 800239c:	2300      	movne	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d057      	beq.n	8002458 <HAL_ADC_IRQHandler+0x1b8>
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d054      	beq.n	8002458 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d105      	bne.n	80023c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
=======
  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADC_Start_IT+0x1a>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0b5      	b.n	8002846 <HAL_ADC_Start_IT+0x186>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d018      	beq.n	8002722 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002700:	4b54      	ldr	r3, [pc, #336]	; (8002854 <HAL_ADC_Start_IT+0x194>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a54      	ldr	r2, [pc, #336]	; (8002858 <HAL_ADC_Start_IT+0x198>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9a      	lsrs	r2, r3, #18
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002714:	e002      	b.n	800271c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3b01      	subs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f9      	bne.n	8002716 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d17d      	bne.n	800282c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <HAL_ADC_Start_IT+0x19c>)
 8002736:	4013      	ands	r3, r2
 8002738:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002756:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276a:	d106      	bne.n	800277a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002770:	f023 0206 	bic.w	r2, r3, #6
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	645a      	str	r2, [r3, #68]	; 0x44
 8002778:	e002      	b.n	8002780 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002790:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_ADC_Start_IT+0x1a0>)
 800279e:	430b      	orrs	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027a2:	4b30      	ldr	r3, [pc, #192]	; (8002864 <HAL_ADC_Start_IT+0x1a4>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d143      	bne.n	8002844 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	e03a      	b.n	8002844 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_ADC_Start_IT+0x1a8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d10e      	bne.n	80027f6 <HAL_ADC_Start_IT+0x136>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_ADC_Start_IT+0x1a4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d120      	bne.n	8002844 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_ADC_Start_IT+0x1ac>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d11b      	bne.n	8002844 <HAL_ADC_Start_IT+0x184>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00b      	b.n	8002844 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000058 	.word	0x20000058
 8002858:	431bde83 	.word	0x431bde83
 800285c:	fffff8fe 	.word	0xfffff8fe
 8002860:	04000020 	.word	0x04000020
 8002864:	40012300 	.word	0x40012300
 8002868:	40012000 	.word	0x40012000
 800286c:	40012200 	.word	0x40012200

08002870 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Stop_IT+0x16>
 8002882:	2302      	movs	r3, #2
 8002884:	e027      	b.n	80028d6 <HAL_ADC_Stop_IT+0x66>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10f      	bne.n	80028cc <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_ADC_Stop_IT+0x74>)
 80028b8:	400b      	ands	r3, r1
 80028ba:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_ADC_Stop_IT+0x78>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f043 0201 	orr.w	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	fbffffdf 	.word	0xfbffffdf
 80028e8:	ffffeefe 	.word	0xffffeefe

080028ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b20      	cmp	r3, #32
 800291e:	bf0c      	ite	eq
 8002920:	2301      	moveq	r3, #1
 8002922:	2300      	movne	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d049      	beq.n	80029c2 <HAL_ADC_IRQHandler+0xd6>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d046      	beq.n	80029c2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12b      	bne.n	80029b2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800295e:	2b00      	cmp	r3, #0
 8002960:	d127      	bne.n	80029b2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0220 	bic.w	r2, r2, #32
 800298c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d105      	bne.n	80029b2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe f80e 	bl	80009d4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0212 	mvn.w	r2, #18
 80029c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e2:	2b80      	cmp	r3, #128	; 0x80
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d057      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x1b8>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d054      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
<<<<<<< HEAD
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d139      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d12b      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d124      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	d11d      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d119      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002422:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0201 	orr.w	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d139      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d12b      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d124      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 fcb1 	bl	8002db0 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fca3 	bl	80033e0 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
<<<<<<< HEAD
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f06f 020c 	mvn.w	r2, #12
 8002456:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d017      	beq.n	80024ba <HAL_ADC_IRQHandler+0x21a>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d014      	beq.n	80024ba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 020c 	mvn.w	r2, #12
 8002aa2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x21a>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10d      	bne.n	8002b06 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f9a5 	bl	80027fa <HAL_ADC_LevelOutOfWindowCallback>
=======
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f998 	bl	8002e2c <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
<<<<<<< HEAD
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0201 	mvn.w	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
=======
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0201 	mvn.w	r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_ADC_IRQHandler+0x27a>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_ADC_IRQHandler+0x27a>
=======
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_ADC_IRQHandler+0x27a>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <HAL_ADC_IRQHandler+0x27a>
>>>>>>> fsm_rd_rfid
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
<<<<<<< HEAD
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f8:	f043 0202 	orr.w	r2, r3, #2
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0220 	mvn.w	r2, #32
 8002508:	601a      	str	r2, [r3, #0]
=======
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	f043 0202 	orr.w	r2, r3, #2
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0220 	mvn.w	r2, #32
 8002b54:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f97f 	bl	800280e <HAL_ADC_ErrorCallback>
=======
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f972 	bl	8002e40 <HAL_ADC_ErrorCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0220 	mvn.w	r2, #32
 8002518:	601a      	str	r2, [r3, #0]
  }
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_ADC_Start_DMA>:
=======
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0220 	mvn.w	r2, #32
 8002b64:	601a      	str	r2, [r3, #0]
  }
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_ADC_Start_DMA>:
>>>>>>> fsm_rd_rfid
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
<<<<<<< HEAD
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
=======
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Start_DMA+0x1e>
 800253e:	2302      	movs	r3, #2
 8002540:	e0d4      	b.n	80026ec <HAL_ADC_Start_DMA+0x1c8>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_Start_DMA+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0d4      	b.n	8002d38 <HAL_ADC_Start_DMA+0x1c8>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> fsm_rd_rfid
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d018      	beq.n	800258a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	609a      	str	r2, [r3, #8]
=======
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d018      	beq.n	8002bd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< HEAD
 8002568:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_ADC_Start_DMA+0x1d0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a62      	ldr	r2, [pc, #392]	; (80026f8 <HAL_ADC_Start_DMA+0x1d4>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0c9a      	lsrs	r2, r3, #18
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800257c:	e002      	b.n	8002584 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3b01      	subs	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_Start_DMA+0x5a>
=======
 8002bb4:	4b62      	ldr	r3, [pc, #392]	; (8002d40 <HAL_ADC_Start_DMA+0x1d0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a62      	ldr	r2, [pc, #392]	; (8002d44 <HAL_ADC_Start_DMA+0x1d4>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0c9a      	lsrs	r2, r3, #18
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002bc8:	e002      	b.n	8002bd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f9      	bne.n	8002bca <HAL_ADC_Start_DMA+0x5a>
>>>>>>> fsm_rd_rfid
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b01      	cmp	r3, #1
 8002596:	f040 809c 	bne.w	80026d2 <HAL_ADC_Start_DMA+0x1ae>
=======
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 809c 	bne.w	8002d1e <HAL_ADC_Start_DMA+0x1ae>
>>>>>>> fsm_rd_rfid
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259e:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_ADC_Start_DMA+0x1d8>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	4b57      	ldr	r3, [pc, #348]	; (8002d48 <HAL_ADC_Start_DMA+0x1d8>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d4:	d106      	bne.n	80025e4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f023 0206 	bic.w	r2, r3, #6
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
 80025e2:	e002      	b.n	80025ea <HAL_ADC_Start_DMA+0xc6>
=======
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d106      	bne.n	8002c30 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f023 0206 	bic.w	r2, r3, #6
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2e:	e002      	b.n	8002c36 <HAL_ADC_Start_DMA+0xc6>
>>>>>>> fsm_rd_rfid
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> fsm_rd_rfid
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
<<<<<<< HEAD
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_ADC_Start_DMA+0x1dc>)
 80025f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4a41      	ldr	r2, [pc, #260]	; (8002704 <HAL_ADC_Start_DMA+0x1e0>)
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4a40      	ldr	r2, [pc, #256]	; (8002708 <HAL_ADC_Start_DMA+0x1e4>)
 8002608:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4a42      	ldr	r2, [pc, #264]	; (8002d4c <HAL_ADC_Start_DMA+0x1dc>)
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <HAL_ADC_Start_DMA+0x1e0>)
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4a40      	ldr	r2, [pc, #256]	; (8002d54 <HAL_ADC_Start_DMA+0x1e4>)
 8002c54:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> fsm_rd_rfid
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002612:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002622:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002632:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	334c      	adds	r3, #76	; 0x4c
 800263e:	4619      	mov	r1, r3
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f000 fd7e 	bl	8003144 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002648:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_ADC_Start_DMA+0x1e8>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10f      	bne.n	8002674 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d143      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	e03a      	b.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
=======
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	334c      	adds	r3, #76	; 0x4c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f000 fd70 	bl	8003774 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_ADC_Start_DMA+0x1e8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d143      	bne.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e03a      	b.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_ADC_Start_DMA+0x1ec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10e      	bne.n	800269c <HAL_ADC_Start_DMA+0x178>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800269a:	609a      	str	r2, [r3, #8]
=======
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a25      	ldr	r2, [pc, #148]	; (8002d5c <HAL_ADC_Start_DMA+0x1ec>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_ADC_Start_DMA+0x178>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d107      	bne.n	8002ce8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce6:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
<<<<<<< HEAD
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_ADC_Start_DMA+0x1e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d120      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_ADC_Start_DMA+0x1f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11b      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d114      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e00b      	b.n	80026ea <HAL_ADC_Start_DMA+0x1c6>
=======
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_ADC_Start_DMA+0x1e8>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d120      	bne.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a19      	ldr	r2, [pc, #100]	; (8002d60 <HAL_ADC_Start_DMA+0x1f0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d11b      	bne.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d114      	bne.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e00b      	b.n	8002d36 <HAL_ADC_Start_DMA+0x1c6>
>>>>>>> fsm_rd_rfid
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> fsm_rd_rfid
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000058 	.word	0x20000058
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	fffff8fe 	.word	0xfffff8fe
 8002700:	08002cad 	.word	0x08002cad
 8002704:	08002d67 	.word	0x08002d67
 8002708:	08002d83 	.word	0x08002d83
 800270c:	40012300 	.word	0x40012300
 8002710:	40012000 	.word	0x40012000
 8002714:	40012200 	.word	0x40012200

08002718 <HAL_ADC_Stop_DMA>:
=======
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000058 	.word	0x20000058
 8002d44:	431bde83 	.word	0x431bde83
 8002d48:	fffff8fe 	.word	0xfffff8fe
 8002d4c:	080032dd 	.word	0x080032dd
 8002d50:	08003397 	.word	0x08003397
 8002d54:	080033b3 	.word	0x080033b3
 8002d58:	40012300 	.word	0x40012300
 8002d5c:	40012000 	.word	0x40012000
 8002d60:	40012200 	.word	0x40012200

08002d64 <HAL_ADC_Stop_DMA>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
=======
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
>>>>>>> fsm_rd_rfid
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Stop_DMA+0x1a>
 800272e:	2302      	movs	r3, #2
 8002730:	e046      	b.n	80027c0 <HAL_ADC_Stop_DMA+0xa8>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Stop_DMA+0x1a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e046      	b.n	8002e0c <HAL_ADC_Stop_DMA+0xa8>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> fsm_rd_rfid
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
<<<<<<< HEAD
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d12e      	bne.n	80027b6 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002766:	609a      	str	r2, [r3, #8]
=======
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d12e      	bne.n	8002e02 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db2:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
<<<<<<< HEAD
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d10f      	bne.n	8002796 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fd42 	bl	8003204 <HAL_DMA_Abort>
 8002780:	4603      	mov	r3, r0
 8002782:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d10f      	bne.n	8002de2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fd34 	bl	8003834 <HAL_DMA_Abort>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
<<<<<<< HEAD
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80027a4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_ADC_Stop_DMA+0xb0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002df0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002df6:	4b07      	ldr	r3, [pc, #28]	; (8002e14 <HAL_ADC_Stop_DMA+0xb0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	f043 0201 	orr.w	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	ffffeefe 	.word	0xffffeefe

080027cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_ADC_ConvHalfCpltCallback>:
=======
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffffeefe 	.word	0xffffeefe

08002e18 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
=======
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_ADC_LevelOutOfWindowCallback>:
=======
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
=======
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_ADC_ErrorCallback>:
=======
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_ErrorCallback>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
=======
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_ADC_ConfigChannel>:
=======
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_ADC_ConfigChannel>:
>>>>>>> fsm_rd_rfid
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
=======
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e12a      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x272>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b09      	cmp	r3, #9
 800284e:	d93a      	bls.n	80028c6 <HAL_ADC_ConfigChannel+0xa2>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002858:	d035      	beq.n	80028c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	3b1e      	subs	r3, #30
 8002870:	2207      	movs	r2, #7
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	400a      	ands	r2, r1
 800287e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <HAL_ADC_ConfigChannel+0x280>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68d9      	ldr	r1, [r3, #12]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	061a      	lsls	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800289e:	e035      	b.n	800290c <HAL_ADC_ConfigChannel+0xe8>
=======
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1c>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e12a      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x272>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d93a      	bls.n	8002ef6 <HAL_ADC_ConfigChannel+0xa2>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e88:	d035      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b1e      	subs	r3, #30
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	400a      	ands	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a87      	ldr	r2, [pc, #540]	; (80030d4 <HAL_ADC_ConfigChannel+0x280>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	061a      	lsls	r2, r3, #24
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ece:	e035      	b.n	8002f3c <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> fsm_rd_rfid
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
<<<<<<< HEAD
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68d9      	ldr	r1, [r3, #12]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4618      	mov	r0, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4403      	add	r3, r0
 80028b8:	3b1e      	subs	r3, #30
 80028ba:	409a      	lsls	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c4:	e022      	b.n	800290c <HAL_ADC_ConfigChannel+0xe8>
=======
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4403      	add	r3, r0
 8002ee8:	3b1e      	subs	r3, #30
 8002eea:	409a      	lsls	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef4:	e022      	b.n	8002f3c <HAL_ADC_ConfigChannel+0xe8>
>>>>>>> fsm_rd_rfid
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6919      	ldr	r1, [r3, #16]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	461a      	mov	r2, r3
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	2207      	movs	r2, #7
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43da      	mvns	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	400a      	ands	r2, r1
 80028e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6919      	ldr	r1, [r3, #16]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	4603      	mov	r3, r0
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4403      	add	r3, r0
 8002902:	409a      	lsls	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	611a      	str	r2, [r3, #16]
=======
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6919      	ldr	r1, [r3, #16]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	461a      	mov	r2, r3
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43da      	mvns	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	400a      	ands	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6919      	ldr	r1, [r3, #16]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4403      	add	r3, r0
 8002f32:	409a      	lsls	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
<<<<<<< HEAD
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d824      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	3b05      	subs	r3, #5
 8002926:	221f      	movs	r2, #31
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43da      	mvns	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	400a      	ands	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	3b05      	subs	r3, #5
 8002950:	fa00 f203 	lsl.w	r2, r0, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	635a      	str	r2, [r3, #52]	; 0x34
 800295c:	e04c      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d824      	bhi.n	80029b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	3b23      	subs	r3, #35	; 0x23
 8002978:	221f      	movs	r2, #31
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	400a      	ands	r2, r1
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	4618      	mov	r0, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	3b23      	subs	r3, #35	; 0x23
 80029a2:	fa00 f203 	lsl.w	r2, r0, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
 80029ae:	e023      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x1d4>
=======
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d824      	bhi.n	8002f8e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b05      	subs	r3, #5
 8002f56:	221f      	movs	r2, #31
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	4618      	mov	r0, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3b05      	subs	r3, #5
 8002f80:	fa00 f203 	lsl.w	r2, r0, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8c:	e04c      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d824      	bhi.n	8002fe0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b23      	subs	r3, #35	; 0x23
 8002fa8:	221f      	movs	r2, #31
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b23      	subs	r3, #35	; 0x23
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fde:	e023      	b.n	8003028 <HAL_ADC_ConfigChannel+0x1d4>
>>>>>>> fsm_rd_rfid
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b41      	subs	r3, #65	; 0x41
 80029c2:	221f      	movs	r2, #31
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43da      	mvns	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	400a      	ands	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b41      	subs	r3, #65	; 0x41
 80029ec:	fa00 f203 	lsl.w	r2, r0, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b41      	subs	r3, #65	; 0x41
 8002ff2:	221f      	movs	r2, #31
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	400a      	ands	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	4618      	mov	r0, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	3b41      	subs	r3, #65	; 0x41
 800301c:	fa00 f203 	lsl.w	r2, r0, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> fsm_rd_rfid
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
<<<<<<< HEAD
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_ADC_ConfigChannel+0x284>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1f4>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a0a:	d105      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a26      	ldr	r2, [pc, #152]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a16:	6053      	str	r3, [r2, #4]
=======
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_ADC_ConfigChannel+0x284>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10a      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1f4>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800303a:	d105      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800303c:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a26      	ldr	r2, [pc, #152]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 8003042:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003046:	6053      	str	r3, [r2, #4]
>>>>>>> fsm_rd_rfid
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
<<<<<<< HEAD
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <HAL_ADC_ConfigChannel+0x284>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d109      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x212>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a34:	6053      	str	r3, [r2, #4]
=======
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a22      	ldr	r2, [pc, #136]	; (80030d8 <HAL_ADC_ConfigChannel+0x284>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d109      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x212>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b12      	cmp	r3, #18
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 8003060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003064:	6053      	str	r3, [r2, #4]
>>>>>>> fsm_rd_rfid
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_ADC_ConfigChannel+0x284>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d125      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x268>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_ADC_ConfigChannel+0x280>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d003      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x22e>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d11c      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_ADC_ConfigChannel+0x288>)
 8002a58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a5c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_ADC_ConfigChannel+0x280>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d111      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x268>
=======
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_ADC_ConfigChannel+0x284>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d125      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x268>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_ADC_ConfigChannel+0x280>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x22e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b11      	cmp	r3, #17
 8003080:	d11c      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_ADC_ConfigChannel+0x288>)
 8003088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800308c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a10      	ldr	r2, [pc, #64]	; (80030d4 <HAL_ADC_ConfigChannel+0x280>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x268>
>>>>>>> fsm_rd_rfid
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
<<<<<<< HEAD
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_ADC_ConfigChannel+0x28c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_ADC_ConfigChannel+0x290>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9a      	lsrs	r2, r3, #18
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a7e:	e002      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f9      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x25c>
=======
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_ADC_ConfigChannel+0x28c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_ADC_ConfigChannel+0x290>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9a      	lsrs	r2, r3, #18
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x25c>
>>>>>>> fsm_rd_rfid
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	10000012 	.word	0x10000012
 8002aa8:	40012000 	.word	0x40012000
 8002aac:	40012300 	.word	0x40012300
 8002ab0:	20000058 	.word	0x20000058
 8002ab4:	431bde83 	.word	0x431bde83

08002ab8 <ADC_Init>:
=======
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	10000012 	.word	0x10000012
 80030d8:	40012000 	.word	0x40012000
 80030dc:	40012300 	.word	0x40012300
 80030e0:	20000058 	.word	0x20000058
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <ADC_Init>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac0:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <ADC_Init+0x1ec>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a77      	ldr	r2, [pc, #476]	; (8002ca4 <ADC_Init+0x1ec>)
 8002ac6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002aca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002acc:	4b75      	ldr	r3, [pc, #468]	; (8002ca4 <ADC_Init+0x1ec>)
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4973      	ldr	r1, [pc, #460]	; (8002ca4 <ADC_Init+0x1ec>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	021a      	lsls	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
=======
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030f0:	4b78      	ldr	r3, [pc, #480]	; (80032d4 <ADC_Init+0x1ec>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a77      	ldr	r2, [pc, #476]	; (80032d4 <ADC_Init+0x1ec>)
 80030f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80030fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80030fc:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <ADC_Init+0x1ec>)
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4973      	ldr	r1, [pc, #460]	; (80032d4 <ADC_Init+0x1ec>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800313c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800315e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <ADC_Init+0x1f0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d022      	beq.n	8002b92 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6899      	ldr	r1, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	e00f      	b.n	8002bb2 <ADC_Init+0xfa>
=======
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	4a58      	ldr	r2, [pc, #352]	; (80032d8 <ADC_Init+0x1f0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d022      	beq.n	80031c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6899      	ldr	r1, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	e00f      	b.n	80031e2 <ADC_Init+0xfa>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb0:	609a      	str	r2, [r3, #8]
=======
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e0:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	005a      	lsls	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01b      	beq.n	8002c18 <ADC_Init+0x160>
=======
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0202 	bic.w	r2, r2, #2
 80031f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <ADC_Init+0x160>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6859      	ldr	r1, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	035a      	lsls	r2, r3, #13
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e007      	b.n	8002c28 <ADC_Init+0x170>
=======
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800322e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	3b01      	subs	r3, #1
 800323c:	035a      	lsls	r2, r3, #13
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	e007      	b.n	8003258 <ADC_Init+0x170>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c26:	605a      	str	r2, [r3, #4]
=======
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003256:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	051a      	lsls	r2, r3, #20
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c6a:	025a      	lsls	r2, r3, #9
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	029a      	lsls	r2, r3, #10
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012300 	.word	0x40012300
 8002ca8:	0f000001 	.word	0x0f000001

08002cac <ADC_DMAConvCplt>:
=======
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	3b01      	subs	r3, #1
 8003274:	051a      	lsls	r2, r3, #20
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800328c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800329a:	025a      	lsls	r2, r3, #9
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6899      	ldr	r1, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	029a      	lsls	r2, r3, #10
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40012300 	.word	0x40012300
 80032d8:	0f000001 	.word	0x0f000001

080032dc <ADC_DMAConvCplt>:
>>>>>>> fsm_rd_rfid
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d13c      	bne.n	8002d40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d13c      	bne.n	8003370 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d12b      	bne.n	8002d38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d127      	bne.n	8002d38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d119      	bne.n	8002d38 <ADC_DMAConvCplt+0x8c>
=======
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d12b      	bne.n	8003368 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d127      	bne.n	8003368 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003330:	2b00      	cmp	r3, #0
 8003332:	d119      	bne.n	8003368 <ADC_DMAConvCplt+0x8c>
>>>>>>> fsm_rd_rfid
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0220 	bic.w	r2, r2, #32
 8002d12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0220 	bic.w	r2, r2, #32
 8003342:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d105      	bne.n	8003368 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> fsm_rd_rfid
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7fd fe25 	bl	8000988 <HAL_ADC_ConvCpltCallback>
=======
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7fd fb33 	bl	80009d4 <HAL_ADC_ConvCpltCallback>
>>>>>>> fsm_rd_rfid
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8002d3e:	e00e      	b.n	8002d5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fd5e 	bl	800280e <HAL_ADC_ErrorCallback>
}
 8002d52:	e004      	b.n	8002d5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAHalfConvCplt>:
=======
 800336e:	e00e      	b.n	800338e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fd5f 	bl	8002e40 <HAL_ADC_ErrorCallback>
}
 8003382:	e004      	b.n	800338e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <ADC_DMAHalfConvCplt>:
>>>>>>> fsm_rd_rfid
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	60fb      	str	r3, [r7, #12]
=======
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fd36 	bl	80027e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <ADC_DMAError>:
=======
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fd37 	bl	8002e18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <ADC_DMAError>:
>>>>>>> fsm_rd_rfid
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f043 0204 	orr.w	r2, r3, #4
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> fsm_rd_rfid
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff fd33 	bl	800280e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff fd34 	bl	8002e40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> fsm_rd_rfid
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
=======
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <__NVIC_SetPriorityGrouping>:
=======
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <__NVIC_SetPriorityGrouping>:
>>>>>>> fsm_rd_rfid
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00
 8002e08:	05fa0000 	.word	0x05fa0000

08002e0c <__NVIC_GetPriorityGrouping>:
=======
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 800341e:	4313      	orrs	r3, r2
 8003420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003422:	4a04      	ldr	r2, [pc, #16]	; (8003434 <__NVIC_SetPriorityGrouping+0x40>)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	60d3      	str	r3, [r2, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	05fa0000 	.word	0x05fa0000

0800343c <__NVIC_GetPriorityGrouping>:
>>>>>>> fsm_rd_rfid
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
=======
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
>>>>>>> fsm_rd_rfid
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
=======
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
>>>>>>> fsm_rd_rfid
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> fsm_rd_rfid
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
=======
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
>>>>>>> fsm_rd_rfid
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
=======
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
>>>>>>> fsm_rd_rfid
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <SysTick_Config>:
=======
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
>>>>>>> fsm_rd_rfid
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f7ff ff8e 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
=======
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> fsm_rd_rfid
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
=======
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff29 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
=======
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
>>>>>>> fsm_rd_rfid
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
=======
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002f8c:	f7ff ff3e 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff8e 	bl	8002eb8 <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5d 	bl	8002e64 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
=======
 80035bc:	f7ff ff3e 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff ff8e 	bl	80034e8 <NVIC_EncodePriority>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff ff5d 	bl	8003494 <__NVIC_SetPriority>
}
 80035da:	bf00      	nop
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_EnableIRQ>:
>>>>>>> fsm_rd_rfid
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
=======
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b082      	sub	sp, #8
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	71fb      	strb	r3, [r7, #7]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff31 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
=======
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff31 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_SYSTICK_Config>:
>>>>>>> fsm_rd_rfid
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_DMA_Init>:
=======
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff ffa2 	bl	8003550 <SysTick_Config>
 800360c:	4603      	mov	r3, r0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_DMA_Init>:
>>>>>>> fsm_rd_rfid
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ff4:	f7fe ffee 	bl	8001fd4 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]
=======
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003624:	f7fe ffd8 	bl	80025d8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]
>>>>>>> fsm_rd_rfid
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e099      	b.n	8003138 <HAL_DMA_Init+0x150>
=======
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e099      	b.n	8003768 <HAL_DMA_Init+0x150>
>>>>>>> fsm_rd_rfid
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003024:	e00f      	b.n	8003046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003026:	f7fe ffd5 	bl	8001fd4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b05      	cmp	r3, #5
 8003032:	d908      	bls.n	8003046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2203      	movs	r2, #3
 800303e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e078      	b.n	8003138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e8      	bne.n	8003026 <HAL_DMA_Init+0x3e>
=======
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0201 	bic.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003654:	e00f      	b.n	8003676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003656:	f7fe ffbf 	bl	80025d8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b05      	cmp	r3, #5
 8003662:	d908      	bls.n	8003676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e078      	b.n	8003768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e8      	bne.n	8003656 <HAL_DMA_Init+0x3e>
>>>>>>> fsm_rd_rfid
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4b38      	ldr	r3, [pc, #224]	; (8003140 <HAL_DMA_Init+0x158>)
 8003060:	4013      	ands	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
=======
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_DMA_Init+0x158>)
 8003690:	4013      	ands	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800308a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	2b04      	cmp	r3, #4
 800309e:	d107      	bne.n	80030b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	4313      	orrs	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
=======
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4313      	orrs	r3, r2
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f023 0307 	bic.w	r3, r3, #7
 80030c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d117      	bne.n	800310a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
=======
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	2b04      	cmp	r3, #4
 8003708:	d117      	bne.n	800373a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb09 	bl	8003704 <DMA_CheckFifoParam>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003106:	2301      	movs	r3, #1
 8003108:	e016      	b.n	8003138 <HAL_DMA_Init+0x150>
=======
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fb09 	bl	8003d34 <DMA_CheckFifoParam>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003736:	2301      	movs	r3, #1
 8003738:	e016      	b.n	8003768 <HAL_DMA_Init+0x150>
>>>>>>> fsm_rd_rfid
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	615a      	str	r2, [r3, #20]
=======
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	615a      	str	r2, [r3, #20]
>>>>>>> fsm_rd_rfid

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fac0 	bl	8003698 <DMA_CalcBaseAndBitshift>
 8003118:	4603      	mov	r3, r0
 800311a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003120:	223f      	movs	r2, #63	; 0x3f
 8003122:	409a      	lsls	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	e010803f 	.word	0xe010803f

08003144 <HAL_DMA_Start_IT>:
=======
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fac0 	bl	8003cc8 <DMA_CalcBaseAndBitshift>
 8003748:	4603      	mov	r3, r0
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	223f      	movs	r2, #63	; 0x3f
 8003752:	409a      	lsls	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	e010803f 	.word	0xe010803f

08003774 <HAL_DMA_Start_IT>:
>>>>>>> fsm_rd_rfid
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	613b      	str	r3, [r7, #16]
=======
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	613b      	str	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_DMA_Start_IT+0x26>
 8003166:	2302      	movs	r3, #2
 8003168:	e048      	b.n	80031fc <HAL_DMA_Start_IT+0xb8>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d137      	bne.n	80031ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fa52 	bl	800363c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	223f      	movs	r2, #63	; 0x3f
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0216 	orr.w	r2, r2, #22
 80031b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0208 	orr.w	r2, r2, #8
 80031da:	601a      	str	r2, [r3, #0]
=======
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_DMA_Start_IT+0x26>
 8003796:	2302      	movs	r3, #2
 8003798:	e048      	b.n	800382c <HAL_DMA_Start_IT+0xb8>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d137      	bne.n	800381e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa52 	bl	8003c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	409a      	lsls	r2, r3
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0216 	orr.w	r2, r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0208 	orr.w	r2, r2, #8
 800380a:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e005      	b.n	80031fa <HAL_DMA_Start_IT+0xb6>
=======
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e005      	b.n	800382a <HAL_DMA_Start_IT+0xb6>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_DMA_Abort>:
=======
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800382a:	7dfb      	ldrb	r3, [r7, #23]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_DMA_Abort>:
>>>>>>> fsm_rd_rfid
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003212:	f7fe fedf 	bl	8001fd4 <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d008      	beq.n	8003236 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e052      	b.n	80032dc <HAL_DMA_Abort+0xd8>
=======
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003842:	f7fe fec9 	bl	80025d8 <HAL_GetTick>
 8003846:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e052      	b.n	800390c <HAL_DMA_Abort+0xd8>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0216 	bic.w	r2, r2, #22
 8003244:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_DMA_Abort+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
=======
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0216 	bic.w	r2, r2, #22
 8003874:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003884:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_DMA_Abort+0x62>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0208 	bic.w	r2, r2, #8
 80038a4:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003286:	e013      	b.n	80032b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003288:	f7fe fea4 	bl	8001fd4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b05      	cmp	r3, #5
 8003294:	d90c      	bls.n	80032b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e015      	b.n	80032dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1e4      	bne.n	8003288 <HAL_DMA_Abort+0x84>
=======
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b6:	e013      	b.n	80038e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038b8:	f7fe fe8e 	bl	80025d8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d90c      	bls.n	80038e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e015      	b.n	800390c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e4      	bne.n	80038b8 <HAL_DMA_Abort+0x84>
>>>>>>> fsm_rd_rfid
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_Abort_IT>:
=======
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort_IT>:
>>>>>>> fsm_rd_rfid
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d004      	beq.n	8003302 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00c      	b.n	800331c <HAL_DMA_Abort_IT+0x38>
=======
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00c      	b.n	800394c <HAL_DMA_Abort_IT+0x38>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2205      	movs	r2, #5
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_DMA_IRQHandler>:
=======
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_IRQHandler>:
>>>>>>> fsm_rd_rfid
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003334:	4b92      	ldr	r3, [pc, #584]	; (8003580 <HAL_DMA_IRQHandler+0x258>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a92      	ldr	r2, [pc, #584]	; (8003584 <HAL_DMA_IRQHandler+0x25c>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2208      	movs	r2, #8
 8003354:	409a      	lsls	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d01a      	beq.n	8003394 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0204 	bic.w	r2, r2, #4
 800337a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	2208      	movs	r2, #8
 8003382:	409a      	lsls	r2, r3
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	f043 0201 	orr.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_DMA_IRQHandler+0x258>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a92      	ldr	r2, [pc, #584]	; (8003bb4 <HAL_DMA_IRQHandler+0x25c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2208      	movs	r2, #8
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> fsm_rd_rfid
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d012      	beq.n	80033ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2201      	movs	r2, #1
 80033b8:	409a      	lsls	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f043 0202 	orr.w	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> fsm_rd_rfid
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	2204      	movs	r2, #4
 80033d0:	409a      	lsls	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d012      	beq.n	8003400 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> fsm_rd_rfid
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	2210      	movs	r2, #16
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d043      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03c      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	2210      	movs	r2, #16
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d018      	beq.n	800346a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d024      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	4798      	blx	r3
 8003456:	e01f      	b.n	8003498 <HAL_DMA_IRQHandler+0x170>
=======
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2210      	movs	r2, #16
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d043      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2210      	movs	r2, #16
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e01f      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> fsm_rd_rfid
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
 8003468:	e016      	b.n	8003498 <HAL_DMA_IRQHandler+0x170>
=======
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> fsm_rd_rfid
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0208 	bic.w	r2, r2, #8
 8003486:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
=======
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
>>>>>>> fsm_rd_rfid
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2220      	movs	r2, #32
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 808e 	beq.w	80035c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8086 	beq.w	80035c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2220      	movs	r2, #32
 80034c0:	409a      	lsls	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d136      	bne.n	8003540 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_IRQHandler+0x1da>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
=======
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2220      	movs	r2, #32
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 808e 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	2220      	movs	r2, #32
 8003af0:	409a      	lsls	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d136      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0216 	bic.w	r2, r2, #22
 8003b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x1da>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0208 	bic.w	r2, r2, #8
 8003b40:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	223f      	movs	r2, #63	; 0x3f
 8003518:	409a      	lsls	r2, r3
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d07d      	beq.n	8003632 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
        }
        return;
 800353e:	e078      	b.n	8003632 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d01c      	beq.n	8003588 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d108      	bne.n	800356e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	2b00      	cmp	r3, #0
 8003562:	d030      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e02b      	b.n	80035c6 <HAL_DMA_IRQHandler+0x29e>
=======
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	223f      	movs	r2, #63	; 0x3f
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
        }
        return;
 8003b6e:	e078      	b.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e02b      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> fsm_rd_rfid
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d027      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e022      	b.n	80035c6 <HAL_DMA_IRQHandler+0x29e>
 8003580:	20000058 	.word	0x20000058
 8003584:	1b4e81b5 	.word	0x1b4e81b5
=======
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e022      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
 8003bb0:	20000058 	.word	0x20000058
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> fsm_rd_rfid
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0210 	bic.w	r2, r2, #16
 80035a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
=======
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
>>>>>>> fsm_rd_rfid
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d032      	beq.n	8003634 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d022      	beq.n	8003620 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2205      	movs	r2, #5
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
=======
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d032      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d307      	bcc.n	800360e <HAL_DMA_IRQHandler+0x2e6>
=======
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d307      	bcc.n	8003c3e <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> fsm_rd_rfid
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f2      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x2ca>
 800360c:	e000      	b.n	8003610 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800360e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
 8003630:	e000      	b.n	8003634 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003632:	bf00      	nop
    }
  }
}
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop

0800363c <DMA_SetConfig>:
=======
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f2      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x2ca>
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c62:	bf00      	nop
    }
  }
}
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <DMA_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003658:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d108      	bne.n	800367c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	60da      	str	r2, [r3, #12]
=======
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d108      	bne.n	8003cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
>>>>>>> fsm_rd_rfid
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 800367a:	e007      	b.n	800368c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <DMA_CalcBaseAndBitshift>:
=======
 8003caa:	e007      	b.n	8003cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_CalcBaseAndBitshift>:
>>>>>>> fsm_rd_rfid
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3b10      	subs	r3, #16
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <DMA_CalcBaseAndBitshift+0x60>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	60fb      	str	r3, [r7, #12]
=======
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	3b10      	subs	r3, #16
 8003cd8:	4a13      	ldr	r2, [pc, #76]	; (8003d28 <DMA_CalcBaseAndBitshift+0x60>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 80036b2:	4a12      	ldr	r2, [pc, #72]	; (80036fc <DMA_CalcBaseAndBitshift+0x64>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d908      	bls.n	80036d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <DMA_CalcBaseAndBitshift+0x68>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	659a      	str	r2, [r3, #88]	; 0x58
 80036d6:	e006      	b.n	80036e6 <DMA_CalcBaseAndBitshift+0x4e>
=======
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <DMA_CalcBaseAndBitshift+0x64>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d908      	bls.n	8003d08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	; 0x58
 8003d06:	e006      	b.n	8003d16 <DMA_CalcBaseAndBitshift+0x4e>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <DMA_CalcBaseAndBitshift+0x68>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	aaaaaaab 	.word	0xaaaaaaab
 80036fc:	08009f08 	.word	0x08009f08
 8003700:	fffffc00 	.word	0xfffffc00

08003704 <DMA_CheckFifoParam>:
=======
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <DMA_CalcBaseAndBitshift+0x68>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	aaaaaaab 	.word	0xaaaaaaab
 8003d2c:	0800af48 	.word	0x0800af48
 8003d30:	fffffc00 	.word	0xfffffc00

08003d34 <DMA_CheckFifoParam>:
>>>>>>> fsm_rd_rfid
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d11f      	bne.n	800375e <DMA_CheckFifoParam+0x5a>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d856      	bhi.n	80037d2 <DMA_CheckFifoParam+0xce>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <DMA_CheckFifoParam+0x28>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800373d 	.word	0x0800373d
 8003730:	0800374f 	.word	0x0800374f
 8003734:	0800373d 	.word	0x0800373d
 8003738:	080037d3 	.word	0x080037d3
=======
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11f      	bne.n	8003d8e <DMA_CheckFifoParam+0x5a>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d856      	bhi.n	8003e02 <DMA_CheckFifoParam+0xce>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <DMA_CheckFifoParam+0x28>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d7f 	.word	0x08003d7f
 8003d64:	08003d6d 	.word	0x08003d6d
 8003d68:	08003e03 	.word	0x08003e03
>>>>>>> fsm_rd_rfid
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d046      	beq.n	80037d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e043      	b.n	80037d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003756:	d140      	bne.n	80037da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e03d      	b.n	80037da <DMA_CheckFifoParam+0xd6>
=======
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d046      	beq.n	8003e06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e043      	b.n	8003e06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d86:	d140      	bne.n	8003e0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e03d      	b.n	8003e0a <DMA_CheckFifoParam+0xd6>
>>>>>>> fsm_rd_rfid
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003766:	d121      	bne.n	80037ac <DMA_CheckFifoParam+0xa8>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d837      	bhi.n	80037de <DMA_CheckFifoParam+0xda>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <DMA_CheckFifoParam+0x70>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	08003785 	.word	0x08003785
 8003778:	0800378b 	.word	0x0800378b
 800377c:	08003785 	.word	0x08003785
 8003780:	0800379d 	.word	0x0800379d
=======
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d121      	bne.n	8003ddc <DMA_CheckFifoParam+0xa8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d837      	bhi.n	8003e0e <DMA_CheckFifoParam+0xda>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <DMA_CheckFifoParam+0x70>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dbb 	.word	0x08003dbb
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003dcd 	.word	0x08003dcd
>>>>>>> fsm_rd_rfid
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      break;
 8003788:	e030      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d025      	beq.n	80037e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800379a:	e022      	b.n	80037e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037a4:	d11f      	bne.n	80037e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037aa:	e01c      	b.n	80037e6 <DMA_CheckFifoParam+0xe2>
=======
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e030      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d025      	beq.n	8003e12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dca:	e022      	b.n	8003e12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd4:	d11f      	bne.n	8003e16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dda:	e01c      	b.n	8003e16 <DMA_CheckFifoParam+0xe2>
>>>>>>> fsm_rd_rfid
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d903      	bls.n	80037ba <DMA_CheckFifoParam+0xb6>
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d003      	beq.n	80037c0 <DMA_CheckFifoParam+0xbc>
=======
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d903      	bls.n	8003dea <DMA_CheckFifoParam+0xb6>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d003      	beq.n	8003df0 <DMA_CheckFifoParam+0xbc>
>>>>>>> fsm_rd_rfid
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 80037b8:	e018      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
      break;
 80037be:	e015      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
      break;
 80037d0:	e00b      	b.n	80037ea <DMA_CheckFifoParam+0xe6>
      break;
 80037d2:	bf00      	nop
 80037d4:	e00a      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037d6:	bf00      	nop
 80037d8:	e008      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037da:	bf00      	nop
 80037dc:	e006      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e004      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;   
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
=======
 8003de8:	e018      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      break;
 8003dee:	e015      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e00b      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e02:	bf00      	nop
 8003e04:	e00a      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
 8003e08:	e008      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e006      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e004      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;
 8003e12:	bf00      	nop
 8003e14:	e002      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e16:	bf00      	nop
 8003e18:	e000      	b.n	8003e1c <DMA_CheckFifoParam+0xe8>
      break;
 8003e1a:	bf00      	nop
>>>>>>> fsm_rd_rfid
    }
  } 
  
  return status; 
<<<<<<< HEAD
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <HAL_GPIO_Init>:
=======
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <HAL_GPIO_Init>:
>>>>>>> fsm_rd_rfid
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800380a:	2300      	movs	r3, #0
 800380c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
=======
 8003e2c:	b480      	push	{r7}
 8003e2e:	b089      	sub	sp, #36	; 0x24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	e175      	b.n	8003b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800381c:	2201      	movs	r2, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	f040 8164 	bne.w	8003b02 <HAL_GPIO_Init+0x306>
=======
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e175      	b.n	8004138 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f040 8164 	bne.w	8004132 <HAL_GPIO_Init+0x306>
>>>>>>> fsm_rd_rfid
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00b      	beq.n	800385a <HAL_GPIO_Init+0x5e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d007      	beq.n	800385a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800384e:	2b11      	cmp	r3, #17
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b12      	cmp	r3, #18
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xc0>
=======
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d00b      	beq.n	8003e8a <HAL_GPIO_Init+0x5e>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e7e:	2b11      	cmp	r3, #17
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b12      	cmp	r3, #18
 8003e88:	d130      	bne.n	8003eec <HAL_GPIO_Init+0xc0>
>>>>>>> fsm_rd_rfid
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
=======
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2203      	movs	r2, #3
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 0201 	and.w	r2, r3, #1
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x100>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b12      	cmp	r3, #18
 80038fa:	d123      	bne.n	8003944 <HAL_GPIO_Init+0x148>
=======
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x100>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b12      	cmp	r3, #18
 8003f2a:	d123      	bne.n	8003f74 <HAL_GPIO_Init+0x148>
>>>>>>> fsm_rd_rfid
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
<<<<<<< HEAD
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	08da      	lsrs	r2, r3, #3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3208      	adds	r2, #8
 8003904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	08da      	lsrs	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3208      	adds	r2, #8
 800393e:	69b9      	ldr	r1, [r7, #24]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	08da      	lsrs	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3208      	adds	r2, #8
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> fsm_rd_rfid
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	601a      	str	r2, [r3, #0]
=======
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80be 	beq.w	8003b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003986:	4b66      	ldr	r3, [pc, #408]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	4a65      	ldr	r2, [pc, #404]	; (8003b20 <HAL_GPIO_Init+0x324>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003990:	6453      	str	r3, [r2, #68]	; 0x44
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_GPIO_Init+0x324>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800399e:	4a61      	ldr	r2, [pc, #388]	; (8003b24 <HAL_GPIO_Init+0x328>)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a58      	ldr	r2, [pc, #352]	; (8003b28 <HAL_GPIO_Init+0x32c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d037      	beq.n	8003a3a <HAL_GPIO_Init+0x23e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a57      	ldr	r2, [pc, #348]	; (8003b2c <HAL_GPIO_Init+0x330>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d031      	beq.n	8003a36 <HAL_GPIO_Init+0x23a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a56      	ldr	r2, [pc, #344]	; (8003b30 <HAL_GPIO_Init+0x334>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02b      	beq.n	8003a32 <HAL_GPIO_Init+0x236>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a55      	ldr	r2, [pc, #340]	; (8003b34 <HAL_GPIO_Init+0x338>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d025      	beq.n	8003a2e <HAL_GPIO_Init+0x232>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a54      	ldr	r2, [pc, #336]	; (8003b38 <HAL_GPIO_Init+0x33c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01f      	beq.n	8003a2a <HAL_GPIO_Init+0x22e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a53      	ldr	r2, [pc, #332]	; (8003b3c <HAL_GPIO_Init+0x340>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d019      	beq.n	8003a26 <HAL_GPIO_Init+0x22a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a52      	ldr	r2, [pc, #328]	; (8003b40 <HAL_GPIO_Init+0x344>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <HAL_GPIO_Init+0x226>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a51      	ldr	r2, [pc, #324]	; (8003b44 <HAL_GPIO_Init+0x348>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00d      	beq.n	8003a1e <HAL_GPIO_Init+0x222>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a50      	ldr	r2, [pc, #320]	; (8003b48 <HAL_GPIO_Init+0x34c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d007      	beq.n	8003a1a <HAL_GPIO_Init+0x21e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4f      	ldr	r2, [pc, #316]	; (8003b4c <HAL_GPIO_Init+0x350>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_GPIO_Init+0x21a>
 8003a12:	2309      	movs	r3, #9
 8003a14:	e012      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a16:	230a      	movs	r3, #10
 8003a18:	e010      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	e00e      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e00c      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a22:	2306      	movs	r3, #6
 8003a24:	e00a      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a26:	2305      	movs	r3, #5
 8003a28:	e008      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	e006      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e004      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e002      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_GPIO_Init+0x240>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	f002 0203 	and.w	r2, r2, #3
 8003a42:	0092      	lsls	r2, r2, #2
 8003a44:	4093      	lsls	r3, r2
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a4c:	4935      	ldr	r1, [pc, #212]	; (8003b24 <HAL_GPIO_Init+0x328>)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	3302      	adds	r3, #2
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a7e:	4a34      	ldr	r2, [pc, #208]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a84:	4b32      	ldr	r3, [pc, #200]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aa8:	4a29      	ldr	r2, [pc, #164]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad2:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003afc:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_GPIO_Init+0x354>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	f67f ae86 	bls.w	800381c <HAL_GPIO_Init+0x20>
=======
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80be 	beq.w	8004132 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	4b66      	ldr	r3, [pc, #408]	; (8004150 <HAL_GPIO_Init+0x324>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	4a65      	ldr	r2, [pc, #404]	; (8004150 <HAL_GPIO_Init+0x324>)
 8003fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_GPIO_Init+0x324>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fce:	4a61      	ldr	r2, [pc, #388]	; (8004154 <HAL_GPIO_Init+0x328>)
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a58      	ldr	r2, [pc, #352]	; (8004158 <HAL_GPIO_Init+0x32c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d037      	beq.n	800406a <HAL_GPIO_Init+0x23e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a57      	ldr	r2, [pc, #348]	; (800415c <HAL_GPIO_Init+0x330>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d031      	beq.n	8004066 <HAL_GPIO_Init+0x23a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a56      	ldr	r2, [pc, #344]	; (8004160 <HAL_GPIO_Init+0x334>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d02b      	beq.n	8004062 <HAL_GPIO_Init+0x236>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a55      	ldr	r2, [pc, #340]	; (8004164 <HAL_GPIO_Init+0x338>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d025      	beq.n	800405e <HAL_GPIO_Init+0x232>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a54      	ldr	r2, [pc, #336]	; (8004168 <HAL_GPIO_Init+0x33c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01f      	beq.n	800405a <HAL_GPIO_Init+0x22e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a53      	ldr	r2, [pc, #332]	; (800416c <HAL_GPIO_Init+0x340>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d019      	beq.n	8004056 <HAL_GPIO_Init+0x22a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a52      	ldr	r2, [pc, #328]	; (8004170 <HAL_GPIO_Init+0x344>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_GPIO_Init+0x226>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a51      	ldr	r2, [pc, #324]	; (8004174 <HAL_GPIO_Init+0x348>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00d      	beq.n	800404e <HAL_GPIO_Init+0x222>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a50      	ldr	r2, [pc, #320]	; (8004178 <HAL_GPIO_Init+0x34c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d007      	beq.n	800404a <HAL_GPIO_Init+0x21e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4f      	ldr	r2, [pc, #316]	; (800417c <HAL_GPIO_Init+0x350>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_GPIO_Init+0x21a>
 8004042:	2309      	movs	r3, #9
 8004044:	e012      	b.n	800406c <HAL_GPIO_Init+0x240>
 8004046:	230a      	movs	r3, #10
 8004048:	e010      	b.n	800406c <HAL_GPIO_Init+0x240>
 800404a:	2308      	movs	r3, #8
 800404c:	e00e      	b.n	800406c <HAL_GPIO_Init+0x240>
 800404e:	2307      	movs	r3, #7
 8004050:	e00c      	b.n	800406c <HAL_GPIO_Init+0x240>
 8004052:	2306      	movs	r3, #6
 8004054:	e00a      	b.n	800406c <HAL_GPIO_Init+0x240>
 8004056:	2305      	movs	r3, #5
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x240>
 800405a:	2304      	movs	r3, #4
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x240>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x240>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x240>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x240>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	; (8004154 <HAL_GPIO_Init+0x328>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800408a:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <HAL_GPIO_Init+0x354>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ae:	4a34      	ldr	r2, [pc, #208]	; (8004180 <HAL_GPIO_Init+0x354>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_GPIO_Init+0x354>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d8:	4a29      	ldr	r2, [pc, #164]	; (8004180 <HAL_GPIO_Init+0x354>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040de:	4b28      	ldr	r3, [pc, #160]	; (8004180 <HAL_GPIO_Init+0x354>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004102:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_GPIO_Init+0x354>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_GPIO_Init+0x354>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800412c:	4a14      	ldr	r2, [pc, #80]	; (8004180 <HAL_GPIO_Init+0x354>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f ae86 	bls.w	8003e4c <HAL_GPIO_Init+0x20>
>>>>>>> fsm_rd_rfid
      }
    }
  }
}
<<<<<<< HEAD
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	40020800 	.word	0x40020800
 8003b34:	40020c00 	.word	0x40020c00
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40021400 	.word	0x40021400
 8003b40:	40021800 	.word	0x40021800
 8003b44:	40021c00 	.word	0x40021c00
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40022400 	.word	0x40022400
 8003b50:	40013c00 	.word	0x40013c00

08003b54 <HAL_GPIO_WritePin>:
=======
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	; 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800
 8004174:	40021c00 	.word	0x40021c00
 8004178:	40022000 	.word	0x40022000
 800417c:	40022400 	.word	0x40022400
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_WritePin>:
>>>>>>> fsm_rd_rfid
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
=======
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
=======
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
>>>>>>> fsm_rd_rfid
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
<<<<<<< HEAD
 8003b70:	e003      	b.n	8003b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	041a      	lsls	r2, r3, #16
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	619a      	str	r2, [r3, #24]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_PWREx_EnableOverDrive>:
=======
 80041a0:	e003      	b.n	80041aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	619a      	str	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041c8:	887a      	ldrh	r2, [r7, #2]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	041a      	lsls	r2, r3, #16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	400b      	ands	r3, r1
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_PWREx_EnableOverDrive>:
>>>>>>> fsm_rd_rfid
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< HEAD
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bb6:	f7fe fa0d 	bl	8001fd4 <HAL_GetTick>
 8003bba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bbc:	e009      	b.n	8003bd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bbe:	f7fe fa09 	bl	8001fd4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bcc:	d901      	bls.n	8003bd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e022      	b.n	8003c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d1ee      	bne.n	8003bbe <HAL_PWREx_EnableOverDrive+0x36>
=======
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_PWREx_EnableOverDrive+0x98>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a22      	ldr	r2, [pc, #136]	; (8004284 <HAL_PWREx_EnableOverDrive+0x98>)
 80041fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_PWREx_EnableOverDrive+0x98>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800420e:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800421a:	f7fe f9dd 	bl	80025d8 <HAL_GetTick>
 800421e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004220:	e009      	b.n	8004236 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004222:	f7fe f9d9 	bl	80025d8 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004230:	d901      	bls.n	8004236 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e022      	b.n	800427c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004242:	d1ee      	bne.n	8004222 <HAL_PWREx_EnableOverDrive+0x36>
>>>>>>> fsm_rd_rfid
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< HEAD
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bec:	f7fe f9f2 	bl	8001fd4 <HAL_GetTick>
 8003bf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bf2:	e009      	b.n	8003c08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf4:	f7fe f9ee 	bl	8001fd4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c02:	d901      	bls.n	8003c08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e007      	b.n	8003c18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c14:	d1ee      	bne.n	8003bf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000

08003c28 <HAL_RCC_OscConfig>:
=======
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a0f      	ldr	r2, [pc, #60]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 800424a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004250:	f7fe f9c2 	bl	80025d8 <HAL_GetTick>
 8004254:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004256:	e009      	b.n	800426c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004258:	f7fe f9be 	bl	80025d8 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004266:	d901      	bls.n	800426c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e007      	b.n	800427c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_PWREx_EnableOverDrive+0x9c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004278:	d1ee      	bne.n	8004258 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000

0800428c <HAL_RCC_OscConfig>:
>>>>>>> fsm_rd_rfid
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c30:	2300      	movs	r3, #0
 8003c32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e29b      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
=======
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e29b      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 8087 	beq.w	8003d5a <HAL_RCC_OscConfig+0x132>
=======
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8087 	beq.w	80043be <HAL_RCC_OscConfig+0x132>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8003c4c:	4b96      	ldr	r3, [pc, #600]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d00c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c58:	4b93      	ldr	r3, [pc, #588]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d112      	bne.n	8003c8a <HAL_RCC_OscConfig+0x62>
 8003c64:	4b90      	ldr	r3, [pc, #576]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c70:	d10b      	bne.n	8003c8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c72:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d06c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x130>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d168      	bne.n	8003d58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e275      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
=======
 80042b0:	4b96      	ldr	r3, [pc, #600]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d00c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042bc:	4b93      	ldr	r3, [pc, #588]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d112      	bne.n	80042ee <HAL_RCC_OscConfig+0x62>
 80042c8:	4b90      	ldr	r3, [pc, #576]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d4:	d10b      	bne.n	80042ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d6:	4b8d      	ldr	r3, [pc, #564]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d06c      	beq.n	80043bc <HAL_RCC_OscConfig+0x130>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d168      	bne.n	80043bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e275      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x7a>
 8003c94:	4b84      	ldr	r3, [pc, #528]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a83      	ldr	r2, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	e02e      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x9c>
 8003caa:	4b7f      	ldr	r3, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7e      	ldr	r2, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a7b      	ldr	r2, [pc, #492]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a75      	ldr	r2, [pc, #468]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a72      	ldr	r2, [pc, #456]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xd8>
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6e      	ldr	r2, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6b      	ldr	r2, [pc, #428]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe f964 	bl	8001fd4 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fe f960 	bl	8001fd4 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e229      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b61      	ldr	r3, [pc, #388]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe8>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x132>
=======
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x7a>
 80042f8:	4b84      	ldr	r3, [pc, #528]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a83      	ldr	r2, [pc, #524]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e02e      	b.n	8004364 <HAL_RCC_OscConfig+0xd8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0x9c>
 800430e:	4b7f      	ldr	r3, [pc, #508]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a7e      	ldr	r2, [pc, #504]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b7c      	ldr	r3, [pc, #496]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a7b      	ldr	r2, [pc, #492]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e01d      	b.n	8004364 <HAL_RCC_OscConfig+0xd8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0xc0>
 8004332:	4b76      	ldr	r3, [pc, #472]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a75      	ldr	r2, [pc, #468]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4b73      	ldr	r3, [pc, #460]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a72      	ldr	r2, [pc, #456]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0xd8>
 800434c:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6e      	ldr	r2, [pc, #440]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b6c      	ldr	r3, [pc, #432]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6b      	ldr	r2, [pc, #428]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fe f934 	bl	80025d8 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004374:	f7fe f930 	bl	80025d8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e229      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004386:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0xe8>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x132>
>>>>>>> fsm_rd_rfid
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003d30:	f7fe f950 	bl	8001fd4 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fe f94c 	bl	8001fd4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e215      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b57      	ldr	r3, [pc, #348]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x110>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
=======
 8004394:	f7fe f920 	bl	80025d8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800439c:	f7fe f91c 	bl	80025d8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	; 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e215      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ae:	4b57      	ldr	r3, [pc, #348]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1f0      	bne.n	800439c <HAL_RCC_OscConfig+0x110>
 80043ba:	e000      	b.n	80043be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	bf00      	nop
>>>>>>> fsm_rd_rfid
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d069      	beq.n	8003e3a <HAL_RCC_OscConfig+0x212>
=======
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d069      	beq.n	800449e <HAL_RCC_OscConfig+0x212>
>>>>>>> fsm_rd_rfid
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8003d66:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x190>
 8003d7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x17a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1e9      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
=======
 80043ca:	4b50      	ldr	r3, [pc, #320]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b4d      	ldr	r3, [pc, #308]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x190>
 80043e2:	4b4a      	ldr	r3, [pc, #296]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b47      	ldr	r3, [pc, #284]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x17a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1e9      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
>>>>>>> fsm_rd_rfid
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	493d      	ldr	r1, [pc, #244]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e040      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
=======
 8004406:	4b41      	ldr	r3, [pc, #260]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	493d      	ldr	r1, [pc, #244]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e040      	b.n	800449e <HAL_RCC_OscConfig+0x212>
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d023      	beq.n	8003e08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a38      	ldr	r2, [pc, #224]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f902 	bl	8001fd4 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd4:	f7fe f8fe 	bl	8001fd4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1c7      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x1ac>
=======
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d023      	beq.n	800446c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b39      	ldr	r3, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a38      	ldr	r2, [pc, #224]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe f8d2 	bl	80025d8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004438:	f7fe f8ce 	bl	80025d8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1c7      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444a:	4b30      	ldr	r3, [pc, #192]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x1ac>
>>>>>>> fsm_rd_rfid
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4929      	ldr	r1, [pc, #164]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
 8003e06:	e018      	b.n	8003e3a <HAL_RCC_OscConfig+0x212>
=======
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4929      	ldr	r1, [pc, #164]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
 800446a:	e018      	b.n	800449e <HAL_RCC_OscConfig+0x212>
>>>>>>> fsm_rd_rfid
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fe f8de 	bl	8001fd4 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fe f8da 	bl	8001fd4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e1a3      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x1f4>
=======
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x280>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe f8ae 	bl	80025d8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fe f8aa 	bl	80025d8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1a3      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1e      	ldr	r3, [pc, #120]	; (800450c <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1f4>
>>>>>>> fsm_rd_rfid
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d038      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x290>
=======
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d038      	beq.n	800451c <HAL_RCC_OscConfig+0x290>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d019      	beq.n	8003e82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe f8bb 	bl	8001fd4 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e62:	f7fe f8b7 	bl	8001fd4 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e180      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x23a>
 8003e80:	e01a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x290>
=======
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d019      	beq.n	80044e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fe f88b 	bl	80025d8 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fe f887 	bl	80025d8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e180      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x23a>
 80044e4:	e01a      	b.n	800451c <HAL_RCC_OscConfig+0x290>
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <HAL_RCC_OscConfig+0x280>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe f8a1 	bl	8001fd4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fe f89d 	bl	8001fd4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d903      	bls.n	8003eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e166      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
 8003ea8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x26e>
=======
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	4a08      	ldr	r2, [pc, #32]	; (800450c <HAL_RCC_OscConfig+0x280>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fe f871 	bl	80025d8 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fe f86d 	bl	80025d8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d903      	bls.n	8004510 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e166      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
 800450c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	4b92      	ldr	r3, [pc, #584]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ee      	bne.n	80044fa <HAL_RCC_OscConfig+0x26e>
>>>>>>> fsm_rd_rfid
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80a4 	beq.w	800400e <HAL_RCC_OscConfig+0x3e6>
=======
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a4 	beq.w	8004672 <HAL_RCC_OscConfig+0x3e6>
>>>>>>> fsm_rd_rfid
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8003ec6:	4b8c      	ldr	r3, [pc, #560]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a88      	ldr	r2, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b86      	ldr	r3, [pc, #536]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eee:	4b83      	ldr	r3, [pc, #524]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003efa:	4b80      	ldr	r3, [pc, #512]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7f      	ldr	r2, [pc, #508]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe f865 	bl	8001fd4 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe f861 	bl	8001fd4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	; 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e12a      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f20:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_RCC_OscConfig+0x4d4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2e6>
=======
 800452a:	4b8c      	ldr	r3, [pc, #560]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	4b89      	ldr	r3, [pc, #548]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a88      	ldr	r2, [pc, #544]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b86      	ldr	r3, [pc, #536]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004552:	4b83      	ldr	r3, [pc, #524]	; (8004760 <HAL_RCC_OscConfig+0x4d4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800455e:	4b80      	ldr	r3, [pc, #512]	; (8004760 <HAL_RCC_OscConfig+0x4d4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a7f      	ldr	r2, [pc, #508]	; (8004760 <HAL_RCC_OscConfig+0x4d4>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456a:	f7fe f835 	bl	80025d8 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004572:	f7fe f831 	bl	80025d8 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b64      	cmp	r3, #100	; 0x64
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e12a      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004584:	4b76      	ldr	r3, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x4d4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2e6>
>>>>>>> fsm_rd_rfid
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x31a>
 8003f34:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f38:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x33c>
 8003f4a:	4b6b      	ldr	r3, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a6a      	ldr	r2, [pc, #424]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6713      	str	r3, [r2, #112]	; 0x70
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x35e>
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a61      	ldr	r2, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
 8003f78:	4b5f      	ldr	r3, [pc, #380]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a5e      	ldr	r2, [pc, #376]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x376>
 8003f86:	4b5c      	ldr	r3, [pc, #368]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe f815 	bl	8001fd4 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe f811 	bl	8001fd4 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0d8      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b4c      	ldr	r3, [pc, #304]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x386>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3d4>
=======
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x31a>
 8004598:	4b70      	ldr	r3, [pc, #448]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a6f      	ldr	r2, [pc, #444]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e02d      	b.n	8004602 <HAL_RCC_OscConfig+0x376>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x33c>
 80045ae:	4b6b      	ldr	r3, [pc, #428]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b68      	ldr	r3, [pc, #416]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a67      	ldr	r2, [pc, #412]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	f023 0304 	bic.w	r3, r3, #4
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e01c      	b.n	8004602 <HAL_RCC_OscConfig+0x376>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x35e>
 80045d0:	4b62      	ldr	r3, [pc, #392]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d4:	4a61      	ldr	r2, [pc, #388]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	f043 0304 	orr.w	r3, r3, #4
 80045da:	6713      	str	r3, [r2, #112]	; 0x70
 80045dc:	4b5f      	ldr	r3, [pc, #380]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	4a5e      	ldr	r2, [pc, #376]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6713      	str	r3, [r2, #112]	; 0x70
 80045e8:	e00b      	b.n	8004602 <HAL_RCC_OscConfig+0x376>
 80045ea:	4b5c      	ldr	r3, [pc, #368]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	4a5b      	ldr	r2, [pc, #364]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6713      	str	r3, [r2, #112]	; 0x70
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a58      	ldr	r2, [pc, #352]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460a:	f7fd ffe5 	bl	80025d8 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd ffe1 	bl	80025d8 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e0d8      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b4c      	ldr	r3, [pc, #304]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCC_OscConfig+0x386>
 8004634:	e014      	b.n	8004660 <HAL_RCC_OscConfig+0x3d4>
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003fd2:	f7fd ffff 	bl	8001fd4 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fd fffb 	bl	8001fd4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0c2      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3b2>
=======
 8004636:	f7fd ffcf 	bl	80025d8 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463c:	e00a      	b.n	8004654 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fd ffcb 	bl	80025d8 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	; 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0c2      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004654:	4b41      	ldr	r3, [pc, #260]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ee      	bne.n	800463e <HAL_RCC_OscConfig+0x3b2>
>>>>>>> fsm_rd_rfid
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a3c      	ldr	r2, [pc, #240]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004666:	4b3d      	ldr	r3, [pc, #244]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	4a3c      	ldr	r2, [pc, #240]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800466c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004670:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> fsm_rd_rfid
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80ae 	beq.w	8004174 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d06d      	beq.n	8004100 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d14b      	bne.n	80040c4 <HAL_RCC_OscConfig+0x49c>
=======
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80ae 	beq.w	80047d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800467c:	4b37      	ldr	r3, [pc, #220]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 030c 	and.w	r3, r3, #12
 8004684:	2b08      	cmp	r3, #8
 8004686:	d06d      	beq.n	8004764 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d14b      	bne.n	8004728 <HAL_RCC_OscConfig+0x49c>
>>>>>>> fsm_rd_rfid
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800402c:	4b32      	ldr	r3, [pc, #200]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a31      	ldr	r2, [pc, #196]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004038:	f7fd ffcc 	bl	8001fd4 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004040:	f7fd ffc8 	bl	8001fd4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e091      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x418>
=======
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a31      	ldr	r2, [pc, #196]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469c:	f7fd ff9c 	bl	80025d8 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd ff98 	bl	80025d8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e091      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	4b29      	ldr	r3, [pc, #164]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x418>
>>>>>>> fsm_rd_rfid
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	071b      	lsls	r3, r3, #28
 800408a:	491b      	ldr	r1, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
=======
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	3b01      	subs	r3, #1
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	071b      	lsls	r3, r3, #28
 80046ee:	491b      	ldr	r1, [pc, #108]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	604b      	str	r3, [r1, #4]
>>>>>>> fsm_rd_rfid
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd ff9a 	bl	8001fd4 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd ff96 	bl	8001fd4 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e05f      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x47c>
 80040c2:	e057      	b.n	8004174 <HAL_RCC_OscConfig+0x54c>
=======
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd ff6a 	bl	80025d8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fd ff66 	bl	80025d8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e05f      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x47c>
 8004726:	e057      	b.n	80047d8 <HAL_RCC_OscConfig+0x54c>
>>>>>>> fsm_rd_rfid
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0b      	ldr	r2, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd ff80 	bl	8001fd4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd ff7c 	bl	8001fd4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e045      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4b0>
 80040f6:	e03d      	b.n	8004174 <HAL_RCC_OscConfig+0x54c>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
=======
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 800472e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fd ff50 	bl	80025d8 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd ff4c 	bl	80025d8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e045      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474e:	4b03      	ldr	r3, [pc, #12]	; (800475c <HAL_RCC_OscConfig+0x4d0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x4b0>
 800475a:	e03d      	b.n	80047d8 <HAL_RCC_OscConfig+0x54c>
 800475c:	40023800 	.word	0x40023800
 8004760:	40007000 	.word	0x40007000
>>>>>>> fsm_rd_rfid
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_RCC_OscConfig+0x558>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d030      	beq.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d129      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d122      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004136:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d119      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d10f      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x54c>
=======
 8004764:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <HAL_RCC_OscConfig+0x558>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d030      	beq.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d129      	bne.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d122      	bne.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800479a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800479c:	4293      	cmp	r3, r2
 800479e:	d119      	bne.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d10f      	bne.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_OscConfig+0x54c>
>>>>>>> fsm_rd_rfid
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x54e>
=======
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <HAL_RCC_OscConfig+0x54e>
>>>>>>> fsm_rd_rfid
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_RCC_ClockConfig>:
=======
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800

080047e8 <HAL_RCC_ClockConfig>:
>>>>>>> fsm_rd_rfid
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0d0      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0d0      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b67      	ldr	r3, [pc, #412]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 020f 	bic.w	r2, r3, #15
 80041b2:	4965      	ldr	r1, [pc, #404]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]
=======
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d910      	bls.n	8004830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 020f 	bic.w	r2, r3, #15
 8004816:	4965      	ldr	r1, [pc, #404]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
>>>>>>> fsm_rd_rfid

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80041ba:	4b63      	ldr	r3, [pc, #396]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0b8      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0b8      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d020      	beq.n	800421a <HAL_RCC_ClockConfig+0x96>
=======
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_ClockConfig+0x96>
>>>>>>> fsm_rd_rfid
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041fc:	4b53      	ldr	r3, [pc, #332]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a52      	ldr	r2, [pc, #328]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004202:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004206:	6093      	str	r3, [r2, #8]
=======
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 800484e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004852:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486a:	6093      	str	r3, [r2, #8]
>>>>>>> fsm_rd_rfid
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8004208:	4b50      	ldr	r3, [pc, #320]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	494d      	ldr	r1, [pc, #308]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	4313      	orrs	r3, r2
 8004218:	608b      	str	r3, [r1, #8]
=======
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	494d      	ldr	r1, [pc, #308]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
>>>>>>> fsm_rd_rfid
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d040      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x124>
=======
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d040      	beq.n	800490c <HAL_RCC_ClockConfig+0x124>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	4b47      	ldr	r3, [pc, #284]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d115      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e07f      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d115      	bne.n	80048ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b41      	ldr	r3, [pc, #260]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e073      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048aa:	4b41      	ldr	r3, [pc, #260]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e073      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06b      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 80048ba:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06b      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8004266:	4b39      	ldr	r3, [pc, #228]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 0203 	bic.w	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	4936      	ldr	r1, [pc, #216]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004278:	f7fd feac 	bl	8001fd4 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427e:	e00a      	b.n	8004296 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004280:	f7fd fea8 	bl	8001fd4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	; 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e053      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 020c 	and.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1eb      	bne.n	8004280 <HAL_RCC_ClockConfig+0xfc>
=======
 80048ca:	4b39      	ldr	r3, [pc, #228]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 0203 	bic.w	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4936      	ldr	r1, [pc, #216]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fd fe7c 	bl	80025d8 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7fd fe78 	bl	80025d8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e053      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 020c 	and.w	r2, r3, #12
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	429a      	cmp	r2, r3
 800490a:	d1eb      	bne.n	80048e4 <HAL_RCC_ClockConfig+0xfc>
>>>>>>> fsm_rd_rfid
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80042a8:	4b27      	ldr	r3, [pc, #156]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d210      	bcs.n	80042d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	4922      	ldr	r1, [pc, #136]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
=======
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d210      	bcs.n	800493c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 020f 	bic.w	r2, r3, #15
 8004922:	4922      	ldr	r1, [pc, #136]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
>>>>>>> fsm_rd_rfid

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e032      	b.n	800433e <HAL_RCC_ClockConfig+0x1ba>
=======
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e032      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> fsm_rd_rfid
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4916      	ldr	r1, [pc, #88]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
=======
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4916      	ldr	r1, [pc, #88]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004302:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	490e      	ldr	r1, [pc, #56]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
=======
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	490e      	ldr	r1, [pc, #56]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
>>>>>>> fsm_rd_rfid
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8004316:	f000 f821 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800431a:	4602      	mov	r2, r0
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	490a      	ldr	r1, [pc, #40]	; (8004350 <HAL_RCC_ClockConfig+0x1cc>)
 8004328:	5ccb      	ldrb	r3, [r1, r3]
 800432a:	fa22 f303 	lsr.w	r3, r2, r3
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1d0>)
 8004330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_ClockConfig+0x1d4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fe08 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40023c00 	.word	0x40023c00
 800434c:	40023800 	.word	0x40023800
 8004350:	08009ef0 	.word	0x08009ef0
 8004354:	20000058 	.word	0x20000058
 8004358:	2000005c 	.word	0x2000005c

0800435c <HAL_RCC_GetSysClockFreq>:
=======
 800497a:	f000 f821 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 800497e:	4602      	mov	r2, r0
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	490a      	ldr	r1, [pc, #40]	; (80049b4 <HAL_RCC_ClockConfig+0x1cc>)
 800498c:	5ccb      	ldrb	r3, [r1, r3]
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1d4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fdd8 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023c00 	.word	0x40023c00
 80049b0:	40023800 	.word	0x40023800
 80049b4:	0800af30 	.word	0x0800af30
 80049b8:	20000058 	.word	0x20000058
 80049bc:	2000005c 	.word	0x2000005c

080049c0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> fsm_rd_rfid
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800435c:	b5b0      	push	{r4, r5, r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004362:	2100      	movs	r1, #0
 8004364:	6079      	str	r1, [r7, #4]
 8004366:	2100      	movs	r1, #0
 8004368:	60f9      	str	r1, [r7, #12]
 800436a:	2100      	movs	r1, #0
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800436e:	2100      	movs	r1, #0
 8004370:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004372:	4952      	ldr	r1, [pc, #328]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004374:	6889      	ldr	r1, [r1, #8]
 8004376:	f001 010c 	and.w	r1, r1, #12
 800437a:	2908      	cmp	r1, #8
 800437c:	d00d      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0x3e>
 800437e:	2908      	cmp	r1, #8
 8004380:	f200 8094 	bhi.w	80044ac <HAL_RCC_GetSysClockFreq+0x150>
 8004384:	2900      	cmp	r1, #0
 8004386:	d002      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0x32>
 8004388:	2904      	cmp	r1, #4
 800438a:	d003      	beq.n	8004394 <HAL_RCC_GetSysClockFreq+0x38>
 800438c:	e08e      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x150>
=======
 80049c0:	b5b0      	push	{r4, r5, r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80049c6:	2100      	movs	r1, #0
 80049c8:	6079      	str	r1, [r7, #4]
 80049ca:	2100      	movs	r1, #0
 80049cc:	60f9      	str	r1, [r7, #12]
 80049ce:	2100      	movs	r1, #0
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80049d2:	2100      	movs	r1, #0
 80049d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d6:	4952      	ldr	r1, [pc, #328]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 80049d8:	6889      	ldr	r1, [r1, #8]
 80049da:	f001 010c 	and.w	r1, r1, #12
 80049de:	2908      	cmp	r1, #8
 80049e0:	d00d      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x3e>
 80049e2:	2908      	cmp	r1, #8
 80049e4:	f200 8094 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x150>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	d002      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x32>
 80049ec:	2904      	cmp	r1, #4
 80049ee:	d003      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x38>
 80049f0:	e08e      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x150>
>>>>>>> fsm_rd_rfid
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800438e:	4b4c      	ldr	r3, [pc, #304]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004390:	60bb      	str	r3, [r7, #8]
      break;
 8004392:	e08e      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x156>
=======
 80049f2:	4b4c      	ldr	r3, [pc, #304]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x164>)
 80049f4:	60bb      	str	r3, [r7, #8]
      break;
 80049f6:	e08e      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> fsm_rd_rfid
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8004394:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004396:	60bb      	str	r3, [r7, #8]
      break;
 8004398:	e08b      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x156>
=======
 80049f8:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x168>)
 80049fa:	60bb      	str	r3, [r7, #8]
      break;
 80049fc:	e08b      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> fsm_rd_rfid
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800439a:	4948      	ldr	r1, [pc, #288]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 800439c:	6849      	ldr	r1, [r1, #4]
 800439e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80043a2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a4:	4945      	ldr	r1, [pc, #276]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 80043a6:	6849      	ldr	r1, [r1, #4]
 80043a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80043ac:	2900      	cmp	r1, #0
 80043ae:	d024      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b0:	4942      	ldr	r1, [pc, #264]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 80043b2:	6849      	ldr	r1, [r1, #4]
 80043b4:	0989      	lsrs	r1, r1, #6
 80043b6:	4608      	mov	r0, r1
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80043c0:	f04f 0500 	mov.w	r5, #0
 80043c4:	ea00 0204 	and.w	r2, r0, r4
 80043c8:	ea01 0305 	and.w	r3, r1, r5
 80043cc:	493d      	ldr	r1, [pc, #244]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80043ce:	fb01 f003 	mul.w	r0, r1, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	fb01 f102 	mul.w	r1, r1, r2
 80043d8:	1844      	adds	r4, r0, r1
 80043da:	493a      	ldr	r1, [pc, #232]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80043dc:	fba2 0101 	umull	r0, r1, r2, r1
 80043e0:	1863      	adds	r3, r4, r1
 80043e2:	4619      	mov	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	f7fb ff80 	bl	80002f0 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e04a      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x134>
=======
 80049fe:	4948      	ldr	r1, [pc, #288]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a00:	6849      	ldr	r1, [r1, #4]
 8004a02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004a06:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a08:	4945      	ldr	r1, [pc, #276]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a0a:	6849      	ldr	r1, [r1, #4]
 8004a0c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d024      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a14:	4942      	ldr	r1, [pc, #264]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a16:	6849      	ldr	r1, [r1, #4]
 8004a18:	0989      	lsrs	r1, r1, #6
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004a24:	f04f 0500 	mov.w	r5, #0
 8004a28:	ea00 0204 	and.w	r2, r0, r4
 8004a2c:	ea01 0305 	and.w	r3, r1, r5
 8004a30:	493d      	ldr	r1, [pc, #244]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a32:	fb01 f003 	mul.w	r0, r1, r3
 8004a36:	2100      	movs	r1, #0
 8004a38:	fb01 f102 	mul.w	r1, r1, r2
 8004a3c:	1844      	adds	r4, r0, r1
 8004a3e:	493a      	ldr	r1, [pc, #232]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004a40:	fba2 0101 	umull	r0, r1, r2, r1
 8004a44:	1863      	adds	r3, r4, r1
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f7fb fc4e 	bl	80002f0 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e04a      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x134>
>>>>>>> fsm_rd_rfid
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80043fa:	4b30      	ldr	r3, [pc, #192]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	461a      	mov	r2, r3
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	f240 10ff 	movw	r0, #511	; 0x1ff
 800440a:	f04f 0100 	mov.w	r1, #0
 800440e:	ea02 0400 	and.w	r4, r2, r0
 8004412:	ea03 0501 	and.w	r5, r3, r1
 8004416:	4620      	mov	r0, r4
 8004418:	4629      	mov	r1, r5
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	014b      	lsls	r3, r1, #5
 8004424:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004428:	0142      	lsls	r2, r0, #5
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	1b00      	subs	r0, r0, r4
 8004430:	eb61 0105 	sbc.w	r1, r1, r5
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	018b      	lsls	r3, r1, #6
 800443e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004442:	0182      	lsls	r2, r0, #6
 8004444:	1a12      	subs	r2, r2, r0
 8004446:	eb63 0301 	sbc.w	r3, r3, r1
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	00d9      	lsls	r1, r3, #3
 8004454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004458:	00d0      	lsls	r0, r2, #3
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	1912      	adds	r2, r2, r4
 8004460:	eb45 0303 	adc.w	r3, r5, r3
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	f04f 0100 	mov.w	r1, #0
 800446c:	0299      	lsls	r1, r3, #10
 800446e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004472:	0290      	lsls	r0, r2, #10
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	461a      	mov	r2, r3
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	f7fb ff34 	bl	80002f0 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	3301      	adds	r3, #1
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	60bb      	str	r3, [r7, #8]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_RCC_GetSysClockFreq+0x156>
=======
 8004a5e:	4b30      	ldr	r3, [pc, #192]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	461a      	mov	r2, r3
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a6e:	f04f 0100 	mov.w	r1, #0
 8004a72:	ea02 0400 	and.w	r4, r2, r0
 8004a76:	ea03 0501 	and.w	r5, r3, r1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	4629      	mov	r1, r5
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	014b      	lsls	r3, r1, #5
 8004a88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a8c:	0142      	lsls	r2, r0, #5
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	1b00      	subs	r0, r0, r4
 8004a94:	eb61 0105 	sbc.w	r1, r1, r5
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	018b      	lsls	r3, r1, #6
 8004aa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aa6:	0182      	lsls	r2, r0, #6
 8004aa8:	1a12      	subs	r2, r2, r0
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	00d9      	lsls	r1, r3, #3
 8004ab8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004abc:	00d0      	lsls	r0, r2, #3
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	1912      	adds	r2, r2, r4
 8004ac4:	eb45 0303 	adc.w	r3, r5, r3
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	0299      	lsls	r1, r3, #10
 8004ad2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ad6:	0290      	lsls	r0, r2, #10
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f7fb fc02 	bl	80002f0 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x156>
>>>>>>> fsm_rd_rfid
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80044ae:	60bb      	str	r3, [r7, #8]
      break;
 80044b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b2:	68bb      	ldr	r3, [r7, #8]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}
 80044bc:	40023800 	.word	0x40023800
 80044c0:	00f42400 	.word	0x00f42400
 80044c4:	017d7840 	.word	0x017d7840

080044c8 <HAL_RCC_GetHCLKFreq>:
=======
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b12:	60bb      	str	r3, [r7, #8]
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	68bb      	ldr	r3, [r7, #8]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004b20:	40023800 	.word	0x40023800
 8004b24:	00f42400 	.word	0x00f42400
 8004b28:	017d7840 	.word	0x017d7840

08004b2c <HAL_RCC_GetHCLKFreq>:
>>>>>>> fsm_rd_rfid
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ce:	681b      	ldr	r3, [r3, #0]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20000058 	.word	0x20000058

080044e0 <HAL_RCC_GetPCLK1Freq>:
=======
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b30:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b32:	681b      	ldr	r3, [r3, #0]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000058 	.word	0x20000058

08004b44 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> fsm_rd_rfid
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044e4:	f7ff fff0 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0a9b      	lsrs	r3, r3, #10
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	08009f00 	.word	0x08009f00

08004508 <HAL_RCC_GetPCLK2Freq>:
=======
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b48:	f7ff fff0 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0a9b      	lsrs	r3, r3, #10
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800af40 	.word	0x0800af40

08004b6c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> fsm_rd_rfid
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800450c:	f7ff ffdc 	bl	80044c8 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b05      	ldr	r3, [pc, #20]	; (8004528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0b5b      	lsrs	r3, r3, #13
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <HAL_RCC_GetPCLK2Freq+0x24>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004524:	4618      	mov	r0, r3
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40023800 	.word	0x40023800
 800452c:	08009f00 	.word	0x08009f00

08004530 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b70:	f7ff ffdc 	bl	8004b2c <HAL_RCC_GetHCLKFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0b5b      	lsrs	r3, r3, #13
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b82:	5ccb      	ldrb	r3, [r1, r3]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	0800af40 	.word	0x0800af40

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> fsm_rd_rfid
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
=======
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
<<<<<<< HEAD
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d012      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4e>
=======
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d012      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
<<<<<<< HEAD
 8004558:	4b69      	ldr	r3, [pc, #420]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a68      	ldr	r2, [pc, #416]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800455e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456c:	4964      	ldr	r1, [pc, #400]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	61fb      	str	r3, [r7, #28]
=======
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	4964      	ldr	r1, [pc, #400]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	61fb      	str	r3, [r7, #28]
>>>>>>> fsm_rd_rfid
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d017      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
=======
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d017      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
<<<<<<< HEAD
 800458a:	4b5d      	ldr	r3, [pc, #372]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	4959      	ldr	r1, [pc, #356]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
=======
 8004bee:	4b5d      	ldr	r3, [pc, #372]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	4959      	ldr	r1, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d017      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
=======
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
<<<<<<< HEAD
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	494a      	ldr	r1, [pc, #296]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]
=======
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	494a      	ldr	r1, [pc, #296]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	d101      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
=======
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
>>>>>>> fsm_rd_rfid
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 808b 	beq.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
=======
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 808b 	beq.w	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
>>>>>>> fsm_rd_rfid
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8004614:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	4a39      	ldr	r2, [pc, #228]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461e:	6413      	str	r3, [r2, #64]	; 0x40
 8004620:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800462c:	4b35      	ldr	r3, [pc, #212]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a34      	ldr	r2, [pc, #208]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004638:	f7fd fccc 	bl	8001fd4 <HAL_GetTick>
 800463c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004640:	f7fd fcc8 	bl	8001fd4 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b64      	cmp	r3, #100	; 0x64
 800464c:	d901      	bls.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e38f      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004652:	4b2c      	ldr	r3, [pc, #176]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x110>
=======
 8004c78:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	4a39      	ldr	r2, [pc, #228]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6413      	str	r3, [r2, #64]	; 0x40
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a34      	ldr	r2, [pc, #208]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9c:	f7fd fc9c 	bl	80025d8 <HAL_GetTick>
 8004ca0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd fc98 	bl	80025d8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e38f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x110>
>>>>>>> fsm_rd_rfid
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 800465e:	4b28      	ldr	r3, [pc, #160]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d035      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d02e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004684:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004686:	4b1e      	ldr	r3, [pc, #120]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a1d      	ldr	r2, [pc, #116]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a1a      	ldr	r2, [pc, #104]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800469e:	4a18      	ldr	r2, [pc, #96]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d114      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fd fc90 	bl	8001fd4 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fd fc8c 	bl	8001fd4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e351      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ce:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0ee      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8004cc2:	4b28      	ldr	r3, [pc, #160]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d035      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d02e      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d114      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fc60 	bl	80025d8 <HAL_GetTick>
 8004d18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd fc5c 	bl	80025d8 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e351      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> fsm_rd_rfid
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e6:	d111      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046f6:	400b      	ands	r3, r1
 80046f8:	4901      	ldr	r1, [pc, #4]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
 80046fe:	e00b      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000
 8004708:	0ffffcff 	.word	0x0ffffcff
 800470c:	4bb3      	ldr	r3, [pc, #716]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4ab2      	ldr	r2, [pc, #712]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004712:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	4bb0      	ldr	r3, [pc, #704]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800471a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	49ad      	ldr	r1, [pc, #692]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004726:	4313      	orrs	r3, r2
 8004728:	670b      	str	r3, [r1, #112]	; 0x70
=======
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d4a:	d111      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d58:	4b04      	ldr	r3, [pc, #16]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	4901      	ldr	r1, [pc, #4]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
 8004d62:	e00b      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40007000 	.word	0x40007000
 8004d6c:	0ffffcff 	.word	0x0ffffcff
 8004d70:	4bb3      	ldr	r3, [pc, #716]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4ab2      	ldr	r2, [pc, #712]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d7a:	6093      	str	r3, [r2, #8]
 8004d7c:	4bb0      	ldr	r3, [pc, #704]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d88:	49ad      	ldr	r1, [pc, #692]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	670b      	str	r3, [r1, #112]	; 0x70
>>>>>>> fsm_rd_rfid
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
<<<<<<< HEAD
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d010      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x228>
=======
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d010      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x228>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< HEAD
 8004736:	4ba9      	ldr	r3, [pc, #676]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473c:	4aa7      	ldr	r2, [pc, #668]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004742:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004746:	4ba5      	ldr	r3, [pc, #660]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004748:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	49a2      	ldr	r1, [pc, #648]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8004d9a:	4ba9      	ldr	r3, [pc, #676]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	4aa7      	ldr	r2, [pc, #668]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004daa:	4ba5      	ldr	r3, [pc, #660]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	49a2      	ldr	r1, [pc, #648]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x24a>
=======
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x24a>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8004764:	4b9d      	ldr	r3, [pc, #628]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004772:	499a      	ldr	r1, [pc, #616]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd6:	499a      	ldr	r1, [pc, #616]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8004786:	4b95      	ldr	r3, [pc, #596]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004794:	4991      	ldr	r1, [pc, #580]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004dea:	4b95      	ldr	r3, [pc, #596]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df8:	4991      	ldr	r1, [pc, #580]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x28e>
=======
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 80047a8:	4b8c      	ldr	r3, [pc, #560]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b6:	4989      	ldr	r1, [pc, #548]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004e0c:	4b8c      	ldr	r3, [pc, #560]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1a:	4989      	ldr	r1, [pc, #548]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
=======
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 80047ca:	4b84      	ldr	r3, [pc, #528]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4980      	ldr	r1, [pc, #512]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004e2e:	4b84      	ldr	r3, [pc, #528]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	4980      	ldr	r1, [pc, #512]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
=======
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 80047ec:	4b7b      	ldr	r3, [pc, #492]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	f023 0203 	bic.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	4978      	ldr	r1, [pc, #480]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004e50:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	4978      	ldr	r1, [pc, #480]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
=======
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004814:	f023 020c 	bic.w	r2, r3, #12
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481c:	496f      	ldr	r1, [pc, #444]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f023 020c 	bic.w	r2, r3, #12
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	496f      	ldr	r1, [pc, #444]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00a      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x316>
=======
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x316>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 8004830:	4b6a      	ldr	r3, [pc, #424]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800483e:	4967      	ldr	r1, [pc, #412]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004840:	4313      	orrs	r3, r2
 8004842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004e94:	4b6a      	ldr	r3, [pc, #424]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	4967      	ldr	r1, [pc, #412]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x338>
=======
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x338>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 8004852:	4b62      	ldr	r3, [pc, #392]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	495e      	ldr	r1, [pc, #376]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004eb6:	4b62      	ldr	r3, [pc, #392]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	495e      	ldr	r1, [pc, #376]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x35a>
=======
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x35a>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	4956      	ldr	r1, [pc, #344]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004884:	4313      	orrs	r3, r2
 8004886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004ed8:	4b59      	ldr	r3, [pc, #356]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ede:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee6:	4956      	ldr	r1, [pc, #344]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
<<<<<<< HEAD
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x37c>
=======
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
<<<<<<< HEAD
 8004896:	4b51      	ldr	r3, [pc, #324]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	494d      	ldr	r1, [pc, #308]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004efa:	4b51      	ldr	r3, [pc, #324]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	494d      	ldr	r1, [pc, #308]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
<<<<<<< HEAD
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x39e>
=======
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
<<<<<<< HEAD
 80048b8:	4b48      	ldr	r3, [pc, #288]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	4945      	ldr	r1, [pc, #276]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004f1c:	4b48      	ldr	r3, [pc, #288]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2a:	4945      	ldr	r1, [pc, #276]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
<<<<<<< HEAD
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
=======
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
<<<<<<< HEAD
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	493c      	ldr	r1, [pc, #240]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004f3e:	4b40      	ldr	r3, [pc, #256]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	493c      	ldr	r1, [pc, #240]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
=======
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800490a:	4934      	ldr	r1, [pc, #208]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004f60:	4b37      	ldr	r3, [pc, #220]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6e:	4934      	ldr	r1, [pc, #208]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
<<<<<<< HEAD
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x412>
=======
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
<<<<<<< HEAD
 800491e:	4b2f      	ldr	r3, [pc, #188]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492c:	492b      	ldr	r1, [pc, #172]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004938:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800493c:	d101      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800493e:	2301      	movs	r3, #1
 8004940:	61bb      	str	r3, [r7, #24]
=======
 8004f82:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f90:	492b      	ldr	r1, [pc, #172]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	61bb      	str	r3, [r7, #24]
=======
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	61bb      	str	r3, [r7, #24]
>>>>>>> fsm_rd_rfid
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x444>
=======
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
<<<<<<< HEAD
 800495e:	4b1f      	ldr	r3, [pc, #124]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	491b      	ldr	r1, [pc, #108]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004fc2:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd0:	491b      	ldr	r1, [pc, #108]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
<<<<<<< HEAD
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x468>
=======
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00b      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x468>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
<<<<<<< HEAD
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004986:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004990:	4912      	ldr	r1, [pc, #72]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8004fe4:	4b16      	ldr	r3, [pc, #88]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff4:	4912      	ldr	r1, [pc, #72]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
<<<<<<< HEAD
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00b      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
=======
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
<<<<<<< HEAD
 80049a4:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	4909      	ldr	r1, [pc, #36]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
=======
 8005008:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005018:	4909      	ldr	r1, [pc, #36]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
>>>>>>> fsm_rd_rfid
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00f      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
=======
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
 80049e0:	4986      	ldr	r1, [pc, #536]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005032:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503c:	e002      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800
 8005044:	4986      	ldr	r1, [pc, #536]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
<<<<<<< HEAD
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
=======
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
<<<<<<< HEAD
 80049f4:	4b81      	ldr	r3, [pc, #516]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a04:	497d      	ldr	r1, [pc, #500]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 8005058:	4b81      	ldr	r3, [pc, #516]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005068:	497d      	ldr	r1, [pc, #500]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
<<<<<<< HEAD
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d006      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80d6 	beq.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a20:	4b76      	ldr	r3, [pc, #472]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a75      	ldr	r2, [pc, #468]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fad2 	bl	8001fd4 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a34:	f7fd face 	bl	8001fd4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e195      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a46:	4b6d      	ldr	r3, [pc, #436]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x504>
=======
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d006      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80d6 	beq.w	8005230 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005084:	4b76      	ldr	r3, [pc, #472]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a75      	ldr	r2, [pc, #468]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fd faa2 	bl	80025d8 <HAL_GetTick>
 8005094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005098:	f7fd fa9e 	bl	80025d8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e195      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050aa:	4b6d      	ldr	r3, [pc, #436]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x504>
>>>>>>> fsm_rd_rfid

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
<<<<<<< HEAD
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d021      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d11d      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x572>
=======
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d021      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d11d      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x572>
>>>>>>> fsm_rd_rfid
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 8004a66:	4b65      	ldr	r3, [pc, #404]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a74:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a7a:	0e1b      	lsrs	r3, r3, #24
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	60fb      	str	r3, [r7, #12]
=======
 80050ca:	4b65      	ldr	r3, [pc, #404]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d8:	4b61      	ldr	r3, [pc, #388]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050de:	0e1b      	lsrs	r3, r3, #24
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	019a      	lsls	r2, r3, #6
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	4958      	ldr	r1, [pc, #352]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	019a      	lsls	r2, r3, #6
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	071b      	lsls	r3, r3, #28
 80050fe:	4958      	ldr	r1, [pc, #352]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> fsm_rd_rfid
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
<<<<<<< HEAD
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d004      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02e      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004acc:	d129      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
=======
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005124:	2b00      	cmp	r3, #0
 8005126:	d02e      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005130:	d129      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
>>>>>>> fsm_rd_rfid
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
<<<<<<< HEAD
 8004ace:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004adc:	4b47      	ldr	r3, [pc, #284]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae2:	0f1b      	lsrs	r3, r3, #28
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	60fb      	str	r3, [r7, #12]
=======
 8005132:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005140:	4b47      	ldr	r3, [pc, #284]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005146:	0f1b      	lsrs	r3, r3, #28
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
<<<<<<< HEAD
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	019a      	lsls	r2, r3, #6
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	071b      	lsls	r3, r3, #28
 8004b02:	493e      	ldr	r1, [pc, #248]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b0a:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b10:	f023 021f 	bic.w	r2, r3, #31
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	4938      	ldr	r1, [pc, #224]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	019a      	lsls	r2, r3, #6
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	431a      	orrs	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	071b      	lsls	r3, r3, #28
 8005166:	493e      	ldr	r1, [pc, #248]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800516e:	4b3c      	ldr	r3, [pc, #240]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	f023 021f 	bic.w	r2, r3, #31
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	3b01      	subs	r3, #1
 800517e:	4938      	ldr	r1, [pc, #224]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01d      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
=======
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01d      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
>>>>>>> fsm_rd_rfid
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
<<<<<<< HEAD
 8004b2e:	4b33      	ldr	r3, [pc, #204]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	0f1b      	lsrs	r3, r3, #28
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	60fb      	str	r3, [r7, #12]
=======
 8005192:	4b33      	ldr	r3, [pc, #204]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	0e1b      	lsrs	r3, r3, #24
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	019a      	lsls	r2, r3, #6
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	041b      	lsls	r3, r3, #16
 8004b56:	431a      	orrs	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	071b      	lsls	r3, r3, #28
 8004b62:	4926      	ldr	r1, [pc, #152]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	431a      	orrs	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4926      	ldr	r1, [pc, #152]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> fsm_rd_rfid
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
<<<<<<< HEAD
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d011      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
=======
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d011      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
>>>>>>> fsm_rd_rfid
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
<<<<<<< HEAD
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	019a      	lsls	r2, r3, #6
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	061b      	lsls	r3, r3, #24
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	491a      	ldr	r1, [pc, #104]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
=======
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	061b      	lsls	r3, r3, #24
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	071b      	lsls	r3, r3, #28
 80051f6:	491a      	ldr	r1, [pc, #104]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
>>>>>>> fsm_rd_rfid
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
<<<<<<< HEAD
 8004b9a:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fd fa15 	bl	8001fd4 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bae:	f7fd fa11 	bl	8001fd4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	; 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0d8      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x67e>
=======
 80051fe:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a17      	ldr	r2, [pc, #92]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520a:	f7fd f9e5 	bl	80025d8 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005212:	f7fd f9e1 	bl	80025d8 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b64      	cmp	r3, #100	; 0x64
 800521e:	d901      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e0d8      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x67e>
>>>>>>> fsm_rd_rfid
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
<<<<<<< HEAD
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	f040 80ce 	bne.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fd f9f8 	bl	8001fd4 <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004be6:	e00b      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004be8:	f7fd f9f4 	bl	8001fd4 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b64      	cmp	r3, #100	; 0x64
 8004bf4:	d904      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0bb      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c00:	4b5e      	ldr	r3, [pc, #376]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c0c:	d0ec      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
=======
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	f040 80ce 	bne.w	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005244:	f7fd f9c8 	bl	80025d8 <HAL_GetTick>
 8005248:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800524a:	e00b      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800524c:	f7fd f9c4 	bl	80025d8 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b64      	cmp	r3, #100	; 0x64
 8005258:	d904      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e0bb      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005264:	4b5e      	ldr	r3, [pc, #376]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800526c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005270:	d0ec      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
>>>>>>> fsm_rd_rfid

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
<<<<<<< HEAD
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02e      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d12a      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x75c>
=======
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800528e:	2b00      	cmp	r3, #0
 8005290:	d02e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d12a      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
>>>>>>> fsm_rd_rfid
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
<<<<<<< HEAD
 8004c36:	4b51      	ldr	r3, [pc, #324]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c44:	4b4d      	ldr	r3, [pc, #308]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	0f1b      	lsrs	r3, r3, #28
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	60fb      	str	r3, [r7, #12]
=======
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ae:	0f1b      	lsrs	r3, r3, #28
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
<<<<<<< HEAD
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	019a      	lsls	r2, r3, #6
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	061b      	lsls	r3, r3, #24
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	071b      	lsls	r3, r3, #28
 8004c6a:	4944      	ldr	r1, [pc, #272]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c72:	4b42      	ldr	r3, [pc, #264]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	493d      	ldr	r1, [pc, #244]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	019a      	lsls	r2, r3, #6
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	041b      	lsls	r3, r3, #16
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	061b      	lsls	r3, r3, #24
 80052c8:	431a      	orrs	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	4944      	ldr	r1, [pc, #272]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	021b      	lsls	r3, r3, #8
 80052e8:	493d      	ldr	r1, [pc, #244]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
<<<<<<< HEAD
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d022      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ca0:	d11d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7ae>
=======
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d022      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d11d      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
>>>>>>> fsm_rd_rfid
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb0:	4b32      	ldr	r3, [pc, #200]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	0f1b      	lsrs	r3, r3, #28
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	60fb      	str	r3, [r7, #12]
=======
 8005306:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	0e1b      	lsrs	r3, r3, #24
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005314:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	0f1b      	lsrs	r3, r3, #28
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
<<<<<<< HEAD
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	019a      	lsls	r2, r3, #6
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	041b      	lsls	r3, r3, #16
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	061b      	lsls	r3, r3, #24
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	4929      	ldr	r1, [pc, #164]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
=======
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	019a      	lsls	r2, r3, #6
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	4929      	ldr	r1, [pc, #164]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
>>>>>>> fsm_rd_rfid
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
<<<<<<< HEAD
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d028      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x80c>
=======
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d028      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
>>>>>>> fsm_rd_rfid
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
<<<<<<< HEAD
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	60fb      	str	r3, [r7, #12]
=======
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	0e1b      	lsrs	r3, r3, #24
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	0c1b      	lsrs	r3, r3, #16
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
<<<<<<< HEAD
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	019a      	lsls	r2, r3, #6
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	061b      	lsls	r3, r3, #24
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	071b      	lsls	r3, r3, #28
 8004d1e:	4917      	ldr	r1, [pc, #92]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4911      	ldr	r1, [pc, #68]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
=======
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	019a      	lsls	r2, r3, #6
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	431a      	orrs	r2, r3
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	061b      	lsls	r3, r3, #24
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	071b      	lsls	r3, r3, #28
 8005382:	4917      	ldr	r1, [pc, #92]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	4911      	ldr	r1, [pc, #68]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
>>>>>>> fsm_rd_rfid
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
<<<<<<< HEAD
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d48:	f7fd f944 	bl	8001fd4 <HAL_GetTick>
 8004d4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d50:	f7fd f940 	bl	8001fd4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e007      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6e:	d1ef      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x820>
=======
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ac:	f7fd f914 	bl	80025d8 <HAL_GetTick>
 80053b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053b4:	f7fd f910 	bl	80025d8 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	; 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e007      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d2:	d1ef      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
>>>>>>> fsm_rd_rfid
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800

08004d80 <HAL_SPI_Init>:
=======
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800

080053e4 <HAL_SPI_Init>:
>>>>>>> fsm_rd_rfid
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
=======
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
<<<<<<< HEAD
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e09d      	b.n	8004ece <HAL_SPI_Init+0x14e>
=======
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e09d      	b.n	8005532 <HAL_SPI_Init+0x14e>
>>>>>>> fsm_rd_rfid
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d108      	bne.n	8004dac <HAL_SPI_Init+0x2c>
=======
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <HAL_SPI_Init+0x2c>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da2:	d009      	beq.n	8004db8 <HAL_SPI_Init+0x38>
=======
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d009      	beq.n	800541c <HAL_SPI_Init+0x38>
>>>>>>> fsm_rd_rfid
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
 8004daa:	e005      	b.n	8004db8 <HAL_SPI_Init+0x38>
=======
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
 800540e:	e005      	b.n	800541c <HAL_SPI_Init+0x38>
>>>>>>> fsm_rd_rfid
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	615a      	str	r2, [r3, #20]
=======
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
=======
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
>>>>>>> fsm_rd_rfid

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fa14 	bl	8001200 <HAL_SPI_MspInit>
=======
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc faa6 	bl	8001988 <HAL_SPI_MspInit>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004df8:	d902      	bls.n	8004e00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e002      	b.n	8004e06 <HAL_SPI_Init+0x86>
=======
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545c:	d902      	bls.n	8005464 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e002      	b.n	800546a <HAL_SPI_Init+0x86>
>>>>>>> fsm_rd_rfid
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
<<<<<<< HEAD
 8004e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e04:	60fb      	str	r3, [r7, #12]
=======
 8005464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005468:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
<<<<<<< HEAD
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e0e:	d007      	beq.n	8004e20 <HAL_SPI_Init+0xa0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005472:	d007      	beq.n	8005484 <HAL_SPI_Init+0xa0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> fsm_rd_rfid
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	ea42 0103 	orr.w	r1, r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
=======
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
<<<<<<< HEAD
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	f003 0204 	and.w	r2, r3, #4
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e9c:	ea42 0103 	orr.w	r1, r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
=======
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0204 	and.w	r2, r3, #4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <HAL_SPI_IRQHandler>:
=======
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_SPI_Transmit+0x22>
 8005558:	2302      	movs	r3, #2
 800555a:	e158      	b.n	800580e <HAL_SPI_Transmit+0x2d4>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005564:	f7fd f838 	bl	80025d8 <HAL_GetTick>
 8005568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800557e:	e13d      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x52>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005590:	e134      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d10f      	bne.n	80055fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d007      	beq.n	800561c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005624:	d94b      	bls.n	80056be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0xfa>
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d13e      	bne.n	80056b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005658:	e02b      	b.n	80056b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d112      	bne.n	800568e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568c:	e011      	b.n	80056b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568e:	f7fc ffa3 	bl	80025d8 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d803      	bhi.n	80056a6 <HAL_SPI_Transmit+0x16c>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Transmit+0x172>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056b0:	e0a4      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ce      	bne.n	800565a <HAL_SPI_Transmit+0x120>
 80056bc:	e07c      	b.n	80057b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <HAL_SPI_Transmit+0x192>
 80056c6:	8afb      	ldrh	r3, [r7, #22]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d170      	bne.n	80057ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d912      	bls.n	80056fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b02      	subs	r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fa:	e058      	b.n	80057ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005722:	e044      	b.n	80057ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d12b      	bne.n	800578a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d912      	bls.n	8005762 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b02      	subs	r3, #2
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005760:	e025      	b.n	80057ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	7812      	ldrb	r2, [r2, #0]
 800576e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005788:	e011      	b.n	80057ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800578a:	f7fc ff25 	bl	80025d8 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d803      	bhi.n	80057a2 <HAL_SPI_Transmit+0x268>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_Transmit+0x26e>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d102      	bne.n	80057ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057ac:	e026      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1b5      	bne.n	8005724 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	6839      	ldr	r1, [r7, #0]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fc77 	bl	80060b0 <SPI_EndRxTxTransaction>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057d6:	2300      	movs	r3, #0
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e000      	b.n	80057fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80057fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800580c:	7ffb      	ldrb	r3, [r7, #31]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08a      	sub	sp, #40	; 0x28
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005824:	2301      	movs	r3, #1
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_SPI_TransmitReceive+0x26>
 8005838:	2302      	movs	r3, #2
 800583a:	e1fb      	b.n	8005c34 <HAL_SPI_TransmitReceive+0x41e>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005844:	f7fc fec8 	bl	80025d8 <HAL_GetTick>
 8005848:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005850:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005860:	7efb      	ldrb	r3, [r7, #27]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d00e      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x6e>
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586c:	d106      	bne.n	800587c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d102      	bne.n	800587c <HAL_SPI_TransmitReceive+0x66>
 8005876:	7efb      	ldrb	r3, [r7, #27]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d003      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800587c:	2302      	movs	r3, #2
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005882:	e1cd      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x80>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x80>
 8005890:	887b      	ldrh	r3, [r7, #2]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d103      	bne.n	800589e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800589c:	e1c0      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d003      	beq.n	80058b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2205      	movs	r2, #5
 80058ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	887a      	ldrh	r2, [r7, #2]
 80058c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	887a      	ldrh	r2, [r7, #2]
 80058d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	887a      	ldrh	r2, [r7, #2]
 80058de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058f4:	d802      	bhi.n	80058fc <HAL_SPI_TransmitReceive+0xe6>
 80058f6:	8a3b      	ldrh	r3, [r7, #16]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d908      	bls.n	800590e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e007      	b.n	800591e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800591c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d007      	beq.n	800593c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005944:	d97c      	bls.n	8005a40 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x13e>
 800594e:	8a7b      	ldrh	r3, [r7, #18]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d169      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005978:	e056      	b.n	8005a28 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b02      	cmp	r3, #2
 8005986:	d11b      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1aa>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x1aa>
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	2b01      	cmp	r3, #1
 8005996:	d113      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d11c      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0x1f2>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d016      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e4:	b292      	uxth	r2, r2
 80059e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a08:	f7fc fde6 	bl	80025d8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d807      	bhi.n	8005a28 <HAL_SPI_TransmitReceive+0x212>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d003      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a26:	e0fb      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1a3      	bne.n	800597a <HAL_SPI_TransmitReceive+0x164>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d19d      	bne.n	800597a <HAL_SPI_TransmitReceive+0x164>
 8005a3e:	e0df      	b.n	8005c00 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_SPI_TransmitReceive+0x23a>
 8005a48:	8a7b      	ldrh	r3, [r7, #18]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	f040 80cb 	bne.w	8005be6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d912      	bls.n	8005a80 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	881a      	ldrh	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b02      	subs	r3, #2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a7e:	e0b2      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	1c5a      	adds	r2, r3, #1
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa6:	e09e      	b.n	8005be6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d134      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x30a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02f      	beq.n	8005b20 <HAL_SPI_TransmitReceive+0x30a>
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d12c      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d912      	bls.n	8005af6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b02      	subs	r3, #2
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af4:	e012      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	330c      	adds	r3, #12
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d148      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x3aa>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d042      	beq.n	8005bc0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d923      	bls.n	8005b8e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	b292      	uxth	r2, r2
 8005b52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	1c9a      	adds	r2, r3, #2
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b02      	subs	r3, #2
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d81f      	bhi.n	8005bbc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b8a:	605a      	str	r2, [r3, #4]
 8005b8c:	e016      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f103 020c 	add.w	r2, r3, #12
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bc0:	f7fc fd0a 	bl	80025d8 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d803      	bhi.n	8005bd8 <HAL_SPI_TransmitReceive+0x3c2>
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d102      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x3c8>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005be4:	e01c      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f47f af5b 	bne.w	8005aa8 <HAL_SPI_TransmitReceive+0x292>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f47f af54 	bne.w	8005aa8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fa53 	bl	80060b0 <SPI_EndRxTxTransaction>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d006      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	661a      	str	r2, [r3, #96]	; 0x60
 8005c1c:	e000      	b.n	8005c20 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	; 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_SPI_IRQHandler>:
>>>>>>> fsm_rd_rfid
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
    return;
 8004f1a:	e0d7      	b.n	80050cc <HAL_SPI_IRQHandler+0x1f4>
=======
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10f      	bne.n	8005c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00a      	beq.n	8005c80 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d004      	beq.n	8005c80 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
    return;
 8005c7e:	e0d7      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> fsm_rd_rfid
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
<<<<<<< HEAD
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x66>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	09db      	lsrs	r3, r3, #7
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d004      	beq.n	8004f3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
    return;
 8004f3c:	e0c6      	b.n	80050cc <HAL_SPI_IRQHandler+0x1f4>
=======
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	085b      	lsrs	r3, r3, #1
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x66>
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	09db      	lsrs	r3, r3, #7
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
    return;
 8005ca0:	e0c6      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> fsm_rd_rfid
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
<<<<<<< HEAD
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_SPI_IRQHandler+0x8c>
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	0a1b      	lsrs	r3, r3, #8
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80b4 	beq.w	80050cc <HAL_SPI_IRQHandler+0x1f4>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 80ad 	beq.w	80050cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d023      	beq.n	8004fc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d011      	beq.n	8004fae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8e:	f043 0204 	orr.w	r2, r3, #4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	e00b      	b.n	8004fc6 <HAL_SPI_IRQHandler+0xee>
=======
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	095b      	lsrs	r3, r3, #5
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <HAL_SPI_IRQHandler+0x8c>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	099b      	lsrs	r3, r3, #6
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80b4 	beq.w	8005e30 <HAL_SPI_IRQHandler+0x1f4>
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80ad 	beq.w	8005e30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	099b      	lsrs	r3, r3, #6
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d023      	beq.n	8005d2a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d011      	beq.n	8005d12 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	e00b      	b.n	8005d2a <HAL_SPI_IRQHandler+0xee>
>>>>>>> fsm_rd_rfid
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 8004fae:	2300      	movs	r3, #0
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	693b      	ldr	r3, [r7, #16]
        return;
 8004fc4:	e082      	b.n	80050cc <HAL_SPI_IRQHandler+0x1f4>
=======
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
        return;
 8005d28:	e082      	b.n	8005e30 <HAL_SPI_IRQHandler+0x1f4>
>>>>>>> fsm_rd_rfid
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
<<<<<<< HEAD
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d014      	beq.n	8004ffc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd6:	f043 0201 	orr.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
=======
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d014      	beq.n	8005d60 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
<<<<<<< HEAD
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500c:	f043 0208 	orr.w	r2, r3, #8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04f      	beq.n	80050ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005038:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_SPI_IRQHandler+0x17e>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d034      	beq.n	80050c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0203 	bic.w	r2, r2, #3
 8005064:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_SPI_IRQHandler+0x1ba>
=======
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d70:	f043 0208 	orr.w	r2, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d04f      	beq.n	8005e2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d9c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_SPI_IRQHandler+0x17e>
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d034      	beq.n	8005e24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0203 	bic.w	r2, r2, #3
 8005dc8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1ba>
>>>>>>> fsm_rd_rfid
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <HAL_SPI_IRQHandler+0x1fc>)
 8005074:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe f932 	bl	80032e4 <HAL_DMA_Abort_IT>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	661a      	str	r2, [r3, #96]	; 0x60
=======
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_SPI_IRQHandler+0x1fc>)
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fd fd98 	bl	8003914 <HAL_DMA_Abort_IT>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	661a      	str	r2, [r3, #96]	; 0x60
>>>>>>> fsm_rd_rfid
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< HEAD
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_SPI_IRQHandler+0x1f0>
=======
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
>>>>>>> fsm_rd_rfid
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <HAL_SPI_IRQHandler+0x1fc>)
 80050a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe f91c 	bl	80032e4 <HAL_DMA_Abort_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80050be:	e003      	b.n	80050c8 <HAL_SPI_IRQHandler+0x1f0>
=======
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	4a0d      	ldr	r2, [pc, #52]	; (8005e38 <HAL_SPI_IRQHandler+0x1fc>)
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd fd82 	bl	8003914 <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005e22:	e003      	b.n	8005e2c <HAL_SPI_IRQHandler+0x1f0>
>>>>>>> fsm_rd_rfid
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
<<<<<<< HEAD
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f809 	bl	80050d8 <HAL_SPI_ErrorCallback>
=======
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f809 	bl	8005e3c <HAL_SPI_ErrorCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< HEAD
 80050c6:	e000      	b.n	80050ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80050c8:	bf00      	nop
    return;
 80050ca:	bf00      	nop
  }
}
 80050cc:	3720      	adds	r7, #32
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	080050ed 	.word	0x080050ed

080050d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
=======
 8005e2a:	e000      	b.n	8005e2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e2c:	bf00      	nop
    return;
 8005e2e:	bf00      	nop
  }
}
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	08005e51 	.word	0x08005e51

08005e3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ffe5 	bl	8005e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e8c:	f7fc fba4 	bl	80025d8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	4413      	add	r3, r2
 8005e9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e9c:	f7fc fb9c 	bl	80025d8 <HAL_GetTick>
 8005ea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ea2:	4b39      	ldr	r3, [pc, #228]	; (8005f88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	015b      	lsls	r3, r3, #5
 8005ea8:	0d1b      	lsrs	r3, r3, #20
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	fb02 f303 	mul.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eb2:	e054      	b.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d050      	beq.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ebc:	f7fc fb8c 	bl	80025d8 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d13d      	bne.n	8005f4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eea:	d111      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef4:	d004      	beq.n	8005f00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efe:	d107      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f18:	d10f      	bne.n	8005f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e017      	b.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4013      	ands	r3, r2
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	bf0c      	ite	eq
 8005f6e:	2301      	moveq	r3, #1
 8005f70:	2300      	movne	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	461a      	mov	r2, r3
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d19b      	bne.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000058 	.word	0x20000058

08005f8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
 8005f98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f9a:	f7fc fb1d 	bl	80025d8 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005faa:	f7fc fb15 	bl	80025d8 <HAL_GetTick>
 8005fae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005fb0:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	0d1b      	lsrs	r3, r3, #20
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fc8:	e062      	b.n	8006090 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fd0:	d109      	bne.n	8005fe6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005fe4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d050      	beq.n	8006090 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fee:	f7fc faf3 	bl	80025d8 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d902      	bls.n	8006004 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d13d      	bne.n	8006080 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006012:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601c:	d111      	bne.n	8006042 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006026:	d004      	beq.n	8006032 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006030:	d107      	bne.n	8006042 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006040:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604a:	d10f      	bne.n	800606c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e010      	b.n	80060a2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3b01      	subs	r3, #1
 800608e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689a      	ldr	r2, [r3, #8]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d194      	bne.n	8005fca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000058 	.word	0x20000058

080060b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff ff5f 	bl	8005f8c <SPI_WaitFifoStateUntilTimeout>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	f043 0220 	orr.w	r2, r3, #32
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e027      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff fec4 	bl	8005e7c <SPI_WaitFlagStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e014      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2200      	movs	r2, #0
 8006112:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff ff38 	bl	8005f8c <SPI_WaitFifoStateUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d007      	beq.n	8006132 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e000      	b.n	8006134 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e049      	b.n	80061e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb ff6e 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f000 ff3c 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d001      	beq.n	8006204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e04c      	b.n	800629e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a26      	ldr	r2, [pc, #152]	; (80062ac <HAL_TIM_Base_Start+0xc0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d022      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d01d      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a22      	ldr	r2, [pc, #136]	; (80062b0 <HAL_TIM_Base_Start+0xc4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_TIM_Base_Start+0xc8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a1f      	ldr	r2, [pc, #124]	; (80062b8 <HAL_TIM_Base_Start+0xcc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00e      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <HAL_TIM_Base_Start+0xd0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a1c      	ldr	r2, [pc, #112]	; (80062c0 <HAL_TIM_Base_Start+0xd4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_TIM_Base_Start+0x70>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_TIM_Base_Start+0xd8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d115      	bne.n	8006288 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_TIM_Base_Start+0xdc>)
 8006264:	4013      	ands	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b06      	cmp	r3, #6
 800626c:	d015      	beq.n	800629a <HAL_TIM_Base_Start+0xae>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006274:	d011      	beq.n	800629a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006286:	e008      	b.n	800629a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	e000      	b.n	800629c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40001800 	.word	0x40001800
 80062c8:	00010007 	.word	0x00010007

080062cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
>>>>>>> fsm_rd_rfid
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ffe5 	bl	80050d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e049      	b.n	80051bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7fc fc7d 	bl	8001a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f000 ff3b 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d001      	beq.n	80051dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e04c      	b.n	8005276 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <HAL_TIM_Base_Start+0xc0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d022      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f6:	d01d      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a22      	ldr	r2, [pc, #136]	; (8005288 <HAL_TIM_Base_Start+0xc4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d018      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a21      	ldr	r2, [pc, #132]	; (800528c <HAL_TIM_Base_Start+0xc8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a1f      	ldr	r2, [pc, #124]	; (8005290 <HAL_TIM_Base_Start+0xcc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00e      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_Base_Start+0xd0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIM_Base_Start+0xd4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_TIM_Base_Start+0x70>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <HAL_TIM_Base_Start+0xd8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d115      	bne.n	8005260 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_TIM_Base_Start+0xdc>)
 800523c:	4013      	ands	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b06      	cmp	r3, #6
 8005244:	d015      	beq.n	8005272 <HAL_TIM_Base_Start+0xae>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524c:	d011      	beq.n	8005272 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525e:	e008      	b.n	8005272 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e000      	b.n	8005274 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005272:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40010400 	.word	0x40010400
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800
 80052a0:	00010007 	.word	0x00010007

080052a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a1a      	ldr	r2, [r3, #32]
 80052b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <HAL_TIM_Base_Stop+0x38>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a1a      	ldr	r2, [r3, #32]
 80052c2:	f240 4344 	movw	r3, #1092	; 0x444
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_Base_Stop+0x38>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0201 	bic.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <HAL_TIM_Base_Start_IT>:
=======
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	f241 1311 	movw	r3, #4369	; 0x1111
 80062de:	4013      	ands	r3, r2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10f      	bne.n	8006304 <HAL_TIM_Base_Stop+0x38>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6a1a      	ldr	r2, [r3, #32]
 80062ea:	f240 4344 	movw	r3, #1092	; 0x444
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d107      	bne.n	8006304 <HAL_TIM_Base_Stop+0x38>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIM_Base_Start_IT>:
>>>>>>> fsm_rd_rfid
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
=======
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d001      	beq.n	800530c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e054      	b.n	80053b6 <HAL_TIM_Base_Start_IT+0xc2>
=======
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d001      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e054      	b.n	80063de <HAL_TIM_Base_Start_IT+0xc2>
>>>>>>> fsm_rd_rfid
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0201 	orr.w	r2, r2, #1
 8005322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a26      	ldr	r2, [pc, #152]	; (80053c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d022      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005336:	d01d      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d018      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a21      	ldr	r2, [pc, #132]	; (80053cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d013      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00e      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d009      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_TIM_Base_Start_IT+0x80>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d115      	bne.n	80053a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_TIM_Base_Start_IT+0xec>)
 800537c:	4013      	ands	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b06      	cmp	r3, #6
 8005384:	d015      	beq.n	80053b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d011      	beq.n	80053b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0201 	orr.w	r2, r2, #1
 800539c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539e:	e008      	b.n	80053b2 <HAL_TIM_Base_Start_IT+0xbe>
=======
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a26      	ldr	r2, [pc, #152]	; (80063ec <HAL_TIM_Base_Start_IT+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d01d      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <HAL_TIM_Base_Start_IT+0xe0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_TIM_Base_Start_IT+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIM_Base_Start_IT+0x80>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <HAL_TIM_Base_Start_IT+0xe8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d115      	bne.n	80063c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	4b19      	ldr	r3, [pc, #100]	; (8006408 <HAL_TIM_Base_Start_IT+0xec>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b06      	cmp	r3, #6
 80063ac:	d015      	beq.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b4:	d011      	beq.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c6:	e008      	b.n	80063da <HAL_TIM_Base_Start_IT+0xbe>
>>>>>>> fsm_rd_rfid
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	e000      	b.n	80053b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	bf00      	nop
=======
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e000      	b.n	80063dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	bf00      	nop
>>>>>>> fsm_rd_rfid
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40010400 	.word	0x40010400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40001800 	.word	0x40001800
 80053e0:	00010007 	.word	0x00010007

080053e4 <HAL_TIM_Base_Stop_IT>:
=======
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40000400 	.word	0x40000400
 80063f4:	40000800 	.word	0x40000800
 80063f8:	40000c00 	.word	0x40000c00
 80063fc:	40010400 	.word	0x40010400
 8006400:	40014000 	.word	0x40014000
 8006404:	40001800 	.word	0x40001800
 8006408:	00010007 	.word	0x00010007

0800640c <HAL_TIM_Base_Stop_IT>:
>>>>>>> fsm_rd_rfid
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
=======
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	f241 1311 	movw	r3, #4369	; 0x1111
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <HAL_TIM_Base_Stop_IT+0x48>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	f240 4344 	movw	r3, #1092	; 0x444
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <HAL_TIM_Base_Stop_IT+0x48>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_OC_Init>:
=======
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0201 	bic.w	r2, r2, #1
 8006422:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	f241 1311 	movw	r3, #4369	; 0x1111
 800642e:	4013      	ands	r3, r2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10f      	bne.n	8006454 <HAL_TIM_Base_Stop_IT+0x48>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	f240 4344 	movw	r3, #1092	; 0x444
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <HAL_TIM_Base_Stop_IT+0x48>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_TIM_OC_Init>:
>>>>>>> fsm_rd_rfid
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e049      	b.n	80054e8 <HAL_TIM_OC_Init+0xa6>
=======
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e049      	b.n	8006510 <HAL_TIM_OC_Init+0xa6>
>>>>>>> fsm_rd_rfid
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> fsm_rd_rfid
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
<<<<<<< HEAD
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f841 	bl	80054f0 <HAL_TIM_OC_MspInit>
=======
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f841 	bl	8006518 <HAL_TIM_OC_MspInit>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3304      	adds	r3, #4
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fda5 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_OC_MspInit>:
=======
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f000 fda5 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_TIM_OC_MspInit>:
>>>>>>> fsm_rd_rfid
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
=======
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_PWM_Init>:
=======
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_TIM_PWM_Init>:
>>>>>>> fsm_rd_rfid
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e049      	b.n	80055aa <HAL_TIM_PWM_Init+0xa6>
=======
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e049      	b.n	80065d2 <HAL_TIM_PWM_Init+0xa6>
>>>>>>> fsm_rd_rfid
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> fsm_rd_rfid
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc fae4 	bl	8001af8 <HAL_TIM_PWM_MspInit>
=======
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fb fdcc 	bl	80020f0 <HAL_TIM_PWM_MspInit>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fd44 	bl	8005fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_TIM_PWM_Start>:
=======
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	4619      	mov	r1, r3
 800656a:	4610      	mov	r0, r2
 800656c:	f000 fd44 	bl	8006ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
	...

080065dc <HAL_TIM_PWM_Start>:
>>>>>>> fsm_rd_rfid
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
=======
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_TIM_PWM_Start+0x24>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	e03c      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d109      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x3e>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e02f      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d109      	bne.n	800560c <HAL_TIM_PWM_Start+0x58>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b01      	cmp	r3, #1
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e022      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d109      	bne.n	8005626 <HAL_TIM_PWM_Start+0x72>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	bf14      	ite	ne
 800561e:	2301      	movne	r3, #1
 8005620:	2300      	moveq	r3, #0
 8005622:	b2db      	uxtb	r3, r3
 8005624:	e015      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b10      	cmp	r3, #16
 800562a:	d109      	bne.n	8005640 <HAL_TIM_PWM_Start+0x8c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	e008      	b.n	8005652 <HAL_TIM_PWM_Start+0x9e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e092      	b.n	8005780 <HAL_TIM_PWM_Start+0x1cc>
=======
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_TIM_PWM_Start+0x24>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e03c      	b.n	800667a <HAL_TIM_PWM_Start+0x9e>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b04      	cmp	r3, #4
 8006604:	d109      	bne.n	800661a <HAL_TIM_PWM_Start+0x3e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b01      	cmp	r3, #1
 8006610:	bf14      	ite	ne
 8006612:	2301      	movne	r3, #1
 8006614:	2300      	moveq	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	e02f      	b.n	800667a <HAL_TIM_PWM_Start+0x9e>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d109      	bne.n	8006634 <HAL_TIM_PWM_Start+0x58>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b01      	cmp	r3, #1
 800662a:	bf14      	ite	ne
 800662c:	2301      	movne	r3, #1
 800662e:	2300      	moveq	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	e022      	b.n	800667a <HAL_TIM_PWM_Start+0x9e>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	2b0c      	cmp	r3, #12
 8006638:	d109      	bne.n	800664e <HAL_TIM_PWM_Start+0x72>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b01      	cmp	r3, #1
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	e015      	b.n	800667a <HAL_TIM_PWM_Start+0x9e>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b10      	cmp	r3, #16
 8006652:	d109      	bne.n	8006668 <HAL_TIM_PWM_Start+0x8c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e008      	b.n	800667a <HAL_TIM_PWM_Start+0x9e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e092      	b.n	80067a8 <HAL_TIM_PWM_Start+0x1cc>
>>>>>>> fsm_rd_rfid
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <HAL_TIM_PWM_Start+0xb6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	e023      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d104      	bne.n	800567a <HAL_TIM_PWM_Start+0xc6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	e01b      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d104      	bne.n	800568a <HAL_TIM_PWM_Start+0xd6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	e013      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b0c      	cmp	r3, #12
 800568e:	d104      	bne.n	800569a <HAL_TIM_PWM_Start+0xe6>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005698:	e00b      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b10      	cmp	r3, #16
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0xf6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a8:	e003      	b.n	80056b2 <HAL_TIM_PWM_Start+0xfe>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f820 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a30      	ldr	r2, [pc, #192]	; (8005788 <HAL_TIM_PWM_Start+0x1d4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_PWM_Start+0x120>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2f      	ldr	r2, [pc, #188]	; (800578c <HAL_TIM_PWM_Start+0x1d8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_PWM_Start+0x124>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e000      	b.n	80056da <HAL_TIM_PWM_Start+0x126>
 80056d8:	2300      	movs	r3, #0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d104      	bne.n	8006692 <HAL_TIM_PWM_Start+0xb6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006690:	e023      	b.n	80066da <HAL_TIM_PWM_Start+0xfe>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b04      	cmp	r3, #4
 8006696:	d104      	bne.n	80066a2 <HAL_TIM_PWM_Start+0xc6>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a0:	e01b      	b.n	80066da <HAL_TIM_PWM_Start+0xfe>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d104      	bne.n	80066b2 <HAL_TIM_PWM_Start+0xd6>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2202      	movs	r2, #2
 80066ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b0:	e013      	b.n	80066da <HAL_TIM_PWM_Start+0xfe>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b0c      	cmp	r3, #12
 80066b6:	d104      	bne.n	80066c2 <HAL_TIM_PWM_Start+0xe6>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c0:	e00b      	b.n	80066da <HAL_TIM_PWM_Start+0xfe>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start+0xf6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066d0:	e003      	b.n	80066da <HAL_TIM_PWM_Start+0xfe>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2202      	movs	r2, #2
 80066d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2201      	movs	r2, #1
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f001 f820 	bl	8007728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	; (80067b0 <HAL_TIM_PWM_Start+0x1d4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_TIM_PWM_Start+0x120>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <HAL_TIM_PWM_Start+0x1d8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_PWM_Start+0x124>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <HAL_TIM_PWM_Start+0x126>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006714:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> fsm_rd_rfid
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a25      	ldr	r2, [pc, #148]	; (8005788 <HAL_TIM_PWM_Start+0x1d4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d01d      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_PWM_Start+0x1dc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_TIM_PWM_Start+0x1e0>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_TIM_PWM_Start+0x1e4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_TIM_PWM_Start+0x1d8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_TIM_PWM_Start+0x1e8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIM_PWM_Start+0x18a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_TIM_PWM_Start+0x1ec>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d115      	bne.n	800576a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_TIM_PWM_Start+0x1f0>)
 8005746:	4013      	ands	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d015      	beq.n	800577c <HAL_TIM_PWM_Start+0x1c8>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d011      	beq.n	800577c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	e008      	b.n	800577c <HAL_TIM_PWM_Start+0x1c8>
=======
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a25      	ldr	r2, [pc, #148]	; (80067b0 <HAL_TIM_PWM_Start+0x1d4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d01d      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a22      	ldr	r2, [pc, #136]	; (80067b8 <HAL_TIM_PWM_Start+0x1dc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a20      	ldr	r2, [pc, #128]	; (80067bc <HAL_TIM_PWM_Start+0x1e0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <HAL_TIM_PWM_Start+0x1e4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_TIM_PWM_Start+0x1d8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <HAL_TIM_PWM_Start+0x1e8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIM_PWM_Start+0x18a>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a19      	ldr	r2, [pc, #100]	; (80067c8 <HAL_TIM_PWM_Start+0x1ec>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d115      	bne.n	8006792 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	4b17      	ldr	r3, [pc, #92]	; (80067cc <HAL_TIM_PWM_Start+0x1f0>)
 800676e:	4013      	ands	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d015      	beq.n	80067a4 <HAL_TIM_PWM_Start+0x1c8>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677e:	d011      	beq.n	80067a4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006790:	e008      	b.n	80067a4 <HAL_TIM_PWM_Start+0x1c8>
>>>>>>> fsm_rd_rfid
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f042 0201 	orr.w	r2, r2, #1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e000      	b.n	800577e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	bf00      	nop
=======
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0201 	orr.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e000      	b.n	80067a6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a4:	bf00      	nop
>>>>>>> fsm_rd_rfid
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40010000 	.word	0x40010000
 800578c:	40010400 	.word	0x40010400
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40014000 	.word	0x40014000
 80057a0:	40001800 	.word	0x40001800
 80057a4:	00010007 	.word	0x00010007

080057a8 <HAL_TIM_PWM_Stop>:
=======
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40010000 	.word	0x40010000
 80067b4:	40010400 	.word	0x40010400
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40014000 	.word	0x40014000
 80067c8:	40001800 	.word	0x40001800
 80067cc:	00010007 	.word	0x00010007

080067d0 <HAL_TIM_PWM_Stop>:
>>>>>>> fsm_rd_rfid
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
=======
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
<<<<<<< HEAD
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2200      	movs	r2, #0
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 ffa0 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_TIM_PWM_Stop+0xf8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_PWM_Stop+0x2c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <HAL_TIM_PWM_Stop+0xfc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_PWM_Stop+0x30>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_TIM_PWM_Stop+0x32>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d017      	beq.n	800580e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10f      	bne.n	800580e <HAL_TIM_PWM_Stop+0x66>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	f240 4344 	movw	r3, #1092	; 0x444
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <HAL_TIM_PWM_Stop+0x66>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2200      	movs	r2, #0
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 ffa0 	bl	8007728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a36      	ldr	r2, [pc, #216]	; (80068c8 <HAL_TIM_PWM_Stop+0xf8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIM_PWM_Stop+0x2c>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a35      	ldr	r2, [pc, #212]	; (80068cc <HAL_TIM_PWM_Stop+0xfc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_PWM_Stop+0x30>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_TIM_PWM_Stop+0x32>
 8006800:	2300      	movs	r3, #0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a1a      	ldr	r2, [r3, #32]
 800680c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006810:	4013      	ands	r3, r2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10f      	bne.n	8006836 <HAL_TIM_PWM_Stop+0x66>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a1a      	ldr	r2, [r3, #32]
 800681c:	f240 4344 	movw	r3, #1092	; 0x444
 8006820:	4013      	ands	r3, r2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d107      	bne.n	8006836 <HAL_TIM_PWM_Stop+0x66>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> fsm_rd_rfid
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
<<<<<<< HEAD
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6a1a      	ldr	r2, [r3, #32]
 8005814:	f241 1311 	movw	r3, #4369	; 0x1111
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <HAL_TIM_PWM_Stop+0x96>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	f240 4344 	movw	r3, #1092	; 0x444
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <HAL_TIM_PWM_Stop+0x96>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_TIM_PWM_Stop+0xa6>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	e023      	b.n	8005896 <HAL_TIM_PWM_Stop+0xee>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b04      	cmp	r3, #4
 8005852:	d104      	bne.n	800585e <HAL_TIM_PWM_Stop+0xb6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800585c:	e01b      	b.n	8005896 <HAL_TIM_PWM_Stop+0xee>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Stop+0xc6>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586c:	e013      	b.n	8005896 <HAL_TIM_PWM_Stop+0xee>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b0c      	cmp	r3, #12
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Stop+0xd6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800587c:	e00b      	b.n	8005896 <HAL_TIM_PWM_Stop+0xee>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b10      	cmp	r3, #16
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Stop+0xe6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800588c:	e003      	b.n	8005896 <HAL_TIM_PWM_Stop+0xee>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40010400 	.word	0x40010400

080058a8 <HAL_TIM_IRQHandler>:
=======
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10f      	bne.n	8006866 <HAL_TIM_PWM_Stop+0x96>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	f240 4344 	movw	r3, #1092	; 0x444
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <HAL_TIM_PWM_Stop+0x96>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d104      	bne.n	8006876 <HAL_TIM_PWM_Stop+0xa6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006874:	e023      	b.n	80068be <HAL_TIM_PWM_Stop+0xee>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b04      	cmp	r3, #4
 800687a:	d104      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xb6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006884:	e01b      	b.n	80068be <HAL_TIM_PWM_Stop+0xee>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b08      	cmp	r3, #8
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Stop+0xc6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	e013      	b.n	80068be <HAL_TIM_PWM_Stop+0xee>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b0c      	cmp	r3, #12
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0xd6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a4:	e00b      	b.n	80068be <HAL_TIM_PWM_Stop+0xee>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Stop+0xe6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b4:	e003      	b.n	80068be <HAL_TIM_PWM_Stop+0xee>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40010400 	.word	0x40010400

080068d0 <HAL_TIM_IRQHandler>:
>>>>>>> fsm_rd_rfid
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0202 	mvn.w	r2, #2
 80058d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x4a>
=======
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d122      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d11b      	bne.n	800692c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f06f 0202 	mvn.w	r2, #2
 80068fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> fsm_rd_rfid
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fb52 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x56>
=======
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb52 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006918:	e005      	b.n	8006926 <HAL_TIM_IRQHandler+0x56>
>>>>>>> fsm_rd_rfid
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fb44 	bl	8005f80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fb55 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
=======
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fb44 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb55 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
>>>>>>> fsm_rd_rfid
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b04      	cmp	r3, #4
 8005910:	d122      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b04      	cmp	r3, #4
 800591e:	d11b      	bne.n	8005958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0204 	mvn.w	r2, #4
 8005928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2202      	movs	r2, #2
 800592e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_TIM_IRQHandler+0x9e>
=======
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b04      	cmp	r3, #4
 8006938:	d122      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0304 	and.w	r3, r3, #4
 8006944:	2b04      	cmp	r3, #4
 8006946:	d11b      	bne.n	8006980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0204 	mvn.w	r2, #4
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2202      	movs	r2, #2
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fb28 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005944:	e005      	b.n	8005952 <HAL_TIM_IRQHandler+0xaa>
=======
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fb28 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fb1a 	bl	8005f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb2b 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
=======
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fb1a 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fb2b 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
>>>>>>> fsm_rd_rfid
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b08      	cmp	r3, #8
 8005964:	d122      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0308 	and.w	r3, r3, #8
 8005970:	2b08      	cmp	r3, #8
 8005972:	d11b      	bne.n	80059ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f06f 0208 	mvn.w	r2, #8
 800597c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2204      	movs	r2, #4
 8005982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_TIM_IRQHandler+0xf2>
=======
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b08      	cmp	r3, #8
 800698c:	d122      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d11b      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f06f 0208 	mvn.w	r2, #8
 80069a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2204      	movs	r2, #4
 80069aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fafe 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 8005998:	e005      	b.n	80059a6 <HAL_TIM_IRQHandler+0xfe>
=======
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fafe 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 80069c0:	e005      	b.n	80069ce <HAL_TIM_IRQHandler+0xfe>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 faf0 	bl	8005f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb01 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
=======
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 faf0 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb01 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	771a      	strb	r2, [r3, #28]
>>>>>>> fsm_rd_rfid
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b10      	cmp	r3, #16
 80059b8:	d122      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d11b      	bne.n	8005a00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x146>
=======
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	2b10      	cmp	r3, #16
 80069e0:	d122      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d11b      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0210 	mvn.w	r2, #16
 80069f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2208      	movs	r2, #8
 80069fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_TIM_IRQHandler+0x146>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fad4 	bl	8005f94 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x152>
=======
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fad4 	bl	8006fbc <HAL_TIM_IC_CaptureCallback>
 8006a14:	e005      	b.n	8006a22 <HAL_TIM_IRQHandler+0x152>
>>>>>>> fsm_rd_rfid
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fac6 	bl	8005f80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fad7 	bl	8005fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
=======
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fac6 	bl	8006fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fad7 	bl	8006fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
>>>>>>> fsm_rd_rfid
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d10e      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0201 	mvn.w	r2, #1
 8005a24:	611a      	str	r2, [r3, #16]
=======
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0201 	mvn.w	r2, #1
 8006a4c:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc f942 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
=======
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fb fc2a 	bl	80022a8 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b80      	cmp	r3, #128	; 0x80
 8005a38:	d10e      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d107      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a50:	611a      	str	r2, [r3, #16]
=======
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a78:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 ff12 	bl	800687c <HAL_TIMEx_BreakCallback>
=======
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 ff12 	bl	80078a4 <HAL_TIMEx_BreakCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
<<<<<<< HEAD
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a66:	d10e      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d107      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a7e:	611a      	str	r2, [r3, #16]
=======
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8e:	d10e      	bne.n	8006aae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d107      	bne.n	8006aae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aa6:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
<<<<<<< HEAD
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 ff05 	bl	8006890 <HAL_TIMEx_Break2Callback>
=======
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 ff05 	bl	80078b8 <HAL_TIMEx_Break2Callback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d10e      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d107      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aaa:	611a      	str	r2, [r3, #16]
=======
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad2:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fa85 	bl	8005fbc <HAL_TIM_TriggerCallback>
=======
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fa85 	bl	8006fe4 <HAL_TIM_TriggerCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d10e      	bne.n	8005ade <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d107      	bne.n	8005ade <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0220 	mvn.w	r2, #32
 8005ad6:	611a      	str	r2, [r3, #16]
=======
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b20      	cmp	r3, #32
 8006ae6:	d10e      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d107      	bne.n	8006b06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f06f 0220 	mvn.w	r2, #32
 8006afe:	611a      	str	r2, [r3, #16]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fec5 	bl	8006868 <HAL_TIMEx_CommutCallback>
=======
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fec5 	bl	8007890 <HAL_TIMEx_CommutCallback>
>>>>>>> fsm_rd_rfid
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <HAL_TIM_OC_ConfigChannel>:
=======
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_TIM_OC_ConfigChannel>:
>>>>>>> fsm_rd_rfid
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
<<<<<<< HEAD
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
=======
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
>>>>>>> fsm_rd_rfid
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e064      	b.n	8005bcc <HAL_TIM_OC_ConfigChannel+0xe4>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b14      	cmp	r3, #20
 8005b0e:	d857      	bhi.n	8005bc0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08005b6d 	.word	0x08005b6d
 8005b1c:	08005bc1 	.word	0x08005bc1
 8005b20:	08005bc1 	.word	0x08005bc1
 8005b24:	08005bc1 	.word	0x08005bc1
 8005b28:	08005b7b 	.word	0x08005b7b
 8005b2c:	08005bc1 	.word	0x08005bc1
 8005b30:	08005bc1 	.word	0x08005bc1
 8005b34:	08005bc1 	.word	0x08005bc1
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005bc1 	.word	0x08005bc1
 8005b40:	08005bc1 	.word	0x08005bc1
 8005b44:	08005bc1 	.word	0x08005bc1
 8005b48:	08005b97 	.word	0x08005b97
 8005b4c:	08005bc1 	.word	0x08005bc1
 8005b50:	08005bc1 	.word	0x08005bc1
 8005b54:	08005bc1 	.word	0x08005bc1
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005bc1 	.word	0x08005bc1
 8005b60:	08005bc1 	.word	0x08005bc1
 8005b64:	08005bc1 	.word	0x08005bc1
 8005b68:	08005bb3 	.word	0x08005bb3
=======
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e064      	b.n	8006bf4 <HAL_TIM_OC_ConfigChannel+0xe4>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b14      	cmp	r3, #20
 8006b36:	d857      	bhi.n	8006be8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <HAL_TIM_OC_ConfigChannel+0x30>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006be9 	.word	0x08006be9
 8006b48:	08006be9 	.word	0x08006be9
 8006b4c:	08006be9 	.word	0x08006be9
 8006b50:	08006ba3 	.word	0x08006ba3
 8006b54:	08006be9 	.word	0x08006be9
 8006b58:	08006be9 	.word	0x08006be9
 8006b5c:	08006be9 	.word	0x08006be9
 8006b60:	08006bb1 	.word	0x08006bb1
 8006b64:	08006be9 	.word	0x08006be9
 8006b68:	08006be9 	.word	0x08006be9
 8006b6c:	08006be9 	.word	0x08006be9
 8006b70:	08006bbf 	.word	0x08006bbf
 8006b74:	08006be9 	.word	0x08006be9
 8006b78:	08006be9 	.word	0x08006be9
 8006b7c:	08006be9 	.word	0x08006be9
 8006b80:	08006bcd 	.word	0x08006bcd
 8006b84:	08006be9 	.word	0x08006be9
 8006b88:	08006be9 	.word	0x08006be9
 8006b8c:	08006be9 	.word	0x08006be9
 8006b90:	08006bdb 	.word	0x08006bdb
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 facc 	bl	8006110 <TIM_OC1_SetConfig>
      break;
 8005b78:	e023      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 facc 	bl	8007138 <TIM_OC1_SetConfig>
      break;
 8006ba0:	e023      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb37 	bl	80061f4 <TIM_OC2_SetConfig>
      break;
 8005b86:	e01c      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fb37 	bl	800721c <TIM_OC2_SetConfig>
      break;
 8006bae:	e01c      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fba8 	bl	80062e4 <TIM_OC3_SetConfig>
      break;
 8005b94:	e015      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fba8 	bl	800730c <TIM_OC3_SetConfig>
      break;
 8006bbc:	e015      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fc17 	bl	80063d0 <TIM_OC4_SetConfig>
      break;
 8005ba2:	e00e      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fc17 	bl	80073f8 <TIM_OC4_SetConfig>
      break;
 8006bca:	e00e      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fc68 	bl	8006480 <TIM_OC5_SetConfig>
      break;
 8005bb0:	e007      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fc68 	bl	80074a8 <TIM_OC5_SetConfig>
      break;
 8006bd8:	e007      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fcb3 	bl	8006524 <TIM_OC6_SetConfig>
      break;
 8005bbe:	e000      	b.n	8005bc2 <HAL_TIM_OC_ConfigChannel+0xda>
=======
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fcb3 	bl	800754c <TIM_OC6_SetConfig>
      break;
 8006be6:	e000      	b.n	8006bea <HAL_TIM_OC_ConfigChannel+0xda>
>>>>>>> fsm_rd_rfid
    }

    default:
      break;
<<<<<<< HEAD
 8005bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_PWM_ConfigChannel>:
=======
 8006be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> fsm_rd_rfid
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
=======
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
>>>>>>> fsm_rd_rfid
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e0fd      	b.n	8005dea <HAL_TIM_PWM_ConfigChannel+0x216>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b14      	cmp	r3, #20
 8005bfa:	f200 80f0 	bhi.w	8005dde <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005bfe:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c59 	.word	0x08005c59
 8005c08:	08005ddf 	.word	0x08005ddf
 8005c0c:	08005ddf 	.word	0x08005ddf
 8005c10:	08005ddf 	.word	0x08005ddf
 8005c14:	08005c99 	.word	0x08005c99
 8005c18:	08005ddf 	.word	0x08005ddf
 8005c1c:	08005ddf 	.word	0x08005ddf
 8005c20:	08005ddf 	.word	0x08005ddf
 8005c24:	08005cdb 	.word	0x08005cdb
 8005c28:	08005ddf 	.word	0x08005ddf
 8005c2c:	08005ddf 	.word	0x08005ddf
 8005c30:	08005ddf 	.word	0x08005ddf
 8005c34:	08005d1b 	.word	0x08005d1b
 8005c38:	08005ddf 	.word	0x08005ddf
 8005c3c:	08005ddf 	.word	0x08005ddf
 8005c40:	08005ddf 	.word	0x08005ddf
 8005c44:	08005d5d 	.word	0x08005d5d
 8005c48:	08005ddf 	.word	0x08005ddf
 8005c4c:	08005ddf 	.word	0x08005ddf
 8005c50:	08005ddf 	.word	0x08005ddf
 8005c54:	08005d9d 	.word	0x08005d9d
=======
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e0fd      	b.n	8006e12 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b14      	cmp	r3, #20
 8006c22:	f200 80f0 	bhi.w	8006e06 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006e07 	.word	0x08006e07
 8006c34:	08006e07 	.word	0x08006e07
 8006c38:	08006e07 	.word	0x08006e07
 8006c3c:	08006cc1 	.word	0x08006cc1
 8006c40:	08006e07 	.word	0x08006e07
 8006c44:	08006e07 	.word	0x08006e07
 8006c48:	08006e07 	.word	0x08006e07
 8006c4c:	08006d03 	.word	0x08006d03
 8006c50:	08006e07 	.word	0x08006e07
 8006c54:	08006e07 	.word	0x08006e07
 8006c58:	08006e07 	.word	0x08006e07
 8006c5c:	08006d43 	.word	0x08006d43
 8006c60:	08006e07 	.word	0x08006e07
 8006c64:	08006e07 	.word	0x08006e07
 8006c68:	08006e07 	.word	0x08006e07
 8006c6c:	08006d85 	.word	0x08006d85
 8006c70:	08006e07 	.word	0x08006e07
 8006c74:	08006e07 	.word	0x08006e07
 8006c78:	08006e07 	.word	0x08006e07
 8006c7c:	08006dc5 	.word	0x08006dc5
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fa56 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699a      	ldr	r2, [r3, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	619a      	str	r2, [r3, #24]
      break;
 8005c96:	e0a3      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fa56 	bl	8007138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0208 	orr.w	r2, r2, #8
 8006c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0204 	bic.w	r2, r2, #4
 8006caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6999      	ldr	r1, [r3, #24]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	619a      	str	r2, [r3, #24]
      break;
 8006cbe:	e0a3      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 faa8 	bl	80061f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699a      	ldr	r2, [r3, #24]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6999      	ldr	r1, [r3, #24]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	619a      	str	r2, [r3, #24]
      break;
 8005cd8:	e082      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 faa8 	bl	800721c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6999      	ldr	r1, [r3, #24]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	021a      	lsls	r2, r3, #8
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	619a      	str	r2, [r3, #24]
      break;
 8006d00:	e082      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 faff 	bl	80062e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0208 	orr.w	r2, r2, #8
 8005cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0204 	bic.w	r2, r2, #4
 8005d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69d9      	ldr	r1, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
      break;
 8005d18:	e062      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 faff 	bl	800730c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0208 	orr.w	r2, r2, #8
 8006d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0204 	bic.w	r2, r2, #4
 8006d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69d9      	ldr	r1, [r3, #28]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	61da      	str	r2, [r3, #28]
      break;
 8006d40:	e062      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fb55 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]
      break;
 8005d5a:	e041      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fb55 	bl	80073f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69d9      	ldr	r1, [r3, #28]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	021a      	lsls	r2, r3, #8
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	61da      	str	r2, [r3, #28]
      break;
 8006d82:	e041      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fb8c 	bl	8006480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f042 0208 	orr.w	r2, r2, #8
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0204 	bic.w	r2, r2, #4
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d9a:	e021      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 fb8c 	bl	80074a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0208 	orr.w	r2, r2, #8
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0204 	bic.w	r2, r2, #4
 8006dae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691a      	ldr	r2, [r3, #16]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dc2:	e021      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fbbe 	bl	8006524 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	021a      	lsls	r2, r3, #8
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ddc:	e000      	b.n	8005de0 <HAL_TIM_PWM_ConfigChannel+0x20c>
=======
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fbbe 	bl	800754c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e04:	e000      	b.n	8006e08 <HAL_TIM_PWM_ConfigChannel+0x20c>
>>>>>>> fsm_rd_rfid
    }

    default:
      break;
<<<<<<< HEAD
 8005dde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop

08005df4 <HAL_TIM_ConfigClockSource>:
=======
 8006e06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop

08006e1c <HAL_TIM_ConfigClockSource>:
>>>>>>> fsm_rd_rfid
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
=======
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_TIM_ConfigClockSource+0x18>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e0b3      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x180>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_TIM_ConfigClockSource+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e0b3      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x180>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4b55      	ldr	r3, [pc, #340]	; (8005f7c <HAL_TIM_ConfigClockSource+0x188>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e44:	d03e      	beq.n	8005ec4 <HAL_TIM_ConfigClockSource+0xd0>
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4a:	f200 8087 	bhi.w	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	f000 8085 	beq.w	8005f60 <HAL_TIM_ConfigClockSource+0x16c>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	d87f      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e5c:	2b70      	cmp	r3, #112	; 0x70
 8005e5e:	d01a      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xa2>
 8005e60:	2b70      	cmp	r3, #112	; 0x70
 8005e62:	d87b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e64:	2b60      	cmp	r3, #96	; 0x60
 8005e66:	d050      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x116>
 8005e68:	2b60      	cmp	r3, #96	; 0x60
 8005e6a:	d877      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e6c:	2b50      	cmp	r3, #80	; 0x50
 8005e6e:	d03c      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xf6>
 8005e70:	2b50      	cmp	r3, #80	; 0x50
 8005e72:	d873      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e74:	2b40      	cmp	r3, #64	; 0x40
 8005e76:	d058      	beq.n	8005f2a <HAL_TIM_ConfigClockSource+0x136>
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d86f      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d064      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x156>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d86b      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d060      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x156>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d867      	bhi.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05c      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x156>
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d05a      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0x156>
=======
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4b55      	ldr	r3, [pc, #340]	; (8006fa4 <HAL_TIM_ConfigClockSource+0x188>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6c:	d03e      	beq.n	8006eec <HAL_TIM_ConfigClockSource+0xd0>
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e72:	f200 8087 	bhi.w	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e7a:	f000 8085 	beq.w	8006f88 <HAL_TIM_ConfigClockSource+0x16c>
 8006e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e82:	d87f      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006e84:	2b70      	cmp	r3, #112	; 0x70
 8006e86:	d01a      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0xa2>
 8006e88:	2b70      	cmp	r3, #112	; 0x70
 8006e8a:	d87b      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006e8c:	2b60      	cmp	r3, #96	; 0x60
 8006e8e:	d050      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0x116>
 8006e90:	2b60      	cmp	r3, #96	; 0x60
 8006e92:	d877      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006e94:	2b50      	cmp	r3, #80	; 0x50
 8006e96:	d03c      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xf6>
 8006e98:	2b50      	cmp	r3, #80	; 0x50
 8006e9a:	d873      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d058      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x136>
 8006ea0:	2b40      	cmp	r3, #64	; 0x40
 8006ea2:	d86f      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006ea4:	2b30      	cmp	r3, #48	; 0x30
 8006ea6:	d064      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x156>
 8006ea8:	2b30      	cmp	r3, #48	; 0x30
 8006eaa:	d86b      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d060      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x156>
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d867      	bhi.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d05c      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x156>
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d05a      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> fsm_rd_rfid
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 8005e94:	e062      	b.n	8005f5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f000 fc0b 	bl	80066c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	609a      	str	r2, [r3, #8]
      break;
 8005ec2:	e04e      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	6899      	ldr	r1, [r3, #8]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f000 fbf4 	bl	80066c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e03b      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fb68 	bl	80065cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2150      	movs	r1, #80	; 0x50
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fbc1 	bl	800668a <TIM_ITRx_SetConfig>
      break;
 8005f08:	e02b      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6859      	ldr	r1, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f000 fb87 	bl	800662a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2160      	movs	r1, #96	; 0x60
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbb1 	bl	800668a <TIM_ITRx_SetConfig>
      break;
 8005f28:	e01b      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6859      	ldr	r1, [r3, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f000 fb48 	bl	80065cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2140      	movs	r1, #64	; 0x40
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fba1 	bl	800668a <TIM_ITRx_SetConfig>
      break;
 8005f48:	e00b      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	4610      	mov	r0, r2
 8005f56:	f000 fb98 	bl	800668a <TIM_ITRx_SetConfig>
        break;
 8005f5a:	e002      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005f60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	fffeff88 	.word	0xfffeff88

08005f80 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8006ebc:	e062      	b.n	8006f84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6899      	ldr	r1, [r3, #8]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f000 fc0b 	bl	80076e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	609a      	str	r2, [r3, #8]
      break;
 8006eea:	e04e      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6818      	ldr	r0, [r3, #0]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6899      	ldr	r1, [r3, #8]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f000 fbf4 	bl	80076e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f0e:	609a      	str	r2, [r3, #8]
      break;
 8006f10:	e03b      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6859      	ldr	r1, [r3, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f000 fb68 	bl	80075f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2150      	movs	r1, #80	; 0x50
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fbc1 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006f30:	e02b      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f000 fb87 	bl	8007652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2160      	movs	r1, #96	; 0x60
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fbb1 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006f50:	e01b      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6859      	ldr	r1, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f000 fb48 	bl	80075f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2140      	movs	r1, #64	; 0x40
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fba1 	bl	80076b2 <TIM_ITRx_SetConfig>
      break;
 8006f70:	e00b      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f000 fb98 	bl	80076b2 <TIM_ITRx_SetConfig>
        break;
 8006f82:	e002      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006f88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	fffeff88 	.word	0xfffeff88

08006fa8 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
=======
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIM_IC_CaptureCallback>:
=======
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_IC_CaptureCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
=======
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
=======
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIM_TriggerCallback>:
=======
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIM_TriggerCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
=======
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <TIM_Base_SetConfig>:
=======
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <TIM_Base_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a40      	ldr	r2, [pc, #256]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fee:	d00f      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00b      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3c      	ldr	r2, [pc, #240]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d007      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3b      	ldr	r2, [pc, #236]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d003      	beq.n	8006010 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d108      	bne.n	8006022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d02b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d027      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2c      	ldr	r2, [pc, #176]	; (80060e8 <TIM_Base_SetConfig+0x118>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d023      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2b      	ldr	r2, [pc, #172]	; (80060ec <TIM_Base_SetConfig+0x11c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01f      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2a      	ldr	r2, [pc, #168]	; (80060f0 <TIM_Base_SetConfig+0x120>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d017      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <TIM_Base_SetConfig+0x128>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a27      	ldr	r2, [pc, #156]	; (80060fc <TIM_Base_SetConfig+0x12c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00f      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a26      	ldr	r2, [pc, #152]	; (8006100 <TIM_Base_SetConfig+0x130>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00b      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <TIM_Base_SetConfig+0x134>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_Base_SetConfig+0x138>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <TIM_Base_SetConfig+0x13c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d108      	bne.n	8006094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4313      	orrs	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
=======
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <TIM_Base_SetConfig+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007016:	d00f      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a3d      	ldr	r2, [pc, #244]	; (8007110 <TIM_Base_SetConfig+0x118>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00b      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <TIM_Base_SetConfig+0x11c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <TIM_Base_SetConfig+0x120>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a3a      	ldr	r2, [pc, #232]	; (800711c <TIM_Base_SetConfig+0x124>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2f      	ldr	r2, [pc, #188]	; (800710c <TIM_Base_SetConfig+0x114>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007058:	d027      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <TIM_Base_SetConfig+0x118>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d023      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <TIM_Base_SetConfig+0x11c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <TIM_Base_SetConfig+0x120>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a29      	ldr	r2, [pc, #164]	; (800711c <TIM_Base_SetConfig+0x124>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d017      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a28      	ldr	r2, [pc, #160]	; (8007120 <TIM_Base_SetConfig+0x128>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d013      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a27      	ldr	r2, [pc, #156]	; (8007124 <TIM_Base_SetConfig+0x12c>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a26      	ldr	r2, [pc, #152]	; (8007128 <TIM_Base_SetConfig+0x130>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a25      	ldr	r2, [pc, #148]	; (800712c <TIM_Base_SetConfig+0x134>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a24      	ldr	r2, [pc, #144]	; (8007130 <TIM_Base_SetConfig+0x138>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a23      	ldr	r2, [pc, #140]	; (8007134 <TIM_Base_SetConfig+0x13c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d108      	bne.n	80070bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <TIM_Base_SetConfig+0x114>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0xf8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <TIM_Base_SetConfig+0x124>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d103      	bne.n	80060d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a0a      	ldr	r2, [pc, #40]	; (800710c <TIM_Base_SetConfig+0x114>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0xf8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0c      	ldr	r2, [pc, #48]	; (800711c <TIM_Base_SetConfig+0x124>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d103      	bne.n	80070f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> fsm_rd_rfid
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	615a      	str	r2, [r3, #20]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40014400 	.word	0x40014400
 8006100:	40014800 	.word	0x40014800
 8006104:	40001800 	.word	0x40001800
 8006108:	40001c00 	.word	0x40001c00
 800610c:	40002000 	.word	0x40002000

08006110 <TIM_OC1_SetConfig>:
=======
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	615a      	str	r2, [r3, #20]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40010000 	.word	0x40010000
 8007110:	40000400 	.word	0x40000400
 8007114:	40000800 	.word	0x40000800
 8007118:	40000c00 	.word	0x40000c00
 800711c:	40010400 	.word	0x40010400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800
 800712c:	40001800 	.word	0x40001800
 8007130:	40001c00 	.word	0x40001c00
 8007134:	40002000 	.word	0x40002000

08007138 <TIM_OC1_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
=======
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <TIM_OC1_SetConfig+0xd8>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <TIM_OC1_SetConfig+0xdc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC1_SetConfig+0x64>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a20      	ldr	r2, [pc, #128]	; (80061f0 <TIM_OC1_SetConfig+0xe0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x7e>
=======
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	f023 0201 	bic.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4b2b      	ldr	r3, [pc, #172]	; (8007210 <TIM_OC1_SetConfig+0xd8>)
 8007164:	4013      	ands	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 0302 	bic.w	r3, r3, #2
 8007180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a21      	ldr	r2, [pc, #132]	; (8007214 <TIM_OC1_SetConfig+0xdc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d003      	beq.n	800719c <TIM_OC1_SetConfig+0x64>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a20      	ldr	r2, [pc, #128]	; (8007218 <TIM_OC1_SetConfig+0xe0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d10c      	bne.n	80071b6 <TIM_OC1_SetConfig+0x7e>
>>>>>>> fsm_rd_rfid
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a16      	ldr	r2, [pc, #88]	; (80061ec <TIM_OC1_SetConfig+0xdc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC1_SetConfig+0x8e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <TIM_OC1_SetConfig+0xe0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d111      	bne.n	80061c2 <TIM_OC1_SetConfig+0xb2>
=======
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f023 0308 	bic.w	r3, r3, #8
 80071a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 0304 	bic.w	r3, r3, #4
 80071b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a16      	ldr	r2, [pc, #88]	; (8007214 <TIM_OC1_SetConfig+0xdc>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC1_SetConfig+0x8e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a15      	ldr	r2, [pc, #84]	; (8007218 <TIM_OC1_SetConfig+0xe0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d111      	bne.n	80071ea <TIM_OC1_SetConfig+0xb2>
>>>>>>> fsm_rd_rfid
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
=======
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4313      	orrs	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	fffeff8f 	.word	0xfffeff8f
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40010400 	.word	0x40010400

080061f4 <TIM_OC2_SetConfig>:
=======
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	fffeff8f 	.word	0xfffeff8f
 8007214:	40010000 	.word	0x40010000
 8007218:	40010400 	.word	0x40010400

0800721c <TIM_OC2_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
=======
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f023 0210 	bic.w	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <TIM_OC2_SetConfig+0xe4>)
 8006220:	4013      	ands	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0320 	bic.w	r3, r3, #32
 800623e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a23      	ldr	r2, [pc, #140]	; (80062dc <TIM_OC2_SetConfig+0xe8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC2_SetConfig+0x68>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <TIM_OC2_SetConfig+0xec>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC2_SetConfig+0x84>
=======
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f023 0210 	bic.w	r2, r3, #16
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <TIM_OC2_SetConfig+0xe4>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f023 0320 	bic.w	r3, r3, #32
 8007266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a23      	ldr	r2, [pc, #140]	; (8007304 <TIM_OC2_SetConfig+0xe8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_OC2_SetConfig+0x68>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a22      	ldr	r2, [pc, #136]	; (8007308 <TIM_OC2_SetConfig+0xec>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10d      	bne.n	80072a0 <TIM_OC2_SetConfig+0x84>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	617b      	str	r3, [r7, #20]
=======
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800728a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800729e:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a18      	ldr	r2, [pc, #96]	; (80062dc <TIM_OC2_SetConfig+0xe8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d003      	beq.n	8006288 <TIM_OC2_SetConfig+0x94>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <TIM_OC2_SetConfig+0xec>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d113      	bne.n	80062b0 <TIM_OC2_SetConfig+0xbc>
=======
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a18      	ldr	r2, [pc, #96]	; (8007304 <TIM_OC2_SetConfig+0xe8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC2_SetConfig+0x94>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <TIM_OC2_SetConfig+0xec>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d113      	bne.n	80072d8 <TIM_OC2_SetConfig+0xbc>
>>>>>>> fsm_rd_rfid
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]
=======
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	613b      	str	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	feff8fff 	.word	0xfeff8fff
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400

080062e4 <TIM_OC3_SetConfig>:
=======
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	feff8fff 	.word	0xfeff8fff
 8007304:	40010000 	.word	0x40010000
 8007308:	40010400 	.word	0x40010400

0800730c <TIM_OC3_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
=======
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <TIM_OC3_SetConfig+0xe0>)
 8006310:	4013      	ands	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800632c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a22      	ldr	r2, [pc, #136]	; (80063c8 <TIM_OC3_SetConfig+0xe4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_OC3_SetConfig+0x66>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a21      	ldr	r2, [pc, #132]	; (80063cc <TIM_OC3_SetConfig+0xe8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10d      	bne.n	8006366 <TIM_OC3_SetConfig+0x82>
=======
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <TIM_OC3_SetConfig+0xe0>)
 8007338:	4013      	ands	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a22      	ldr	r2, [pc, #136]	; (80073f0 <TIM_OC3_SetConfig+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d003      	beq.n	8007372 <TIM_OC3_SetConfig+0x66>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a21      	ldr	r2, [pc, #132]	; (80073f4 <TIM_OC3_SetConfig+0xe8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d10d      	bne.n	800738e <TIM_OC3_SetConfig+0x82>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <TIM_OC3_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d003      	beq.n	8006376 <TIM_OC3_SetConfig+0x92>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a16      	ldr	r2, [pc, #88]	; (80063cc <TIM_OC3_SetConfig+0xe8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d113      	bne.n	800639e <TIM_OC3_SetConfig+0xba>
=======
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800738c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a17      	ldr	r2, [pc, #92]	; (80073f0 <TIM_OC3_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC3_SetConfig+0x92>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <TIM_OC3_SetConfig+0xe8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d113      	bne.n	80073c6 <TIM_OC3_SetConfig+0xba>
>>>>>>> fsm_rd_rfid
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800637c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
=======
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
>>>>>>> fsm_rd_rfid
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	621a      	str	r2, [r3, #32]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	fffeff8f 	.word	0xfffeff8f
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <TIM_OC4_SetConfig>:
=======
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	621a      	str	r2, [r3, #32]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	fffeff8f 	.word	0xfffeff8f
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40010400 	.word	0x40010400

080073f8 <TIM_OC4_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
=======
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <TIM_OC4_SetConfig+0xa4>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a13      	ldr	r2, [pc, #76]	; (8006478 <TIM_OC4_SetConfig+0xa8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC4_SetConfig+0x68>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a12      	ldr	r2, [pc, #72]	; (800647c <TIM_OC4_SetConfig+0xac>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d109      	bne.n	800644c <TIM_OC4_SetConfig+0x7c>
=======
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <TIM_OC4_SetConfig+0xa4>)
 8007424:	4013      	ands	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <TIM_OC4_SetConfig+0xa8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_OC4_SetConfig+0x68>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a12      	ldr	r2, [pc, #72]	; (80074a4 <TIM_OC4_SetConfig+0xac>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d109      	bne.n	8007474 <TIM_OC4_SetConfig+0x7c>
>>>>>>> fsm_rd_rfid
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
=======
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	019b      	lsls	r3, r3, #6
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	feff8fff 	.word	0xfeff8fff
 8006478:	40010000 	.word	0x40010000
 800647c:	40010400 	.word	0x40010400

08006480 <TIM_OC5_SetConfig>:
=======
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	feff8fff 	.word	0xfeff8fff
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40010400 	.word	0x40010400

080074a8 <TIM_OC5_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
=======
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
<<<<<<< HEAD
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <TIM_OC5_SetConfig+0x98>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a12      	ldr	r2, [pc, #72]	; (800651c <TIM_OC5_SetConfig+0x9c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC5_SetConfig+0x5e>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a11      	ldr	r2, [pc, #68]	; (8006520 <TIM_OC5_SetConfig+0xa0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d109      	bne.n	80064f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	fffeff8f 	.word	0xfffeff8f
 800651c:	40010000 	.word	0x40010000
 8006520:	40010400 	.word	0x40010400

08006524 <TIM_OC6_SetConfig>:
=======
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <TIM_OC5_SetConfig+0x98>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80074e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	041b      	lsls	r3, r3, #16
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a12      	ldr	r2, [pc, #72]	; (8007544 <TIM_OC5_SetConfig+0x9c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_OC5_SetConfig+0x5e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a11      	ldr	r2, [pc, #68]	; (8007548 <TIM_OC5_SetConfig+0xa0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d109      	bne.n	800751a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	621a      	str	r2, [r3, #32]
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr
 8007540:	fffeff8f 	.word	0xfffeff8f
 8007544:	40010000 	.word	0x40010000
 8007548:	40010400 	.word	0x40010400

0800754c <TIM_OC6_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
=======
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
<<<<<<< HEAD
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <TIM_OC6_SetConfig+0x9c>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	051b      	lsls	r3, r3, #20
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <TIM_OC6_SetConfig+0xa0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d003      	beq.n	8006584 <TIM_OC6_SetConfig+0x60>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <TIM_OC6_SetConfig+0xa4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d109      	bne.n	8006598 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800658a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	029b      	lsls	r3, r3, #10
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
=======
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <TIM_OC6_SetConfig+0x9c>)
 8007578:	4013      	ands	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800758e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	051b      	lsls	r3, r3, #20
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a13      	ldr	r2, [pc, #76]	; (80075ec <TIM_OC6_SetConfig+0xa0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d003      	beq.n	80075ac <TIM_OC6_SetConfig+0x60>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a12      	ldr	r2, [pc, #72]	; (80075f0 <TIM_OC6_SetConfig+0xa4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d109      	bne.n	80075c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	029b      	lsls	r3, r3, #10
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	feff8fff 	.word	0xfeff8fff
 80065c4:	40010000 	.word	0x40010000
 80065c8:	40010400 	.word	0x40010400

080065cc <TIM_TI1_ConfigInputStage>:
=======
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	feff8fff 	.word	0xfeff8fff
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40010400 	.word	0x40010400

080075f4 <TIM_TI1_ConfigInputStage>:
>>>>>>> fsm_rd_rfid
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
=======
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0201 	bic.w	r2, r3, #1
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f023 030a 	bic.w	r3, r3, #10
 8006608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <TIM_TI2_ConfigInputStage>:
=======
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	f023 0201 	bic.w	r2, r3, #1
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800761e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 030a 	bic.w	r3, r3, #10
 8007630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	621a      	str	r2, [r3, #32]
}
 8007646:	bf00      	nop
 8007648:	371c      	adds	r7, #28
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <TIM_TI2_ConfigInputStage>:
>>>>>>> fsm_rd_rfid
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800662a:	b480      	push	{r7}
 800662c:	b087      	sub	sp, #28
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	607a      	str	r2, [r7, #4]
=======
 8007652:	b480      	push	{r7}
 8007654:	b087      	sub	sp, #28
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
>>>>>>> fsm_rd_rfid
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0210 	bic.w	r2, r3, #16
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	031b      	lsls	r3, r3, #12
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	bf00      	nop
 8006680:	371c      	adds	r7, #28
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <TIM_ITRx_SetConfig>:
=======
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f023 0210 	bic.w	r2, r3, #16
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800767c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	031b      	lsls	r3, r3, #12
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800768e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <TIM_ITRx_SetConfig>:
>>>>>>> fsm_rd_rfid
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
=======
 80076b2:	b480      	push	{r7}
 80076b4:	b085      	sub	sp, #20
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f043 0307 	orr.w	r3, r3, #7
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	609a      	str	r2, [r3, #8]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <TIM_ETR_SetConfig>:
=======
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f043 0307 	orr.w	r3, r3, #7
 80076d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <TIM_ETR_SetConfig>:
>>>>>>> fsm_rd_rfid
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_CCxChannelCmd>:
=======
 80076e8:	b480      	push	{r7}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	021a      	lsls	r2, r3, #8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	431a      	orrs	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4313      	orrs	r3, r2
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <TIM_CCxChannelCmd>:
>>>>>>> fsm_rd_rfid
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
=======
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
>>>>>>> fsm_rd_rfid

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2201      	movs	r2, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2201      	movs	r2, #1
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	43db      	mvns	r3, r3
 800774a:	401a      	ands	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a1a      	ldr	r2, [r3, #32]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	6879      	ldr	r1, [r7, #4]
 800775c:	fa01 f303 	lsl.w	r3, r1, r3
 8007760:	431a      	orrs	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	621a      	str	r2, [r3, #32]
}
 8007766:	bf00      	nop
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> fsm_rd_rfid
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
=======
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
>>>>>>> fsm_rd_rfid
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006760:	2302      	movs	r3, #2
 8006762:	e06d      	b.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a30      	ldr	r2, [pc, #192]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2f      	ldr	r2, [pc, #188]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d108      	bne.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007788:	2302      	movs	r3, #2
 800778a:	e06d      	b.n	8007868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a30      	ldr	r2, [pc, #192]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2f      	ldr	r2, [pc, #188]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d108      	bne.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800679e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
=======
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
>>>>>>> fsm_rd_rfid
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a20      	ldr	r2, [pc, #128]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d022      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d6:	d01d      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d018      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1a      	ldr	r2, [pc, #104]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a16      	ldr	r2, [pc, #88]	; (8006860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d10c      	bne.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800681a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	609a      	str	r2, [r3, #8]
=======
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a20      	ldr	r2, [pc, #128]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d022      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fe:	d01d      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d018      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00e      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a15      	ldr	r2, [pc, #84]	; (8007878 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a16      	ldr	r2, [pc, #88]	; (8007888 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a15      	ldr	r2, [pc, #84]	; (800788c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d10c      	bne.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007842:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40010000 	.word	0x40010000
 8006850:	40010400 	.word	0x40010400
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40001800 	.word	0x40001800

08006868 <HAL_TIMEx_CommutCallback>:
=======
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40010000 	.word	0x40010000
 8007878:	40010400 	.word	0x40010400
 800787c:	40000400 	.word	0x40000400
 8007880:	40000800 	.word	0x40000800
 8007884:	40000c00 	.word	0x40000c00
 8007888:	40014000 	.word	0x40014000
 800788c:	40001800 	.word	0x40001800

08007890 <HAL_TIMEx_CommutCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
=======
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIMEx_BreakCallback>:
=======
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIMEx_BreakCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
=======
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIMEx_Break2Callback>:
=======
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_TIMEx_Break2Callback>:
>>>>>>> fsm_rd_rfid
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
=======
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_Init>:
=======
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_Init>:
>>>>>>> fsm_rd_rfid
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e040      	b.n	8006938 <HAL_UART_Init+0x94>
=======
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e040      	b.n	8007960 <HAL_UART_Init+0x94>
>>>>>>> fsm_rd_rfid
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d106      	bne.n	80068cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
=======
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d106      	bne.n	80078f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
>>>>>>> fsm_rd_rfid

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7fb fa72 	bl	8001db0 <HAL_UART_MspInit>
=======
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fa fd60 	bl	80023b4 <HAL_UART_MspInit>
>>>>>>> fsm_rd_rfid
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0201 	bic.w	r2, r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa56 	bl	8006d94 <UART_SetConfig>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e022      	b.n	8006938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fcac 	bl	8007258 <UART_AdvFeatureConfig>
=======
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	; 0x24
 80078f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa56 	bl	8007dbc <UART_SetConfig>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e022      	b.n	8007960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fcac 	bl	8008280 <UART_AdvFeatureConfig>
>>>>>>> fsm_rd_rfid
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800690e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800691e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f042 0201 	orr.w	r2, r2, #1
 800692e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fd33 	bl	800739c <UART_CheckIdleState>
 8006936:	4603      	mov	r3, r0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_UART_IRQHandler>:
=======
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0201 	orr.w	r2, r2, #1
 8007956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fd33 	bl	80083c4 <UART_CheckIdleState>
 800795e:	4603      	mov	r3, r0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_UART_IRQHandler>:
>>>>>>> fsm_rd_rfid
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	617b      	str	r3, [r7, #20]
=======
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	617b      	str	r3, [r7, #20]
>>>>>>> fsm_rd_rfid

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
<<<<<<< HEAD
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	f640 030f 	movw	r3, #2063	; 0x80f
 8006966:	4013      	ands	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 81cc 	beq.w	8006d26 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
      }
      return;
 8006996:	e1c6      	b.n	8006d26 <HAL_UART_IRQHandler+0x3e6>
=======
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	f640 030f 	movw	r3, #2063	; 0x80f
 800798e:	4013      	ands	r3, r2
 8007990:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d113      	bne.n	80079c0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00e      	beq.n	80079c0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d009      	beq.n	80079c0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 81cc 	beq.w	8007d4e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
      }
      return;
 80079be:	e1c6      	b.n	8007d4e <HAL_UART_IRQHandler+0x3e6>
>>>>>>> fsm_rd_rfid
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
<<<<<<< HEAD
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 80e3 	beq.w	8006b66 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d105      	bne.n	80069b6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4ba5      	ldr	r3, [pc, #660]	; (8006c44 <HAL_UART_IRQHandler+0x304>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80d8 	beq.w	8006b66 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <HAL_UART_IRQHandler+0xa2>
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d8:	f043 0201 	orr.w	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80e3 	beq.w	8007b8e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d105      	bne.n	80079de <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	4ba5      	ldr	r3, [pc, #660]	; (8007c6c <HAL_UART_IRQHandler+0x304>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80d8 	beq.w	8007b8e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <HAL_UART_IRQHandler+0xa2>
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2201      	movs	r2, #1
 80079f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a00:	f043 0201 	orr.w	r2, r3, #1
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> fsm_rd_rfid
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	f003 0302 	and.w	r3, r3, #2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_UART_IRQHandler+0xce>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2202      	movs	r2, #2
 80069fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a04:	f043 0204 	orr.w	r2, r3, #4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d010      	beq.n	8007a36 <HAL_UART_IRQHandler+0xce>
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00b      	beq.n	8007a36 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2202      	movs	r2, #2
 8007a24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2c:	f043 0204 	orr.w	r2, r3, #4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> fsm_rd_rfid
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
<<<<<<< HEAD
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <HAL_UART_IRQHandler+0xfa>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2204      	movs	r2, #4
 8006a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a30:	f043 0202 	orr.w	r2, r3, #2
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d010      	beq.n	8007a62 <HAL_UART_IRQHandler+0xfa>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00b      	beq.n	8007a62 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2204      	movs	r2, #4
 8007a50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a58:	f043 0202 	orr.w	r2, r3, #2
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> fsm_rd_rfid
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
<<<<<<< HEAD
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d015      	beq.n	8006a70 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a66:	f043 0208 	orr.w	r2, r3, #8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	f003 0308 	and.w	r3, r3, #8
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d015      	beq.n	8007a98 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2208      	movs	r2, #8
 8007a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8e:	f043 0208 	orr.w	r2, r3, #8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> fsm_rd_rfid
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
<<<<<<< HEAD
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d011      	beq.n	8006a9e <HAL_UART_IRQHandler+0x15e>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00c      	beq.n	8006a9e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a94:	f043 0220 	orr.w	r2, r3, #32
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
=======
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d011      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x15e>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
>>>>>>> fsm_rd_rfid
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8140 	beq.w	8006d2a <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
=======
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8140 	beq.w	8007d52 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00c      	beq.n	8007af6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
>>>>>>> fsm_rd_rfid
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
<<<<<<< HEAD
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b40      	cmp	r3, #64	; 0x40
 8006ae2:	d004      	beq.n	8006aee <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d031      	beq.n	8006b52 <HAL_UART_IRQHandler+0x212>
=======
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d004      	beq.n	8007b16 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d031      	beq.n	8007b7a <HAL_UART_IRQHandler+0x212>
>>>>>>> fsm_rd_rfid
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd19 	bl	8007526 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d123      	bne.n	8006b4a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d013      	beq.n	8006b42 <HAL_UART_IRQHandler+0x202>
=======
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fd19 	bl	800854e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d123      	bne.n	8007b72 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b38:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d013      	beq.n	8007b6a <HAL_UART_IRQHandler+0x202>
>>>>>>> fsm_rd_rfid
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	4a4a      	ldr	r2, [pc, #296]	; (8006c48 <HAL_UART_IRQHandler+0x308>)
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fc fbdc 	bl	80032e4 <HAL_DMA_Abort_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d017      	beq.n	8006b62 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	e00f      	b.n	8006b62 <HAL_UART_IRQHandler+0x222>
=======
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b46:	4a4a      	ldr	r2, [pc, #296]	; (8007c70 <HAL_UART_IRQHandler+0x308>)
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fb fee0 	bl	8003914 <HAL_DMA_Abort_IT>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	e00f      	b.n	8007b8a <HAL_UART_IRQHandler+0x222>
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f906 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	e00b      	b.n	8006b62 <HAL_UART_IRQHandler+0x222>
=======
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f906 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	e00b      	b.n	8007b8a <HAL_UART_IRQHandler+0x222>
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f902 	bl	8006d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	e007      	b.n	8006b62 <HAL_UART_IRQHandler+0x222>
=======
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f902 	bl	8007d7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	e007      	b.n	8007b8a <HAL_UART_IRQHandler+0x222>
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f8fe 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006b60:	e0e3      	b.n	8006d2a <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b62:	bf00      	nop
    return;
 8006b64:	e0e1      	b.n	8006d2a <HAL_UART_IRQHandler+0x3ea>
=======
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f8fe 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b88:	e0e3      	b.n	8007d52 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8a:	bf00      	nop
    return;
 8007b8c:	e0e1      	b.n	8007d52 <HAL_UART_IRQHandler+0x3ea>
>>>>>>> fsm_rd_rfid

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	f040 80a7 	bne.w	8006cbe <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80a1 	beq.w	8006cbe <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 809b 	beq.w	8006cbe <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2210      	movs	r2, #16
 8006b8e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b40      	cmp	r3, #64	; 0x40
 8006b9c:	d156      	bne.n	8006c4c <HAL_UART_IRQHandler+0x30c>
=======
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	f040 80a7 	bne.w	8007ce6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80a1 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 809b 	beq.w	8007ce6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2210      	movs	r2, #16
 8007bb6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d156      	bne.n	8007c74 <HAL_UART_IRQHandler+0x30c>
>>>>>>> fsm_rd_rfid
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006ba8:	893b      	ldrh	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80bf 	beq.w	8006d2e <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bb6:	893a      	ldrh	r2, [r7, #8]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	f080 80b8 	bcs.w	8006d2e <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	893a      	ldrh	r2, [r7, #8]
 8006bc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd0:	d02a      	beq.n	8006c28 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006be0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	609a      	str	r2, [r3, #8]
=======
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80bf 	beq.w	8007d56 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007bde:	893a      	ldrh	r2, [r7, #8]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f080 80b8 	bcs.w	8007d56 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	893a      	ldrh	r2, [r7, #8]
 8007bea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf8:	d02a      	beq.n	8007c50 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c08:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c00:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0210 	bic.w	r2, r2, #16
 8006c1c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fc faee 	bl	8003204 <HAL_DMA_Abort>
=======
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c28:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0210 	bic.w	r2, r2, #16
 8007c44:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fb fdf2 	bl	8003834 <HAL_DMA_Abort>
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f893 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c42:	e074      	b.n	8006d2e <HAL_UART_IRQHandler+0x3ee>
 8006c44:	04000120 	.word	0x04000120
 8006c48:	08007585 	.word	0x08007585
=======
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f893 	bl	8007d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c6a:	e074      	b.n	8007d56 <HAL_UART_IRQHandler+0x3ee>
 8007c6c:	04000120 	.word	0x04000120
 8007c70:	080085ad 	.word	0x080085ad
>>>>>>> fsm_rd_rfid
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d063      	beq.n	8006d32 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d060      	beq.n	8006d32 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0210 	bic.w	r2, r2, #16
 8006cb0:	601a      	str	r2, [r3, #0]
=======
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d063      	beq.n	8007d5a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8007c92:	897b      	ldrh	r3, [r7, #10]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d060      	beq.n	8007d5a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ca6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0210 	bic.w	r2, r2, #16
 8007cd8:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f856 	bl	8006d68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cbc:	e039      	b.n	8006d32 <HAL_UART_IRQHandler+0x3f2>
=======
 8007cda:	897b      	ldrh	r3, [r7, #10]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f856 	bl	8007d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ce4:	e039      	b.n	8007d5a <HAL_UART_IRQHandler+0x3f2>
>>>>>>> fsm_rd_rfid
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
<<<<<<< HEAD
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x3a4>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d008      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cda:	621a      	str	r2, [r3, #32]
=======
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <HAL_UART_IRQHandler+0x3a4>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d008      	beq.n	8007d0c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d02:	621a      	str	r2, [r3, #32]
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
<<<<<<< HEAD
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f84f 	bl	8006d80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ce2:	e029      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
=======
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f84f 	bl	8007da8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d0a:	e029      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
>>>>>>> fsm_rd_rfid
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
<<<<<<< HEAD
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01a      	beq.n	8006d36 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
    }
    return;
 8006d08:	e015      	b.n	8006d36 <HAL_UART_IRQHandler+0x3f6>
=======
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	4798      	blx	r3
    }
    return;
 8007d30:	e015      	b.n	8007d5e <HAL_UART_IRQHandler+0x3f6>
>>>>>>> fsm_rd_rfid
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
<<<<<<< HEAD
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d011      	beq.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fc46 	bl	80075b0 <UART_EndTransmit_IT>
    return;
 8006d24:	e008      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006d26:	bf00      	nop
 8006d28:	e006      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006d2a:	bf00      	nop
 8006d2c:	e004      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
      return;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <HAL_UART_IRQHandler+0x3f8>
    return;
 8006d36:	bf00      	nop
  }

}
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <HAL_UART_TxCpltCallback>:
=======
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d011      	beq.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00c      	beq.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fc46 	bl	80085d8 <UART_EndTransmit_IT>
    return;
 8007d4c:	e008      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
      return;
 8007d4e:	bf00      	nop
 8007d50:	e006      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
    return;
 8007d52:	bf00      	nop
 8007d54:	e004      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
      return;
 8007d56:	bf00      	nop
 8007d58:	e002      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
      return;
 8007d5a:	bf00      	nop
 8007d5c:	e000      	b.n	8007d60 <HAL_UART_IRQHandler+0x3f8>
    return;
 8007d5e:	bf00      	nop
  }

}
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop

08007d68 <HAL_UART_TxCpltCallback>:
>>>>>>> fsm_rd_rfid
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
=======
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_UART_ErrorCallback>:
=======
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_ErrorCallback>:
>>>>>>> fsm_rd_rfid
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
=======
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_UARTEx_RxEventCallback>:
=======
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_UARTEx_RxEventCallback>:
>>>>>>> fsm_rd_rfid
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
=======
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
>>>>>>> fsm_rd_rfid
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_UARTEx_WakeupCallback>:
=======
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_UARTEx_WakeupCallback>:
>>>>>>> fsm_rd_rfid
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
=======
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <UART_SetConfig>:
=======
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <UART_SetConfig>:
>>>>>>> fsm_rd_rfid
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
=======
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	77bb      	strb	r3, [r7, #30]
=======
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	77bb      	strb	r3, [r7, #30]
>>>>>>> fsm_rd_rfid
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4ba7      	ldr	r3, [pc, #668]	; (800705c <UART_SetConfig+0x2c8>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	6979      	ldr	r1, [r7, #20]
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	6013      	str	r3, [r2, #0]
=======
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	4ba7      	ldr	r3, [pc, #668]	; (8008084 <UART_SetConfig+0x2c8>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6812      	ldr	r2, [r2, #0]
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	430b      	orrs	r3, r1
 8007df2:	6013      	str	r3, [r2, #0]
>>>>>>> fsm_rd_rfid

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
=======
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	609a      	str	r2, [r3, #8]
=======
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
<<<<<<< HEAD
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a95      	ldr	r2, [pc, #596]	; (8007060 <UART_SetConfig+0x2cc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d120      	bne.n	8006e52 <UART_SetConfig+0xbe>
 8006e10:	4b94      	ldr	r3, [pc, #592]	; (8007064 <UART_SetConfig+0x2d0>)
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d816      	bhi.n	8006e4c <UART_SetConfig+0xb8>
 8006e1e:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <UART_SetConfig+0x90>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e41 	.word	0x08006e41
 8006e2c:	08006e3b 	.word	0x08006e3b
 8006e30:	08006e47 	.word	0x08006e47
 8006e34:	2301      	movs	r3, #1
 8006e36:	77fb      	strb	r3, [r7, #31]
 8006e38:	e14f      	b.n	80070da <UART_SetConfig+0x346>
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
 8006e3e:	e14c      	b.n	80070da <UART_SetConfig+0x346>
 8006e40:	2304      	movs	r3, #4
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e149      	b.n	80070da <UART_SetConfig+0x346>
 8006e46:	2308      	movs	r3, #8
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e146      	b.n	80070da <UART_SetConfig+0x346>
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e143      	b.n	80070da <UART_SetConfig+0x346>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a84      	ldr	r2, [pc, #528]	; (8007068 <UART_SetConfig+0x2d4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d132      	bne.n	8006ec2 <UART_SetConfig+0x12e>
 8006e5c:	4b81      	ldr	r3, [pc, #516]	; (8007064 <UART_SetConfig+0x2d0>)
 8006e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b0c      	cmp	r3, #12
 8006e68:	d828      	bhi.n	8006ebc <UART_SetConfig+0x128>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0xdc>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006ea5 	.word	0x08006ea5
 8006e74:	08006ebd 	.word	0x08006ebd
 8006e78:	08006ebd 	.word	0x08006ebd
 8006e7c:	08006ebd 	.word	0x08006ebd
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006ebd 	.word	0x08006ebd
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	08006ebd 	.word	0x08006ebd
 8006e90:	08006eab 	.word	0x08006eab
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ebd 	.word	0x08006ebd
 8006ea0:	08006eb7 	.word	0x08006eb7
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e117      	b.n	80070da <UART_SetConfig+0x346>
 8006eaa:	2302      	movs	r3, #2
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e114      	b.n	80070da <UART_SetConfig+0x346>
 8006eb0:	2304      	movs	r3, #4
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e111      	b.n	80070da <UART_SetConfig+0x346>
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	77fb      	strb	r3, [r7, #31]
 8006eba:	e10e      	b.n	80070da <UART_SetConfig+0x346>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	77fb      	strb	r3, [r7, #31]
 8006ec0:	e10b      	b.n	80070da <UART_SetConfig+0x346>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a69      	ldr	r2, [pc, #420]	; (800706c <UART_SetConfig+0x2d8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d120      	bne.n	8006f0e <UART_SetConfig+0x17a>
 8006ecc:	4b65      	ldr	r3, [pc, #404]	; (8007064 <UART_SetConfig+0x2d0>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ed6:	2b30      	cmp	r3, #48	; 0x30
 8006ed8:	d013      	beq.n	8006f02 <UART_SetConfig+0x16e>
 8006eda:	2b30      	cmp	r3, #48	; 0x30
 8006edc:	d814      	bhi.n	8006f08 <UART_SetConfig+0x174>
 8006ede:	2b20      	cmp	r3, #32
 8006ee0:	d009      	beq.n	8006ef6 <UART_SetConfig+0x162>
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d810      	bhi.n	8006f08 <UART_SetConfig+0x174>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <UART_SetConfig+0x15c>
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d006      	beq.n	8006efc <UART_SetConfig+0x168>
 8006eee:	e00b      	b.n	8006f08 <UART_SetConfig+0x174>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e0f1      	b.n	80070da <UART_SetConfig+0x346>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e0ee      	b.n	80070da <UART_SetConfig+0x346>
 8006efc:	2304      	movs	r3, #4
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e0eb      	b.n	80070da <UART_SetConfig+0x346>
 8006f02:	2308      	movs	r3, #8
 8006f04:	77fb      	strb	r3, [r7, #31]
 8006f06:	e0e8      	b.n	80070da <UART_SetConfig+0x346>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	77fb      	strb	r3, [r7, #31]
 8006f0c:	e0e5      	b.n	80070da <UART_SetConfig+0x346>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a57      	ldr	r2, [pc, #348]	; (8007070 <UART_SetConfig+0x2dc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d120      	bne.n	8006f5a <UART_SetConfig+0x1c6>
 8006f18:	4b52      	ldr	r3, [pc, #328]	; (8007064 <UART_SetConfig+0x2d0>)
 8006f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f22:	2bc0      	cmp	r3, #192	; 0xc0
 8006f24:	d013      	beq.n	8006f4e <UART_SetConfig+0x1ba>
 8006f26:	2bc0      	cmp	r3, #192	; 0xc0
 8006f28:	d814      	bhi.n	8006f54 <UART_SetConfig+0x1c0>
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d009      	beq.n	8006f42 <UART_SetConfig+0x1ae>
 8006f2e:	2b80      	cmp	r3, #128	; 0x80
 8006f30:	d810      	bhi.n	8006f54 <UART_SetConfig+0x1c0>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <UART_SetConfig+0x1a8>
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d006      	beq.n	8006f48 <UART_SetConfig+0x1b4>
 8006f3a:	e00b      	b.n	8006f54 <UART_SetConfig+0x1c0>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e0cb      	b.n	80070da <UART_SetConfig+0x346>
 8006f42:	2302      	movs	r3, #2
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e0c8      	b.n	80070da <UART_SetConfig+0x346>
 8006f48:	2304      	movs	r3, #4
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e0c5      	b.n	80070da <UART_SetConfig+0x346>
 8006f4e:	2308      	movs	r3, #8
 8006f50:	77fb      	strb	r3, [r7, #31]
 8006f52:	e0c2      	b.n	80070da <UART_SetConfig+0x346>
 8006f54:	2310      	movs	r3, #16
 8006f56:	77fb      	strb	r3, [r7, #31]
 8006f58:	e0bf      	b.n	80070da <UART_SetConfig+0x346>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a45      	ldr	r2, [pc, #276]	; (8007074 <UART_SetConfig+0x2e0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d125      	bne.n	8006fb0 <UART_SetConfig+0x21c>
 8006f64:	4b3f      	ldr	r3, [pc, #252]	; (8007064 <UART_SetConfig+0x2d0>)
 8006f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f72:	d017      	beq.n	8006fa4 <UART_SetConfig+0x210>
 8006f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f78:	d817      	bhi.n	8006faa <UART_SetConfig+0x216>
 8006f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7e:	d00b      	beq.n	8006f98 <UART_SetConfig+0x204>
 8006f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f84:	d811      	bhi.n	8006faa <UART_SetConfig+0x216>
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <UART_SetConfig+0x1fe>
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8e:	d006      	beq.n	8006f9e <UART_SetConfig+0x20a>
 8006f90:	e00b      	b.n	8006faa <UART_SetConfig+0x216>
 8006f92:	2300      	movs	r3, #0
 8006f94:	77fb      	strb	r3, [r7, #31]
 8006f96:	e0a0      	b.n	80070da <UART_SetConfig+0x346>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e09d      	b.n	80070da <UART_SetConfig+0x346>
 8006f9e:	2304      	movs	r3, #4
 8006fa0:	77fb      	strb	r3, [r7, #31]
 8006fa2:	e09a      	b.n	80070da <UART_SetConfig+0x346>
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	77fb      	strb	r3, [r7, #31]
 8006fa8:	e097      	b.n	80070da <UART_SetConfig+0x346>
 8006faa:	2310      	movs	r3, #16
 8006fac:	77fb      	strb	r3, [r7, #31]
 8006fae:	e094      	b.n	80070da <UART_SetConfig+0x346>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a30      	ldr	r2, [pc, #192]	; (8007078 <UART_SetConfig+0x2e4>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d125      	bne.n	8007006 <UART_SetConfig+0x272>
 8006fba:	4b2a      	ldr	r3, [pc, #168]	; (8007064 <UART_SetConfig+0x2d0>)
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fc8:	d017      	beq.n	8006ffa <UART_SetConfig+0x266>
 8006fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fce:	d817      	bhi.n	8007000 <UART_SetConfig+0x26c>
 8006fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd4:	d00b      	beq.n	8006fee <UART_SetConfig+0x25a>
 8006fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fda:	d811      	bhi.n	8007000 <UART_SetConfig+0x26c>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <UART_SetConfig+0x254>
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d006      	beq.n	8006ff4 <UART_SetConfig+0x260>
 8006fe6:	e00b      	b.n	8007000 <UART_SetConfig+0x26c>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77fb      	strb	r3, [r7, #31]
 8006fec:	e075      	b.n	80070da <UART_SetConfig+0x346>
 8006fee:	2302      	movs	r3, #2
 8006ff0:	77fb      	strb	r3, [r7, #31]
 8006ff2:	e072      	b.n	80070da <UART_SetConfig+0x346>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	77fb      	strb	r3, [r7, #31]
 8006ff8:	e06f      	b.n	80070da <UART_SetConfig+0x346>
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	77fb      	strb	r3, [r7, #31]
 8006ffe:	e06c      	b.n	80070da <UART_SetConfig+0x346>
 8007000:	2310      	movs	r3, #16
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e069      	b.n	80070da <UART_SetConfig+0x346>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1c      	ldr	r2, [pc, #112]	; (800707c <UART_SetConfig+0x2e8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d137      	bne.n	8007080 <UART_SetConfig+0x2ec>
 8007010:	4b14      	ldr	r3, [pc, #80]	; (8007064 <UART_SetConfig+0x2d0>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007016:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800701a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800701e:	d017      	beq.n	8007050 <UART_SetConfig+0x2bc>
 8007020:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007024:	d817      	bhi.n	8007056 <UART_SetConfig+0x2c2>
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702a:	d00b      	beq.n	8007044 <UART_SetConfig+0x2b0>
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007030:	d811      	bhi.n	8007056 <UART_SetConfig+0x2c2>
 8007032:	2b00      	cmp	r3, #0
 8007034:	d003      	beq.n	800703e <UART_SetConfig+0x2aa>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d006      	beq.n	800704a <UART_SetConfig+0x2b6>
 800703c:	e00b      	b.n	8007056 <UART_SetConfig+0x2c2>
 800703e:	2300      	movs	r3, #0
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e04a      	b.n	80070da <UART_SetConfig+0x346>
 8007044:	2302      	movs	r3, #2
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e047      	b.n	80070da <UART_SetConfig+0x346>
 800704a:	2304      	movs	r3, #4
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e044      	b.n	80070da <UART_SetConfig+0x346>
 8007050:	2308      	movs	r3, #8
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e041      	b.n	80070da <UART_SetConfig+0x346>
 8007056:	2310      	movs	r3, #16
 8007058:	77fb      	strb	r3, [r7, #31]
 800705a:	e03e      	b.n	80070da <UART_SetConfig+0x346>
 800705c:	efff69f3 	.word	0xefff69f3
 8007060:	40011000 	.word	0x40011000
 8007064:	40023800 	.word	0x40023800
 8007068:	40004400 	.word	0x40004400
 800706c:	40004800 	.word	0x40004800
 8007070:	40004c00 	.word	0x40004c00
 8007074:	40005000 	.word	0x40005000
 8007078:	40011400 	.word	0x40011400
 800707c:	40007800 	.word	0x40007800
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a71      	ldr	r2, [pc, #452]	; (800724c <UART_SetConfig+0x4b8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d125      	bne.n	80070d6 <UART_SetConfig+0x342>
 800708a:	4b71      	ldr	r3, [pc, #452]	; (8007250 <UART_SetConfig+0x4bc>)
 800708c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007094:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007098:	d017      	beq.n	80070ca <UART_SetConfig+0x336>
 800709a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800709e:	d817      	bhi.n	80070d0 <UART_SetConfig+0x33c>
 80070a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a4:	d00b      	beq.n	80070be <UART_SetConfig+0x32a>
 80070a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070aa:	d811      	bhi.n	80070d0 <UART_SetConfig+0x33c>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <UART_SetConfig+0x324>
 80070b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b4:	d006      	beq.n	80070c4 <UART_SetConfig+0x330>
 80070b6:	e00b      	b.n	80070d0 <UART_SetConfig+0x33c>
 80070b8:	2300      	movs	r3, #0
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e00d      	b.n	80070da <UART_SetConfig+0x346>
 80070be:	2302      	movs	r3, #2
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e00a      	b.n	80070da <UART_SetConfig+0x346>
 80070c4:	2304      	movs	r3, #4
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e007      	b.n	80070da <UART_SetConfig+0x346>
 80070ca:	2308      	movs	r3, #8
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e004      	b.n	80070da <UART_SetConfig+0x346>
 80070d0:	2310      	movs	r3, #16
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e001      	b.n	80070da <UART_SetConfig+0x346>
 80070d6:	2310      	movs	r3, #16
 80070d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d15b      	bne.n	800719c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80070e4:	7ffb      	ldrb	r3, [r7, #31]
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d827      	bhi.n	800713a <UART_SetConfig+0x3a6>
 80070ea:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <UART_SetConfig+0x35c>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007115 	.word	0x08007115
 80070f4:	0800711d 	.word	0x0800711d
 80070f8:	08007125 	.word	0x08007125
 80070fc:	0800713b 	.word	0x0800713b
 8007100:	0800712b 	.word	0x0800712b
 8007104:	0800713b 	.word	0x0800713b
 8007108:	0800713b 	.word	0x0800713b
 800710c:	0800713b 	.word	0x0800713b
 8007110:	08007133 	.word	0x08007133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007114:	f7fd f9e4 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 8007118:	61b8      	str	r0, [r7, #24]
        break;
 800711a:	e013      	b.n	8007144 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800711c:	f7fd f9f4 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 8007120:	61b8      	str	r0, [r7, #24]
        break;
 8007122:	e00f      	b.n	8007144 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <UART_SetConfig+0x4c0>)
 8007126:	61bb      	str	r3, [r7, #24]
        break;
 8007128:	e00c      	b.n	8007144 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800712a:	f7fd f917 	bl	800435c <HAL_RCC_GetSysClockFreq>
 800712e:	61b8      	str	r0, [r7, #24]
        break;
 8007130:	e008      	b.n	8007144 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007136:	61bb      	str	r3, [r7, #24]
        break;
 8007138:	e004      	b.n	8007144 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	77bb      	strb	r3, [r7, #30]
        break;
 8007142:	bf00      	nop
=======
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a95      	ldr	r2, [pc, #596]	; (8008088 <UART_SetConfig+0x2cc>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d120      	bne.n	8007e7a <UART_SetConfig+0xbe>
 8007e38:	4b94      	ldr	r3, [pc, #592]	; (800808c <UART_SetConfig+0x2d0>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d816      	bhi.n	8007e74 <UART_SetConfig+0xb8>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <UART_SetConfig+0x90>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e69 	.word	0x08007e69
 8007e54:	08007e63 	.word	0x08007e63
 8007e58:	08007e6f 	.word	0x08007e6f
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e14f      	b.n	8008102 <UART_SetConfig+0x346>
 8007e62:	2302      	movs	r3, #2
 8007e64:	77fb      	strb	r3, [r7, #31]
 8007e66:	e14c      	b.n	8008102 <UART_SetConfig+0x346>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	77fb      	strb	r3, [r7, #31]
 8007e6c:	e149      	b.n	8008102 <UART_SetConfig+0x346>
 8007e6e:	2308      	movs	r3, #8
 8007e70:	77fb      	strb	r3, [r7, #31]
 8007e72:	e146      	b.n	8008102 <UART_SetConfig+0x346>
 8007e74:	2310      	movs	r3, #16
 8007e76:	77fb      	strb	r3, [r7, #31]
 8007e78:	e143      	b.n	8008102 <UART_SetConfig+0x346>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a84      	ldr	r2, [pc, #528]	; (8008090 <UART_SetConfig+0x2d4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d132      	bne.n	8007eea <UART_SetConfig+0x12e>
 8007e84:	4b81      	ldr	r3, [pc, #516]	; (800808c <UART_SetConfig+0x2d0>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f003 030c 	and.w	r3, r3, #12
 8007e8e:	2b0c      	cmp	r3, #12
 8007e90:	d828      	bhi.n	8007ee4 <UART_SetConfig+0x128>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0xdc>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ecd 	.word	0x08007ecd
 8007e9c:	08007ee5 	.word	0x08007ee5
 8007ea0:	08007ee5 	.word	0x08007ee5
 8007ea4:	08007ee5 	.word	0x08007ee5
 8007ea8:	08007ed9 	.word	0x08007ed9
 8007eac:	08007ee5 	.word	0x08007ee5
 8007eb0:	08007ee5 	.word	0x08007ee5
 8007eb4:	08007ee5 	.word	0x08007ee5
 8007eb8:	08007ed3 	.word	0x08007ed3
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007ee5 	.word	0x08007ee5
 8007ec8:	08007edf 	.word	0x08007edf
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e117      	b.n	8008102 <UART_SetConfig+0x346>
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	77fb      	strb	r3, [r7, #31]
 8007ed6:	e114      	b.n	8008102 <UART_SetConfig+0x346>
 8007ed8:	2304      	movs	r3, #4
 8007eda:	77fb      	strb	r3, [r7, #31]
 8007edc:	e111      	b.n	8008102 <UART_SetConfig+0x346>
 8007ede:	2308      	movs	r3, #8
 8007ee0:	77fb      	strb	r3, [r7, #31]
 8007ee2:	e10e      	b.n	8008102 <UART_SetConfig+0x346>
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	77fb      	strb	r3, [r7, #31]
 8007ee8:	e10b      	b.n	8008102 <UART_SetConfig+0x346>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a69      	ldr	r2, [pc, #420]	; (8008094 <UART_SetConfig+0x2d8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d120      	bne.n	8007f36 <UART_SetConfig+0x17a>
 8007ef4:	4b65      	ldr	r3, [pc, #404]	; (800808c <UART_SetConfig+0x2d0>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007efe:	2b30      	cmp	r3, #48	; 0x30
 8007f00:	d013      	beq.n	8007f2a <UART_SetConfig+0x16e>
 8007f02:	2b30      	cmp	r3, #48	; 0x30
 8007f04:	d814      	bhi.n	8007f30 <UART_SetConfig+0x174>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d009      	beq.n	8007f1e <UART_SetConfig+0x162>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d810      	bhi.n	8007f30 <UART_SetConfig+0x174>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <UART_SetConfig+0x15c>
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d006      	beq.n	8007f24 <UART_SetConfig+0x168>
 8007f16:	e00b      	b.n	8007f30 <UART_SetConfig+0x174>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	77fb      	strb	r3, [r7, #31]
 8007f1c:	e0f1      	b.n	8008102 <UART_SetConfig+0x346>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	77fb      	strb	r3, [r7, #31]
 8007f22:	e0ee      	b.n	8008102 <UART_SetConfig+0x346>
 8007f24:	2304      	movs	r3, #4
 8007f26:	77fb      	strb	r3, [r7, #31]
 8007f28:	e0eb      	b.n	8008102 <UART_SetConfig+0x346>
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	77fb      	strb	r3, [r7, #31]
 8007f2e:	e0e8      	b.n	8008102 <UART_SetConfig+0x346>
 8007f30:	2310      	movs	r3, #16
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e0e5      	b.n	8008102 <UART_SetConfig+0x346>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a57      	ldr	r2, [pc, #348]	; (8008098 <UART_SetConfig+0x2dc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d120      	bne.n	8007f82 <UART_SetConfig+0x1c6>
 8007f40:	4b52      	ldr	r3, [pc, #328]	; (800808c <UART_SetConfig+0x2d0>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f4c:	d013      	beq.n	8007f76 <UART_SetConfig+0x1ba>
 8007f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007f50:	d814      	bhi.n	8007f7c <UART_SetConfig+0x1c0>
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d009      	beq.n	8007f6a <UART_SetConfig+0x1ae>
 8007f56:	2b80      	cmp	r3, #128	; 0x80
 8007f58:	d810      	bhi.n	8007f7c <UART_SetConfig+0x1c0>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <UART_SetConfig+0x1a8>
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d006      	beq.n	8007f70 <UART_SetConfig+0x1b4>
 8007f62:	e00b      	b.n	8007f7c <UART_SetConfig+0x1c0>
 8007f64:	2300      	movs	r3, #0
 8007f66:	77fb      	strb	r3, [r7, #31]
 8007f68:	e0cb      	b.n	8008102 <UART_SetConfig+0x346>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	77fb      	strb	r3, [r7, #31]
 8007f6e:	e0c8      	b.n	8008102 <UART_SetConfig+0x346>
 8007f70:	2304      	movs	r3, #4
 8007f72:	77fb      	strb	r3, [r7, #31]
 8007f74:	e0c5      	b.n	8008102 <UART_SetConfig+0x346>
 8007f76:	2308      	movs	r3, #8
 8007f78:	77fb      	strb	r3, [r7, #31]
 8007f7a:	e0c2      	b.n	8008102 <UART_SetConfig+0x346>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	77fb      	strb	r3, [r7, #31]
 8007f80:	e0bf      	b.n	8008102 <UART_SetConfig+0x346>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a45      	ldr	r2, [pc, #276]	; (800809c <UART_SetConfig+0x2e0>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d125      	bne.n	8007fd8 <UART_SetConfig+0x21c>
 8007f8c:	4b3f      	ldr	r3, [pc, #252]	; (800808c <UART_SetConfig+0x2d0>)
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f9a:	d017      	beq.n	8007fcc <UART_SetConfig+0x210>
 8007f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa0:	d817      	bhi.n	8007fd2 <UART_SetConfig+0x216>
 8007fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa6:	d00b      	beq.n	8007fc0 <UART_SetConfig+0x204>
 8007fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fac:	d811      	bhi.n	8007fd2 <UART_SetConfig+0x216>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <UART_SetConfig+0x1fe>
 8007fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb6:	d006      	beq.n	8007fc6 <UART_SetConfig+0x20a>
 8007fb8:	e00b      	b.n	8007fd2 <UART_SetConfig+0x216>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e0a0      	b.n	8008102 <UART_SetConfig+0x346>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	77fb      	strb	r3, [r7, #31]
 8007fc4:	e09d      	b.n	8008102 <UART_SetConfig+0x346>
 8007fc6:	2304      	movs	r3, #4
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e09a      	b.n	8008102 <UART_SetConfig+0x346>
 8007fcc:	2308      	movs	r3, #8
 8007fce:	77fb      	strb	r3, [r7, #31]
 8007fd0:	e097      	b.n	8008102 <UART_SetConfig+0x346>
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	77fb      	strb	r3, [r7, #31]
 8007fd6:	e094      	b.n	8008102 <UART_SetConfig+0x346>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a30      	ldr	r2, [pc, #192]	; (80080a0 <UART_SetConfig+0x2e4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d125      	bne.n	800802e <UART_SetConfig+0x272>
 8007fe2:	4b2a      	ldr	r3, [pc, #168]	; (800808c <UART_SetConfig+0x2d0>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff0:	d017      	beq.n	8008022 <UART_SetConfig+0x266>
 8007ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff6:	d817      	bhi.n	8008028 <UART_SetConfig+0x26c>
 8007ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffc:	d00b      	beq.n	8008016 <UART_SetConfig+0x25a>
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008002:	d811      	bhi.n	8008028 <UART_SetConfig+0x26c>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <UART_SetConfig+0x254>
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d006      	beq.n	800801c <UART_SetConfig+0x260>
 800800e:	e00b      	b.n	8008028 <UART_SetConfig+0x26c>
 8008010:	2301      	movs	r3, #1
 8008012:	77fb      	strb	r3, [r7, #31]
 8008014:	e075      	b.n	8008102 <UART_SetConfig+0x346>
 8008016:	2302      	movs	r3, #2
 8008018:	77fb      	strb	r3, [r7, #31]
 800801a:	e072      	b.n	8008102 <UART_SetConfig+0x346>
 800801c:	2304      	movs	r3, #4
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	e06f      	b.n	8008102 <UART_SetConfig+0x346>
 8008022:	2308      	movs	r3, #8
 8008024:	77fb      	strb	r3, [r7, #31]
 8008026:	e06c      	b.n	8008102 <UART_SetConfig+0x346>
 8008028:	2310      	movs	r3, #16
 800802a:	77fb      	strb	r3, [r7, #31]
 800802c:	e069      	b.n	8008102 <UART_SetConfig+0x346>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <UART_SetConfig+0x2e8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d137      	bne.n	80080a8 <UART_SetConfig+0x2ec>
 8008038:	4b14      	ldr	r3, [pc, #80]	; (800808c <UART_SetConfig+0x2d0>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008046:	d017      	beq.n	8008078 <UART_SetConfig+0x2bc>
 8008048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800804c:	d817      	bhi.n	800807e <UART_SetConfig+0x2c2>
 800804e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008052:	d00b      	beq.n	800806c <UART_SetConfig+0x2b0>
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008058:	d811      	bhi.n	800807e <UART_SetConfig+0x2c2>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <UART_SetConfig+0x2aa>
 800805e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008062:	d006      	beq.n	8008072 <UART_SetConfig+0x2b6>
 8008064:	e00b      	b.n	800807e <UART_SetConfig+0x2c2>
 8008066:	2300      	movs	r3, #0
 8008068:	77fb      	strb	r3, [r7, #31]
 800806a:	e04a      	b.n	8008102 <UART_SetConfig+0x346>
 800806c:	2302      	movs	r3, #2
 800806e:	77fb      	strb	r3, [r7, #31]
 8008070:	e047      	b.n	8008102 <UART_SetConfig+0x346>
 8008072:	2304      	movs	r3, #4
 8008074:	77fb      	strb	r3, [r7, #31]
 8008076:	e044      	b.n	8008102 <UART_SetConfig+0x346>
 8008078:	2308      	movs	r3, #8
 800807a:	77fb      	strb	r3, [r7, #31]
 800807c:	e041      	b.n	8008102 <UART_SetConfig+0x346>
 800807e:	2310      	movs	r3, #16
 8008080:	77fb      	strb	r3, [r7, #31]
 8008082:	e03e      	b.n	8008102 <UART_SetConfig+0x346>
 8008084:	efff69f3 	.word	0xefff69f3
 8008088:	40011000 	.word	0x40011000
 800808c:	40023800 	.word	0x40023800
 8008090:	40004400 	.word	0x40004400
 8008094:	40004800 	.word	0x40004800
 8008098:	40004c00 	.word	0x40004c00
 800809c:	40005000 	.word	0x40005000
 80080a0:	40011400 	.word	0x40011400
 80080a4:	40007800 	.word	0x40007800
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a71      	ldr	r2, [pc, #452]	; (8008274 <UART_SetConfig+0x4b8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d125      	bne.n	80080fe <UART_SetConfig+0x342>
 80080b2:	4b71      	ldr	r3, [pc, #452]	; (8008278 <UART_SetConfig+0x4bc>)
 80080b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080c0:	d017      	beq.n	80080f2 <UART_SetConfig+0x336>
 80080c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80080c6:	d817      	bhi.n	80080f8 <UART_SetConfig+0x33c>
 80080c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080cc:	d00b      	beq.n	80080e6 <UART_SetConfig+0x32a>
 80080ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d2:	d811      	bhi.n	80080f8 <UART_SetConfig+0x33c>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <UART_SetConfig+0x324>
 80080d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080dc:	d006      	beq.n	80080ec <UART_SetConfig+0x330>
 80080de:	e00b      	b.n	80080f8 <UART_SetConfig+0x33c>
 80080e0:	2300      	movs	r3, #0
 80080e2:	77fb      	strb	r3, [r7, #31]
 80080e4:	e00d      	b.n	8008102 <UART_SetConfig+0x346>
 80080e6:	2302      	movs	r3, #2
 80080e8:	77fb      	strb	r3, [r7, #31]
 80080ea:	e00a      	b.n	8008102 <UART_SetConfig+0x346>
 80080ec:	2304      	movs	r3, #4
 80080ee:	77fb      	strb	r3, [r7, #31]
 80080f0:	e007      	b.n	8008102 <UART_SetConfig+0x346>
 80080f2:	2308      	movs	r3, #8
 80080f4:	77fb      	strb	r3, [r7, #31]
 80080f6:	e004      	b.n	8008102 <UART_SetConfig+0x346>
 80080f8:	2310      	movs	r3, #16
 80080fa:	77fb      	strb	r3, [r7, #31]
 80080fc:	e001      	b.n	8008102 <UART_SetConfig+0x346>
 80080fe:	2310      	movs	r3, #16
 8008100:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800810a:	d15b      	bne.n	80081c4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800810c:	7ffb      	ldrb	r3, [r7, #31]
 800810e:	2b08      	cmp	r3, #8
 8008110:	d827      	bhi.n	8008162 <UART_SetConfig+0x3a6>
 8008112:	a201      	add	r2, pc, #4	; (adr r2, 8008118 <UART_SetConfig+0x35c>)
 8008114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008118:	0800813d 	.word	0x0800813d
 800811c:	08008145 	.word	0x08008145
 8008120:	0800814d 	.word	0x0800814d
 8008124:	08008163 	.word	0x08008163
 8008128:	08008153 	.word	0x08008153
 800812c:	08008163 	.word	0x08008163
 8008130:	08008163 	.word	0x08008163
 8008134:	08008163 	.word	0x08008163
 8008138:	0800815b 	.word	0x0800815b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800813c:	f7fc fd02 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 8008140:	61b8      	str	r0, [r7, #24]
        break;
 8008142:	e013      	b.n	800816c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008144:	f7fc fd12 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8008148:	61b8      	str	r0, [r7, #24]
        break;
 800814a:	e00f      	b.n	800816c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800814c:	4b4b      	ldr	r3, [pc, #300]	; (800827c <UART_SetConfig+0x4c0>)
 800814e:	61bb      	str	r3, [r7, #24]
        break;
 8008150:	e00c      	b.n	800816c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008152:	f7fc fc35 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8008156:	61b8      	str	r0, [r7, #24]
        break;
 8008158:	e008      	b.n	800816c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815e:	61bb      	str	r3, [r7, #24]
        break;
 8008160:	e004      	b.n	800816c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	77bb      	strb	r3, [r7, #30]
        break;
 800816a:	bf00      	nop
>>>>>>> fsm_rd_rfid
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d074      	beq.n	8007234 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	005a      	lsls	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	441a      	add	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	fbb2 f3f3 	udiv	r3, r2, r3
 800715e:	b29b      	uxth	r3, r3
 8007160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b0f      	cmp	r3, #15
 8007166:	d916      	bls.n	8007196 <UART_SetConfig+0x402>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716e:	d212      	bcs.n	8007196 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f023 030f 	bic.w	r3, r3, #15
 8007178:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	b29a      	uxth	r2, r3
 8007186:	89fb      	ldrh	r3, [r7, #14]
 8007188:	4313      	orrs	r3, r2
 800718a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	89fa      	ldrh	r2, [r7, #14]
 8007192:	60da      	str	r2, [r3, #12]
 8007194:	e04e      	b.n	8007234 <UART_SetConfig+0x4a0>
=======
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d074      	beq.n	800825c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	005a      	lsls	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	441a      	add	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	fbb2 f3f3 	udiv	r3, r2, r3
 8008186:	b29b      	uxth	r3, r3
 8008188:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b0f      	cmp	r3, #15
 800818e:	d916      	bls.n	80081be <UART_SetConfig+0x402>
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008196:	d212      	bcs.n	80081be <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f023 030f 	bic.w	r3, r3, #15
 80081a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	89fb      	ldrh	r3, [r7, #14]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	89fa      	ldrh	r2, [r7, #14]
 80081ba:	60da      	str	r2, [r3, #12]
 80081bc:	e04e      	b.n	800825c <UART_SetConfig+0x4a0>
>>>>>>> fsm_rd_rfid
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007196:	2301      	movs	r3, #1
 8007198:	77bb      	strb	r3, [r7, #30]
 800719a:	e04b      	b.n	8007234 <UART_SetConfig+0x4a0>
=======
 80081be:	2301      	movs	r3, #1
 80081c0:	77bb      	strb	r3, [r7, #30]
 80081c2:	e04b      	b.n	800825c <UART_SetConfig+0x4a0>
>>>>>>> fsm_rd_rfid
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800719c:	7ffb      	ldrb	r3, [r7, #31]
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d827      	bhi.n	80071f2 <UART_SetConfig+0x45e>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0x414>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071cd 	.word	0x080071cd
 80071ac:	080071d5 	.word	0x080071d5
 80071b0:	080071dd 	.word	0x080071dd
 80071b4:	080071f3 	.word	0x080071f3
 80071b8:	080071e3 	.word	0x080071e3
 80071bc:	080071f3 	.word	0x080071f3
 80071c0:	080071f3 	.word	0x080071f3
 80071c4:	080071f3 	.word	0x080071f3
 80071c8:	080071eb 	.word	0x080071eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071cc:	f7fd f988 	bl	80044e0 <HAL_RCC_GetPCLK1Freq>
 80071d0:	61b8      	str	r0, [r7, #24]
        break;
 80071d2:	e013      	b.n	80071fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7fd f998 	bl	8004508 <HAL_RCC_GetPCLK2Freq>
 80071d8:	61b8      	str	r0, [r7, #24]
        break;
 80071da:	e00f      	b.n	80071fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071dc:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <UART_SetConfig+0x4c0>)
 80071de:	61bb      	str	r3, [r7, #24]
        break;
 80071e0:	e00c      	b.n	80071fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071e2:	f7fd f8bb 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80071e6:	61b8      	str	r0, [r7, #24]
        break;
 80071e8:	e008      	b.n	80071fc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ee:	61bb      	str	r3, [r7, #24]
        break;
 80071f0:	e004      	b.n	80071fc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	77bb      	strb	r3, [r7, #30]
        break;
 80071fa:	bf00      	nop
    }

    if (pclk != 0U)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d018      	beq.n	8007234 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	085a      	lsrs	r2, r3, #1
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	441a      	add	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	fbb2 f3f3 	udiv	r3, r2, r3
 8007214:	b29b      	uxth	r3, r3
 8007216:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	2b0f      	cmp	r3, #15
 800721c:	d908      	bls.n	8007230 <UART_SetConfig+0x49c>
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d204      	bcs.n	8007230 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	e001      	b.n	8007234 <UART_SetConfig+0x4a0>
=======
 80081c4:	7ffb      	ldrb	r3, [r7, #31]
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d827      	bhi.n	800821a <UART_SetConfig+0x45e>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <UART_SetConfig+0x414>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081f5 	.word	0x080081f5
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	08008205 	.word	0x08008205
 80081dc:	0800821b 	.word	0x0800821b
 80081e0:	0800820b 	.word	0x0800820b
 80081e4:	0800821b 	.word	0x0800821b
 80081e8:	0800821b 	.word	0x0800821b
 80081ec:	0800821b 	.word	0x0800821b
 80081f0:	08008213 	.word	0x08008213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f4:	f7fc fca6 	bl	8004b44 <HAL_RCC_GetPCLK1Freq>
 80081f8:	61b8      	str	r0, [r7, #24]
        break;
 80081fa:	e013      	b.n	8008224 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081fc:	f7fc fcb6 	bl	8004b6c <HAL_RCC_GetPCLK2Freq>
 8008200:	61b8      	str	r0, [r7, #24]
        break;
 8008202:	e00f      	b.n	8008224 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008204:	4b1d      	ldr	r3, [pc, #116]	; (800827c <UART_SetConfig+0x4c0>)
 8008206:	61bb      	str	r3, [r7, #24]
        break;
 8008208:	e00c      	b.n	8008224 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800820a:	f7fc fbd9 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 800820e:	61b8      	str	r0, [r7, #24]
        break;
 8008210:	e008      	b.n	8008224 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008216:	61bb      	str	r3, [r7, #24]
        break;
 8008218:	e004      	b.n	8008224 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	77bb      	strb	r3, [r7, #30]
        break;
 8008222:	bf00      	nop
    }

    if (pclk != 0U)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d018      	beq.n	800825c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	085a      	lsrs	r2, r3, #1
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	441a      	add	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	fbb2 f3f3 	udiv	r3, r2, r3
 800823c:	b29b      	uxth	r3, r3
 800823e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	2b0f      	cmp	r3, #15
 8008244:	d908      	bls.n	8008258 <UART_SetConfig+0x49c>
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800824c:	d204      	bcs.n	8008258 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	e001      	b.n	800825c <UART_SetConfig+0x4a0>
>>>>>>> fsm_rd_rfid
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8007230:	2301      	movs	r3, #1
 8007232:	77bb      	strb	r3, [r7, #30]
=======
 8008258:	2301      	movs	r3, #1
 800825a:	77bb      	strb	r3, [r7, #30]
>>>>>>> fsm_rd_rfid
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
<<<<<<< HEAD
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007240:	7fbb      	ldrb	r3, [r7, #30]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3720      	adds	r7, #32
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40007c00 	.word	0x40007c00
 8007250:	40023800 	.word	0x40023800
 8007254:	00f42400 	.word	0x00f42400

08007258 <UART_AdvFeatureConfig>:
=======
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008268:	7fbb      	ldrb	r3, [r7, #30]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	40007c00 	.word	0x40007c00
 8008278:	40023800 	.word	0x40023800
 800827c:	00f42400 	.word	0x00f42400

08008280 <UART_AdvFeatureConfig>:
>>>>>>> fsm_rd_rfid
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
=======
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
=======
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
=======
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00a      	beq.n	80082cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
=======
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	605a      	str	r2, [r3, #4]
=======
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	f003 0308 	and.w	r3, r3, #8
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]
=======
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730e:	f003 0320 	and.w	r3, r3, #32
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	609a      	str	r2, [r3, #8]
=======
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	609a      	str	r2, [r3, #8]
>>>>>>> fsm_rd_rfid
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01a      	beq.n	800736e <UART_AdvFeatureConfig+0x116>
=======
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01a      	beq.n	8008396 <UART_AdvFeatureConfig+0x116>
>>>>>>> fsm_rd_rfid
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007356:	d10a      	bne.n	800736e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
=======
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800837e:	d10a      	bne.n	8008396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
>>>>>>> fsm_rd_rfid
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	605a      	str	r2, [r3, #4]
  }
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <UART_CheckIdleState>:
=======
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	605a      	str	r2, [r3, #4]
  }
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_CheckIdleState>:
>>>>>>> fsm_rd_rfid
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	6078      	str	r0, [r7, #4]
=======
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	6078      	str	r0, [r7, #4]
>>>>>>> fsm_rd_rfid
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073ac:	f7fa fe12 	bl	8001fd4 <HAL_GetTick>
 80073b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b08      	cmp	r3, #8
 80073be:	d10e      	bne.n	80073de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f82d 	bl	800742e <UART_WaitOnFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e023      	b.n	8007426 <UART_CheckIdleState+0x8a>
=======
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083d4:	f7fa f900 	bl	80025d8 <HAL_GetTick>
 80083d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d10e      	bne.n	8008406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f82d 	bl	8008456 <UART_WaitOnFlagUntilTimeout>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e023      	b.n	800844e <UART_CheckIdleState+0x8a>
>>>>>>> fsm_rd_rfid
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d10e      	bne.n	800740a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f817 	bl	800742e <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e00d      	b.n	8007426 <UART_CheckIdleState+0x8a>
=======
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b04      	cmp	r3, #4
 8008412:	d10e      	bne.n	8008432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f817 	bl	8008456 <UART_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e00d      	b.n	800844e <UART_CheckIdleState+0x8a>
>>>>>>> fsm_rd_rfid
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2220      	movs	r2, #32
 8007414:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_WaitOnFlagUntilTimeout>:
=======
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> fsm_rd_rfid
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743e:	e05e      	b.n	80074fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d05a      	beq.n	80074fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007448:	f7fa fdc4 	bl	8001fd4 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <UART_WaitOnFlagUntilTimeout+0x30>
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d11b      	bne.n	8007496 <UART_WaitOnFlagUntilTimeout+0x68>
=======
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008466:	e05e      	b.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d05a      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008470:	f7fa f8b2 	bl	80025d8 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	429a      	cmp	r2, r3
 800847e:	d302      	bcc.n	8008486 <UART_WaitOnFlagUntilTimeout+0x30>
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11b      	bne.n	80084be <UART_WaitOnFlagUntilTimeout+0x68>
>>>>>>> fsm_rd_rfid
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800746c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e043      	b.n	800751e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02c      	beq.n	80074fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074b2:	d124      	bne.n	80074fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074bc:	621a      	str	r2, [r3, #32]
=======
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008494:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2220      	movs	r2, #32
 80084aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2220      	movs	r2, #32
 80084b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e043      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d02c      	beq.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084da:	d124      	bne.n	8008526 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e4:	621a      	str	r2, [r3, #32]
>>>>>>> fsm_rd_rfid

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
<<<<<<< HEAD
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e00f      	b.n	800751e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	429a      	cmp	r2, r3
 800750c:	bf0c      	ite	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	2300      	movne	r3, #0
 8007512:	b2db      	uxtb	r3, r3
 8007514:	461a      	mov	r2, r3
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	429a      	cmp	r2, r3
 800751a:	d091      	beq.n	8007440 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084f4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2220      	movs	r2, #32
 800850a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e00f      	b.n	8008546 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4013      	ands	r3, r2
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	429a      	cmp	r2, r3
 8008534:	bf0c      	ite	eq
 8008536:	2301      	moveq	r3, #1
 8008538:	2300      	movne	r3, #0
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d091      	beq.n	8008468 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> fsm_rd_rfid
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <UART_EndRxTransfer>:
=======
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <UART_EndRxTransfer>:
>>>>>>> fsm_rd_rfid
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800753c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0201 	bic.w	r2, r2, #1
 800754c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007552:	2b01      	cmp	r3, #1
 8007554:	d107      	bne.n	8007566 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0210 	bic.w	r2, r2, #16
 8007564:	601a      	str	r2, [r3, #0]
=======
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008564:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0201 	bic.w	r2, r2, #1
 8008574:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857a:	2b01      	cmp	r3, #1
 800857c:	d107      	bne.n	800858e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0210 	bic.w	r2, r2, #16
 800858c:	601a      	str	r2, [r3, #0]
>>>>>>> fsm_rd_rfid
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <UART_DMAAbortOnError>:
=======
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2220      	movs	r2, #32
 8008592:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <UART_DMAAbortOnError>:
>>>>>>> fsm_rd_rfid
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
=======
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff fbd6 	bl	8006d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <UART_EndTransmit_IT>:
=======
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fbd6 	bl	8007d7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_EndTransmit_IT>:
>>>>>>> fsm_rd_rfid
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	669a      	str	r2, [r3, #104]	; 0x68
=======
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	669a      	str	r2, [r3, #104]	; 0x68
>>>>>>> fsm_rd_rfid
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff fbb3 	bl	8006d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <__errno>:
 80075e4:	4b01      	ldr	r3, [pc, #4]	; (80075ec <__errno+0x8>)
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	20000064 	.word	0x20000064

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f002 fc62 	bl	8009ecc <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	0800a2fc 	.word	0x0800a2fc
 800762c:	0800a2fc 	.word	0x0800a2fc
 8007630:	0800a2fc 	.word	0x0800a2fc
 8007634:	0800a300 	.word	0x0800a300

08007638 <malloc>:
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <malloc+0xc>)
 800763a:	4601      	mov	r1, r0
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f000 b85b 	b.w	80076f8 <_malloc_r>
 8007642:	bf00      	nop
 8007644:	20000064 	.word	0x20000064

08007648 <memset>:
 8007648:	4402      	add	r2, r0
 800764a:	4603      	mov	r3, r0
 800764c:	4293      	cmp	r3, r2
 800764e:	d100      	bne.n	8007652 <memset+0xa>
 8007650:	4770      	bx	lr
 8007652:	f803 1b01 	strb.w	r1, [r3], #1
 8007656:	e7f9      	b.n	800764c <memset+0x4>

08007658 <_free_r>:
 8007658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800765a:	2900      	cmp	r1, #0
 800765c:	d048      	beq.n	80076f0 <_free_r+0x98>
 800765e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007662:	9001      	str	r0, [sp, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f1a1 0404 	sub.w	r4, r1, #4
 800766a:	bfb8      	it	lt
 800766c:	18e4      	addlt	r4, r4, r3
 800766e:	f001 fb13 	bl	8008c98 <__malloc_lock>
 8007672:	4a20      	ldr	r2, [pc, #128]	; (80076f4 <_free_r+0x9c>)
 8007674:	9801      	ldr	r0, [sp, #4]
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	4615      	mov	r5, r2
 800767a:	b933      	cbnz	r3, 800768a <_free_r+0x32>
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	6014      	str	r4, [r2, #0]
 8007680:	b003      	add	sp, #12
 8007682:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007686:	f001 bb0d 	b.w	8008ca4 <__malloc_unlock>
 800768a:	42a3      	cmp	r3, r4
 800768c:	d90b      	bls.n	80076a6 <_free_r+0x4e>
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	1862      	adds	r2, r4, r1
 8007692:	4293      	cmp	r3, r2
 8007694:	bf04      	itt	eq
 8007696:	681a      	ldreq	r2, [r3, #0]
 8007698:	685b      	ldreq	r3, [r3, #4]
 800769a:	6063      	str	r3, [r4, #4]
 800769c:	bf04      	itt	eq
 800769e:	1852      	addeq	r2, r2, r1
 80076a0:	6022      	streq	r2, [r4, #0]
 80076a2:	602c      	str	r4, [r5, #0]
 80076a4:	e7ec      	b.n	8007680 <_free_r+0x28>
 80076a6:	461a      	mov	r2, r3
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	b10b      	cbz	r3, 80076b0 <_free_r+0x58>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d9fa      	bls.n	80076a6 <_free_r+0x4e>
 80076b0:	6811      	ldr	r1, [r2, #0]
 80076b2:	1855      	adds	r5, r2, r1
 80076b4:	42a5      	cmp	r5, r4
 80076b6:	d10b      	bne.n	80076d0 <_free_r+0x78>
 80076b8:	6824      	ldr	r4, [r4, #0]
 80076ba:	4421      	add	r1, r4
 80076bc:	1854      	adds	r4, r2, r1
 80076be:	42a3      	cmp	r3, r4
 80076c0:	6011      	str	r1, [r2, #0]
 80076c2:	d1dd      	bne.n	8007680 <_free_r+0x28>
 80076c4:	681c      	ldr	r4, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	6053      	str	r3, [r2, #4]
 80076ca:	4421      	add	r1, r4
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	e7d7      	b.n	8007680 <_free_r+0x28>
 80076d0:	d902      	bls.n	80076d8 <_free_r+0x80>
 80076d2:	230c      	movs	r3, #12
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7d3      	b.n	8007680 <_free_r+0x28>
 80076d8:	6825      	ldr	r5, [r4, #0]
 80076da:	1961      	adds	r1, r4, r5
 80076dc:	428b      	cmp	r3, r1
 80076de:	bf04      	itt	eq
 80076e0:	6819      	ldreq	r1, [r3, #0]
 80076e2:	685b      	ldreq	r3, [r3, #4]
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	bf04      	itt	eq
 80076e8:	1949      	addeq	r1, r1, r5
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	6054      	str	r4, [r2, #4]
 80076ee:	e7c7      	b.n	8007680 <_free_r+0x28>
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	20000268 	.word	0x20000268

080076f8 <_malloc_r>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	1ccd      	adds	r5, r1, #3
 80076fc:	f025 0503 	bic.w	r5, r5, #3
 8007700:	3508      	adds	r5, #8
 8007702:	2d0c      	cmp	r5, #12
 8007704:	bf38      	it	cc
 8007706:	250c      	movcc	r5, #12
 8007708:	2d00      	cmp	r5, #0
 800770a:	4606      	mov	r6, r0
 800770c:	db01      	blt.n	8007712 <_malloc_r+0x1a>
 800770e:	42a9      	cmp	r1, r5
 8007710:	d903      	bls.n	800771a <_malloc_r+0x22>
 8007712:	230c      	movs	r3, #12
 8007714:	6033      	str	r3, [r6, #0]
 8007716:	2000      	movs	r0, #0
 8007718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800771a:	f001 fabd 	bl	8008c98 <__malloc_lock>
 800771e:	4921      	ldr	r1, [pc, #132]	; (80077a4 <_malloc_r+0xac>)
 8007720:	680a      	ldr	r2, [r1, #0]
 8007722:	4614      	mov	r4, r2
 8007724:	b99c      	cbnz	r4, 800774e <_malloc_r+0x56>
 8007726:	4f20      	ldr	r7, [pc, #128]	; (80077a8 <_malloc_r+0xb0>)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	b923      	cbnz	r3, 8007736 <_malloc_r+0x3e>
 800772c:	4621      	mov	r1, r4
 800772e:	4630      	mov	r0, r6
 8007730:	f000 fc80 	bl	8008034 <_sbrk_r>
 8007734:	6038      	str	r0, [r7, #0]
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	f000 fc7b 	bl	8008034 <_sbrk_r>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d123      	bne.n	800778a <_malloc_r+0x92>
 8007742:	230c      	movs	r3, #12
 8007744:	6033      	str	r3, [r6, #0]
 8007746:	4630      	mov	r0, r6
 8007748:	f001 faac 	bl	8008ca4 <__malloc_unlock>
 800774c:	e7e3      	b.n	8007716 <_malloc_r+0x1e>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	1b5b      	subs	r3, r3, r5
 8007752:	d417      	bmi.n	8007784 <_malloc_r+0x8c>
 8007754:	2b0b      	cmp	r3, #11
 8007756:	d903      	bls.n	8007760 <_malloc_r+0x68>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	441c      	add	r4, r3
 800775c:	6025      	str	r5, [r4, #0]
 800775e:	e004      	b.n	800776a <_malloc_r+0x72>
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	42a2      	cmp	r2, r4
 8007764:	bf0c      	ite	eq
 8007766:	600b      	streq	r3, [r1, #0]
 8007768:	6053      	strne	r3, [r2, #4]
 800776a:	4630      	mov	r0, r6
 800776c:	f001 fa9a 	bl	8008ca4 <__malloc_unlock>
 8007770:	f104 000b 	add.w	r0, r4, #11
 8007774:	1d23      	adds	r3, r4, #4
 8007776:	f020 0007 	bic.w	r0, r0, #7
 800777a:	1ac2      	subs	r2, r0, r3
 800777c:	d0cc      	beq.n	8007718 <_malloc_r+0x20>
 800777e:	1a1b      	subs	r3, r3, r0
 8007780:	50a3      	str	r3, [r4, r2]
 8007782:	e7c9      	b.n	8007718 <_malloc_r+0x20>
 8007784:	4622      	mov	r2, r4
 8007786:	6864      	ldr	r4, [r4, #4]
 8007788:	e7cc      	b.n	8007724 <_malloc_r+0x2c>
 800778a:	1cc4      	adds	r4, r0, #3
 800778c:	f024 0403 	bic.w	r4, r4, #3
 8007790:	42a0      	cmp	r0, r4
 8007792:	d0e3      	beq.n	800775c <_malloc_r+0x64>
 8007794:	1a21      	subs	r1, r4, r0
 8007796:	4630      	mov	r0, r6
 8007798:	f000 fc4c 	bl	8008034 <_sbrk_r>
 800779c:	3001      	adds	r0, #1
 800779e:	d1dd      	bne.n	800775c <_malloc_r+0x64>
 80077a0:	e7cf      	b.n	8007742 <_malloc_r+0x4a>
 80077a2:	bf00      	nop
 80077a4:	20000268 	.word	0x20000268
 80077a8:	2000026c 	.word	0x2000026c

080077ac <__cvt>:
 80077ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ae:	ed2d 8b02 	vpush	{d8}
 80077b2:	eeb0 8b40 	vmov.f64	d8, d0
 80077b6:	b085      	sub	sp, #20
 80077b8:	4617      	mov	r7, r2
 80077ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80077bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80077be:	ee18 2a90 	vmov	r2, s17
 80077c2:	f025 0520 	bic.w	r5, r5, #32
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	bfb6      	itet	lt
 80077ca:	222d      	movlt	r2, #45	; 0x2d
 80077cc:	2200      	movge	r2, #0
 80077ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80077d2:	2d46      	cmp	r5, #70	; 0x46
 80077d4:	460c      	mov	r4, r1
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	d004      	beq.n	80077e4 <__cvt+0x38>
 80077da:	2d45      	cmp	r5, #69	; 0x45
 80077dc:	d100      	bne.n	80077e0 <__cvt+0x34>
 80077de:	3401      	adds	r4, #1
 80077e0:	2102      	movs	r1, #2
 80077e2:	e000      	b.n	80077e6 <__cvt+0x3a>
 80077e4:	2103      	movs	r1, #3
 80077e6:	ab03      	add	r3, sp, #12
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	ab02      	add	r3, sp, #8
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4622      	mov	r2, r4
 80077f0:	4633      	mov	r3, r6
 80077f2:	eeb0 0b48 	vmov.f64	d0, d8
 80077f6:	f000 fcbb 	bl	8008170 <_dtoa_r>
 80077fa:	2d47      	cmp	r5, #71	; 0x47
 80077fc:	d109      	bne.n	8007812 <__cvt+0x66>
 80077fe:	07fb      	lsls	r3, r7, #31
 8007800:	d407      	bmi.n	8007812 <__cvt+0x66>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007806:	1a1b      	subs	r3, r3, r0
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	b005      	add	sp, #20
 800780c:	ecbd 8b02 	vpop	{d8}
 8007810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007812:	2d46      	cmp	r5, #70	; 0x46
 8007814:	eb00 0204 	add.w	r2, r0, r4
 8007818:	d10c      	bne.n	8007834 <__cvt+0x88>
 800781a:	7803      	ldrb	r3, [r0, #0]
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d107      	bne.n	8007830 <__cvt+0x84>
 8007820:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	bf1c      	itt	ne
 800782a:	f1c4 0401 	rsbne	r4, r4, #1
 800782e:	6034      	strne	r4, [r6, #0]
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	441a      	add	r2, r3
 8007834:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800783c:	bf08      	it	eq
 800783e:	9203      	streq	r2, [sp, #12]
 8007840:	2130      	movs	r1, #48	; 0x30
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	4293      	cmp	r3, r2
 8007846:	d2dc      	bcs.n	8007802 <__cvt+0x56>
 8007848:	1c5c      	adds	r4, r3, #1
 800784a:	9403      	str	r4, [sp, #12]
 800784c:	7019      	strb	r1, [r3, #0]
 800784e:	e7f8      	b.n	8007842 <__cvt+0x96>

08007850 <__exponent>:
 8007850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007852:	4603      	mov	r3, r0
 8007854:	2900      	cmp	r1, #0
 8007856:	bfb8      	it	lt
 8007858:	4249      	neglt	r1, r1
 800785a:	f803 2b02 	strb.w	r2, [r3], #2
 800785e:	bfb4      	ite	lt
 8007860:	222d      	movlt	r2, #45	; 0x2d
 8007862:	222b      	movge	r2, #43	; 0x2b
 8007864:	2909      	cmp	r1, #9
 8007866:	7042      	strb	r2, [r0, #1]
 8007868:	dd2a      	ble.n	80078c0 <__exponent+0x70>
 800786a:	f10d 0407 	add.w	r4, sp, #7
 800786e:	46a4      	mov	ip, r4
 8007870:	270a      	movs	r7, #10
 8007872:	46a6      	mov	lr, r4
 8007874:	460a      	mov	r2, r1
 8007876:	fb91 f6f7 	sdiv	r6, r1, r7
 800787a:	fb07 1516 	mls	r5, r7, r6, r1
 800787e:	3530      	adds	r5, #48	; 0x30
 8007880:	2a63      	cmp	r2, #99	; 0x63
 8007882:	f104 34ff 	add.w	r4, r4, #4294967295
 8007886:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800788a:	4631      	mov	r1, r6
 800788c:	dcf1      	bgt.n	8007872 <__exponent+0x22>
 800788e:	3130      	adds	r1, #48	; 0x30
 8007890:	f1ae 0502 	sub.w	r5, lr, #2
 8007894:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007898:	1c44      	adds	r4, r0, #1
 800789a:	4629      	mov	r1, r5
 800789c:	4561      	cmp	r1, ip
 800789e:	d30a      	bcc.n	80078b6 <__exponent+0x66>
 80078a0:	f10d 0209 	add.w	r2, sp, #9
 80078a4:	eba2 020e 	sub.w	r2, r2, lr
 80078a8:	4565      	cmp	r5, ip
 80078aa:	bf88      	it	hi
 80078ac:	2200      	movhi	r2, #0
 80078ae:	4413      	add	r3, r2
 80078b0:	1a18      	subs	r0, r3, r0
 80078b2:	b003      	add	sp, #12
 80078b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078be:	e7ed      	b.n	800789c <__exponent+0x4c>
 80078c0:	2330      	movs	r3, #48	; 0x30
 80078c2:	3130      	adds	r1, #48	; 0x30
 80078c4:	7083      	strb	r3, [r0, #2]
 80078c6:	70c1      	strb	r1, [r0, #3]
 80078c8:	1d03      	adds	r3, r0, #4
 80078ca:	e7f1      	b.n	80078b0 <__exponent+0x60>
 80078cc:	0000      	movs	r0, r0
	...

080078d0 <_printf_float>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	b08b      	sub	sp, #44	; 0x2c
 80078d6:	460c      	mov	r4, r1
 80078d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80078dc:	4616      	mov	r6, r2
 80078de:	461f      	mov	r7, r3
 80078e0:	4605      	mov	r5, r0
 80078e2:	f001 f9c7 	bl	8008c74 <_localeconv_r>
 80078e6:	f8d0 b000 	ldr.w	fp, [r0]
 80078ea:	4658      	mov	r0, fp
 80078ec:	f7f8 fca8 	bl	8000240 <strlen>
 80078f0:	2300      	movs	r3, #0
 80078f2:	9308      	str	r3, [sp, #32]
 80078f4:	f8d8 3000 	ldr.w	r3, [r8]
 80078f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80078fc:	6822      	ldr	r2, [r4, #0]
 80078fe:	3307      	adds	r3, #7
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	f103 0108 	add.w	r1, r3, #8
 8007908:	f8c8 1000 	str.w	r1, [r8]
 800790c:	4682      	mov	sl, r0
 800790e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007912:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007916:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007b78 <_printf_float+0x2a8>
 800791a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800791e:	eeb0 6bc0 	vabs.f64	d6, d0
 8007922:	eeb4 6b47 	vcmp.f64	d6, d7
 8007926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792a:	dd24      	ble.n	8007976 <_printf_float+0xa6>
 800792c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007934:	d502      	bpl.n	800793c <_printf_float+0x6c>
 8007936:	232d      	movs	r3, #45	; 0x2d
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	4b90      	ldr	r3, [pc, #576]	; (8007b80 <_printf_float+0x2b0>)
 800793e:	4891      	ldr	r0, [pc, #580]	; (8007b84 <_printf_float+0x2b4>)
 8007940:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007944:	bf94      	ite	ls
 8007946:	4698      	movls	r8, r3
 8007948:	4680      	movhi	r8, r0
 800794a:	2303      	movs	r3, #3
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	f022 0204 	bic.w	r2, r2, #4
 8007952:	2300      	movs	r3, #0
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	9304      	str	r3, [sp, #16]
 8007958:	9700      	str	r7, [sp, #0]
 800795a:	4633      	mov	r3, r6
 800795c:	aa09      	add	r2, sp, #36	; 0x24
 800795e:	4621      	mov	r1, r4
 8007960:	4628      	mov	r0, r5
 8007962:	f000 f9d3 	bl	8007d0c <_printf_common>
 8007966:	3001      	adds	r0, #1
 8007968:	f040 808a 	bne.w	8007a80 <_printf_float+0x1b0>
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	b00b      	add	sp, #44	; 0x2c
 8007972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007976:	eeb4 0b40 	vcmp.f64	d0, d0
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	d709      	bvc.n	8007994 <_printf_float+0xc4>
 8007980:	ee10 3a90 	vmov	r3, s1
 8007984:	2b00      	cmp	r3, #0
 8007986:	bfbc      	itt	lt
 8007988:	232d      	movlt	r3, #45	; 0x2d
 800798a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800798e:	487e      	ldr	r0, [pc, #504]	; (8007b88 <_printf_float+0x2b8>)
 8007990:	4b7e      	ldr	r3, [pc, #504]	; (8007b8c <_printf_float+0x2bc>)
 8007992:	e7d5      	b.n	8007940 <_printf_float+0x70>
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800799a:	9104      	str	r1, [sp, #16]
 800799c:	1c59      	adds	r1, r3, #1
 800799e:	d13c      	bne.n	8007a1a <_printf_float+0x14a>
 80079a0:	2306      	movs	r3, #6
 80079a2:	6063      	str	r3, [r4, #4]
 80079a4:	2300      	movs	r3, #0
 80079a6:	9303      	str	r3, [sp, #12]
 80079a8:	ab08      	add	r3, sp, #32
 80079aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80079ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079b2:	ab07      	add	r3, sp, #28
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	f10d 031b 	add.w	r3, sp, #27
 80079be:	4628      	mov	r0, r5
 80079c0:	f7ff fef4 	bl	80077ac <__cvt>
 80079c4:	9b04      	ldr	r3, [sp, #16]
 80079c6:	9907      	ldr	r1, [sp, #28]
 80079c8:	2b47      	cmp	r3, #71	; 0x47
 80079ca:	4680      	mov	r8, r0
 80079cc:	d108      	bne.n	80079e0 <_printf_float+0x110>
 80079ce:	1cc8      	adds	r0, r1, #3
 80079d0:	db02      	blt.n	80079d8 <_printf_float+0x108>
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	4299      	cmp	r1, r3
 80079d6:	dd41      	ble.n	8007a5c <_printf_float+0x18c>
 80079d8:	f1a9 0902 	sub.w	r9, r9, #2
 80079dc:	fa5f f989 	uxtb.w	r9, r9
 80079e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80079e4:	d820      	bhi.n	8007a28 <_printf_float+0x158>
 80079e6:	3901      	subs	r1, #1
 80079e8:	464a      	mov	r2, r9
 80079ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079ee:	9107      	str	r1, [sp, #28]
 80079f0:	f7ff ff2e 	bl	8007850 <__exponent>
 80079f4:	9a08      	ldr	r2, [sp, #32]
 80079f6:	9004      	str	r0, [sp, #16]
 80079f8:	1813      	adds	r3, r2, r0
 80079fa:	2a01      	cmp	r2, #1
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	dc02      	bgt.n	8007a06 <_printf_float+0x136>
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	07d2      	lsls	r2, r2, #31
 8007a04:	d501      	bpl.n	8007a0a <_printf_float+0x13a>
 8007a06:	3301      	adds	r3, #1
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0a2      	beq.n	8007958 <_printf_float+0x88>
 8007a12:	232d      	movs	r3, #45	; 0x2d
 8007a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a18:	e79e      	b.n	8007958 <_printf_float+0x88>
 8007a1a:	9904      	ldr	r1, [sp, #16]
 8007a1c:	2947      	cmp	r1, #71	; 0x47
 8007a1e:	d1c1      	bne.n	80079a4 <_printf_float+0xd4>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1bf      	bne.n	80079a4 <_printf_float+0xd4>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e7bc      	b.n	80079a2 <_printf_float+0xd2>
 8007a28:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007a2c:	d118      	bne.n	8007a60 <_printf_float+0x190>
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	dd0b      	ble.n	8007a4c <_printf_float+0x17c>
 8007a34:	6121      	str	r1, [r4, #16]
 8007a36:	b913      	cbnz	r3, 8007a3e <_printf_float+0x16e>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	07d0      	lsls	r0, r2, #31
 8007a3c:	d502      	bpl.n	8007a44 <_printf_float+0x174>
 8007a3e:	3301      	adds	r3, #1
 8007a40:	440b      	add	r3, r1
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	2300      	movs	r3, #0
 8007a46:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	e7de      	b.n	8007a0a <_printf_float+0x13a>
 8007a4c:	b913      	cbnz	r3, 8007a54 <_printf_float+0x184>
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	07d2      	lsls	r2, r2, #31
 8007a52:	d501      	bpl.n	8007a58 <_printf_float+0x188>
 8007a54:	3302      	adds	r3, #2
 8007a56:	e7f4      	b.n	8007a42 <_printf_float+0x172>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e7f2      	b.n	8007a42 <_printf_float+0x172>
 8007a5c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007a60:	9b08      	ldr	r3, [sp, #32]
 8007a62:	4299      	cmp	r1, r3
 8007a64:	db05      	blt.n	8007a72 <_printf_float+0x1a2>
 8007a66:	6823      	ldr	r3, [r4, #0]
 8007a68:	6121      	str	r1, [r4, #16]
 8007a6a:	07d8      	lsls	r0, r3, #31
 8007a6c:	d5ea      	bpl.n	8007a44 <_printf_float+0x174>
 8007a6e:	1c4b      	adds	r3, r1, #1
 8007a70:	e7e7      	b.n	8007a42 <_printf_float+0x172>
 8007a72:	2900      	cmp	r1, #0
 8007a74:	bfd4      	ite	le
 8007a76:	f1c1 0202 	rsble	r2, r1, #2
 8007a7a:	2201      	movgt	r2, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	e7e0      	b.n	8007a42 <_printf_float+0x172>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	055a      	lsls	r2, r3, #21
 8007a84:	d407      	bmi.n	8007a96 <_printf_float+0x1c6>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	4642      	mov	r2, r8
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	d12a      	bne.n	8007aea <_printf_float+0x21a>
 8007a94:	e76a      	b.n	800796c <_printf_float+0x9c>
 8007a96:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007a9a:	f240 80e2 	bls.w	8007c62 <_printf_float+0x392>
 8007a9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007aa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aaa:	d133      	bne.n	8007b14 <_printf_float+0x244>
 8007aac:	4a38      	ldr	r2, [pc, #224]	; (8007b90 <_printf_float+0x2c0>)
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af58 	beq.w	800796c <_printf_float+0x9c>
 8007abc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	db02      	blt.n	8007aca <_printf_float+0x1fa>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	07d8      	lsls	r0, r3, #31
 8007ac8:	d50f      	bpl.n	8007aea <_printf_float+0x21a>
 8007aca:	4653      	mov	r3, sl
 8007acc:	465a      	mov	r2, fp
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f af49 	beq.w	800796c <_printf_float+0x9c>
 8007ada:	f04f 0800 	mov.w	r8, #0
 8007ade:	f104 091a 	add.w	r9, r4, #26
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	4543      	cmp	r3, r8
 8007ae8:	dc09      	bgt.n	8007afe <_printf_float+0x22e>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	079b      	lsls	r3, r3, #30
 8007aee:	f100 8108 	bmi.w	8007d02 <_printf_float+0x432>
 8007af2:	68e0      	ldr	r0, [r4, #12]
 8007af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af6:	4298      	cmp	r0, r3
 8007af8:	bfb8      	it	lt
 8007afa:	4618      	movlt	r0, r3
 8007afc:	e738      	b.n	8007970 <_printf_float+0xa0>
 8007afe:	2301      	movs	r3, #1
 8007b00:	464a      	mov	r2, r9
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f43f af2f 	beq.w	800796c <_printf_float+0x9c>
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	e7e6      	b.n	8007ae2 <_printf_float+0x212>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	dc3c      	bgt.n	8007b94 <_printf_float+0x2c4>
 8007b1a:	4a1d      	ldr	r2, [pc, #116]	; (8007b90 <_printf_float+0x2c0>)
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	f43f af21 	beq.w	800796c <_printf_float+0x9c>
 8007b2a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	d102      	bne.n	8007b38 <_printf_float+0x268>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	07d9      	lsls	r1, r3, #31
 8007b36:	d5d8      	bpl.n	8007aea <_printf_float+0x21a>
 8007b38:	4653      	mov	r3, sl
 8007b3a:	465a      	mov	r2, fp
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b8      	blx	r7
 8007b42:	3001      	adds	r0, #1
 8007b44:	f43f af12 	beq.w	800796c <_printf_float+0x9c>
 8007b48:	f04f 0900 	mov.w	r9, #0
 8007b4c:	f104 0a1a 	add.w	sl, r4, #26
 8007b50:	9b07      	ldr	r3, [sp, #28]
 8007b52:	425b      	negs	r3, r3
 8007b54:	454b      	cmp	r3, r9
 8007b56:	dc01      	bgt.n	8007b5c <_printf_float+0x28c>
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	e795      	b.n	8007a88 <_printf_float+0x1b8>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af00 	beq.w	800796c <_printf_float+0x9c>
 8007b6c:	f109 0901 	add.w	r9, r9, #1
 8007b70:	e7ee      	b.n	8007b50 <_printf_float+0x280>
 8007b72:	bf00      	nop
 8007b74:	f3af 8000 	nop.w
 8007b78:	ffffffff 	.word	0xffffffff
 8007b7c:	7fefffff 	.word	0x7fefffff
 8007b80:	08009f14 	.word	0x08009f14
 8007b84:	08009f18 	.word	0x08009f18
 8007b88:	08009f20 	.word	0x08009f20
 8007b8c:	08009f1c 	.word	0x08009f1c
 8007b90:	08009f24 	.word	0x08009f24
 8007b94:	9a08      	ldr	r2, [sp, #32]
 8007b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	bfa8      	it	ge
 8007b9c:	461a      	movge	r2, r3
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	4691      	mov	r9, r2
 8007ba2:	dc38      	bgt.n	8007c16 <_printf_float+0x346>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bac:	f104 021a 	add.w	r2, r4, #26
 8007bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bb2:	9905      	ldr	r1, [sp, #20]
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	eba3 0309 	sub.w	r3, r3, r9
 8007bba:	428b      	cmp	r3, r1
 8007bbc:	dc33      	bgt.n	8007c26 <_printf_float+0x356>
 8007bbe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	db3c      	blt.n	8007c40 <_printf_float+0x370>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	07da      	lsls	r2, r3, #31
 8007bca:	d439      	bmi.n	8007c40 <_printf_float+0x370>
 8007bcc:	9a08      	ldr	r2, [sp, #32]
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	9907      	ldr	r1, [sp, #28]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	eba2 0901 	sub.w	r9, r2, r1
 8007bd8:	4599      	cmp	r9, r3
 8007bda:	bfa8      	it	ge
 8007bdc:	4699      	movge	r9, r3
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	dc35      	bgt.n	8007c50 <_printf_float+0x380>
 8007be4:	f04f 0800 	mov.w	r8, #0
 8007be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bec:	f104 0a1a 	add.w	sl, r4, #26
 8007bf0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bf4:	1a9b      	subs	r3, r3, r2
 8007bf6:	eba3 0309 	sub.w	r3, r3, r9
 8007bfa:	4543      	cmp	r3, r8
 8007bfc:	f77f af75 	ble.w	8007aea <_printf_float+0x21a>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4652      	mov	r2, sl
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f aeae 	beq.w	800796c <_printf_float+0x9c>
 8007c10:	f108 0801 	add.w	r8, r8, #1
 8007c14:	e7ec      	b.n	8007bf0 <_printf_float+0x320>
 8007c16:	4613      	mov	r3, r2
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4642      	mov	r2, r8
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	d1bf      	bne.n	8007ba4 <_printf_float+0x2d4>
 8007c24:	e6a2      	b.n	800796c <_printf_float+0x9c>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	9204      	str	r2, [sp, #16]
 8007c2e:	47b8      	blx	r7
 8007c30:	3001      	adds	r0, #1
 8007c32:	f43f ae9b 	beq.w	800796c <_printf_float+0x9c>
 8007c36:	9b05      	ldr	r3, [sp, #20]
 8007c38:	9a04      	ldr	r2, [sp, #16]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	e7b7      	b.n	8007bb0 <_printf_float+0x2e0>
 8007c40:	4653      	mov	r3, sl
 8007c42:	465a      	mov	r2, fp
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d1be      	bne.n	8007bcc <_printf_float+0x2fc>
 8007c4e:	e68d      	b.n	800796c <_printf_float+0x9c>
 8007c50:	9a04      	ldr	r2, [sp, #16]
 8007c52:	464b      	mov	r3, r9
 8007c54:	4442      	add	r2, r8
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d1c1      	bne.n	8007be4 <_printf_float+0x314>
 8007c60:	e684      	b.n	800796c <_printf_float+0x9c>
 8007c62:	9a08      	ldr	r2, [sp, #32]
 8007c64:	2a01      	cmp	r2, #1
 8007c66:	dc01      	bgt.n	8007c6c <_printf_float+0x39c>
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d537      	bpl.n	8007cdc <_printf_float+0x40c>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4642      	mov	r2, r8
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f ae78 	beq.w	800796c <_printf_float+0x9c>
 8007c7c:	4653      	mov	r3, sl
 8007c7e:	465a      	mov	r2, fp
 8007c80:	4631      	mov	r1, r6
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b8      	blx	r7
 8007c86:	3001      	adds	r0, #1
 8007c88:	f43f ae70 	beq.w	800796c <_printf_float+0x9c>
 8007c8c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007c90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c98:	d01b      	beq.n	8007cd2 <_printf_float+0x402>
 8007c9a:	9b08      	ldr	r3, [sp, #32]
 8007c9c:	f108 0201 	add.w	r2, r8, #1
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d10e      	bne.n	8007cca <_printf_float+0x3fa>
 8007cac:	e65e      	b.n	800796c <_printf_float+0x9c>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	464a      	mov	r2, r9
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f ae57 	beq.w	800796c <_printf_float+0x9c>
 8007cbe:	f108 0801 	add.w	r8, r8, #1
 8007cc2:	9b08      	ldr	r3, [sp, #32]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4543      	cmp	r3, r8
 8007cc8:	dcf1      	bgt.n	8007cae <_printf_float+0x3de>
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cd0:	e6db      	b.n	8007a8a <_printf_float+0x1ba>
 8007cd2:	f04f 0800 	mov.w	r8, #0
 8007cd6:	f104 091a 	add.w	r9, r4, #26
 8007cda:	e7f2      	b.n	8007cc2 <_printf_float+0x3f2>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4642      	mov	r2, r8
 8007ce0:	e7df      	b.n	8007ca2 <_printf_float+0x3d2>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	464a      	mov	r2, r9
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	f43f ae3d 	beq.w	800796c <_printf_float+0x9c>
 8007cf2:	f108 0801 	add.w	r8, r8, #1
 8007cf6:	68e3      	ldr	r3, [r4, #12]
 8007cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cfa:	1a5b      	subs	r3, r3, r1
 8007cfc:	4543      	cmp	r3, r8
 8007cfe:	dcf0      	bgt.n	8007ce2 <_printf_float+0x412>
 8007d00:	e6f7      	b.n	8007af2 <_printf_float+0x222>
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	f104 0919 	add.w	r9, r4, #25
 8007d0a:	e7f4      	b.n	8007cf6 <_printf_float+0x426>

08007d0c <_printf_common>:
 8007d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	4616      	mov	r6, r2
 8007d12:	4699      	mov	r9, r3
 8007d14:	688a      	ldr	r2, [r1, #8]
 8007d16:	690b      	ldr	r3, [r1, #16]
 8007d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	bfb8      	it	lt
 8007d20:	4613      	movlt	r3, r2
 8007d22:	6033      	str	r3, [r6, #0]
 8007d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d28:	4607      	mov	r7, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	b10a      	cbz	r2, 8007d32 <_printf_common+0x26>
 8007d2e:	3301      	adds	r3, #1
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	0699      	lsls	r1, r3, #26
 8007d36:	bf42      	ittt	mi
 8007d38:	6833      	ldrmi	r3, [r6, #0]
 8007d3a:	3302      	addmi	r3, #2
 8007d3c:	6033      	strmi	r3, [r6, #0]
 8007d3e:	6825      	ldr	r5, [r4, #0]
 8007d40:	f015 0506 	ands.w	r5, r5, #6
 8007d44:	d106      	bne.n	8007d54 <_printf_common+0x48>
 8007d46:	f104 0a19 	add.w	sl, r4, #25
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	6832      	ldr	r2, [r6, #0]
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	dc26      	bgt.n	8007da2 <_printf_common+0x96>
 8007d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d58:	1e13      	subs	r3, r2, #0
 8007d5a:	6822      	ldr	r2, [r4, #0]
 8007d5c:	bf18      	it	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	0692      	lsls	r2, r2, #26
 8007d62:	d42b      	bmi.n	8007dbc <_printf_common+0xb0>
 8007d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d68:	4649      	mov	r1, r9
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	47c0      	blx	r8
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d01e      	beq.n	8007db0 <_printf_common+0xa4>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	68e5      	ldr	r5, [r4, #12]
 8007d76:	6832      	ldr	r2, [r6, #0]
 8007d78:	f003 0306 	and.w	r3, r3, #6
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	bf08      	it	eq
 8007d80:	1aad      	subeq	r5, r5, r2
 8007d82:	68a3      	ldr	r3, [r4, #8]
 8007d84:	6922      	ldr	r2, [r4, #16]
 8007d86:	bf0c      	ite	eq
 8007d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d8c:	2500      	movne	r5, #0
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	bfc4      	itt	gt
 8007d92:	1a9b      	subgt	r3, r3, r2
 8007d94:	18ed      	addgt	r5, r5, r3
 8007d96:	2600      	movs	r6, #0
 8007d98:	341a      	adds	r4, #26
 8007d9a:	42b5      	cmp	r5, r6
 8007d9c:	d11a      	bne.n	8007dd4 <_printf_common+0xc8>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e008      	b.n	8007db4 <_printf_common+0xa8>
 8007da2:	2301      	movs	r3, #1
 8007da4:	4652      	mov	r2, sl
 8007da6:	4649      	mov	r1, r9
 8007da8:	4638      	mov	r0, r7
 8007daa:	47c0      	blx	r8
 8007dac:	3001      	adds	r0, #1
 8007dae:	d103      	bne.n	8007db8 <_printf_common+0xac>
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	3501      	adds	r5, #1
 8007dba:	e7c6      	b.n	8007d4a <_printf_common+0x3e>
 8007dbc:	18e1      	adds	r1, r4, r3
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	2030      	movs	r0, #48	; 0x30
 8007dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dc6:	4422      	add	r2, r4
 8007dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dd0:	3302      	adds	r3, #2
 8007dd2:	e7c7      	b.n	8007d64 <_printf_common+0x58>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	4649      	mov	r1, r9
 8007dda:	4638      	mov	r0, r7
 8007ddc:	47c0      	blx	r8
 8007dde:	3001      	adds	r0, #1
 8007de0:	d0e6      	beq.n	8007db0 <_printf_common+0xa4>
 8007de2:	3601      	adds	r6, #1
 8007de4:	e7d9      	b.n	8007d9a <_printf_common+0x8e>
	...

08007de8 <_printf_i>:
 8007de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	460c      	mov	r4, r1
 8007dee:	4691      	mov	r9, r2
 8007df0:	7e27      	ldrb	r7, [r4, #24]
 8007df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007df4:	2f78      	cmp	r7, #120	; 0x78
 8007df6:	4680      	mov	r8, r0
 8007df8:	469a      	mov	sl, r3
 8007dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dfe:	d807      	bhi.n	8007e10 <_printf_i+0x28>
 8007e00:	2f62      	cmp	r7, #98	; 0x62
 8007e02:	d80a      	bhi.n	8007e1a <_printf_i+0x32>
 8007e04:	2f00      	cmp	r7, #0
 8007e06:	f000 80d8 	beq.w	8007fba <_printf_i+0x1d2>
 8007e0a:	2f58      	cmp	r7, #88	; 0x58
 8007e0c:	f000 80a3 	beq.w	8007f56 <_printf_i+0x16e>
 8007e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e18:	e03a      	b.n	8007e90 <_printf_i+0xa8>
 8007e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e1e:	2b15      	cmp	r3, #21
 8007e20:	d8f6      	bhi.n	8007e10 <_printf_i+0x28>
 8007e22:	a001      	add	r0, pc, #4	; (adr r0, 8007e28 <_printf_i+0x40>)
 8007e24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e28:	08007e81 	.word	0x08007e81
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007e11 	.word	0x08007e11
 8007e34:	08007e11 	.word	0x08007e11
 8007e38:	08007e11 	.word	0x08007e11
 8007e3c:	08007e11 	.word	0x08007e11
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	08007e11 	.word	0x08007e11
 8007e48:	08007e11 	.word	0x08007e11
 8007e4c:	08007e11 	.word	0x08007e11
 8007e50:	08007e11 	.word	0x08007e11
 8007e54:	08007fa1 	.word	0x08007fa1
 8007e58:	08007ec5 	.word	0x08007ec5
 8007e5c:	08007f83 	.word	0x08007f83
 8007e60:	08007e11 	.word	0x08007e11
 8007e64:	08007e11 	.word	0x08007e11
 8007e68:	08007fc3 	.word	0x08007fc3
 8007e6c:	08007e11 	.word	0x08007e11
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	08007e11 	.word	0x08007e11
 8007e78:	08007e11 	.word	0x08007e11
 8007e7c:	08007f8b 	.word	0x08007f8b
 8007e80:	680b      	ldr	r3, [r1, #0]
 8007e82:	1d1a      	adds	r2, r3, #4
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	600a      	str	r2, [r1, #0]
 8007e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e90:	2301      	movs	r3, #1
 8007e92:	e0a3      	b.n	8007fdc <_printf_i+0x1f4>
 8007e94:	6825      	ldr	r5, [r4, #0]
 8007e96:	6808      	ldr	r0, [r1, #0]
 8007e98:	062e      	lsls	r6, r5, #24
 8007e9a:	f100 0304 	add.w	r3, r0, #4
 8007e9e:	d50a      	bpl.n	8007eb6 <_printf_i+0xce>
 8007ea0:	6805      	ldr	r5, [r0, #0]
 8007ea2:	600b      	str	r3, [r1, #0]
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	da03      	bge.n	8007eb0 <_printf_i+0xc8>
 8007ea8:	232d      	movs	r3, #45	; 0x2d
 8007eaa:	426d      	negs	r5, r5
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb0:	485e      	ldr	r0, [pc, #376]	; (800802c <_printf_i+0x244>)
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	e019      	b.n	8007eea <_printf_i+0x102>
 8007eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007eba:	6805      	ldr	r5, [r0, #0]
 8007ebc:	600b      	str	r3, [r1, #0]
 8007ebe:	bf18      	it	ne
 8007ec0:	b22d      	sxthne	r5, r5
 8007ec2:	e7ef      	b.n	8007ea4 <_printf_i+0xbc>
 8007ec4:	680b      	ldr	r3, [r1, #0]
 8007ec6:	6825      	ldr	r5, [r4, #0]
 8007ec8:	1d18      	adds	r0, r3, #4
 8007eca:	6008      	str	r0, [r1, #0]
 8007ecc:	0628      	lsls	r0, r5, #24
 8007ece:	d501      	bpl.n	8007ed4 <_printf_i+0xec>
 8007ed0:	681d      	ldr	r5, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <_printf_i+0xf2>
 8007ed4:	0669      	lsls	r1, r5, #25
 8007ed6:	d5fb      	bpl.n	8007ed0 <_printf_i+0xe8>
 8007ed8:	881d      	ldrh	r5, [r3, #0]
 8007eda:	4854      	ldr	r0, [pc, #336]	; (800802c <_printf_i+0x244>)
 8007edc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ede:	bf0c      	ite	eq
 8007ee0:	2308      	moveq	r3, #8
 8007ee2:	230a      	movne	r3, #10
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eea:	6866      	ldr	r6, [r4, #4]
 8007eec:	60a6      	str	r6, [r4, #8]
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	bfa2      	ittt	ge
 8007ef2:	6821      	ldrge	r1, [r4, #0]
 8007ef4:	f021 0104 	bicge.w	r1, r1, #4
 8007ef8:	6021      	strge	r1, [r4, #0]
 8007efa:	b90d      	cbnz	r5, 8007f00 <_printf_i+0x118>
 8007efc:	2e00      	cmp	r6, #0
 8007efe:	d04d      	beq.n	8007f9c <_printf_i+0x1b4>
 8007f00:	4616      	mov	r6, r2
 8007f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f06:	fb03 5711 	mls	r7, r3, r1, r5
 8007f0a:	5dc7      	ldrb	r7, [r0, r7]
 8007f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f10:	462f      	mov	r7, r5
 8007f12:	42bb      	cmp	r3, r7
 8007f14:	460d      	mov	r5, r1
 8007f16:	d9f4      	bls.n	8007f02 <_printf_i+0x11a>
 8007f18:	2b08      	cmp	r3, #8
 8007f1a:	d10b      	bne.n	8007f34 <_printf_i+0x14c>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	07df      	lsls	r7, r3, #31
 8007f20:	d508      	bpl.n	8007f34 <_printf_i+0x14c>
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	6861      	ldr	r1, [r4, #4]
 8007f26:	4299      	cmp	r1, r3
 8007f28:	bfde      	ittt	le
 8007f2a:	2330      	movle	r3, #48	; 0x30
 8007f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f34:	1b92      	subs	r2, r2, r6
 8007f36:	6122      	str	r2, [r4, #16]
 8007f38:	f8cd a000 	str.w	sl, [sp]
 8007f3c:	464b      	mov	r3, r9
 8007f3e:	aa03      	add	r2, sp, #12
 8007f40:	4621      	mov	r1, r4
 8007f42:	4640      	mov	r0, r8
 8007f44:	f7ff fee2 	bl	8007d0c <_printf_common>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d14c      	bne.n	8007fe6 <_printf_i+0x1fe>
 8007f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f50:	b004      	add	sp, #16
 8007f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f56:	4835      	ldr	r0, [pc, #212]	; (800802c <_printf_i+0x244>)
 8007f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	680e      	ldr	r6, [r1, #0]
 8007f60:	061f      	lsls	r7, r3, #24
 8007f62:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f66:	600e      	str	r6, [r1, #0]
 8007f68:	d514      	bpl.n	8007f94 <_printf_i+0x1ac>
 8007f6a:	07d9      	lsls	r1, r3, #31
 8007f6c:	bf44      	itt	mi
 8007f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f72:	6023      	strmi	r3, [r4, #0]
 8007f74:	b91d      	cbnz	r5, 8007f7e <_printf_i+0x196>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f023 0320 	bic.w	r3, r3, #32
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	2310      	movs	r3, #16
 8007f80:	e7b0      	b.n	8007ee4 <_printf_i+0xfc>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f043 0320 	orr.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	2378      	movs	r3, #120	; 0x78
 8007f8c:	4828      	ldr	r0, [pc, #160]	; (8008030 <_printf_i+0x248>)
 8007f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f92:	e7e3      	b.n	8007f5c <_printf_i+0x174>
 8007f94:	065e      	lsls	r6, r3, #25
 8007f96:	bf48      	it	mi
 8007f98:	b2ad      	uxthmi	r5, r5
 8007f9a:	e7e6      	b.n	8007f6a <_printf_i+0x182>
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	e7bb      	b.n	8007f18 <_printf_i+0x130>
 8007fa0:	680b      	ldr	r3, [r1, #0]
 8007fa2:	6826      	ldr	r6, [r4, #0]
 8007fa4:	6960      	ldr	r0, [r4, #20]
 8007fa6:	1d1d      	adds	r5, r3, #4
 8007fa8:	600d      	str	r5, [r1, #0]
 8007faa:	0635      	lsls	r5, r6, #24
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	d501      	bpl.n	8007fb4 <_printf_i+0x1cc>
 8007fb0:	6018      	str	r0, [r3, #0]
 8007fb2:	e002      	b.n	8007fba <_printf_i+0x1d2>
 8007fb4:	0671      	lsls	r1, r6, #25
 8007fb6:	d5fb      	bpl.n	8007fb0 <_printf_i+0x1c8>
 8007fb8:	8018      	strh	r0, [r3, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	4616      	mov	r6, r2
 8007fc0:	e7ba      	b.n	8007f38 <_printf_i+0x150>
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	600a      	str	r2, [r1, #0]
 8007fc8:	681e      	ldr	r6, [r3, #0]
 8007fca:	6862      	ldr	r2, [r4, #4]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7f8 f93e 	bl	8000250 <memchr>
 8007fd4:	b108      	cbz	r0, 8007fda <_printf_i+0x1f2>
 8007fd6:	1b80      	subs	r0, r0, r6
 8007fd8:	6060      	str	r0, [r4, #4]
 8007fda:	6863      	ldr	r3, [r4, #4]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe4:	e7a8      	b.n	8007f38 <_printf_i+0x150>
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	4632      	mov	r2, r6
 8007fea:	4649      	mov	r1, r9
 8007fec:	4640      	mov	r0, r8
 8007fee:	47d0      	blx	sl
 8007ff0:	3001      	adds	r0, #1
 8007ff2:	d0ab      	beq.n	8007f4c <_printf_i+0x164>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	079b      	lsls	r3, r3, #30
 8007ff8:	d413      	bmi.n	8008022 <_printf_i+0x23a>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	4298      	cmp	r0, r3
 8008000:	bfb8      	it	lt
 8008002:	4618      	movlt	r0, r3
 8008004:	e7a4      	b.n	8007f50 <_printf_i+0x168>
 8008006:	2301      	movs	r3, #1
 8008008:	4632      	mov	r2, r6
 800800a:	4649      	mov	r1, r9
 800800c:	4640      	mov	r0, r8
 800800e:	47d0      	blx	sl
 8008010:	3001      	adds	r0, #1
 8008012:	d09b      	beq.n	8007f4c <_printf_i+0x164>
 8008014:	3501      	adds	r5, #1
 8008016:	68e3      	ldr	r3, [r4, #12]
 8008018:	9903      	ldr	r1, [sp, #12]
 800801a:	1a5b      	subs	r3, r3, r1
 800801c:	42ab      	cmp	r3, r5
 800801e:	dcf2      	bgt.n	8008006 <_printf_i+0x21e>
 8008020:	e7eb      	b.n	8007ffa <_printf_i+0x212>
 8008022:	2500      	movs	r5, #0
 8008024:	f104 0619 	add.w	r6, r4, #25
 8008028:	e7f5      	b.n	8008016 <_printf_i+0x22e>
 800802a:	bf00      	nop
 800802c:	08009f26 	.word	0x08009f26
 8008030:	08009f37 	.word	0x08009f37

08008034 <_sbrk_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4d06      	ldr	r5, [pc, #24]	; (8008050 <_sbrk_r+0x1c>)
 8008038:	2300      	movs	r3, #0
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	f7f9 fb4a 	bl	80016d8 <_sbrk>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_sbrk_r+0x1a>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_sbrk_r+0x1a>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	20000790 	.word	0x20000790

08008054 <quorem>:
 8008054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	6903      	ldr	r3, [r0, #16]
 800805a:	690c      	ldr	r4, [r1, #16]
 800805c:	42a3      	cmp	r3, r4
 800805e:	4607      	mov	r7, r0
 8008060:	f2c0 8081 	blt.w	8008166 <quorem+0x112>
 8008064:	3c01      	subs	r4, #1
 8008066:	f101 0814 	add.w	r8, r1, #20
 800806a:	f100 0514 	add.w	r5, r0, #20
 800806e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008078:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800807c:	3301      	adds	r3, #1
 800807e:	429a      	cmp	r2, r3
 8008080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008084:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008088:	fbb2 f6f3 	udiv	r6, r2, r3
 800808c:	d331      	bcc.n	80080f2 <quorem+0x9e>
 800808e:	f04f 0e00 	mov.w	lr, #0
 8008092:	4640      	mov	r0, r8
 8008094:	46ac      	mov	ip, r5
 8008096:	46f2      	mov	sl, lr
 8008098:	f850 2b04 	ldr.w	r2, [r0], #4
 800809c:	b293      	uxth	r3, r2
 800809e:	fb06 e303 	mla	r3, r6, r3, lr
 80080a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	ebaa 0303 	sub.w	r3, sl, r3
 80080ac:	0c12      	lsrs	r2, r2, #16
 80080ae:	f8dc a000 	ldr.w	sl, [ip]
 80080b2:	fb06 e202 	mla	r2, r6, r2, lr
 80080b6:	fa13 f38a 	uxtah	r3, r3, sl
 80080ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80080be:	fa1f fa82 	uxth.w	sl, r2
 80080c2:	f8dc 2000 	ldr.w	r2, [ip]
 80080c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80080ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d4:	4581      	cmp	r9, r0
 80080d6:	f84c 3b04 	str.w	r3, [ip], #4
 80080da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080de:	d2db      	bcs.n	8008098 <quorem+0x44>
 80080e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80080e4:	b92b      	cbnz	r3, 80080f2 <quorem+0x9e>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	3b04      	subs	r3, #4
 80080ea:	429d      	cmp	r5, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	d32e      	bcc.n	800814e <quorem+0xfa>
 80080f0:	613c      	str	r4, [r7, #16]
 80080f2:	4638      	mov	r0, r7
 80080f4:	f001 f85a 	bl	80091ac <__mcmp>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	db24      	blt.n	8008146 <quorem+0xf2>
 80080fc:	3601      	adds	r6, #1
 80080fe:	4628      	mov	r0, r5
 8008100:	f04f 0c00 	mov.w	ip, #0
 8008104:	f858 2b04 	ldr.w	r2, [r8], #4
 8008108:	f8d0 e000 	ldr.w	lr, [r0]
 800810c:	b293      	uxth	r3, r2
 800810e:	ebac 0303 	sub.w	r3, ip, r3
 8008112:	0c12      	lsrs	r2, r2, #16
 8008114:	fa13 f38e 	uxtah	r3, r3, lr
 8008118:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800811c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008120:	b29b      	uxth	r3, r3
 8008122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008126:	45c1      	cmp	r9, r8
 8008128:	f840 3b04 	str.w	r3, [r0], #4
 800812c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008130:	d2e8      	bcs.n	8008104 <quorem+0xb0>
 8008132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800813a:	b922      	cbnz	r2, 8008146 <quorem+0xf2>
 800813c:	3b04      	subs	r3, #4
 800813e:	429d      	cmp	r5, r3
 8008140:	461a      	mov	r2, r3
 8008142:	d30a      	bcc.n	800815a <quorem+0x106>
 8008144:	613c      	str	r4, [r7, #16]
 8008146:	4630      	mov	r0, r6
 8008148:	b003      	add	sp, #12
 800814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	3b04      	subs	r3, #4
 8008152:	2a00      	cmp	r2, #0
 8008154:	d1cc      	bne.n	80080f0 <quorem+0x9c>
 8008156:	3c01      	subs	r4, #1
 8008158:	e7c7      	b.n	80080ea <quorem+0x96>
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	3b04      	subs	r3, #4
 800815e:	2a00      	cmp	r2, #0
 8008160:	d1f0      	bne.n	8008144 <quorem+0xf0>
 8008162:	3c01      	subs	r4, #1
 8008164:	e7eb      	b.n	800813e <quorem+0xea>
 8008166:	2000      	movs	r0, #0
 8008168:	e7ee      	b.n	8008148 <quorem+0xf4>
 800816a:	0000      	movs	r0, r0
 800816c:	0000      	movs	r0, r0
	...

08008170 <_dtoa_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	ec59 8b10 	vmov	r8, r9, d0
 8008178:	b095      	sub	sp, #84	; 0x54
 800817a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800817c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800817e:	9107      	str	r1, [sp, #28]
 8008180:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008184:	4606      	mov	r6, r0
 8008186:	9209      	str	r2, [sp, #36]	; 0x24
 8008188:	9310      	str	r3, [sp, #64]	; 0x40
 800818a:	b975      	cbnz	r5, 80081aa <_dtoa_r+0x3a>
 800818c:	2010      	movs	r0, #16
 800818e:	f7ff fa53 	bl	8007638 <malloc>
 8008192:	4602      	mov	r2, r0
 8008194:	6270      	str	r0, [r6, #36]	; 0x24
 8008196:	b920      	cbnz	r0, 80081a2 <_dtoa_r+0x32>
 8008198:	4bab      	ldr	r3, [pc, #684]	; (8008448 <_dtoa_r+0x2d8>)
 800819a:	21ea      	movs	r1, #234	; 0xea
 800819c:	48ab      	ldr	r0, [pc, #684]	; (800844c <_dtoa_r+0x2dc>)
 800819e:	f001 f915 	bl	80093cc <__assert_func>
 80081a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081a6:	6005      	str	r5, [r0, #0]
 80081a8:	60c5      	str	r5, [r0, #12]
 80081aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	b151      	cbz	r1, 80081c6 <_dtoa_r+0x56>
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	604a      	str	r2, [r1, #4]
 80081b4:	2301      	movs	r3, #1
 80081b6:	4093      	lsls	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 fdb8 	bl	8008d30 <_Bfree>
 80081c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f1b9 0300 	subs.w	r3, r9, #0
 80081ca:	bfbb      	ittet	lt
 80081cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	9303      	strlt	r3, [sp, #12]
 80081d2:	2300      	movge	r3, #0
 80081d4:	2201      	movlt	r2, #1
 80081d6:	bfac      	ite	ge
 80081d8:	6023      	strge	r3, [r4, #0]
 80081da:	6022      	strlt	r2, [r4, #0]
 80081dc:	4b9c      	ldr	r3, [pc, #624]	; (8008450 <_dtoa_r+0x2e0>)
 80081de:	9c03      	ldr	r4, [sp, #12]
 80081e0:	43a3      	bics	r3, r4
 80081e2:	d11a      	bne.n	800821a <_dtoa_r+0xaa>
 80081e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80081f0:	ea53 0308 	orrs.w	r3, r3, r8
 80081f4:	f000 8512 	beq.w	8008c1c <_dtoa_r+0xaac>
 80081f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80081fa:	b953      	cbnz	r3, 8008212 <_dtoa_r+0xa2>
 80081fc:	4b95      	ldr	r3, [pc, #596]	; (8008454 <_dtoa_r+0x2e4>)
 80081fe:	e01f      	b.n	8008240 <_dtoa_r+0xd0>
 8008200:	4b95      	ldr	r3, [pc, #596]	; (8008458 <_dtoa_r+0x2e8>)
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	9800      	ldr	r0, [sp, #0]
 800820c:	b015      	add	sp, #84	; 0x54
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	4b90      	ldr	r3, [pc, #576]	; (8008454 <_dtoa_r+0x2e4>)
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	3303      	adds	r3, #3
 8008218:	e7f5      	b.n	8008206 <_dtoa_r+0x96>
 800821a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800821e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008226:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800822a:	d10b      	bne.n	8008244 <_dtoa_r+0xd4>
 800822c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822e:	2301      	movs	r3, #1
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 84ee 	beq.w	8008c16 <_dtoa_r+0xaa6>
 800823a:	4888      	ldr	r0, [pc, #544]	; (800845c <_dtoa_r+0x2ec>)
 800823c:	6018      	str	r0, [r3, #0]
 800823e:	1e43      	subs	r3, r0, #1
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	e7e2      	b.n	800820a <_dtoa_r+0x9a>
 8008244:	a913      	add	r1, sp, #76	; 0x4c
 8008246:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800824a:	aa12      	add	r2, sp, #72	; 0x48
 800824c:	4630      	mov	r0, r6
 800824e:	f001 f851 	bl	80092f4 <__d2b>
 8008252:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008256:	4605      	mov	r5, r0
 8008258:	9812      	ldr	r0, [sp, #72]	; 0x48
 800825a:	2900      	cmp	r1, #0
 800825c:	d047      	beq.n	80082ee <_dtoa_r+0x17e>
 800825e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008260:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008264:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008268:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800826c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008270:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008274:	2400      	movs	r4, #0
 8008276:	ec43 2b16 	vmov	d6, r2, r3
 800827a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800827e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008430 <_dtoa_r+0x2c0>
 8008282:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008286:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008438 <_dtoa_r+0x2c8>
 800828a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800828e:	eeb0 7b46 	vmov.f64	d7, d6
 8008292:	ee06 1a90 	vmov	s13, r1
 8008296:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800829a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008440 <_dtoa_r+0x2d0>
 800829e:	eea5 7b06 	vfma.f64	d7, d5, d6
 80082a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80082a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80082aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ae:	ee16 ba90 	vmov	fp, s13
 80082b2:	9411      	str	r4, [sp, #68]	; 0x44
 80082b4:	d508      	bpl.n	80082c8 <_dtoa_r+0x158>
 80082b6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80082ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	bf18      	it	ne
 80082c4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80082c8:	f1bb 0f16 	cmp.w	fp, #22
 80082cc:	d832      	bhi.n	8008334 <_dtoa_r+0x1c4>
 80082ce:	4b64      	ldr	r3, [pc, #400]	; (8008460 <_dtoa_r+0x2f0>)
 80082d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082d4:	ed93 7b00 	vldr	d7, [r3]
 80082d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80082dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80082e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e4:	d501      	bpl.n	80082ea <_dtoa_r+0x17a>
 80082e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ea:	2300      	movs	r3, #0
 80082ec:	e023      	b.n	8008336 <_dtoa_r+0x1c6>
 80082ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80082f0:	4401      	add	r1, r0
 80082f2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	bfc3      	ittte	gt
 80082fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082fe:	fa04 f303 	lslgt.w	r3, r4, r3
 8008302:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008306:	f1c3 0320 	rsble	r3, r3, #32
 800830a:	bfc6      	itte	gt
 800830c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008310:	ea43 0308 	orrgt.w	r3, r3, r8
 8008314:	fa08 f303 	lslle.w	r3, r8, r3
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008320:	3901      	subs	r1, #1
 8008322:	ed8d 7b00 	vstr	d7, [sp]
 8008326:	9c01      	ldr	r4, [sp, #4]
 8008328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800832c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008330:	2401      	movs	r4, #1
 8008332:	e7a0      	b.n	8008276 <_dtoa_r+0x106>
 8008334:	2301      	movs	r3, #1
 8008336:	930f      	str	r3, [sp, #60]	; 0x3c
 8008338:	1a43      	subs	r3, r0, r1
 800833a:	1e5a      	subs	r2, r3, #1
 800833c:	bf45      	ittet	mi
 800833e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008342:	9305      	strmi	r3, [sp, #20]
 8008344:	2300      	movpl	r3, #0
 8008346:	2300      	movmi	r3, #0
 8008348:	9206      	str	r2, [sp, #24]
 800834a:	bf54      	ite	pl
 800834c:	9305      	strpl	r3, [sp, #20]
 800834e:	9306      	strmi	r3, [sp, #24]
 8008350:	f1bb 0f00 	cmp.w	fp, #0
 8008354:	db18      	blt.n	8008388 <_dtoa_r+0x218>
 8008356:	9b06      	ldr	r3, [sp, #24]
 8008358:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800835c:	445b      	add	r3, fp
 800835e:	9306      	str	r3, [sp, #24]
 8008360:	2300      	movs	r3, #0
 8008362:	9a07      	ldr	r2, [sp, #28]
 8008364:	2a09      	cmp	r2, #9
 8008366:	d849      	bhi.n	80083fc <_dtoa_r+0x28c>
 8008368:	2a05      	cmp	r2, #5
 800836a:	bfc4      	itt	gt
 800836c:	3a04      	subgt	r2, #4
 800836e:	9207      	strgt	r2, [sp, #28]
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	f1a2 0202 	sub.w	r2, r2, #2
 8008376:	bfcc      	ite	gt
 8008378:	2400      	movgt	r4, #0
 800837a:	2401      	movle	r4, #1
 800837c:	2a03      	cmp	r2, #3
 800837e:	d848      	bhi.n	8008412 <_dtoa_r+0x2a2>
 8008380:	e8df f002 	tbb	[pc, r2]
 8008384:	3a2c2e0b 	.word	0x3a2c2e0b
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	2200      	movs	r2, #0
 800838c:	eba3 030b 	sub.w	r3, r3, fp
 8008390:	9305      	str	r3, [sp, #20]
 8008392:	920e      	str	r2, [sp, #56]	; 0x38
 8008394:	f1cb 0300 	rsb	r3, fp, #0
 8008398:	e7e3      	b.n	8008362 <_dtoa_r+0x1f2>
 800839a:	2200      	movs	r2, #0
 800839c:	9208      	str	r2, [sp, #32]
 800839e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	dc39      	bgt.n	8008418 <_dtoa_r+0x2a8>
 80083a4:	f04f 0a01 	mov.w	sl, #1
 80083a8:	46d1      	mov	r9, sl
 80083aa:	4652      	mov	r2, sl
 80083ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80083b2:	2100      	movs	r1, #0
 80083b4:	6079      	str	r1, [r7, #4]
 80083b6:	2004      	movs	r0, #4
 80083b8:	f100 0c14 	add.w	ip, r0, #20
 80083bc:	4594      	cmp	ip, r2
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	d92f      	bls.n	8008422 <_dtoa_r+0x2b2>
 80083c2:	4630      	mov	r0, r6
 80083c4:	930c      	str	r3, [sp, #48]	; 0x30
 80083c6:	f000 fc73 	bl	8008cb0 <_Balloc>
 80083ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083cc:	9000      	str	r0, [sp, #0]
 80083ce:	4602      	mov	r2, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d149      	bne.n	8008468 <_dtoa_r+0x2f8>
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <_dtoa_r+0x2f4>)
 80083d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083da:	e6df      	b.n	800819c <_dtoa_r+0x2c>
 80083dc:	2201      	movs	r2, #1
 80083de:	e7dd      	b.n	800839c <_dtoa_r+0x22c>
 80083e0:	2200      	movs	r2, #0
 80083e2:	9208      	str	r2, [sp, #32]
 80083e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083e6:	eb0b 0a02 	add.w	sl, fp, r2
 80083ea:	f10a 0901 	add.w	r9, sl, #1
 80083ee:	464a      	mov	r2, r9
 80083f0:	2a01      	cmp	r2, #1
 80083f2:	bfb8      	it	lt
 80083f4:	2201      	movlt	r2, #1
 80083f6:	e7db      	b.n	80083b0 <_dtoa_r+0x240>
 80083f8:	2201      	movs	r2, #1
 80083fa:	e7f2      	b.n	80083e2 <_dtoa_r+0x272>
 80083fc:	2401      	movs	r4, #1
 80083fe:	2200      	movs	r2, #0
 8008400:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008404:	f04f 3aff 	mov.w	sl, #4294967295
 8008408:	2100      	movs	r1, #0
 800840a:	46d1      	mov	r9, sl
 800840c:	2212      	movs	r2, #18
 800840e:	9109      	str	r1, [sp, #36]	; 0x24
 8008410:	e7ce      	b.n	80083b0 <_dtoa_r+0x240>
 8008412:	2201      	movs	r2, #1
 8008414:	9208      	str	r2, [sp, #32]
 8008416:	e7f5      	b.n	8008404 <_dtoa_r+0x294>
 8008418:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800841c:	46d1      	mov	r9, sl
 800841e:	4652      	mov	r2, sl
 8008420:	e7c6      	b.n	80083b0 <_dtoa_r+0x240>
 8008422:	3101      	adds	r1, #1
 8008424:	6079      	str	r1, [r7, #4]
 8008426:	0040      	lsls	r0, r0, #1
 8008428:	e7c6      	b.n	80083b8 <_dtoa_r+0x248>
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	636f4361 	.word	0x636f4361
 8008434:	3fd287a7 	.word	0x3fd287a7
 8008438:	8b60c8b3 	.word	0x8b60c8b3
 800843c:	3fc68a28 	.word	0x3fc68a28
 8008440:	509f79fb 	.word	0x509f79fb
 8008444:	3fd34413 	.word	0x3fd34413
 8008448:	08009f55 	.word	0x08009f55
 800844c:	08009f6c 	.word	0x08009f6c
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	08009f51 	.word	0x08009f51
 8008458:	08009f48 	.word	0x08009f48
 800845c:	08009f25 	.word	0x08009f25
 8008460:	0800a068 	.word	0x0800a068
 8008464:	08009fcb 	.word	0x08009fcb
 8008468:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800846a:	9900      	ldr	r1, [sp, #0]
 800846c:	6011      	str	r1, [r2, #0]
 800846e:	f1b9 0f0e 	cmp.w	r9, #14
 8008472:	d872      	bhi.n	800855a <_dtoa_r+0x3ea>
 8008474:	2c00      	cmp	r4, #0
 8008476:	d070      	beq.n	800855a <_dtoa_r+0x3ea>
 8008478:	f1bb 0f00 	cmp.w	fp, #0
 800847c:	f340 80a6 	ble.w	80085cc <_dtoa_r+0x45c>
 8008480:	49ca      	ldr	r1, [pc, #808]	; (80087ac <_dtoa_r+0x63c>)
 8008482:	f00b 020f 	and.w	r2, fp, #15
 8008486:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800848a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800848e:	ed92 7b00 	vldr	d7, [r2]
 8008492:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008496:	f000 808d 	beq.w	80085b4 <_dtoa_r+0x444>
 800849a:	4ac5      	ldr	r2, [pc, #788]	; (80087b0 <_dtoa_r+0x640>)
 800849c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80084a0:	ed92 6b08 	vldr	d6, [r2, #32]
 80084a4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80084a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80084ac:	f001 010f 	and.w	r1, r1, #15
 80084b0:	2203      	movs	r2, #3
 80084b2:	48bf      	ldr	r0, [pc, #764]	; (80087b0 <_dtoa_r+0x640>)
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d17f      	bne.n	80085b8 <_dtoa_r+0x448>
 80084b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80084bc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80084c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084c6:	2900      	cmp	r1, #0
 80084c8:	f000 80b2 	beq.w	8008630 <_dtoa_r+0x4c0>
 80084cc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80084d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80084d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084dc:	f140 80a8 	bpl.w	8008630 <_dtoa_r+0x4c0>
 80084e0:	f1b9 0f00 	cmp.w	r9, #0
 80084e4:	f000 80a4 	beq.w	8008630 <_dtoa_r+0x4c0>
 80084e8:	f1ba 0f00 	cmp.w	sl, #0
 80084ec:	dd31      	ble.n	8008552 <_dtoa_r+0x3e2>
 80084ee:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80084f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80084fa:	f10b 37ff 	add.w	r7, fp, #4294967295
 80084fe:	3201      	adds	r2, #1
 8008500:	4650      	mov	r0, sl
 8008502:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008506:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800850a:	ee07 2a90 	vmov	s15, r2
 800850e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008512:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008516:	ed8d 5b02 	vstr	d5, [sp, #8]
 800851a:	9c03      	ldr	r4, [sp, #12]
 800851c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008520:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008524:	2800      	cmp	r0, #0
 8008526:	f040 8086 	bne.w	8008636 <_dtoa_r+0x4c6>
 800852a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800852e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008532:	ec42 1b17 	vmov	d7, r1, r2
 8008536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853e:	f300 8272 	bgt.w	8008a26 <_dtoa_r+0x8b6>
 8008542:	eeb1 7b47 	vneg.f64	d7, d7
 8008546:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800854a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854e:	f100 8267 	bmi.w	8008a20 <_dtoa_r+0x8b0>
 8008552:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8008556:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800855a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800855c:	2a00      	cmp	r2, #0
 800855e:	f2c0 8129 	blt.w	80087b4 <_dtoa_r+0x644>
 8008562:	f1bb 0f0e 	cmp.w	fp, #14
 8008566:	f300 8125 	bgt.w	80087b4 <_dtoa_r+0x644>
 800856a:	4b90      	ldr	r3, [pc, #576]	; (80087ac <_dtoa_r+0x63c>)
 800856c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008570:	ed93 6b00 	vldr	d6, [r3]
 8008574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	f280 80c3 	bge.w	8008702 <_dtoa_r+0x592>
 800857c:	f1b9 0f00 	cmp.w	r9, #0
 8008580:	f300 80bf 	bgt.w	8008702 <_dtoa_r+0x592>
 8008584:	f040 824c 	bne.w	8008a20 <_dtoa_r+0x8b0>
 8008588:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800858c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008594:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859c:	464c      	mov	r4, r9
 800859e:	464f      	mov	r7, r9
 80085a0:	f280 8222 	bge.w	80089e8 <_dtoa_r+0x878>
 80085a4:	f8dd 8000 	ldr.w	r8, [sp]
 80085a8:	2331      	movs	r3, #49	; 0x31
 80085aa:	f808 3b01 	strb.w	r3, [r8], #1
 80085ae:	f10b 0b01 	add.w	fp, fp, #1
 80085b2:	e21e      	b.n	80089f2 <_dtoa_r+0x882>
 80085b4:	2202      	movs	r2, #2
 80085b6:	e77c      	b.n	80084b2 <_dtoa_r+0x342>
 80085b8:	07cc      	lsls	r4, r1, #31
 80085ba:	d504      	bpl.n	80085c6 <_dtoa_r+0x456>
 80085bc:	ed90 6b00 	vldr	d6, [r0]
 80085c0:	3201      	adds	r2, #1
 80085c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085c6:	1049      	asrs	r1, r1, #1
 80085c8:	3008      	adds	r0, #8
 80085ca:	e773      	b.n	80084b4 <_dtoa_r+0x344>
 80085cc:	d02e      	beq.n	800862c <_dtoa_r+0x4bc>
 80085ce:	f1cb 0100 	rsb	r1, fp, #0
 80085d2:	4a76      	ldr	r2, [pc, #472]	; (80087ac <_dtoa_r+0x63c>)
 80085d4:	f001 000f 	and.w	r0, r1, #15
 80085d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80085dc:	ed92 7b00 	vldr	d7, [r2]
 80085e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80085e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80085e8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80085ec:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80085f0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80085f4:	486e      	ldr	r0, [pc, #440]	; (80087b0 <_dtoa_r+0x640>)
 80085f6:	1109      	asrs	r1, r1, #4
 80085f8:	2400      	movs	r4, #0
 80085fa:	2202      	movs	r2, #2
 80085fc:	b939      	cbnz	r1, 800860e <_dtoa_r+0x49e>
 80085fe:	2c00      	cmp	r4, #0
 8008600:	f43f af60 	beq.w	80084c4 <_dtoa_r+0x354>
 8008604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860c:	e75a      	b.n	80084c4 <_dtoa_r+0x354>
 800860e:	07cf      	lsls	r7, r1, #31
 8008610:	d509      	bpl.n	8008626 <_dtoa_r+0x4b6>
 8008612:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8008616:	ed90 7b00 	vldr	d7, [r0]
 800861a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800861e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008622:	3201      	adds	r2, #1
 8008624:	2401      	movs	r4, #1
 8008626:	1049      	asrs	r1, r1, #1
 8008628:	3008      	adds	r0, #8
 800862a:	e7e7      	b.n	80085fc <_dtoa_r+0x48c>
 800862c:	2202      	movs	r2, #2
 800862e:	e749      	b.n	80084c4 <_dtoa_r+0x354>
 8008630:	465f      	mov	r7, fp
 8008632:	4648      	mov	r0, r9
 8008634:	e765      	b.n	8008502 <_dtoa_r+0x392>
 8008636:	ec42 1b17 	vmov	d7, r1, r2
 800863a:	4a5c      	ldr	r2, [pc, #368]	; (80087ac <_dtoa_r+0x63c>)
 800863c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008640:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008644:	9a00      	ldr	r2, [sp, #0]
 8008646:	1814      	adds	r4, r2, r0
 8008648:	9a08      	ldr	r2, [sp, #32]
 800864a:	b352      	cbz	r2, 80086a2 <_dtoa_r+0x532>
 800864c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008650:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008654:	f8dd 8000 	ldr.w	r8, [sp]
 8008658:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800865c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008660:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008664:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008668:	ee14 2a90 	vmov	r2, s9
 800866c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008670:	3230      	adds	r2, #48	; 0x30
 8008672:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008676:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800867a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867e:	f808 2b01 	strb.w	r2, [r8], #1
 8008682:	d439      	bmi.n	80086f8 <_dtoa_r+0x588>
 8008684:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008688:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800868c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008690:	d472      	bmi.n	8008778 <_dtoa_r+0x608>
 8008692:	45a0      	cmp	r8, r4
 8008694:	f43f af5d 	beq.w	8008552 <_dtoa_r+0x3e2>
 8008698:	ee27 7b03 	vmul.f64	d7, d7, d3
 800869c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80086a0:	e7e0      	b.n	8008664 <_dtoa_r+0x4f4>
 80086a2:	f8dd 8000 	ldr.w	r8, [sp]
 80086a6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80086aa:	4621      	mov	r1, r4
 80086ac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80086b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80086b4:	ee14 2a90 	vmov	r2, s9
 80086b8:	3230      	adds	r2, #48	; 0x30
 80086ba:	f808 2b01 	strb.w	r2, [r8], #1
 80086be:	45a0      	cmp	r8, r4
 80086c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80086c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80086c8:	d118      	bne.n	80086fc <_dtoa_r+0x58c>
 80086ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80086ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80086d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80086d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086da:	dc4d      	bgt.n	8008778 <_dtoa_r+0x608>
 80086dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80086e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e8:	f57f af33 	bpl.w	8008552 <_dtoa_r+0x3e2>
 80086ec:	4688      	mov	r8, r1
 80086ee:	3901      	subs	r1, #1
 80086f0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80086f4:	2b30      	cmp	r3, #48	; 0x30
 80086f6:	d0f9      	beq.n	80086ec <_dtoa_r+0x57c>
 80086f8:	46bb      	mov	fp, r7
 80086fa:	e02a      	b.n	8008752 <_dtoa_r+0x5e2>
 80086fc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008700:	e7d6      	b.n	80086b0 <_dtoa_r+0x540>
 8008702:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008706:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800870a:	f8dd 8000 	ldr.w	r8, [sp]
 800870e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008712:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008716:	ee15 3a10 	vmov	r3, s10
 800871a:	3330      	adds	r3, #48	; 0x30
 800871c:	f808 3b01 	strb.w	r3, [r8], #1
 8008720:	9b00      	ldr	r3, [sp, #0]
 8008722:	eba8 0303 	sub.w	r3, r8, r3
 8008726:	4599      	cmp	r9, r3
 8008728:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800872c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008730:	d133      	bne.n	800879a <_dtoa_r+0x62a>
 8008732:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008736:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800873a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800873e:	dc1a      	bgt.n	8008776 <_dtoa_r+0x606>
 8008740:	eeb4 7b46 	vcmp.f64	d7, d6
 8008744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008748:	d103      	bne.n	8008752 <_dtoa_r+0x5e2>
 800874a:	ee15 3a10 	vmov	r3, s10
 800874e:	07d9      	lsls	r1, r3, #31
 8008750:	d411      	bmi.n	8008776 <_dtoa_r+0x606>
 8008752:	4629      	mov	r1, r5
 8008754:	4630      	mov	r0, r6
 8008756:	f000 faeb 	bl	8008d30 <_Bfree>
 800875a:	2300      	movs	r3, #0
 800875c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800875e:	f888 3000 	strb.w	r3, [r8]
 8008762:	f10b 0301 	add.w	r3, fp, #1
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800876a:	2b00      	cmp	r3, #0
 800876c:	f43f ad4d 	beq.w	800820a <_dtoa_r+0x9a>
 8008770:	f8c3 8000 	str.w	r8, [r3]
 8008774:	e549      	b.n	800820a <_dtoa_r+0x9a>
 8008776:	465f      	mov	r7, fp
 8008778:	4643      	mov	r3, r8
 800877a:	4698      	mov	r8, r3
 800877c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008780:	2a39      	cmp	r2, #57	; 0x39
 8008782:	d106      	bne.n	8008792 <_dtoa_r+0x622>
 8008784:	9a00      	ldr	r2, [sp, #0]
 8008786:	429a      	cmp	r2, r3
 8008788:	d1f7      	bne.n	800877a <_dtoa_r+0x60a>
 800878a:	9900      	ldr	r1, [sp, #0]
 800878c:	2230      	movs	r2, #48	; 0x30
 800878e:	3701      	adds	r7, #1
 8008790:	700a      	strb	r2, [r1, #0]
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	3201      	adds	r2, #1
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e7ae      	b.n	80086f8 <_dtoa_r+0x588>
 800879a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800879e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a6:	d1b2      	bne.n	800870e <_dtoa_r+0x59e>
 80087a8:	e7d3      	b.n	8008752 <_dtoa_r+0x5e2>
 80087aa:	bf00      	nop
 80087ac:	0800a068 	.word	0x0800a068
 80087b0:	0800a040 	.word	0x0800a040
 80087b4:	9908      	ldr	r1, [sp, #32]
 80087b6:	2900      	cmp	r1, #0
 80087b8:	f000 80d1 	beq.w	800895e <_dtoa_r+0x7ee>
 80087bc:	9907      	ldr	r1, [sp, #28]
 80087be:	2901      	cmp	r1, #1
 80087c0:	f300 80b4 	bgt.w	800892c <_dtoa_r+0x7bc>
 80087c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80087c6:	2900      	cmp	r1, #0
 80087c8:	f000 80ac 	beq.w	8008924 <_dtoa_r+0x7b4>
 80087cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80087d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80087d4:	461c      	mov	r4, r3
 80087d6:	930a      	str	r3, [sp, #40]	; 0x28
 80087d8:	9b05      	ldr	r3, [sp, #20]
 80087da:	4413      	add	r3, r2
 80087dc:	9305      	str	r3, [sp, #20]
 80087de:	9b06      	ldr	r3, [sp, #24]
 80087e0:	2101      	movs	r1, #1
 80087e2:	4413      	add	r3, r2
 80087e4:	4630      	mov	r0, r6
 80087e6:	9306      	str	r3, [sp, #24]
 80087e8:	f000 fb5e 	bl	8008ea8 <__i2b>
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	4607      	mov	r7, r0
 80087f0:	f1b8 0f00 	cmp.w	r8, #0
 80087f4:	dd0d      	ble.n	8008812 <_dtoa_r+0x6a2>
 80087f6:	9a06      	ldr	r2, [sp, #24]
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	dd0a      	ble.n	8008812 <_dtoa_r+0x6a2>
 80087fc:	4542      	cmp	r2, r8
 80087fe:	9905      	ldr	r1, [sp, #20]
 8008800:	bfa8      	it	ge
 8008802:	4642      	movge	r2, r8
 8008804:	1a89      	subs	r1, r1, r2
 8008806:	9105      	str	r1, [sp, #20]
 8008808:	9906      	ldr	r1, [sp, #24]
 800880a:	eba8 0802 	sub.w	r8, r8, r2
 800880e:	1a8a      	subs	r2, r1, r2
 8008810:	9206      	str	r2, [sp, #24]
 8008812:	b303      	cbz	r3, 8008856 <_dtoa_r+0x6e6>
 8008814:	9a08      	ldr	r2, [sp, #32]
 8008816:	2a00      	cmp	r2, #0
 8008818:	f000 80a6 	beq.w	8008968 <_dtoa_r+0x7f8>
 800881c:	2c00      	cmp	r4, #0
 800881e:	dd13      	ble.n	8008848 <_dtoa_r+0x6d8>
 8008820:	4639      	mov	r1, r7
 8008822:	4622      	mov	r2, r4
 8008824:	4630      	mov	r0, r6
 8008826:	930c      	str	r3, [sp, #48]	; 0x30
 8008828:	f000 fbfa 	bl	8009020 <__pow5mult>
 800882c:	462a      	mov	r2, r5
 800882e:	4601      	mov	r1, r0
 8008830:	4607      	mov	r7, r0
 8008832:	4630      	mov	r0, r6
 8008834:	f000 fb4e 	bl	8008ed4 <__multiply>
 8008838:	4629      	mov	r1, r5
 800883a:	900a      	str	r0, [sp, #40]	; 0x28
 800883c:	4630      	mov	r0, r6
 800883e:	f000 fa77 	bl	8008d30 <_Bfree>
 8008842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008844:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008846:	4615      	mov	r5, r2
 8008848:	1b1a      	subs	r2, r3, r4
 800884a:	d004      	beq.n	8008856 <_dtoa_r+0x6e6>
 800884c:	4629      	mov	r1, r5
 800884e:	4630      	mov	r0, r6
 8008850:	f000 fbe6 	bl	8009020 <__pow5mult>
 8008854:	4605      	mov	r5, r0
 8008856:	2101      	movs	r1, #1
 8008858:	4630      	mov	r0, r6
 800885a:	f000 fb25 	bl	8008ea8 <__i2b>
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	f340 8082 	ble.w	800896c <_dtoa_r+0x7fc>
 8008868:	461a      	mov	r2, r3
 800886a:	4601      	mov	r1, r0
 800886c:	4630      	mov	r0, r6
 800886e:	f000 fbd7 	bl	8009020 <__pow5mult>
 8008872:	9b07      	ldr	r3, [sp, #28]
 8008874:	2b01      	cmp	r3, #1
 8008876:	4604      	mov	r4, r0
 8008878:	dd7b      	ble.n	8008972 <_dtoa_r+0x802>
 800887a:	2300      	movs	r3, #0
 800887c:	930a      	str	r3, [sp, #40]	; 0x28
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008884:	6910      	ldr	r0, [r2, #16]
 8008886:	f000 fabf 	bl	8008e08 <__hi0bits>
 800888a:	f1c0 0020 	rsb	r0, r0, #32
 800888e:	9b06      	ldr	r3, [sp, #24]
 8008890:	4418      	add	r0, r3
 8008892:	f010 001f 	ands.w	r0, r0, #31
 8008896:	f000 808d 	beq.w	80089b4 <_dtoa_r+0x844>
 800889a:	f1c0 0220 	rsb	r2, r0, #32
 800889e:	2a04      	cmp	r2, #4
 80088a0:	f340 8086 	ble.w	80089b0 <_dtoa_r+0x840>
 80088a4:	f1c0 001c 	rsb	r0, r0, #28
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	4403      	add	r3, r0
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	4403      	add	r3, r0
 80088b2:	4480      	add	r8, r0
 80088b4:	9306      	str	r3, [sp, #24]
 80088b6:	9b05      	ldr	r3, [sp, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dd05      	ble.n	80088c8 <_dtoa_r+0x758>
 80088bc:	4629      	mov	r1, r5
 80088be:	461a      	mov	r2, r3
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 fc07 	bl	80090d4 <__lshift>
 80088c6:	4605      	mov	r5, r0
 80088c8:	9b06      	ldr	r3, [sp, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x76a>
 80088ce:	4621      	mov	r1, r4
 80088d0:	461a      	mov	r2, r3
 80088d2:	4630      	mov	r0, r6
 80088d4:	f000 fbfe 	bl	80090d4 <__lshift>
 80088d8:	4604      	mov	r4, r0
 80088da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06b      	beq.n	80089b8 <_dtoa_r+0x848>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 fc62 	bl	80091ac <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	da65      	bge.n	80089b8 <_dtoa_r+0x848>
 80088ec:	2300      	movs	r3, #0
 80088ee:	4629      	mov	r1, r5
 80088f0:	220a      	movs	r2, #10
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 fa3e 	bl	8008d74 <__multadd>
 80088f8:	9b08      	ldr	r3, [sp, #32]
 80088fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088fe:	4605      	mov	r5, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8192 	beq.w	8008c2a <_dtoa_r+0xaba>
 8008906:	4639      	mov	r1, r7
 8008908:	2300      	movs	r3, #0
 800890a:	220a      	movs	r2, #10
 800890c:	4630      	mov	r0, r6
 800890e:	f000 fa31 	bl	8008d74 <__multadd>
 8008912:	f1ba 0f00 	cmp.w	sl, #0
 8008916:	4607      	mov	r7, r0
 8008918:	f300 808e 	bgt.w	8008a38 <_dtoa_r+0x8c8>
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	2b02      	cmp	r3, #2
 8008920:	dc51      	bgt.n	80089c6 <_dtoa_r+0x856>
 8008922:	e089      	b.n	8008a38 <_dtoa_r+0x8c8>
 8008924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008926:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800892a:	e751      	b.n	80087d0 <_dtoa_r+0x660>
 800892c:	f109 34ff 	add.w	r4, r9, #4294967295
 8008930:	42a3      	cmp	r3, r4
 8008932:	bfbf      	itttt	lt
 8008934:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008936:	1ae3      	sublt	r3, r4, r3
 8008938:	18d2      	addlt	r2, r2, r3
 800893a:	4613      	movlt	r3, r2
 800893c:	bfb7      	itett	lt
 800893e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008940:	1b1c      	subge	r4, r3, r4
 8008942:	4623      	movlt	r3, r4
 8008944:	2400      	movlt	r4, #0
 8008946:	f1b9 0f00 	cmp.w	r9, #0
 800894a:	bfb5      	itete	lt
 800894c:	9a05      	ldrlt	r2, [sp, #20]
 800894e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8008952:	eba2 0809 	sublt.w	r8, r2, r9
 8008956:	464a      	movge	r2, r9
 8008958:	bfb8      	it	lt
 800895a:	2200      	movlt	r2, #0
 800895c:	e73b      	b.n	80087d6 <_dtoa_r+0x666>
 800895e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008962:	9f08      	ldr	r7, [sp, #32]
 8008964:	461c      	mov	r4, r3
 8008966:	e743      	b.n	80087f0 <_dtoa_r+0x680>
 8008968:	461a      	mov	r2, r3
 800896a:	e76f      	b.n	800884c <_dtoa_r+0x6dc>
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	2b01      	cmp	r3, #1
 8008970:	dc18      	bgt.n	80089a4 <_dtoa_r+0x834>
 8008972:	9b02      	ldr	r3, [sp, #8]
 8008974:	b9b3      	cbnz	r3, 80089a4 <_dtoa_r+0x834>
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800897c:	b9a2      	cbnz	r2, 80089a8 <_dtoa_r+0x838>
 800897e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008982:	0d12      	lsrs	r2, r2, #20
 8008984:	0512      	lsls	r2, r2, #20
 8008986:	b18a      	cbz	r2, 80089ac <_dtoa_r+0x83c>
 8008988:	9b05      	ldr	r3, [sp, #20]
 800898a:	3301      	adds	r3, #1
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	9b06      	ldr	r3, [sp, #24]
 8008990:	3301      	adds	r3, #1
 8008992:	9306      	str	r3, [sp, #24]
 8008994:	2301      	movs	r3, #1
 8008996:	930a      	str	r3, [sp, #40]	; 0x28
 8008998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899a:	2b00      	cmp	r3, #0
 800899c:	f47f af6f 	bne.w	800887e <_dtoa_r+0x70e>
 80089a0:	2001      	movs	r0, #1
 80089a2:	e774      	b.n	800888e <_dtoa_r+0x71e>
 80089a4:	2300      	movs	r3, #0
 80089a6:	e7f6      	b.n	8008996 <_dtoa_r+0x826>
 80089a8:	9b02      	ldr	r3, [sp, #8]
 80089aa:	e7f4      	b.n	8008996 <_dtoa_r+0x826>
 80089ac:	920a      	str	r2, [sp, #40]	; 0x28
 80089ae:	e7f3      	b.n	8008998 <_dtoa_r+0x828>
 80089b0:	d081      	beq.n	80088b6 <_dtoa_r+0x746>
 80089b2:	4610      	mov	r0, r2
 80089b4:	301c      	adds	r0, #28
 80089b6:	e777      	b.n	80088a8 <_dtoa_r+0x738>
 80089b8:	f1b9 0f00 	cmp.w	r9, #0
 80089bc:	dc37      	bgt.n	8008a2e <_dtoa_r+0x8be>
 80089be:	9b07      	ldr	r3, [sp, #28]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	dd34      	ble.n	8008a2e <_dtoa_r+0x8be>
 80089c4:	46ca      	mov	sl, r9
 80089c6:	f1ba 0f00 	cmp.w	sl, #0
 80089ca:	d10d      	bne.n	80089e8 <_dtoa_r+0x878>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4653      	mov	r3, sl
 80089d0:	2205      	movs	r2, #5
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f9ce 	bl	8008d74 <__multadd>
 80089d8:	4601      	mov	r1, r0
 80089da:	4604      	mov	r4, r0
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 fbe5 	bl	80091ac <__mcmp>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f73f adde 	bgt.w	80085a4 <_dtoa_r+0x434>
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	f8dd 8000 	ldr.w	r8, [sp]
 80089ee:	ea6f 0b03 	mvn.w	fp, r3
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	4621      	mov	r1, r4
 80089f8:	4630      	mov	r0, r6
 80089fa:	f000 f999 	bl	8008d30 <_Bfree>
 80089fe:	2f00      	cmp	r7, #0
 8008a00:	f43f aea7 	beq.w	8008752 <_dtoa_r+0x5e2>
 8008a04:	f1b9 0f00 	cmp.w	r9, #0
 8008a08:	d005      	beq.n	8008a16 <_dtoa_r+0x8a6>
 8008a0a:	45b9      	cmp	r9, r7
 8008a0c:	d003      	beq.n	8008a16 <_dtoa_r+0x8a6>
 8008a0e:	4649      	mov	r1, r9
 8008a10:	4630      	mov	r0, r6
 8008a12:	f000 f98d 	bl	8008d30 <_Bfree>
 8008a16:	4639      	mov	r1, r7
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f989 	bl	8008d30 <_Bfree>
 8008a1e:	e698      	b.n	8008752 <_dtoa_r+0x5e2>
 8008a20:	2400      	movs	r4, #0
 8008a22:	4627      	mov	r7, r4
 8008a24:	e7e0      	b.n	80089e8 <_dtoa_r+0x878>
 8008a26:	46bb      	mov	fp, r7
 8008a28:	4604      	mov	r4, r0
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	e5ba      	b.n	80085a4 <_dtoa_r+0x434>
 8008a2e:	9b08      	ldr	r3, [sp, #32]
 8008a30:	46ca      	mov	sl, r9
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 8100 	beq.w	8008c38 <_dtoa_r+0xac8>
 8008a38:	f1b8 0f00 	cmp.w	r8, #0
 8008a3c:	dd05      	ble.n	8008a4a <_dtoa_r+0x8da>
 8008a3e:	4639      	mov	r1, r7
 8008a40:	4642      	mov	r2, r8
 8008a42:	4630      	mov	r0, r6
 8008a44:	f000 fb46 	bl	80090d4 <__lshift>
 8008a48:	4607      	mov	r7, r0
 8008a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d05d      	beq.n	8008b0c <_dtoa_r+0x99c>
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4630      	mov	r0, r6
 8008a54:	f000 f92c 	bl	8008cb0 <_Balloc>
 8008a58:	4680      	mov	r8, r0
 8008a5a:	b928      	cbnz	r0, 8008a68 <_dtoa_r+0x8f8>
 8008a5c:	4b82      	ldr	r3, [pc, #520]	; (8008c68 <_dtoa_r+0xaf8>)
 8008a5e:	4602      	mov	r2, r0
 8008a60:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a64:	f7ff bb9a 	b.w	800819c <_dtoa_r+0x2c>
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	3202      	adds	r2, #2
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	f107 010c 	add.w	r1, r7, #12
 8008a72:	300c      	adds	r0, #12
 8008a74:	f000 f902 	bl	8008c7c <memcpy>
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f000 fb29 	bl	80090d4 <__lshift>
 8008a82:	9b00      	ldr	r3, [sp, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	9b00      	ldr	r3, [sp, #0]
 8008a8a:	4453      	add	r3, sl
 8008a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	46b9      	mov	r9, r7
 8008a96:	9308      	str	r3, [sp, #32]
 8008a98:	4607      	mov	r7, r0
 8008a9a:	9b05      	ldr	r3, [sp, #20]
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	f7ff fad6 	bl	8008054 <quorem>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	3330      	adds	r3, #48	; 0x30
 8008aac:	9006      	str	r0, [sp, #24]
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab4:	f000 fb7a 	bl	80091ac <__mcmp>
 8008ab8:	463a      	mov	r2, r7
 8008aba:	4682      	mov	sl, r0
 8008abc:	4621      	mov	r1, r4
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 fb90 	bl	80091e4 <__mdiff>
 8008ac4:	68c2      	ldr	r2, [r0, #12]
 8008ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac8:	4680      	mov	r8, r0
 8008aca:	bb0a      	cbnz	r2, 8008b10 <_dtoa_r+0x9a0>
 8008acc:	4601      	mov	r1, r0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 fb6c 	bl	80091ac <__mcmp>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4630      	mov	r0, r6
 8008adc:	920e      	str	r2, [sp, #56]	; 0x38
 8008ade:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae0:	f000 f926 	bl	8008d30 <_Bfree>
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ae8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008aec:	ea43 0102 	orr.w	r1, r3, r2
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	430b      	orrs	r3, r1
 8008af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af6:	d10d      	bne.n	8008b14 <_dtoa_r+0x9a4>
 8008af8:	2b39      	cmp	r3, #57	; 0x39
 8008afa:	d029      	beq.n	8008b50 <_dtoa_r+0x9e0>
 8008afc:	f1ba 0f00 	cmp.w	sl, #0
 8008b00:	dd01      	ble.n	8008b06 <_dtoa_r+0x996>
 8008b02:	9b06      	ldr	r3, [sp, #24]
 8008b04:	3331      	adds	r3, #49	; 0x31
 8008b06:	9a02      	ldr	r2, [sp, #8]
 8008b08:	7013      	strb	r3, [r2, #0]
 8008b0a:	e774      	b.n	80089f6 <_dtoa_r+0x886>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	e7b8      	b.n	8008a82 <_dtoa_r+0x912>
 8008b10:	2201      	movs	r2, #1
 8008b12:	e7e1      	b.n	8008ad8 <_dtoa_r+0x968>
 8008b14:	f1ba 0f00 	cmp.w	sl, #0
 8008b18:	db06      	blt.n	8008b28 <_dtoa_r+0x9b8>
 8008b1a:	9907      	ldr	r1, [sp, #28]
 8008b1c:	ea41 0a0a 	orr.w	sl, r1, sl
 8008b20:	9908      	ldr	r1, [sp, #32]
 8008b22:	ea5a 0101 	orrs.w	r1, sl, r1
 8008b26:	d120      	bne.n	8008b6a <_dtoa_r+0x9fa>
 8008b28:	2a00      	cmp	r2, #0
 8008b2a:	ddec      	ble.n	8008b06 <_dtoa_r+0x996>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4630      	mov	r0, r6
 8008b32:	9305      	str	r3, [sp, #20]
 8008b34:	f000 face 	bl	80090d4 <__lshift>
 8008b38:	4621      	mov	r1, r4
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	f000 fb36 	bl	80091ac <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	9b05      	ldr	r3, [sp, #20]
 8008b44:	dc02      	bgt.n	8008b4c <_dtoa_r+0x9dc>
 8008b46:	d1de      	bne.n	8008b06 <_dtoa_r+0x996>
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	d5dc      	bpl.n	8008b06 <_dtoa_r+0x996>
 8008b4c:	2b39      	cmp	r3, #57	; 0x39
 8008b4e:	d1d8      	bne.n	8008b02 <_dtoa_r+0x992>
 8008b50:	9a02      	ldr	r2, [sp, #8]
 8008b52:	2339      	movs	r3, #57	; 0x39
 8008b54:	7013      	strb	r3, [r2, #0]
 8008b56:	4643      	mov	r3, r8
 8008b58:	4698      	mov	r8, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008b60:	2a39      	cmp	r2, #57	; 0x39
 8008b62:	d051      	beq.n	8008c08 <_dtoa_r+0xa98>
 8008b64:	3201      	adds	r2, #1
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e745      	b.n	80089f6 <_dtoa_r+0x886>
 8008b6a:	2a00      	cmp	r2, #0
 8008b6c:	dd03      	ble.n	8008b76 <_dtoa_r+0xa06>
 8008b6e:	2b39      	cmp	r3, #57	; 0x39
 8008b70:	d0ee      	beq.n	8008b50 <_dtoa_r+0x9e0>
 8008b72:	3301      	adds	r3, #1
 8008b74:	e7c7      	b.n	8008b06 <_dtoa_r+0x996>
 8008b76:	9a05      	ldr	r2, [sp, #20]
 8008b78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b7a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b7e:	428a      	cmp	r2, r1
 8008b80:	d02b      	beq.n	8008bda <_dtoa_r+0xa6a>
 8008b82:	4629      	mov	r1, r5
 8008b84:	2300      	movs	r3, #0
 8008b86:	220a      	movs	r2, #10
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f8f3 	bl	8008d74 <__multadd>
 8008b8e:	45b9      	cmp	r9, r7
 8008b90:	4605      	mov	r5, r0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	f04f 020a 	mov.w	r2, #10
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	d107      	bne.n	8008bb0 <_dtoa_r+0xa40>
 8008ba0:	f000 f8e8 	bl	8008d74 <__multadd>
 8008ba4:	4681      	mov	r9, r0
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	9b05      	ldr	r3, [sp, #20]
 8008baa:	3301      	adds	r3, #1
 8008bac:	9305      	str	r3, [sp, #20]
 8008bae:	e774      	b.n	8008a9a <_dtoa_r+0x92a>
 8008bb0:	f000 f8e0 	bl	8008d74 <__multadd>
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	4681      	mov	r9, r0
 8008bb8:	2300      	movs	r3, #0
 8008bba:	220a      	movs	r2, #10
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f000 f8d9 	bl	8008d74 <__multadd>
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	e7f0      	b.n	8008ba8 <_dtoa_r+0xa38>
 8008bc6:	f1ba 0f00 	cmp.w	sl, #0
 8008bca:	9a00      	ldr	r2, [sp, #0]
 8008bcc:	bfcc      	ite	gt
 8008bce:	46d0      	movgt	r8, sl
 8008bd0:	f04f 0801 	movle.w	r8, #1
 8008bd4:	4490      	add	r8, r2
 8008bd6:	f04f 0900 	mov.w	r9, #0
 8008bda:	4629      	mov	r1, r5
 8008bdc:	2201      	movs	r2, #1
 8008bde:	4630      	mov	r0, r6
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	f000 fa77 	bl	80090d4 <__lshift>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4605      	mov	r5, r0
 8008bea:	f000 fadf 	bl	80091ac <__mcmp>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	dcb1      	bgt.n	8008b56 <_dtoa_r+0x9e6>
 8008bf2:	d102      	bne.n	8008bfa <_dtoa_r+0xa8a>
 8008bf4:	9b02      	ldr	r3, [sp, #8]
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d4ad      	bmi.n	8008b56 <_dtoa_r+0x9e6>
 8008bfa:	4643      	mov	r3, r8
 8008bfc:	4698      	mov	r8, r3
 8008bfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c02:	2a30      	cmp	r2, #48	; 0x30
 8008c04:	d0fa      	beq.n	8008bfc <_dtoa_r+0xa8c>
 8008c06:	e6f6      	b.n	80089f6 <_dtoa_r+0x886>
 8008c08:	9a00      	ldr	r2, [sp, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d1a4      	bne.n	8008b58 <_dtoa_r+0x9e8>
 8008c0e:	f10b 0b01 	add.w	fp, fp, #1
 8008c12:	2331      	movs	r3, #49	; 0x31
 8008c14:	e778      	b.n	8008b08 <_dtoa_r+0x998>
 8008c16:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <_dtoa_r+0xafc>)
 8008c18:	f7ff bb12 	b.w	8008240 <_dtoa_r+0xd0>
 8008c1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f47f aaee 	bne.w	8008200 <_dtoa_r+0x90>
 8008c24:	4b12      	ldr	r3, [pc, #72]	; (8008c70 <_dtoa_r+0xb00>)
 8008c26:	f7ff bb0b 	b.w	8008240 <_dtoa_r+0xd0>
 8008c2a:	f1ba 0f00 	cmp.w	sl, #0
 8008c2e:	dc03      	bgt.n	8008c38 <_dtoa_r+0xac8>
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f73f aec7 	bgt.w	80089c6 <_dtoa_r+0x856>
 8008c38:	f8dd 8000 	ldr.w	r8, [sp]
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7ff fa08 	bl	8008054 <quorem>
 8008c44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c48:	f808 3b01 	strb.w	r3, [r8], #1
 8008c4c:	9a00      	ldr	r2, [sp, #0]
 8008c4e:	eba8 0202 	sub.w	r2, r8, r2
 8008c52:	4592      	cmp	sl, r2
 8008c54:	ddb7      	ble.n	8008bc6 <_dtoa_r+0xa56>
 8008c56:	4629      	mov	r1, r5
 8008c58:	2300      	movs	r3, #0
 8008c5a:	220a      	movs	r2, #10
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 f889 	bl	8008d74 <__multadd>
 8008c62:	4605      	mov	r5, r0
 8008c64:	e7ea      	b.n	8008c3c <_dtoa_r+0xacc>
 8008c66:	bf00      	nop
 8008c68:	08009fcb 	.word	0x08009fcb
 8008c6c:	08009f24 	.word	0x08009f24
 8008c70:	08009f48 	.word	0x08009f48

08008c74 <_localeconv_r>:
 8008c74:	4800      	ldr	r0, [pc, #0]	; (8008c78 <_localeconv_r+0x4>)
 8008c76:	4770      	bx	lr
 8008c78:	200001b8 	.word	0x200001b8

08008c7c <memcpy>:
 8008c7c:	440a      	add	r2, r1
 8008c7e:	4291      	cmp	r1, r2
 8008c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c84:	d100      	bne.n	8008c88 <memcpy+0xc>
 8008c86:	4770      	bx	lr
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c92:	4291      	cmp	r1, r2
 8008c94:	d1f9      	bne.n	8008c8a <memcpy+0xe>
 8008c96:	bd10      	pop	{r4, pc}

08008c98 <__malloc_lock>:
 8008c98:	4801      	ldr	r0, [pc, #4]	; (8008ca0 <__malloc_lock+0x8>)
 8008c9a:	f000 bbc8 	b.w	800942e <__retarget_lock_acquire_recursive>
 8008c9e:	bf00      	nop
 8008ca0:	20000798 	.word	0x20000798

08008ca4 <__malloc_unlock>:
 8008ca4:	4801      	ldr	r0, [pc, #4]	; (8008cac <__malloc_unlock+0x8>)
 8008ca6:	f000 bbc3 	b.w	8009430 <__retarget_lock_release_recursive>
 8008caa:	bf00      	nop
 8008cac:	20000798 	.word	0x20000798

08008cb0 <_Balloc>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	b976      	cbnz	r6, 8008cd8 <_Balloc+0x28>
 8008cba:	2010      	movs	r0, #16
 8008cbc:	f7fe fcbc 	bl	8007638 <malloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6260      	str	r0, [r4, #36]	; 0x24
 8008cc4:	b920      	cbnz	r0, 8008cd0 <_Balloc+0x20>
 8008cc6:	4b18      	ldr	r3, [pc, #96]	; (8008d28 <_Balloc+0x78>)
 8008cc8:	4818      	ldr	r0, [pc, #96]	; (8008d2c <_Balloc+0x7c>)
 8008cca:	2166      	movs	r1, #102	; 0x66
 8008ccc:	f000 fb7e 	bl	80093cc <__assert_func>
 8008cd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cd4:	6006      	str	r6, [r0, #0]
 8008cd6:	60c6      	str	r6, [r0, #12]
 8008cd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cda:	68f3      	ldr	r3, [r6, #12]
 8008cdc:	b183      	cbz	r3, 8008d00 <_Balloc+0x50>
 8008cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ce6:	b9b8      	cbnz	r0, 8008d18 <_Balloc+0x68>
 8008ce8:	2101      	movs	r1, #1
 8008cea:	fa01 f605 	lsl.w	r6, r1, r5
 8008cee:	1d72      	adds	r2, r6, #5
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fb5a 	bl	80093ac <_calloc_r>
 8008cf8:	b160      	cbz	r0, 8008d14 <_Balloc+0x64>
 8008cfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cfe:	e00e      	b.n	8008d1e <_Balloc+0x6e>
 8008d00:	2221      	movs	r2, #33	; 0x21
 8008d02:	2104      	movs	r1, #4
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fb51 	bl	80093ac <_calloc_r>
 8008d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d0c:	60f0      	str	r0, [r6, #12]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e4      	bne.n	8008cde <_Balloc+0x2e>
 8008d14:	2000      	movs	r0, #0
 8008d16:	bd70      	pop	{r4, r5, r6, pc}
 8008d18:	6802      	ldr	r2, [r0, #0]
 8008d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d24:	e7f7      	b.n	8008d16 <_Balloc+0x66>
 8008d26:	bf00      	nop
 8008d28:	08009f55 	.word	0x08009f55
 8008d2c:	08009fdc 	.word	0x08009fdc

08008d30 <_Bfree>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d34:	4605      	mov	r5, r0
 8008d36:	460c      	mov	r4, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Bfree+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f7fe fc7c 	bl	8007638 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	6268      	str	r0, [r5, #36]	; 0x24
 8008d44:	b920      	cbnz	r0, 8008d50 <_Bfree+0x20>
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <_Bfree+0x3c>)
 8008d48:	4809      	ldr	r0, [pc, #36]	; (8008d70 <_Bfree+0x40>)
 8008d4a:	218a      	movs	r1, #138	; 0x8a
 8008d4c:	f000 fb3e 	bl	80093cc <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	b13c      	cbz	r4, 8008d6a <_Bfree+0x3a>
 8008d5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d5c:	6862      	ldr	r2, [r4, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d64:	6021      	str	r1, [r4, #0]
 8008d66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	08009f55 	.word	0x08009f55
 8008d70:	08009fdc 	.word	0x08009fdc

08008d74 <__multadd>:
 8008d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	690e      	ldr	r6, [r1, #16]
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	4698      	mov	r8, r3
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f101 0014 	add.w	r0, r1, #20
 8008d84:	2300      	movs	r3, #0
 8008d86:	6805      	ldr	r5, [r0, #0]
 8008d88:	b2a9      	uxth	r1, r5
 8008d8a:	fb02 8101 	mla	r1, r2, r1, r8
 8008d8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d92:	0c2d      	lsrs	r5, r5, #16
 8008d94:	fb02 c505 	mla	r5, r2, r5, ip
 8008d98:	b289      	uxth	r1, r1
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008da0:	429e      	cmp	r6, r3
 8008da2:	f840 1b04 	str.w	r1, [r0], #4
 8008da6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008daa:	dcec      	bgt.n	8008d86 <__multadd+0x12>
 8008dac:	f1b8 0f00 	cmp.w	r8, #0
 8008db0:	d022      	beq.n	8008df8 <__multadd+0x84>
 8008db2:	68a3      	ldr	r3, [r4, #8]
 8008db4:	42b3      	cmp	r3, r6
 8008db6:	dc19      	bgt.n	8008dec <__multadd+0x78>
 8008db8:	6861      	ldr	r1, [r4, #4]
 8008dba:	4638      	mov	r0, r7
 8008dbc:	3101      	adds	r1, #1
 8008dbe:	f7ff ff77 	bl	8008cb0 <_Balloc>
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	b928      	cbnz	r0, 8008dd2 <__multadd+0x5e>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <__multadd+0x8c>)
 8008dca:	480e      	ldr	r0, [pc, #56]	; (8008e04 <__multadd+0x90>)
 8008dcc:	21b5      	movs	r1, #181	; 0xb5
 8008dce:	f000 fafd 	bl	80093cc <__assert_func>
 8008dd2:	6922      	ldr	r2, [r4, #16]
 8008dd4:	3202      	adds	r2, #2
 8008dd6:	f104 010c 	add.w	r1, r4, #12
 8008dda:	0092      	lsls	r2, r2, #2
 8008ddc:	300c      	adds	r0, #12
 8008dde:	f7ff ff4d 	bl	8008c7c <memcpy>
 8008de2:	4621      	mov	r1, r4
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff ffa3 	bl	8008d30 <_Bfree>
 8008dea:	462c      	mov	r4, r5
 8008dec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008df0:	3601      	adds	r6, #1
 8008df2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008df6:	6126      	str	r6, [r4, #16]
 8008df8:	4620      	mov	r0, r4
 8008dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfe:	bf00      	nop
 8008e00:	08009fcb 	.word	0x08009fcb
 8008e04:	08009fdc 	.word	0x08009fdc

08008e08 <__hi0bits>:
 8008e08:	0c03      	lsrs	r3, r0, #16
 8008e0a:	041b      	lsls	r3, r3, #16
 8008e0c:	b9d3      	cbnz	r3, 8008e44 <__hi0bits+0x3c>
 8008e0e:	0400      	lsls	r0, r0, #16
 8008e10:	2310      	movs	r3, #16
 8008e12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e16:	bf04      	itt	eq
 8008e18:	0200      	lsleq	r0, r0, #8
 8008e1a:	3308      	addeq	r3, #8
 8008e1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e20:	bf04      	itt	eq
 8008e22:	0100      	lsleq	r0, r0, #4
 8008e24:	3304      	addeq	r3, #4
 8008e26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e2a:	bf04      	itt	eq
 8008e2c:	0080      	lsleq	r0, r0, #2
 8008e2e:	3302      	addeq	r3, #2
 8008e30:	2800      	cmp	r0, #0
 8008e32:	db05      	blt.n	8008e40 <__hi0bits+0x38>
 8008e34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e38:	f103 0301 	add.w	r3, r3, #1
 8008e3c:	bf08      	it	eq
 8008e3e:	2320      	moveq	r3, #32
 8008e40:	4618      	mov	r0, r3
 8008e42:	4770      	bx	lr
 8008e44:	2300      	movs	r3, #0
 8008e46:	e7e4      	b.n	8008e12 <__hi0bits+0xa>

08008e48 <__lo0bits>:
 8008e48:	6803      	ldr	r3, [r0, #0]
 8008e4a:	f013 0207 	ands.w	r2, r3, #7
 8008e4e:	4601      	mov	r1, r0
 8008e50:	d00b      	beq.n	8008e6a <__lo0bits+0x22>
 8008e52:	07da      	lsls	r2, r3, #31
 8008e54:	d424      	bmi.n	8008ea0 <__lo0bits+0x58>
 8008e56:	0798      	lsls	r0, r3, #30
 8008e58:	bf49      	itett	mi
 8008e5a:	085b      	lsrmi	r3, r3, #1
 8008e5c:	089b      	lsrpl	r3, r3, #2
 8008e5e:	2001      	movmi	r0, #1
 8008e60:	600b      	strmi	r3, [r1, #0]
 8008e62:	bf5c      	itt	pl
 8008e64:	600b      	strpl	r3, [r1, #0]
 8008e66:	2002      	movpl	r0, #2
 8008e68:	4770      	bx	lr
 8008e6a:	b298      	uxth	r0, r3
 8008e6c:	b9b0      	cbnz	r0, 8008e9c <__lo0bits+0x54>
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	2010      	movs	r0, #16
 8008e72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e76:	bf04      	itt	eq
 8008e78:	0a1b      	lsreq	r3, r3, #8
 8008e7a:	3008      	addeq	r0, #8
 8008e7c:	071a      	lsls	r2, r3, #28
 8008e7e:	bf04      	itt	eq
 8008e80:	091b      	lsreq	r3, r3, #4
 8008e82:	3004      	addeq	r0, #4
 8008e84:	079a      	lsls	r2, r3, #30
 8008e86:	bf04      	itt	eq
 8008e88:	089b      	lsreq	r3, r3, #2
 8008e8a:	3002      	addeq	r0, #2
 8008e8c:	07da      	lsls	r2, r3, #31
 8008e8e:	d403      	bmi.n	8008e98 <__lo0bits+0x50>
 8008e90:	085b      	lsrs	r3, r3, #1
 8008e92:	f100 0001 	add.w	r0, r0, #1
 8008e96:	d005      	beq.n	8008ea4 <__lo0bits+0x5c>
 8008e98:	600b      	str	r3, [r1, #0]
 8008e9a:	4770      	bx	lr
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	e7e8      	b.n	8008e72 <__lo0bits+0x2a>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4770      	bx	lr
 8008ea4:	2020      	movs	r0, #32
 8008ea6:	4770      	bx	lr

08008ea8 <__i2b>:
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	460c      	mov	r4, r1
 8008eac:	2101      	movs	r1, #1
 8008eae:	f7ff feff 	bl	8008cb0 <_Balloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	b928      	cbnz	r0, 8008ec2 <__i2b+0x1a>
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <__i2b+0x24>)
 8008eb8:	4805      	ldr	r0, [pc, #20]	; (8008ed0 <__i2b+0x28>)
 8008eba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ebe:	f000 fa85 	bl	80093cc <__assert_func>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	6144      	str	r4, [r0, #20]
 8008ec6:	6103      	str	r3, [r0, #16]
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	bf00      	nop
 8008ecc:	08009fcb 	.word	0x08009fcb
 8008ed0:	08009fdc 	.word	0x08009fdc

08008ed4 <__multiply>:
 8008ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	4614      	mov	r4, r2
 8008eda:	690a      	ldr	r2, [r1, #16]
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	bfb8      	it	lt
 8008ee2:	460b      	movlt	r3, r1
 8008ee4:	460d      	mov	r5, r1
 8008ee6:	bfbc      	itt	lt
 8008ee8:	4625      	movlt	r5, r4
 8008eea:	461c      	movlt	r4, r3
 8008eec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ef0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ef4:	68ab      	ldr	r3, [r5, #8]
 8008ef6:	6869      	ldr	r1, [r5, #4]
 8008ef8:	eb0a 0709 	add.w	r7, sl, r9
 8008efc:	42bb      	cmp	r3, r7
 8008efe:	b085      	sub	sp, #20
 8008f00:	bfb8      	it	lt
 8008f02:	3101      	addlt	r1, #1
 8008f04:	f7ff fed4 	bl	8008cb0 <_Balloc>
 8008f08:	b930      	cbnz	r0, 8008f18 <__multiply+0x44>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b42      	ldr	r3, [pc, #264]	; (8009018 <__multiply+0x144>)
 8008f0e:	4843      	ldr	r0, [pc, #268]	; (800901c <__multiply+0x148>)
 8008f10:	f240 115d 	movw	r1, #349	; 0x15d
 8008f14:	f000 fa5a 	bl	80093cc <__assert_func>
 8008f18:	f100 0614 	add.w	r6, r0, #20
 8008f1c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f20:	4633      	mov	r3, r6
 8008f22:	2200      	movs	r2, #0
 8008f24:	4543      	cmp	r3, r8
 8008f26:	d31e      	bcc.n	8008f66 <__multiply+0x92>
 8008f28:	f105 0c14 	add.w	ip, r5, #20
 8008f2c:	f104 0314 	add.w	r3, r4, #20
 8008f30:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f34:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f38:	9202      	str	r2, [sp, #8]
 8008f3a:	ebac 0205 	sub.w	r2, ip, r5
 8008f3e:	3a15      	subs	r2, #21
 8008f40:	f022 0203 	bic.w	r2, r2, #3
 8008f44:	3204      	adds	r2, #4
 8008f46:	f105 0115 	add.w	r1, r5, #21
 8008f4a:	458c      	cmp	ip, r1
 8008f4c:	bf38      	it	cc
 8008f4e:	2204      	movcc	r2, #4
 8008f50:	9201      	str	r2, [sp, #4]
 8008f52:	9a02      	ldr	r2, [sp, #8]
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d808      	bhi.n	8008f6c <__multiply+0x98>
 8008f5a:	2f00      	cmp	r7, #0
 8008f5c:	dc55      	bgt.n	800900a <__multiply+0x136>
 8008f5e:	6107      	str	r7, [r0, #16]
 8008f60:	b005      	add	sp, #20
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	f843 2b04 	str.w	r2, [r3], #4
 8008f6a:	e7db      	b.n	8008f24 <__multiply+0x50>
 8008f6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f70:	f1ba 0f00 	cmp.w	sl, #0
 8008f74:	d020      	beq.n	8008fb8 <__multiply+0xe4>
 8008f76:	f105 0e14 	add.w	lr, r5, #20
 8008f7a:	46b1      	mov	r9, r6
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f82:	f8d9 b000 	ldr.w	fp, [r9]
 8008f86:	b2a1      	uxth	r1, r4
 8008f88:	fa1f fb8b 	uxth.w	fp, fp
 8008f8c:	fb0a b101 	mla	r1, sl, r1, fp
 8008f90:	4411      	add	r1, r2
 8008f92:	f8d9 2000 	ldr.w	r2, [r9]
 8008f96:	0c24      	lsrs	r4, r4, #16
 8008f98:	0c12      	lsrs	r2, r2, #16
 8008f9a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f9e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008fa2:	b289      	uxth	r1, r1
 8008fa4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008fa8:	45f4      	cmp	ip, lr
 8008faa:	f849 1b04 	str.w	r1, [r9], #4
 8008fae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008fb2:	d8e4      	bhi.n	8008f7e <__multiply+0xaa>
 8008fb4:	9901      	ldr	r1, [sp, #4]
 8008fb6:	5072      	str	r2, [r6, r1]
 8008fb8:	9a03      	ldr	r2, [sp, #12]
 8008fba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	f1b9 0f00 	cmp.w	r9, #0
 8008fc4:	d01f      	beq.n	8009006 <__multiply+0x132>
 8008fc6:	6834      	ldr	r4, [r6, #0]
 8008fc8:	f105 0114 	add.w	r1, r5, #20
 8008fcc:	46b6      	mov	lr, r6
 8008fce:	f04f 0a00 	mov.w	sl, #0
 8008fd2:	880a      	ldrh	r2, [r1, #0]
 8008fd4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008fd8:	fb09 b202 	mla	r2, r9, r2, fp
 8008fdc:	4492      	add	sl, r2
 8008fde:	b2a4      	uxth	r4, r4
 8008fe0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008fe4:	f84e 4b04 	str.w	r4, [lr], #4
 8008fe8:	f851 4b04 	ldr.w	r4, [r1], #4
 8008fec:	f8be 2000 	ldrh.w	r2, [lr]
 8008ff0:	0c24      	lsrs	r4, r4, #16
 8008ff2:	fb09 2404 	mla	r4, r9, r4, r2
 8008ff6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ffa:	458c      	cmp	ip, r1
 8008ffc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009000:	d8e7      	bhi.n	8008fd2 <__multiply+0xfe>
 8009002:	9a01      	ldr	r2, [sp, #4]
 8009004:	50b4      	str	r4, [r6, r2]
 8009006:	3604      	adds	r6, #4
 8009008:	e7a3      	b.n	8008f52 <__multiply+0x7e>
 800900a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1a5      	bne.n	8008f5e <__multiply+0x8a>
 8009012:	3f01      	subs	r7, #1
 8009014:	e7a1      	b.n	8008f5a <__multiply+0x86>
 8009016:	bf00      	nop
 8009018:	08009fcb 	.word	0x08009fcb
 800901c:	08009fdc 	.word	0x08009fdc

08009020 <__pow5mult>:
 8009020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009024:	4615      	mov	r5, r2
 8009026:	f012 0203 	ands.w	r2, r2, #3
 800902a:	4606      	mov	r6, r0
 800902c:	460f      	mov	r7, r1
 800902e:	d007      	beq.n	8009040 <__pow5mult+0x20>
 8009030:	4c25      	ldr	r4, [pc, #148]	; (80090c8 <__pow5mult+0xa8>)
 8009032:	3a01      	subs	r2, #1
 8009034:	2300      	movs	r3, #0
 8009036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800903a:	f7ff fe9b 	bl	8008d74 <__multadd>
 800903e:	4607      	mov	r7, r0
 8009040:	10ad      	asrs	r5, r5, #2
 8009042:	d03d      	beq.n	80090c0 <__pow5mult+0xa0>
 8009044:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009046:	b97c      	cbnz	r4, 8009068 <__pow5mult+0x48>
 8009048:	2010      	movs	r0, #16
 800904a:	f7fe faf5 	bl	8007638 <malloc>
 800904e:	4602      	mov	r2, r0
 8009050:	6270      	str	r0, [r6, #36]	; 0x24
 8009052:	b928      	cbnz	r0, 8009060 <__pow5mult+0x40>
 8009054:	4b1d      	ldr	r3, [pc, #116]	; (80090cc <__pow5mult+0xac>)
 8009056:	481e      	ldr	r0, [pc, #120]	; (80090d0 <__pow5mult+0xb0>)
 8009058:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800905c:	f000 f9b6 	bl	80093cc <__assert_func>
 8009060:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009064:	6004      	str	r4, [r0, #0]
 8009066:	60c4      	str	r4, [r0, #12]
 8009068:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800906c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009070:	b94c      	cbnz	r4, 8009086 <__pow5mult+0x66>
 8009072:	f240 2171 	movw	r1, #625	; 0x271
 8009076:	4630      	mov	r0, r6
 8009078:	f7ff ff16 	bl	8008ea8 <__i2b>
 800907c:	2300      	movs	r3, #0
 800907e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009082:	4604      	mov	r4, r0
 8009084:	6003      	str	r3, [r0, #0]
 8009086:	f04f 0900 	mov.w	r9, #0
 800908a:	07eb      	lsls	r3, r5, #31
 800908c:	d50a      	bpl.n	80090a4 <__pow5mult+0x84>
 800908e:	4639      	mov	r1, r7
 8009090:	4622      	mov	r2, r4
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ff1e 	bl	8008ed4 <__multiply>
 8009098:	4639      	mov	r1, r7
 800909a:	4680      	mov	r8, r0
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff fe47 	bl	8008d30 <_Bfree>
 80090a2:	4647      	mov	r7, r8
 80090a4:	106d      	asrs	r5, r5, #1
 80090a6:	d00b      	beq.n	80090c0 <__pow5mult+0xa0>
 80090a8:	6820      	ldr	r0, [r4, #0]
 80090aa:	b938      	cbnz	r0, 80090bc <__pow5mult+0x9c>
 80090ac:	4622      	mov	r2, r4
 80090ae:	4621      	mov	r1, r4
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff ff0f 	bl	8008ed4 <__multiply>
 80090b6:	6020      	str	r0, [r4, #0]
 80090b8:	f8c0 9000 	str.w	r9, [r0]
 80090bc:	4604      	mov	r4, r0
 80090be:	e7e4      	b.n	800908a <__pow5mult+0x6a>
 80090c0:	4638      	mov	r0, r7
 80090c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c6:	bf00      	nop
 80090c8:	0800a130 	.word	0x0800a130
 80090cc:	08009f55 	.word	0x08009f55
 80090d0:	08009fdc 	.word	0x08009fdc

080090d4 <__lshift>:
 80090d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	460c      	mov	r4, r1
 80090da:	6849      	ldr	r1, [r1, #4]
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090e2:	68a3      	ldr	r3, [r4, #8]
 80090e4:	4607      	mov	r7, r0
 80090e6:	4691      	mov	r9, r2
 80090e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090ec:	f108 0601 	add.w	r6, r8, #1
 80090f0:	42b3      	cmp	r3, r6
 80090f2:	db0b      	blt.n	800910c <__lshift+0x38>
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff fddb 	bl	8008cb0 <_Balloc>
 80090fa:	4605      	mov	r5, r0
 80090fc:	b948      	cbnz	r0, 8009112 <__lshift+0x3e>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b28      	ldr	r3, [pc, #160]	; (80091a4 <__lshift+0xd0>)
 8009102:	4829      	ldr	r0, [pc, #164]	; (80091a8 <__lshift+0xd4>)
 8009104:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009108:	f000 f960 	bl	80093cc <__assert_func>
 800910c:	3101      	adds	r1, #1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	e7ee      	b.n	80090f0 <__lshift+0x1c>
 8009112:	2300      	movs	r3, #0
 8009114:	f100 0114 	add.w	r1, r0, #20
 8009118:	f100 0210 	add.w	r2, r0, #16
 800911c:	4618      	mov	r0, r3
 800911e:	4553      	cmp	r3, sl
 8009120:	db33      	blt.n	800918a <__lshift+0xb6>
 8009122:	6920      	ldr	r0, [r4, #16]
 8009124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009128:	f104 0314 	add.w	r3, r4, #20
 800912c:	f019 091f 	ands.w	r9, r9, #31
 8009130:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009134:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009138:	d02b      	beq.n	8009192 <__lshift+0xbe>
 800913a:	f1c9 0e20 	rsb	lr, r9, #32
 800913e:	468a      	mov	sl, r1
 8009140:	2200      	movs	r2, #0
 8009142:	6818      	ldr	r0, [r3, #0]
 8009144:	fa00 f009 	lsl.w	r0, r0, r9
 8009148:	4302      	orrs	r2, r0
 800914a:	f84a 2b04 	str.w	r2, [sl], #4
 800914e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009152:	459c      	cmp	ip, r3
 8009154:	fa22 f20e 	lsr.w	r2, r2, lr
 8009158:	d8f3      	bhi.n	8009142 <__lshift+0x6e>
 800915a:	ebac 0304 	sub.w	r3, ip, r4
 800915e:	3b15      	subs	r3, #21
 8009160:	f023 0303 	bic.w	r3, r3, #3
 8009164:	3304      	adds	r3, #4
 8009166:	f104 0015 	add.w	r0, r4, #21
 800916a:	4584      	cmp	ip, r0
 800916c:	bf38      	it	cc
 800916e:	2304      	movcc	r3, #4
 8009170:	50ca      	str	r2, [r1, r3]
 8009172:	b10a      	cbz	r2, 8009178 <__lshift+0xa4>
 8009174:	f108 0602 	add.w	r6, r8, #2
 8009178:	3e01      	subs	r6, #1
 800917a:	4638      	mov	r0, r7
 800917c:	612e      	str	r6, [r5, #16]
 800917e:	4621      	mov	r1, r4
 8009180:	f7ff fdd6 	bl	8008d30 <_Bfree>
 8009184:	4628      	mov	r0, r5
 8009186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918a:	f842 0f04 	str.w	r0, [r2, #4]!
 800918e:	3301      	adds	r3, #1
 8009190:	e7c5      	b.n	800911e <__lshift+0x4a>
 8009192:	3904      	subs	r1, #4
 8009194:	f853 2b04 	ldr.w	r2, [r3], #4
 8009198:	f841 2f04 	str.w	r2, [r1, #4]!
 800919c:	459c      	cmp	ip, r3
 800919e:	d8f9      	bhi.n	8009194 <__lshift+0xc0>
 80091a0:	e7ea      	b.n	8009178 <__lshift+0xa4>
 80091a2:	bf00      	nop
 80091a4:	08009fcb 	.word	0x08009fcb
 80091a8:	08009fdc 	.word	0x08009fdc

080091ac <__mcmp>:
 80091ac:	b530      	push	{r4, r5, lr}
 80091ae:	6902      	ldr	r2, [r0, #16]
 80091b0:	690c      	ldr	r4, [r1, #16]
 80091b2:	1b12      	subs	r2, r2, r4
 80091b4:	d10e      	bne.n	80091d4 <__mcmp+0x28>
 80091b6:	f100 0314 	add.w	r3, r0, #20
 80091ba:	3114      	adds	r1, #20
 80091bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091cc:	42a5      	cmp	r5, r4
 80091ce:	d003      	beq.n	80091d8 <__mcmp+0x2c>
 80091d0:	d305      	bcc.n	80091de <__mcmp+0x32>
 80091d2:	2201      	movs	r2, #1
 80091d4:	4610      	mov	r0, r2
 80091d6:	bd30      	pop	{r4, r5, pc}
 80091d8:	4283      	cmp	r3, r0
 80091da:	d3f3      	bcc.n	80091c4 <__mcmp+0x18>
 80091dc:	e7fa      	b.n	80091d4 <__mcmp+0x28>
 80091de:	f04f 32ff 	mov.w	r2, #4294967295
 80091e2:	e7f7      	b.n	80091d4 <__mcmp+0x28>

080091e4 <__mdiff>:
 80091e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e8:	460c      	mov	r4, r1
 80091ea:	4606      	mov	r6, r0
 80091ec:	4611      	mov	r1, r2
 80091ee:	4620      	mov	r0, r4
 80091f0:	4617      	mov	r7, r2
 80091f2:	f7ff ffdb 	bl	80091ac <__mcmp>
 80091f6:	1e05      	subs	r5, r0, #0
 80091f8:	d110      	bne.n	800921c <__mdiff+0x38>
 80091fa:	4629      	mov	r1, r5
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff fd57 	bl	8008cb0 <_Balloc>
 8009202:	b930      	cbnz	r0, 8009212 <__mdiff+0x2e>
 8009204:	4b39      	ldr	r3, [pc, #228]	; (80092ec <__mdiff+0x108>)
 8009206:	4602      	mov	r2, r0
 8009208:	f240 2132 	movw	r1, #562	; 0x232
 800920c:	4838      	ldr	r0, [pc, #224]	; (80092f0 <__mdiff+0x10c>)
 800920e:	f000 f8dd 	bl	80093cc <__assert_func>
 8009212:	2301      	movs	r3, #1
 8009214:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	bfa4      	itt	ge
 800921e:	463b      	movge	r3, r7
 8009220:	4627      	movge	r7, r4
 8009222:	4630      	mov	r0, r6
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	bfa6      	itte	ge
 8009228:	461c      	movge	r4, r3
 800922a:	2500      	movge	r5, #0
 800922c:	2501      	movlt	r5, #1
 800922e:	f7ff fd3f 	bl	8008cb0 <_Balloc>
 8009232:	b920      	cbnz	r0, 800923e <__mdiff+0x5a>
 8009234:	4b2d      	ldr	r3, [pc, #180]	; (80092ec <__mdiff+0x108>)
 8009236:	4602      	mov	r2, r0
 8009238:	f44f 7110 	mov.w	r1, #576	; 0x240
 800923c:	e7e6      	b.n	800920c <__mdiff+0x28>
 800923e:	693e      	ldr	r6, [r7, #16]
 8009240:	60c5      	str	r5, [r0, #12]
 8009242:	6925      	ldr	r5, [r4, #16]
 8009244:	f107 0114 	add.w	r1, r7, #20
 8009248:	f104 0914 	add.w	r9, r4, #20
 800924c:	f100 0e14 	add.w	lr, r0, #20
 8009250:	f107 0210 	add.w	r2, r7, #16
 8009254:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009258:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800925c:	46f2      	mov	sl, lr
 800925e:	2700      	movs	r7, #0
 8009260:	f859 3b04 	ldr.w	r3, [r9], #4
 8009264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009268:	fa1f f883 	uxth.w	r8, r3
 800926c:	fa17 f78b 	uxtah	r7, r7, fp
 8009270:	0c1b      	lsrs	r3, r3, #16
 8009272:	eba7 0808 	sub.w	r8, r7, r8
 8009276:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800927a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800927e:	fa1f f888 	uxth.w	r8, r8
 8009282:	141f      	asrs	r7, r3, #16
 8009284:	454d      	cmp	r5, r9
 8009286:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800928a:	f84a 3b04 	str.w	r3, [sl], #4
 800928e:	d8e7      	bhi.n	8009260 <__mdiff+0x7c>
 8009290:	1b2b      	subs	r3, r5, r4
 8009292:	3b15      	subs	r3, #21
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	3304      	adds	r3, #4
 800929a:	3415      	adds	r4, #21
 800929c:	42a5      	cmp	r5, r4
 800929e:	bf38      	it	cc
 80092a0:	2304      	movcc	r3, #4
 80092a2:	4419      	add	r1, r3
 80092a4:	4473      	add	r3, lr
 80092a6:	469e      	mov	lr, r3
 80092a8:	460d      	mov	r5, r1
 80092aa:	4565      	cmp	r5, ip
 80092ac:	d30e      	bcc.n	80092cc <__mdiff+0xe8>
 80092ae:	f10c 0203 	add.w	r2, ip, #3
 80092b2:	1a52      	subs	r2, r2, r1
 80092b4:	f022 0203 	bic.w	r2, r2, #3
 80092b8:	3903      	subs	r1, #3
 80092ba:	458c      	cmp	ip, r1
 80092bc:	bf38      	it	cc
 80092be:	2200      	movcc	r2, #0
 80092c0:	441a      	add	r2, r3
 80092c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092c6:	b17b      	cbz	r3, 80092e8 <__mdiff+0x104>
 80092c8:	6106      	str	r6, [r0, #16]
 80092ca:	e7a5      	b.n	8009218 <__mdiff+0x34>
 80092cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80092d0:	fa17 f488 	uxtah	r4, r7, r8
 80092d4:	1422      	asrs	r2, r4, #16
 80092d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80092da:	b2a4      	uxth	r4, r4
 80092dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80092e0:	f84e 4b04 	str.w	r4, [lr], #4
 80092e4:	1417      	asrs	r7, r2, #16
 80092e6:	e7e0      	b.n	80092aa <__mdiff+0xc6>
 80092e8:	3e01      	subs	r6, #1
 80092ea:	e7ea      	b.n	80092c2 <__mdiff+0xde>
 80092ec:	08009fcb 	.word	0x08009fcb
 80092f0:	08009fdc 	.word	0x08009fdc

080092f4 <__d2b>:
 80092f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4689      	mov	r9, r1
 80092fa:	2101      	movs	r1, #1
 80092fc:	ec57 6b10 	vmov	r6, r7, d0
 8009300:	4690      	mov	r8, r2
 8009302:	f7ff fcd5 	bl	8008cb0 <_Balloc>
 8009306:	4604      	mov	r4, r0
 8009308:	b930      	cbnz	r0, 8009318 <__d2b+0x24>
 800930a:	4602      	mov	r2, r0
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <__d2b+0xb0>)
 800930e:	4826      	ldr	r0, [pc, #152]	; (80093a8 <__d2b+0xb4>)
 8009310:	f240 310a 	movw	r1, #778	; 0x30a
 8009314:	f000 f85a 	bl	80093cc <__assert_func>
 8009318:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800931c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009320:	bb35      	cbnz	r5, 8009370 <__d2b+0x7c>
 8009322:	2e00      	cmp	r6, #0
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	d028      	beq.n	800937a <__d2b+0x86>
 8009328:	4668      	mov	r0, sp
 800932a:	9600      	str	r6, [sp, #0]
 800932c:	f7ff fd8c 	bl	8008e48 <__lo0bits>
 8009330:	9900      	ldr	r1, [sp, #0]
 8009332:	b300      	cbz	r0, 8009376 <__d2b+0x82>
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	f1c0 0320 	rsb	r3, r0, #32
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	430b      	orrs	r3, r1
 8009340:	40c2      	lsrs	r2, r0
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	9201      	str	r2, [sp, #4]
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	61a3      	str	r3, [r4, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bf14      	ite	ne
 800934e:	2202      	movne	r2, #2
 8009350:	2201      	moveq	r2, #1
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	b1d5      	cbz	r5, 800938c <__d2b+0x98>
 8009356:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800935a:	4405      	add	r5, r0
 800935c:	f8c9 5000 	str.w	r5, [r9]
 8009360:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009364:	f8c8 0000 	str.w	r0, [r8]
 8009368:	4620      	mov	r0, r4
 800936a:	b003      	add	sp, #12
 800936c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009374:	e7d5      	b.n	8009322 <__d2b+0x2e>
 8009376:	6161      	str	r1, [r4, #20]
 8009378:	e7e5      	b.n	8009346 <__d2b+0x52>
 800937a:	a801      	add	r0, sp, #4
 800937c:	f7ff fd64 	bl	8008e48 <__lo0bits>
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	6163      	str	r3, [r4, #20]
 8009384:	2201      	movs	r2, #1
 8009386:	6122      	str	r2, [r4, #16]
 8009388:	3020      	adds	r0, #32
 800938a:	e7e3      	b.n	8009354 <__d2b+0x60>
 800938c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009394:	f8c9 0000 	str.w	r0, [r9]
 8009398:	6918      	ldr	r0, [r3, #16]
 800939a:	f7ff fd35 	bl	8008e08 <__hi0bits>
 800939e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093a2:	e7df      	b.n	8009364 <__d2b+0x70>
 80093a4:	08009fcb 	.word	0x08009fcb
 80093a8:	08009fdc 	.word	0x08009fdc

080093ac <_calloc_r>:
 80093ac:	b513      	push	{r0, r1, r4, lr}
 80093ae:	434a      	muls	r2, r1
 80093b0:	4611      	mov	r1, r2
 80093b2:	9201      	str	r2, [sp, #4]
 80093b4:	f7fe f9a0 	bl	80076f8 <_malloc_r>
 80093b8:	4604      	mov	r4, r0
 80093ba:	b118      	cbz	r0, 80093c4 <_calloc_r+0x18>
 80093bc:	9a01      	ldr	r2, [sp, #4]
 80093be:	2100      	movs	r1, #0
 80093c0:	f7fe f942 	bl	8007648 <memset>
 80093c4:	4620      	mov	r0, r4
 80093c6:	b002      	add	sp, #8
 80093c8:	bd10      	pop	{r4, pc}
	...

080093cc <__assert_func>:
 80093cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ce:	4614      	mov	r4, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <__assert_func+0x2c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4605      	mov	r5, r0
 80093d8:	68d8      	ldr	r0, [r3, #12]
 80093da:	b14c      	cbz	r4, 80093f0 <__assert_func+0x24>
 80093dc:	4b07      	ldr	r3, [pc, #28]	; (80093fc <__assert_func+0x30>)
 80093de:	9100      	str	r1, [sp, #0]
 80093e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093e4:	4906      	ldr	r1, [pc, #24]	; (8009400 <__assert_func+0x34>)
 80093e6:	462b      	mov	r3, r5
 80093e8:	f000 f80e 	bl	8009408 <fiprintf>
 80093ec:	f000 fa5a 	bl	80098a4 <abort>
 80093f0:	4b04      	ldr	r3, [pc, #16]	; (8009404 <__assert_func+0x38>)
 80093f2:	461c      	mov	r4, r3
 80093f4:	e7f3      	b.n	80093de <__assert_func+0x12>
 80093f6:	bf00      	nop
 80093f8:	20000064 	.word	0x20000064
 80093fc:	0800a13c 	.word	0x0800a13c
 8009400:	0800a149 	.word	0x0800a149
 8009404:	0800a177 	.word	0x0800a177

08009408 <fiprintf>:
 8009408:	b40e      	push	{r1, r2, r3}
 800940a:	b503      	push	{r0, r1, lr}
 800940c:	4601      	mov	r1, r0
 800940e:	ab03      	add	r3, sp, #12
 8009410:	4805      	ldr	r0, [pc, #20]	; (8009428 <fiprintf+0x20>)
 8009412:	f853 2b04 	ldr.w	r2, [r3], #4
 8009416:	6800      	ldr	r0, [r0, #0]
 8009418:	9301      	str	r3, [sp, #4]
 800941a:	f000 f845 	bl	80094a8 <_vfiprintf_r>
 800941e:	b002      	add	sp, #8
 8009420:	f85d eb04 	ldr.w	lr, [sp], #4
 8009424:	b003      	add	sp, #12
 8009426:	4770      	bx	lr
 8009428:	20000064 	.word	0x20000064

0800942c <__retarget_lock_init_recursive>:
 800942c:	4770      	bx	lr

0800942e <__retarget_lock_acquire_recursive>:
 800942e:	4770      	bx	lr

08009430 <__retarget_lock_release_recursive>:
 8009430:	4770      	bx	lr

08009432 <__ascii_mbtowc>:
 8009432:	b082      	sub	sp, #8
 8009434:	b901      	cbnz	r1, 8009438 <__ascii_mbtowc+0x6>
 8009436:	a901      	add	r1, sp, #4
 8009438:	b142      	cbz	r2, 800944c <__ascii_mbtowc+0x1a>
 800943a:	b14b      	cbz	r3, 8009450 <__ascii_mbtowc+0x1e>
 800943c:	7813      	ldrb	r3, [r2, #0]
 800943e:	600b      	str	r3, [r1, #0]
 8009440:	7812      	ldrb	r2, [r2, #0]
 8009442:	1e10      	subs	r0, r2, #0
 8009444:	bf18      	it	ne
 8009446:	2001      	movne	r0, #1
 8009448:	b002      	add	sp, #8
 800944a:	4770      	bx	lr
 800944c:	4610      	mov	r0, r2
 800944e:	e7fb      	b.n	8009448 <__ascii_mbtowc+0x16>
 8009450:	f06f 0001 	mvn.w	r0, #1
 8009454:	e7f8      	b.n	8009448 <__ascii_mbtowc+0x16>

08009456 <__sfputc_r>:
 8009456:	6893      	ldr	r3, [r2, #8]
 8009458:	3b01      	subs	r3, #1
 800945a:	2b00      	cmp	r3, #0
 800945c:	b410      	push	{r4}
 800945e:	6093      	str	r3, [r2, #8]
 8009460:	da08      	bge.n	8009474 <__sfputc_r+0x1e>
 8009462:	6994      	ldr	r4, [r2, #24]
 8009464:	42a3      	cmp	r3, r4
 8009466:	db01      	blt.n	800946c <__sfputc_r+0x16>
 8009468:	290a      	cmp	r1, #10
 800946a:	d103      	bne.n	8009474 <__sfputc_r+0x1e>
 800946c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009470:	f000 b94a 	b.w	8009708 <__swbuf_r>
 8009474:	6813      	ldr	r3, [r2, #0]
 8009476:	1c58      	adds	r0, r3, #1
 8009478:	6010      	str	r0, [r2, #0]
 800947a:	7019      	strb	r1, [r3, #0]
 800947c:	4608      	mov	r0, r1
 800947e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009482:	4770      	bx	lr

08009484 <__sfputs_r>:
 8009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009486:	4606      	mov	r6, r0
 8009488:	460f      	mov	r7, r1
 800948a:	4614      	mov	r4, r2
 800948c:	18d5      	adds	r5, r2, r3
 800948e:	42ac      	cmp	r4, r5
 8009490:	d101      	bne.n	8009496 <__sfputs_r+0x12>
 8009492:	2000      	movs	r0, #0
 8009494:	e007      	b.n	80094a6 <__sfputs_r+0x22>
 8009496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949a:	463a      	mov	r2, r7
 800949c:	4630      	mov	r0, r6
 800949e:	f7ff ffda 	bl	8009456 <__sfputc_r>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d1f3      	bne.n	800948e <__sfputs_r+0xa>
 80094a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094a8 <_vfiprintf_r>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	460d      	mov	r5, r1
 80094ae:	b09d      	sub	sp, #116	; 0x74
 80094b0:	4614      	mov	r4, r2
 80094b2:	4698      	mov	r8, r3
 80094b4:	4606      	mov	r6, r0
 80094b6:	b118      	cbz	r0, 80094c0 <_vfiprintf_r+0x18>
 80094b8:	6983      	ldr	r3, [r0, #24]
 80094ba:	b90b      	cbnz	r3, 80094c0 <_vfiprintf_r+0x18>
 80094bc:	f000 fb14 	bl	8009ae8 <__sinit>
 80094c0:	4b89      	ldr	r3, [pc, #548]	; (80096e8 <_vfiprintf_r+0x240>)
 80094c2:	429d      	cmp	r5, r3
 80094c4:	d11b      	bne.n	80094fe <_vfiprintf_r+0x56>
 80094c6:	6875      	ldr	r5, [r6, #4]
 80094c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ca:	07d9      	lsls	r1, r3, #31
 80094cc:	d405      	bmi.n	80094da <_vfiprintf_r+0x32>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	059a      	lsls	r2, r3, #22
 80094d2:	d402      	bmi.n	80094da <_vfiprintf_r+0x32>
 80094d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d6:	f7ff ffaa 	bl	800942e <__retarget_lock_acquire_recursive>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	071b      	lsls	r3, r3, #28
 80094de:	d501      	bpl.n	80094e4 <_vfiprintf_r+0x3c>
 80094e0:	692b      	ldr	r3, [r5, #16]
 80094e2:	b9eb      	cbnz	r3, 8009520 <_vfiprintf_r+0x78>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f96e 	bl	80097c8 <__swsetup_r>
 80094ec:	b1c0      	cbz	r0, 8009520 <_vfiprintf_r+0x78>
 80094ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f0:	07dc      	lsls	r4, r3, #31
 80094f2:	d50e      	bpl.n	8009512 <_vfiprintf_r+0x6a>
 80094f4:	f04f 30ff 	mov.w	r0, #4294967295
 80094f8:	b01d      	add	sp, #116	; 0x74
 80094fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fe:	4b7b      	ldr	r3, [pc, #492]	; (80096ec <_vfiprintf_r+0x244>)
 8009500:	429d      	cmp	r5, r3
 8009502:	d101      	bne.n	8009508 <_vfiprintf_r+0x60>
 8009504:	68b5      	ldr	r5, [r6, #8]
 8009506:	e7df      	b.n	80094c8 <_vfiprintf_r+0x20>
 8009508:	4b79      	ldr	r3, [pc, #484]	; (80096f0 <_vfiprintf_r+0x248>)
 800950a:	429d      	cmp	r5, r3
 800950c:	bf08      	it	eq
 800950e:	68f5      	ldreq	r5, [r6, #12]
 8009510:	e7da      	b.n	80094c8 <_vfiprintf_r+0x20>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	0598      	lsls	r0, r3, #22
 8009516:	d4ed      	bmi.n	80094f4 <_vfiprintf_r+0x4c>
 8009518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800951a:	f7ff ff89 	bl	8009430 <__retarget_lock_release_recursive>
 800951e:	e7e9      	b.n	80094f4 <_vfiprintf_r+0x4c>
 8009520:	2300      	movs	r3, #0
 8009522:	9309      	str	r3, [sp, #36]	; 0x24
 8009524:	2320      	movs	r3, #32
 8009526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800952a:	f8cd 800c 	str.w	r8, [sp, #12]
 800952e:	2330      	movs	r3, #48	; 0x30
 8009530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096f4 <_vfiprintf_r+0x24c>
 8009534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009538:	f04f 0901 	mov.w	r9, #1
 800953c:	4623      	mov	r3, r4
 800953e:	469a      	mov	sl, r3
 8009540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009544:	b10a      	cbz	r2, 800954a <_vfiprintf_r+0xa2>
 8009546:	2a25      	cmp	r2, #37	; 0x25
 8009548:	d1f9      	bne.n	800953e <_vfiprintf_r+0x96>
 800954a:	ebba 0b04 	subs.w	fp, sl, r4
 800954e:	d00b      	beq.n	8009568 <_vfiprintf_r+0xc0>
 8009550:	465b      	mov	r3, fp
 8009552:	4622      	mov	r2, r4
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f7ff ff94 	bl	8009484 <__sfputs_r>
 800955c:	3001      	adds	r0, #1
 800955e:	f000 80aa 	beq.w	80096b6 <_vfiprintf_r+0x20e>
 8009562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009564:	445a      	add	r2, fp
 8009566:	9209      	str	r2, [sp, #36]	; 0x24
 8009568:	f89a 3000 	ldrb.w	r3, [sl]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80a2 	beq.w	80096b6 <_vfiprintf_r+0x20e>
 8009572:	2300      	movs	r3, #0
 8009574:	f04f 32ff 	mov.w	r2, #4294967295
 8009578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800957c:	f10a 0a01 	add.w	sl, sl, #1
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009588:	931a      	str	r3, [sp, #104]	; 0x68
 800958a:	4654      	mov	r4, sl
 800958c:	2205      	movs	r2, #5
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	4858      	ldr	r0, [pc, #352]	; (80096f4 <_vfiprintf_r+0x24c>)
 8009594:	f7f6 fe5c 	bl	8000250 <memchr>
 8009598:	9a04      	ldr	r2, [sp, #16]
 800959a:	b9d8      	cbnz	r0, 80095d4 <_vfiprintf_r+0x12c>
 800959c:	06d1      	lsls	r1, r2, #27
 800959e:	bf44      	itt	mi
 80095a0:	2320      	movmi	r3, #32
 80095a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a6:	0713      	lsls	r3, r2, #28
 80095a8:	bf44      	itt	mi
 80095aa:	232b      	movmi	r3, #43	; 0x2b
 80095ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b0:	f89a 3000 	ldrb.w	r3, [sl]
 80095b4:	2b2a      	cmp	r3, #42	; 0x2a
 80095b6:	d015      	beq.n	80095e4 <_vfiprintf_r+0x13c>
 80095b8:	9a07      	ldr	r2, [sp, #28]
 80095ba:	4654      	mov	r4, sl
 80095bc:	2000      	movs	r0, #0
 80095be:	f04f 0c0a 	mov.w	ip, #10
 80095c2:	4621      	mov	r1, r4
 80095c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095c8:	3b30      	subs	r3, #48	; 0x30
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d94e      	bls.n	800966c <_vfiprintf_r+0x1c4>
 80095ce:	b1b0      	cbz	r0, 80095fe <_vfiprintf_r+0x156>
 80095d0:	9207      	str	r2, [sp, #28]
 80095d2:	e014      	b.n	80095fe <_vfiprintf_r+0x156>
 80095d4:	eba0 0308 	sub.w	r3, r0, r8
 80095d8:	fa09 f303 	lsl.w	r3, r9, r3
 80095dc:	4313      	orrs	r3, r2
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	46a2      	mov	sl, r4
 80095e2:	e7d2      	b.n	800958a <_vfiprintf_r+0xe2>
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	1d19      	adds	r1, r3, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	9103      	str	r1, [sp, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfbb      	ittet	lt
 80095f0:	425b      	neglt	r3, r3
 80095f2:	f042 0202 	orrlt.w	r2, r2, #2
 80095f6:	9307      	strge	r3, [sp, #28]
 80095f8:	9307      	strlt	r3, [sp, #28]
 80095fa:	bfb8      	it	lt
 80095fc:	9204      	strlt	r2, [sp, #16]
 80095fe:	7823      	ldrb	r3, [r4, #0]
 8009600:	2b2e      	cmp	r3, #46	; 0x2e
 8009602:	d10c      	bne.n	800961e <_vfiprintf_r+0x176>
 8009604:	7863      	ldrb	r3, [r4, #1]
 8009606:	2b2a      	cmp	r3, #42	; 0x2a
 8009608:	d135      	bne.n	8009676 <_vfiprintf_r+0x1ce>
 800960a:	9b03      	ldr	r3, [sp, #12]
 800960c:	1d1a      	adds	r2, r3, #4
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	9203      	str	r2, [sp, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfb8      	it	lt
 8009616:	f04f 33ff 	movlt.w	r3, #4294967295
 800961a:	3402      	adds	r4, #2
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009704 <_vfiprintf_r+0x25c>
 8009622:	7821      	ldrb	r1, [r4, #0]
 8009624:	2203      	movs	r2, #3
 8009626:	4650      	mov	r0, sl
 8009628:	f7f6 fe12 	bl	8000250 <memchr>
 800962c:	b140      	cbz	r0, 8009640 <_vfiprintf_r+0x198>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	eba0 000a 	sub.w	r0, r0, sl
 8009634:	fa03 f000 	lsl.w	r0, r3, r0
 8009638:	9b04      	ldr	r3, [sp, #16]
 800963a:	4303      	orrs	r3, r0
 800963c:	3401      	adds	r4, #1
 800963e:	9304      	str	r3, [sp, #16]
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	482c      	ldr	r0, [pc, #176]	; (80096f8 <_vfiprintf_r+0x250>)
 8009646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800964a:	2206      	movs	r2, #6
 800964c:	f7f6 fe00 	bl	8000250 <memchr>
 8009650:	2800      	cmp	r0, #0
 8009652:	d03f      	beq.n	80096d4 <_vfiprintf_r+0x22c>
 8009654:	4b29      	ldr	r3, [pc, #164]	; (80096fc <_vfiprintf_r+0x254>)
 8009656:	bb1b      	cbnz	r3, 80096a0 <_vfiprintf_r+0x1f8>
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	3307      	adds	r3, #7
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	3308      	adds	r3, #8
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009666:	443b      	add	r3, r7
 8009668:	9309      	str	r3, [sp, #36]	; 0x24
 800966a:	e767      	b.n	800953c <_vfiprintf_r+0x94>
 800966c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009670:	460c      	mov	r4, r1
 8009672:	2001      	movs	r0, #1
 8009674:	e7a5      	b.n	80095c2 <_vfiprintf_r+0x11a>
 8009676:	2300      	movs	r3, #0
 8009678:	3401      	adds	r4, #1
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	4619      	mov	r1, r3
 800967e:	f04f 0c0a 	mov.w	ip, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009688:	3a30      	subs	r2, #48	; 0x30
 800968a:	2a09      	cmp	r2, #9
 800968c:	d903      	bls.n	8009696 <_vfiprintf_r+0x1ee>
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0c5      	beq.n	800961e <_vfiprintf_r+0x176>
 8009692:	9105      	str	r1, [sp, #20]
 8009694:	e7c3      	b.n	800961e <_vfiprintf_r+0x176>
 8009696:	fb0c 2101 	mla	r1, ip, r1, r2
 800969a:	4604      	mov	r4, r0
 800969c:	2301      	movs	r3, #1
 800969e:	e7f0      	b.n	8009682 <_vfiprintf_r+0x1da>
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <_vfiprintf_r+0x258>)
 80096a8:	a904      	add	r1, sp, #16
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7fe f910 	bl	80078d0 <_printf_float>
 80096b0:	4607      	mov	r7, r0
 80096b2:	1c78      	adds	r0, r7, #1
 80096b4:	d1d6      	bne.n	8009664 <_vfiprintf_r+0x1bc>
 80096b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096b8:	07d9      	lsls	r1, r3, #31
 80096ba:	d405      	bmi.n	80096c8 <_vfiprintf_r+0x220>
 80096bc:	89ab      	ldrh	r3, [r5, #12]
 80096be:	059a      	lsls	r2, r3, #22
 80096c0:	d402      	bmi.n	80096c8 <_vfiprintf_r+0x220>
 80096c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096c4:	f7ff feb4 	bl	8009430 <__retarget_lock_release_recursive>
 80096c8:	89ab      	ldrh	r3, [r5, #12]
 80096ca:	065b      	lsls	r3, r3, #25
 80096cc:	f53f af12 	bmi.w	80094f4 <_vfiprintf_r+0x4c>
 80096d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096d2:	e711      	b.n	80094f8 <_vfiprintf_r+0x50>
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	462a      	mov	r2, r5
 80096da:	4b09      	ldr	r3, [pc, #36]	; (8009700 <_vfiprintf_r+0x258>)
 80096dc:	a904      	add	r1, sp, #16
 80096de:	4630      	mov	r0, r6
 80096e0:	f7fe fb82 	bl	8007de8 <_printf_i>
 80096e4:	e7e4      	b.n	80096b0 <_vfiprintf_r+0x208>
 80096e6:	bf00      	nop
 80096e8:	0800a2b4 	.word	0x0800a2b4
 80096ec:	0800a2d4 	.word	0x0800a2d4
 80096f0:	0800a294 	.word	0x0800a294
 80096f4:	0800a182 	.word	0x0800a182
 80096f8:	0800a18c 	.word	0x0800a18c
 80096fc:	080078d1 	.word	0x080078d1
 8009700:	08009485 	.word	0x08009485
 8009704:	0800a188 	.word	0x0800a188

08009708 <__swbuf_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	460e      	mov	r6, r1
 800970c:	4614      	mov	r4, r2
 800970e:	4605      	mov	r5, r0
 8009710:	b118      	cbz	r0, 800971a <__swbuf_r+0x12>
 8009712:	6983      	ldr	r3, [r0, #24]
 8009714:	b90b      	cbnz	r3, 800971a <__swbuf_r+0x12>
 8009716:	f000 f9e7 	bl	8009ae8 <__sinit>
 800971a:	4b21      	ldr	r3, [pc, #132]	; (80097a0 <__swbuf_r+0x98>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d12b      	bne.n	8009778 <__swbuf_r+0x70>
 8009720:	686c      	ldr	r4, [r5, #4]
 8009722:	69a3      	ldr	r3, [r4, #24]
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	071a      	lsls	r2, r3, #28
 800972a:	d52f      	bpl.n	800978c <__swbuf_r+0x84>
 800972c:	6923      	ldr	r3, [r4, #16]
 800972e:	b36b      	cbz	r3, 800978c <__swbuf_r+0x84>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	1ac0      	subs	r0, r0, r3
 8009736:	6963      	ldr	r3, [r4, #20]
 8009738:	b2f6      	uxtb	r6, r6
 800973a:	4283      	cmp	r3, r0
 800973c:	4637      	mov	r7, r6
 800973e:	dc04      	bgt.n	800974a <__swbuf_r+0x42>
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f000 f93c 	bl	80099c0 <_fflush_r>
 8009748:	bb30      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 800974a:	68a3      	ldr	r3, [r4, #8]
 800974c:	3b01      	subs	r3, #1
 800974e:	60a3      	str	r3, [r4, #8]
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	701e      	strb	r6, [r3, #0]
 8009758:	6963      	ldr	r3, [r4, #20]
 800975a:	3001      	adds	r0, #1
 800975c:	4283      	cmp	r3, r0
 800975e:	d004      	beq.n	800976a <__swbuf_r+0x62>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	07db      	lsls	r3, r3, #31
 8009764:	d506      	bpl.n	8009774 <__swbuf_r+0x6c>
 8009766:	2e0a      	cmp	r6, #10
 8009768:	d104      	bne.n	8009774 <__swbuf_r+0x6c>
 800976a:	4621      	mov	r1, r4
 800976c:	4628      	mov	r0, r5
 800976e:	f000 f927 	bl	80099c0 <_fflush_r>
 8009772:	b988      	cbnz	r0, 8009798 <__swbuf_r+0x90>
 8009774:	4638      	mov	r0, r7
 8009776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009778:	4b0a      	ldr	r3, [pc, #40]	; (80097a4 <__swbuf_r+0x9c>)
 800977a:	429c      	cmp	r4, r3
 800977c:	d101      	bne.n	8009782 <__swbuf_r+0x7a>
 800977e:	68ac      	ldr	r4, [r5, #8]
 8009780:	e7cf      	b.n	8009722 <__swbuf_r+0x1a>
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <__swbuf_r+0xa0>)
 8009784:	429c      	cmp	r4, r3
 8009786:	bf08      	it	eq
 8009788:	68ec      	ldreq	r4, [r5, #12]
 800978a:	e7ca      	b.n	8009722 <__swbuf_r+0x1a>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f81a 	bl	80097c8 <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0cb      	beq.n	8009730 <__swbuf_r+0x28>
 8009798:	f04f 37ff 	mov.w	r7, #4294967295
 800979c:	e7ea      	b.n	8009774 <__swbuf_r+0x6c>
 800979e:	bf00      	nop
 80097a0:	0800a2b4 	.word	0x0800a2b4
 80097a4:	0800a2d4 	.word	0x0800a2d4
 80097a8:	0800a294 	.word	0x0800a294

080097ac <__ascii_wctomb>:
 80097ac:	b149      	cbz	r1, 80097c2 <__ascii_wctomb+0x16>
 80097ae:	2aff      	cmp	r2, #255	; 0xff
 80097b0:	bf85      	ittet	hi
 80097b2:	238a      	movhi	r3, #138	; 0x8a
 80097b4:	6003      	strhi	r3, [r0, #0]
 80097b6:	700a      	strbls	r2, [r1, #0]
 80097b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80097bc:	bf98      	it	ls
 80097be:	2001      	movls	r0, #1
 80097c0:	4770      	bx	lr
 80097c2:	4608      	mov	r0, r1
 80097c4:	4770      	bx	lr
	...

080097c8 <__swsetup_r>:
 80097c8:	4b32      	ldr	r3, [pc, #200]	; (8009894 <__swsetup_r+0xcc>)
 80097ca:	b570      	push	{r4, r5, r6, lr}
 80097cc:	681d      	ldr	r5, [r3, #0]
 80097ce:	4606      	mov	r6, r0
 80097d0:	460c      	mov	r4, r1
 80097d2:	b125      	cbz	r5, 80097de <__swsetup_r+0x16>
 80097d4:	69ab      	ldr	r3, [r5, #24]
 80097d6:	b913      	cbnz	r3, 80097de <__swsetup_r+0x16>
 80097d8:	4628      	mov	r0, r5
 80097da:	f000 f985 	bl	8009ae8 <__sinit>
 80097de:	4b2e      	ldr	r3, [pc, #184]	; (8009898 <__swsetup_r+0xd0>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	d10f      	bne.n	8009804 <__swsetup_r+0x3c>
 80097e4:	686c      	ldr	r4, [r5, #4]
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ec:	0719      	lsls	r1, r3, #28
 80097ee:	d42c      	bmi.n	800984a <__swsetup_r+0x82>
 80097f0:	06dd      	lsls	r5, r3, #27
 80097f2:	d411      	bmi.n	8009818 <__swsetup_r+0x50>
 80097f4:	2309      	movs	r3, #9
 80097f6:	6033      	str	r3, [r6, #0]
 80097f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097fc:	81a3      	strh	r3, [r4, #12]
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009802:	e03e      	b.n	8009882 <__swsetup_r+0xba>
 8009804:	4b25      	ldr	r3, [pc, #148]	; (800989c <__swsetup_r+0xd4>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d101      	bne.n	800980e <__swsetup_r+0x46>
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	e7eb      	b.n	80097e6 <__swsetup_r+0x1e>
 800980e:	4b24      	ldr	r3, [pc, #144]	; (80098a0 <__swsetup_r+0xd8>)
 8009810:	429c      	cmp	r4, r3
 8009812:	bf08      	it	eq
 8009814:	68ec      	ldreq	r4, [r5, #12]
 8009816:	e7e6      	b.n	80097e6 <__swsetup_r+0x1e>
 8009818:	0758      	lsls	r0, r3, #29
 800981a:	d512      	bpl.n	8009842 <__swsetup_r+0x7a>
 800981c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981e:	b141      	cbz	r1, 8009832 <__swsetup_r+0x6a>
 8009820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009824:	4299      	cmp	r1, r3
 8009826:	d002      	beq.n	800982e <__swsetup_r+0x66>
 8009828:	4630      	mov	r0, r6
 800982a:	f7fd ff15 	bl	8007658 <_free_r>
 800982e:	2300      	movs	r3, #0
 8009830:	6363      	str	r3, [r4, #52]	; 0x34
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	2300      	movs	r3, #0
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	6923      	ldr	r3, [r4, #16]
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f043 0308 	orr.w	r3, r3, #8
 8009848:	81a3      	strh	r3, [r4, #12]
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	b94b      	cbnz	r3, 8009862 <__swsetup_r+0x9a>
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009858:	d003      	beq.n	8009862 <__swsetup_r+0x9a>
 800985a:	4621      	mov	r1, r4
 800985c:	4630      	mov	r0, r6
 800985e:	f000 fa05 	bl	8009c6c <__smakebuf_r>
 8009862:	89a0      	ldrh	r0, [r4, #12]
 8009864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009868:	f010 0301 	ands.w	r3, r0, #1
 800986c:	d00a      	beq.n	8009884 <__swsetup_r+0xbc>
 800986e:	2300      	movs	r3, #0
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	425b      	negs	r3, r3
 8009876:	61a3      	str	r3, [r4, #24]
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b943      	cbnz	r3, 800988e <__swsetup_r+0xc6>
 800987c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009880:	d1ba      	bne.n	80097f8 <__swsetup_r+0x30>
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	0781      	lsls	r1, r0, #30
 8009886:	bf58      	it	pl
 8009888:	6963      	ldrpl	r3, [r4, #20]
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	e7f4      	b.n	8009878 <__swsetup_r+0xb0>
 800988e:	2000      	movs	r0, #0
 8009890:	e7f7      	b.n	8009882 <__swsetup_r+0xba>
 8009892:	bf00      	nop
 8009894:	20000064 	.word	0x20000064
 8009898:	0800a2b4 	.word	0x0800a2b4
 800989c:	0800a2d4 	.word	0x0800a2d4
 80098a0:	0800a294 	.word	0x0800a294

080098a4 <abort>:
 80098a4:	b508      	push	{r3, lr}
 80098a6:	2006      	movs	r0, #6
 80098a8:	f000 fa48 	bl	8009d3c <raise>
 80098ac:	2001      	movs	r0, #1
 80098ae:	f7f7 fe9b 	bl	80015e8 <_exit>
	...

080098b4 <__sflush_r>:
 80098b4:	898a      	ldrh	r2, [r1, #12]
 80098b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ba:	4605      	mov	r5, r0
 80098bc:	0710      	lsls	r0, r2, #28
 80098be:	460c      	mov	r4, r1
 80098c0:	d458      	bmi.n	8009974 <__sflush_r+0xc0>
 80098c2:	684b      	ldr	r3, [r1, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	dc05      	bgt.n	80098d4 <__sflush_r+0x20>
 80098c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	dc02      	bgt.n	80098d4 <__sflush_r+0x20>
 80098ce:	2000      	movs	r0, #0
 80098d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d0f9      	beq.n	80098ce <__sflush_r+0x1a>
 80098da:	2300      	movs	r3, #0
 80098dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098e0:	682f      	ldr	r7, [r5, #0]
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	d032      	beq.n	800994c <__sflush_r+0x98>
 80098e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	075a      	lsls	r2, r3, #29
 80098ec:	d505      	bpl.n	80098fa <__sflush_r+0x46>
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	1ac0      	subs	r0, r0, r3
 80098f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f4:	b10b      	cbz	r3, 80098fa <__sflush_r+0x46>
 80098f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f8:	1ac0      	subs	r0, r0, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	4602      	mov	r2, r0
 80098fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009900:	6a21      	ldr	r1, [r4, #32]
 8009902:	4628      	mov	r0, r5
 8009904:	47b0      	blx	r6
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	d106      	bne.n	800991a <__sflush_r+0x66>
 800990c:	6829      	ldr	r1, [r5, #0]
 800990e:	291d      	cmp	r1, #29
 8009910:	d82c      	bhi.n	800996c <__sflush_r+0xb8>
 8009912:	4a2a      	ldr	r2, [pc, #168]	; (80099bc <__sflush_r+0x108>)
 8009914:	40ca      	lsrs	r2, r1
 8009916:	07d6      	lsls	r6, r2, #31
 8009918:	d528      	bpl.n	800996c <__sflush_r+0xb8>
 800991a:	2200      	movs	r2, #0
 800991c:	6062      	str	r2, [r4, #4]
 800991e:	04d9      	lsls	r1, r3, #19
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	6022      	str	r2, [r4, #0]
 8009924:	d504      	bpl.n	8009930 <__sflush_r+0x7c>
 8009926:	1c42      	adds	r2, r0, #1
 8009928:	d101      	bne.n	800992e <__sflush_r+0x7a>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	b903      	cbnz	r3, 8009930 <__sflush_r+0x7c>
 800992e:	6560      	str	r0, [r4, #84]	; 0x54
 8009930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009932:	602f      	str	r7, [r5, #0]
 8009934:	2900      	cmp	r1, #0
 8009936:	d0ca      	beq.n	80098ce <__sflush_r+0x1a>
 8009938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800993c:	4299      	cmp	r1, r3
 800993e:	d002      	beq.n	8009946 <__sflush_r+0x92>
 8009940:	4628      	mov	r0, r5
 8009942:	f7fd fe89 	bl	8007658 <_free_r>
 8009946:	2000      	movs	r0, #0
 8009948:	6360      	str	r0, [r4, #52]	; 0x34
 800994a:	e7c1      	b.n	80098d0 <__sflush_r+0x1c>
 800994c:	6a21      	ldr	r1, [r4, #32]
 800994e:	2301      	movs	r3, #1
 8009950:	4628      	mov	r0, r5
 8009952:	47b0      	blx	r6
 8009954:	1c41      	adds	r1, r0, #1
 8009956:	d1c7      	bne.n	80098e8 <__sflush_r+0x34>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0c4      	beq.n	80098e8 <__sflush_r+0x34>
 800995e:	2b1d      	cmp	r3, #29
 8009960:	d001      	beq.n	8009966 <__sflush_r+0xb2>
 8009962:	2b16      	cmp	r3, #22
 8009964:	d101      	bne.n	800996a <__sflush_r+0xb6>
 8009966:	602f      	str	r7, [r5, #0]
 8009968:	e7b1      	b.n	80098ce <__sflush_r+0x1a>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009970:	81a3      	strh	r3, [r4, #12]
 8009972:	e7ad      	b.n	80098d0 <__sflush_r+0x1c>
 8009974:	690f      	ldr	r7, [r1, #16]
 8009976:	2f00      	cmp	r7, #0
 8009978:	d0a9      	beq.n	80098ce <__sflush_r+0x1a>
 800997a:	0793      	lsls	r3, r2, #30
 800997c:	680e      	ldr	r6, [r1, #0]
 800997e:	bf08      	it	eq
 8009980:	694b      	ldreq	r3, [r1, #20]
 8009982:	600f      	str	r7, [r1, #0]
 8009984:	bf18      	it	ne
 8009986:	2300      	movne	r3, #0
 8009988:	eba6 0807 	sub.w	r8, r6, r7
 800998c:	608b      	str	r3, [r1, #8]
 800998e:	f1b8 0f00 	cmp.w	r8, #0
 8009992:	dd9c      	ble.n	80098ce <__sflush_r+0x1a>
 8009994:	6a21      	ldr	r1, [r4, #32]
 8009996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009998:	4643      	mov	r3, r8
 800999a:	463a      	mov	r2, r7
 800999c:	4628      	mov	r0, r5
 800999e:	47b0      	blx	r6
 80099a0:	2800      	cmp	r0, #0
 80099a2:	dc06      	bgt.n	80099b2 <__sflush_r+0xfe>
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	e78e      	b.n	80098d0 <__sflush_r+0x1c>
 80099b2:	4407      	add	r7, r0
 80099b4:	eba8 0800 	sub.w	r8, r8, r0
 80099b8:	e7e9      	b.n	800998e <__sflush_r+0xda>
 80099ba:	bf00      	nop
 80099bc:	20400001 	.word	0x20400001

080099c0 <_fflush_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	690b      	ldr	r3, [r1, #16]
 80099c4:	4605      	mov	r5, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	b913      	cbnz	r3, 80099d0 <_fflush_r+0x10>
 80099ca:	2500      	movs	r5, #0
 80099cc:	4628      	mov	r0, r5
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	b118      	cbz	r0, 80099da <_fflush_r+0x1a>
 80099d2:	6983      	ldr	r3, [r0, #24]
 80099d4:	b90b      	cbnz	r3, 80099da <_fflush_r+0x1a>
 80099d6:	f000 f887 	bl	8009ae8 <__sinit>
 80099da:	4b14      	ldr	r3, [pc, #80]	; (8009a2c <_fflush_r+0x6c>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d11b      	bne.n	8009a18 <_fflush_r+0x58>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0ef      	beq.n	80099ca <_fflush_r+0xa>
 80099ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099ec:	07d0      	lsls	r0, r2, #31
 80099ee:	d404      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f0:	0599      	lsls	r1, r3, #22
 80099f2:	d402      	bmi.n	80099fa <_fflush_r+0x3a>
 80099f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f6:	f7ff fd1a 	bl	800942e <__retarget_lock_acquire_recursive>
 80099fa:	4628      	mov	r0, r5
 80099fc:	4621      	mov	r1, r4
 80099fe:	f7ff ff59 	bl	80098b4 <__sflush_r>
 8009a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a04:	07da      	lsls	r2, r3, #31
 8009a06:	4605      	mov	r5, r0
 8009a08:	d4e0      	bmi.n	80099cc <_fflush_r+0xc>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	059b      	lsls	r3, r3, #22
 8009a0e:	d4dd      	bmi.n	80099cc <_fflush_r+0xc>
 8009a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a12:	f7ff fd0d 	bl	8009430 <__retarget_lock_release_recursive>
 8009a16:	e7d9      	b.n	80099cc <_fflush_r+0xc>
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <_fflush_r+0x70>)
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	d101      	bne.n	8009a22 <_fflush_r+0x62>
 8009a1e:	68ac      	ldr	r4, [r5, #8]
 8009a20:	e7df      	b.n	80099e2 <_fflush_r+0x22>
 8009a22:	4b04      	ldr	r3, [pc, #16]	; (8009a34 <_fflush_r+0x74>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	bf08      	it	eq
 8009a28:	68ec      	ldreq	r4, [r5, #12]
 8009a2a:	e7da      	b.n	80099e2 <_fflush_r+0x22>
 8009a2c:	0800a2b4 	.word	0x0800a2b4
 8009a30:	0800a2d4 	.word	0x0800a2d4
 8009a34:	0800a294 	.word	0x0800a294

08009a38 <std>:
 8009a38:	2300      	movs	r3, #0
 8009a3a:	b510      	push	{r4, lr}
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a46:	6083      	str	r3, [r0, #8]
 8009a48:	8181      	strh	r1, [r0, #12]
 8009a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8009a4c:	81c2      	strh	r2, [r0, #14]
 8009a4e:	6183      	str	r3, [r0, #24]
 8009a50:	4619      	mov	r1, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	305c      	adds	r0, #92	; 0x5c
 8009a56:	f7fd fdf7 	bl	8007648 <memset>
 8009a5a:	4b05      	ldr	r3, [pc, #20]	; (8009a70 <std+0x38>)
 8009a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <std+0x3c>)
 8009a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <std+0x40>)
 8009a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <std+0x44>)
 8009a68:	6224      	str	r4, [r4, #32]
 8009a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a6c:	bd10      	pop	{r4, pc}
 8009a6e:	bf00      	nop
 8009a70:	08009d75 	.word	0x08009d75
 8009a74:	08009d97 	.word	0x08009d97
 8009a78:	08009dcf 	.word	0x08009dcf
 8009a7c:	08009df3 	.word	0x08009df3

08009a80 <_cleanup_r>:
 8009a80:	4901      	ldr	r1, [pc, #4]	; (8009a88 <_cleanup_r+0x8>)
 8009a82:	f000 b8af 	b.w	8009be4 <_fwalk_reent>
 8009a86:	bf00      	nop
 8009a88:	080099c1 	.word	0x080099c1

08009a8c <__sfmoreglue>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	1e4a      	subs	r2, r1, #1
 8009a90:	2568      	movs	r5, #104	; 0x68
 8009a92:	4355      	muls	r5, r2
 8009a94:	460e      	mov	r6, r1
 8009a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a9a:	f7fd fe2d 	bl	80076f8 <_malloc_r>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	b140      	cbz	r0, 8009ab4 <__sfmoreglue+0x28>
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8009aa8:	300c      	adds	r0, #12
 8009aaa:	60a0      	str	r0, [r4, #8]
 8009aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ab0:	f7fd fdca 	bl	8007648 <memset>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <__sfp_lock_acquire>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <__sfp_lock_acquire+0x8>)
 8009aba:	f7ff bcb8 	b.w	800942e <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	2000079c 	.word	0x2000079c

08009ac4 <__sfp_lock_release>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__sfp_lock_release+0x8>)
 8009ac6:	f7ff bcb3 	b.w	8009430 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	2000079c 	.word	0x2000079c

08009ad0 <__sinit_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sinit_lock_acquire+0x8>)
 8009ad2:	f7ff bcac 	b.w	800942e <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	20000797 	.word	0x20000797

08009adc <__sinit_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__sinit_lock_release+0x8>)
 8009ade:	f7ff bca7 	b.w	8009430 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	20000797 	.word	0x20000797

08009ae8 <__sinit>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4604      	mov	r4, r0
 8009aec:	f7ff fff0 	bl	8009ad0 <__sinit_lock_acquire>
 8009af0:	69a3      	ldr	r3, [r4, #24]
 8009af2:	b11b      	cbz	r3, 8009afc <__sinit+0x14>
 8009af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af8:	f7ff bff0 	b.w	8009adc <__sinit_lock_release>
 8009afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b00:	6523      	str	r3, [r4, #80]	; 0x50
 8009b02:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <__sinit+0x68>)
 8009b04:	4a13      	ldr	r2, [pc, #76]	; (8009b54 <__sinit+0x6c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b0a:	42a3      	cmp	r3, r4
 8009b0c:	bf04      	itt	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	61a3      	streq	r3, [r4, #24]
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 f820 	bl	8009b58 <__sfp>
 8009b18:	6060      	str	r0, [r4, #4]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f81c 	bl	8009b58 <__sfp>
 8009b20:	60a0      	str	r0, [r4, #8]
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f818 	bl	8009b58 <__sfp>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	60e0      	str	r0, [r4, #12]
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	6860      	ldr	r0, [r4, #4]
 8009b30:	f7ff ff82 	bl	8009a38 <std>
 8009b34:	68a0      	ldr	r0, [r4, #8]
 8009b36:	2201      	movs	r2, #1
 8009b38:	2109      	movs	r1, #9
 8009b3a:	f7ff ff7d 	bl	8009a38 <std>
 8009b3e:	68e0      	ldr	r0, [r4, #12]
 8009b40:	2202      	movs	r2, #2
 8009b42:	2112      	movs	r1, #18
 8009b44:	f7ff ff78 	bl	8009a38 <std>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	61a3      	str	r3, [r4, #24]
 8009b4c:	e7d2      	b.n	8009af4 <__sinit+0xc>
 8009b4e:	bf00      	nop
 8009b50:	08009f10 	.word	0x08009f10
 8009b54:	08009a81 	.word	0x08009a81

08009b58 <__sfp>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	f7ff ffac 	bl	8009ab8 <__sfp_lock_acquire>
 8009b60:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <__sfp+0x84>)
 8009b62:	681e      	ldr	r6, [r3, #0]
 8009b64:	69b3      	ldr	r3, [r6, #24]
 8009b66:	b913      	cbnz	r3, 8009b6e <__sfp+0x16>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ffbd 	bl	8009ae8 <__sinit>
 8009b6e:	3648      	adds	r6, #72	; 0x48
 8009b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b74:	3b01      	subs	r3, #1
 8009b76:	d503      	bpl.n	8009b80 <__sfp+0x28>
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	b30b      	cbz	r3, 8009bc0 <__sfp+0x68>
 8009b7c:	6836      	ldr	r6, [r6, #0]
 8009b7e:	e7f7      	b.n	8009b70 <__sfp+0x18>
 8009b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b84:	b9d5      	cbnz	r5, 8009bbc <__sfp+0x64>
 8009b86:	4b16      	ldr	r3, [pc, #88]	; (8009be0 <__sfp+0x88>)
 8009b88:	60e3      	str	r3, [r4, #12]
 8009b8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8009b90:	f7ff fc4c 	bl	800942c <__retarget_lock_init_recursive>
 8009b94:	f7ff ff96 	bl	8009ac4 <__sfp_lock_release>
 8009b98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	61a5      	str	r5, [r4, #24]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bac:	f7fd fd4c 	bl	8007648 <memset>
 8009bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bbc:	3468      	adds	r4, #104	; 0x68
 8009bbe:	e7d9      	b.n	8009b74 <__sfp+0x1c>
 8009bc0:	2104      	movs	r1, #4
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7ff ff62 	bl	8009a8c <__sfmoreglue>
 8009bc8:	4604      	mov	r4, r0
 8009bca:	6030      	str	r0, [r6, #0]
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d1d5      	bne.n	8009b7c <__sfp+0x24>
 8009bd0:	f7ff ff78 	bl	8009ac4 <__sfp_lock_release>
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	e7ee      	b.n	8009bb8 <__sfp+0x60>
 8009bda:	bf00      	nop
 8009bdc:	08009f10 	.word	0x08009f10
 8009be0:	ffff0001 	.word	0xffff0001

08009be4 <_fwalk_reent>:
 8009be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be8:	4606      	mov	r6, r0
 8009bea:	4688      	mov	r8, r1
 8009bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bf0:	2700      	movs	r7, #0
 8009bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8009bfa:	d505      	bpl.n	8009c08 <_fwalk_reent+0x24>
 8009bfc:	6824      	ldr	r4, [r4, #0]
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d1f7      	bne.n	8009bf2 <_fwalk_reent+0xe>
 8009c02:	4638      	mov	r0, r7
 8009c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c08:	89ab      	ldrh	r3, [r5, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d907      	bls.n	8009c1e <_fwalk_reent+0x3a>
 8009c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c12:	3301      	adds	r3, #1
 8009c14:	d003      	beq.n	8009c1e <_fwalk_reent+0x3a>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	47c0      	blx	r8
 8009c1c:	4307      	orrs	r7, r0
 8009c1e:	3568      	adds	r5, #104	; 0x68
 8009c20:	e7e9      	b.n	8009bf6 <_fwalk_reent+0x12>

08009c22 <__swhatbuf_r>:
 8009c22:	b570      	push	{r4, r5, r6, lr}
 8009c24:	460e      	mov	r6, r1
 8009c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	b096      	sub	sp, #88	; 0x58
 8009c2e:	4614      	mov	r4, r2
 8009c30:	461d      	mov	r5, r3
 8009c32:	da07      	bge.n	8009c44 <__swhatbuf_r+0x22>
 8009c34:	2300      	movs	r3, #0
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	89b3      	ldrh	r3, [r6, #12]
 8009c3a:	061a      	lsls	r2, r3, #24
 8009c3c:	d410      	bmi.n	8009c60 <__swhatbuf_r+0x3e>
 8009c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c42:	e00e      	b.n	8009c62 <__swhatbuf_r+0x40>
 8009c44:	466a      	mov	r2, sp
 8009c46:	f000 f8fb 	bl	8009e40 <_fstat_r>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	dbf2      	blt.n	8009c34 <__swhatbuf_r+0x12>
 8009c4e:	9a01      	ldr	r2, [sp, #4]
 8009c50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c58:	425a      	negs	r2, r3
 8009c5a:	415a      	adcs	r2, r3
 8009c5c:	602a      	str	r2, [r5, #0]
 8009c5e:	e7ee      	b.n	8009c3e <__swhatbuf_r+0x1c>
 8009c60:	2340      	movs	r3, #64	; 0x40
 8009c62:	2000      	movs	r0, #0
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	b016      	add	sp, #88	; 0x58
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
	...

08009c6c <__smakebuf_r>:
 8009c6c:	898b      	ldrh	r3, [r1, #12]
 8009c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c70:	079d      	lsls	r5, r3, #30
 8009c72:	4606      	mov	r6, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	d507      	bpl.n	8009c88 <__smakebuf_r+0x1c>
 8009c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	2301      	movs	r3, #1
 8009c82:	6163      	str	r3, [r4, #20]
 8009c84:	b002      	add	sp, #8
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	ab01      	add	r3, sp, #4
 8009c8a:	466a      	mov	r2, sp
 8009c8c:	f7ff ffc9 	bl	8009c22 <__swhatbuf_r>
 8009c90:	9900      	ldr	r1, [sp, #0]
 8009c92:	4605      	mov	r5, r0
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7fd fd2f 	bl	80076f8 <_malloc_r>
 8009c9a:	b948      	cbnz	r0, 8009cb0 <__smakebuf_r+0x44>
 8009c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ca0:	059a      	lsls	r2, r3, #22
 8009ca2:	d4ef      	bmi.n	8009c84 <__smakebuf_r+0x18>
 8009ca4:	f023 0303 	bic.w	r3, r3, #3
 8009ca8:	f043 0302 	orr.w	r3, r3, #2
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	e7e3      	b.n	8009c78 <__smakebuf_r+0xc>
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <__smakebuf_r+0x7c>)
 8009cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	6020      	str	r0, [r4, #0]
 8009cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cbc:	81a3      	strh	r3, [r4, #12]
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	6163      	str	r3, [r4, #20]
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	6120      	str	r0, [r4, #16]
 8009cc6:	b15b      	cbz	r3, 8009ce0 <__smakebuf_r+0x74>
 8009cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ccc:	4630      	mov	r0, r6
 8009cce:	f000 f8c9 	bl	8009e64 <_isatty_r>
 8009cd2:	b128      	cbz	r0, 8009ce0 <__smakebuf_r+0x74>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f023 0303 	bic.w	r3, r3, #3
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	89a0      	ldrh	r0, [r4, #12]
 8009ce2:	4305      	orrs	r5, r0
 8009ce4:	81a5      	strh	r5, [r4, #12]
 8009ce6:	e7cd      	b.n	8009c84 <__smakebuf_r+0x18>
 8009ce8:	08009a81 	.word	0x08009a81

08009cec <_raise_r>:
 8009cec:	291f      	cmp	r1, #31
 8009cee:	b538      	push	{r3, r4, r5, lr}
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	d904      	bls.n	8009d00 <_raise_r+0x14>
 8009cf6:	2316      	movs	r3, #22
 8009cf8:	6003      	str	r3, [r0, #0]
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d02:	b112      	cbz	r2, 8009d0a <_raise_r+0x1e>
 8009d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d08:	b94b      	cbnz	r3, 8009d1e <_raise_r+0x32>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f830 	bl	8009d70 <_getpid_r>
 8009d10:	462a      	mov	r2, r5
 8009d12:	4601      	mov	r1, r0
 8009d14:	4620      	mov	r0, r4
 8009d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d1a:	f000 b817 	b.w	8009d4c <_kill_r>
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d00a      	beq.n	8009d38 <_raise_r+0x4c>
 8009d22:	1c59      	adds	r1, r3, #1
 8009d24:	d103      	bne.n	8009d2e <_raise_r+0x42>
 8009d26:	2316      	movs	r3, #22
 8009d28:	6003      	str	r3, [r0, #0]
 8009d2a:	2001      	movs	r0, #1
 8009d2c:	e7e7      	b.n	8009cfe <_raise_r+0x12>
 8009d2e:	2400      	movs	r4, #0
 8009d30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d34:	4628      	mov	r0, r5
 8009d36:	4798      	blx	r3
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e7e0      	b.n	8009cfe <_raise_r+0x12>

08009d3c <raise>:
 8009d3c:	4b02      	ldr	r3, [pc, #8]	; (8009d48 <raise+0xc>)
 8009d3e:	4601      	mov	r1, r0
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	f7ff bfd3 	b.w	8009cec <_raise_r>
 8009d46:	bf00      	nop
 8009d48:	20000064 	.word	0x20000064

08009d4c <_kill_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	4d07      	ldr	r5, [pc, #28]	; (8009d6c <_kill_r+0x20>)
 8009d50:	2300      	movs	r3, #0
 8009d52:	4604      	mov	r4, r0
 8009d54:	4608      	mov	r0, r1
 8009d56:	4611      	mov	r1, r2
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	f7f7 fc35 	bl	80015c8 <_kill>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	d102      	bne.n	8009d68 <_kill_r+0x1c>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	b103      	cbz	r3, 8009d68 <_kill_r+0x1c>
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	bd38      	pop	{r3, r4, r5, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20000790 	.word	0x20000790

08009d70 <_getpid_r>:
 8009d70:	f7f7 bc22 	b.w	80015b8 <_getpid>

08009d74 <__sread>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	460c      	mov	r4, r1
 8009d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7c:	f000 f894 	bl	8009ea8 <_read_r>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	bfab      	itete	ge
 8009d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d86:	89a3      	ldrhlt	r3, [r4, #12]
 8009d88:	181b      	addge	r3, r3, r0
 8009d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d8e:	bfac      	ite	ge
 8009d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d92:	81a3      	strhlt	r3, [r4, #12]
 8009d94:	bd10      	pop	{r4, pc}

08009d96 <__swrite>:
 8009d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9a:	461f      	mov	r7, r3
 8009d9c:	898b      	ldrh	r3, [r1, #12]
 8009d9e:	05db      	lsls	r3, r3, #23
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	4616      	mov	r6, r2
 8009da6:	d505      	bpl.n	8009db4 <__swrite+0x1e>
 8009da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dac:	2302      	movs	r3, #2
 8009dae:	2200      	movs	r2, #0
 8009db0:	f000 f868 	bl	8009e84 <_lseek_r>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	463b      	mov	r3, r7
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dca:	f000 b817 	b.w	8009dfc <_write_r>

08009dce <__sseek>:
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd6:	f000 f855 	bl	8009e84 <_lseek_r>
 8009dda:	1c43      	adds	r3, r0, #1
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	bf15      	itete	ne
 8009de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dea:	81a3      	strheq	r3, [r4, #12]
 8009dec:	bf18      	it	ne
 8009dee:	81a3      	strhne	r3, [r4, #12]
 8009df0:	bd10      	pop	{r4, pc}

08009df2 <__sclose>:
 8009df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df6:	f000 b813 	b.w	8009e20 <_close_r>
	...

08009dfc <_write_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d07      	ldr	r5, [pc, #28]	; (8009e1c <_write_r+0x20>)
 8009e00:	4604      	mov	r4, r0
 8009e02:	4608      	mov	r0, r1
 8009e04:	4611      	mov	r1, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	602a      	str	r2, [r5, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f7f7 fc13 	bl	8001636 <_write>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_write_r+0x1e>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_write_r+0x1e>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000790 	.word	0x20000790

08009e20 <_close_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4d06      	ldr	r5, [pc, #24]	; (8009e3c <_close_r+0x1c>)
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	4608      	mov	r0, r1
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	f7f7 fc1f 	bl	800166e <_close>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_close_r+0x1a>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_close_r+0x1a>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	20000790 	.word	0x20000790

08009e40 <_fstat_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d07      	ldr	r5, [pc, #28]	; (8009e60 <_fstat_r+0x20>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	f7f7 fc1a 	bl	8001686 <_fstat>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d102      	bne.n	8009e5c <_fstat_r+0x1c>
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	b103      	cbz	r3, 8009e5c <_fstat_r+0x1c>
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000790 	.word	0x20000790

08009e64 <_isatty_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_isatty_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f7 fc19 	bl	80016a6 <_isatty>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_isatty_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_isatty_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20000790 	.word	0x20000790

08009e84 <_lseek_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	; (8009ea4 <_lseek_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fc12 	bl	80016bc <_lseek>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_lseek_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_lseek_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20000790 	.word	0x20000790

08009ea8 <_read_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	; (8009ec8 <_read_r+0x20>)
 8009eac:	4604      	mov	r4, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f7 fba0 	bl	80015fc <_read>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_read_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_read_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	20000790 	.word	0x20000790

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
=======
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7ff fbb3 	bl	8007d68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <__errno>:
 800860c:	4b01      	ldr	r3, [pc, #4]	; (8008614 <__errno+0x8>)
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20000064 	.word	0x20000064

08008618 <__libc_init_array>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4d0d      	ldr	r5, [pc, #52]	; (8008650 <__libc_init_array+0x38>)
 800861c:	4c0d      	ldr	r4, [pc, #52]	; (8008654 <__libc_init_array+0x3c>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	2600      	movs	r6, #0
 8008624:	42a6      	cmp	r6, r4
 8008626:	d109      	bne.n	800863c <__libc_init_array+0x24>
 8008628:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__libc_init_array+0x40>)
 800862a:	4c0c      	ldr	r4, [pc, #48]	; (800865c <__libc_init_array+0x44>)
 800862c:	f002 fc62 	bl	800aef4 <_init>
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	2600      	movs	r6, #0
 8008636:	42a6      	cmp	r6, r4
 8008638:	d105      	bne.n	8008646 <__libc_init_array+0x2e>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008640:	4798      	blx	r3
 8008642:	3601      	adds	r6, #1
 8008644:	e7ee      	b.n	8008624 <__libc_init_array+0xc>
 8008646:	f855 3b04 	ldr.w	r3, [r5], #4
 800864a:	4798      	blx	r3
 800864c:	3601      	adds	r6, #1
 800864e:	e7f2      	b.n	8008636 <__libc_init_array+0x1e>
 8008650:	0800b33c 	.word	0x0800b33c
 8008654:	0800b33c 	.word	0x0800b33c
 8008658:	0800b33c 	.word	0x0800b33c
 800865c:	0800b340 	.word	0x0800b340

08008660 <malloc>:
 8008660:	4b02      	ldr	r3, [pc, #8]	; (800866c <malloc+0xc>)
 8008662:	4601      	mov	r1, r0
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	f000 b85b 	b.w	8008720 <_malloc_r>
 800866a:	bf00      	nop
 800866c:	20000064 	.word	0x20000064

08008670 <memset>:
 8008670:	4402      	add	r2, r0
 8008672:	4603      	mov	r3, r0
 8008674:	4293      	cmp	r3, r2
 8008676:	d100      	bne.n	800867a <memset+0xa>
 8008678:	4770      	bx	lr
 800867a:	f803 1b01 	strb.w	r1, [r3], #1
 800867e:	e7f9      	b.n	8008674 <memset+0x4>

08008680 <_free_r>:
 8008680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008682:	2900      	cmp	r1, #0
 8008684:	d048      	beq.n	8008718 <_free_r+0x98>
 8008686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868a:	9001      	str	r0, [sp, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f1a1 0404 	sub.w	r4, r1, #4
 8008692:	bfb8      	it	lt
 8008694:	18e4      	addlt	r4, r4, r3
 8008696:	f001 fb13 	bl	8009cc0 <__malloc_lock>
 800869a:	4a20      	ldr	r2, [pc, #128]	; (800871c <_free_r+0x9c>)
 800869c:	9801      	ldr	r0, [sp, #4]
 800869e:	6813      	ldr	r3, [r2, #0]
 80086a0:	4615      	mov	r5, r2
 80086a2:	b933      	cbnz	r3, 80086b2 <_free_r+0x32>
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6014      	str	r4, [r2, #0]
 80086a8:	b003      	add	sp, #12
 80086aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086ae:	f001 bb0d 	b.w	8009ccc <__malloc_unlock>
 80086b2:	42a3      	cmp	r3, r4
 80086b4:	d90b      	bls.n	80086ce <_free_r+0x4e>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	1862      	adds	r2, r4, r1
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bf04      	itt	eq
 80086be:	681a      	ldreq	r2, [r3, #0]
 80086c0:	685b      	ldreq	r3, [r3, #4]
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	bf04      	itt	eq
 80086c6:	1852      	addeq	r2, r2, r1
 80086c8:	6022      	streq	r2, [r4, #0]
 80086ca:	602c      	str	r4, [r5, #0]
 80086cc:	e7ec      	b.n	80086a8 <_free_r+0x28>
 80086ce:	461a      	mov	r2, r3
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	b10b      	cbz	r3, 80086d8 <_free_r+0x58>
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	d9fa      	bls.n	80086ce <_free_r+0x4e>
 80086d8:	6811      	ldr	r1, [r2, #0]
 80086da:	1855      	adds	r5, r2, r1
 80086dc:	42a5      	cmp	r5, r4
 80086de:	d10b      	bne.n	80086f8 <_free_r+0x78>
 80086e0:	6824      	ldr	r4, [r4, #0]
 80086e2:	4421      	add	r1, r4
 80086e4:	1854      	adds	r4, r2, r1
 80086e6:	42a3      	cmp	r3, r4
 80086e8:	6011      	str	r1, [r2, #0]
 80086ea:	d1dd      	bne.n	80086a8 <_free_r+0x28>
 80086ec:	681c      	ldr	r4, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	6053      	str	r3, [r2, #4]
 80086f2:	4421      	add	r1, r4
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	e7d7      	b.n	80086a8 <_free_r+0x28>
 80086f8:	d902      	bls.n	8008700 <_free_r+0x80>
 80086fa:	230c      	movs	r3, #12
 80086fc:	6003      	str	r3, [r0, #0]
 80086fe:	e7d3      	b.n	80086a8 <_free_r+0x28>
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	1961      	adds	r1, r4, r5
 8008704:	428b      	cmp	r3, r1
 8008706:	bf04      	itt	eq
 8008708:	6819      	ldreq	r1, [r3, #0]
 800870a:	685b      	ldreq	r3, [r3, #4]
 800870c:	6063      	str	r3, [r4, #4]
 800870e:	bf04      	itt	eq
 8008710:	1949      	addeq	r1, r1, r5
 8008712:	6021      	streq	r1, [r4, #0]
 8008714:	6054      	str	r4, [r2, #4]
 8008716:	e7c7      	b.n	80086a8 <_free_r+0x28>
 8008718:	b003      	add	sp, #12
 800871a:	bd30      	pop	{r4, r5, pc}
 800871c:	20000268 	.word	0x20000268

08008720 <_malloc_r>:
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	1ccd      	adds	r5, r1, #3
 8008724:	f025 0503 	bic.w	r5, r5, #3
 8008728:	3508      	adds	r5, #8
 800872a:	2d0c      	cmp	r5, #12
 800872c:	bf38      	it	cc
 800872e:	250c      	movcc	r5, #12
 8008730:	2d00      	cmp	r5, #0
 8008732:	4606      	mov	r6, r0
 8008734:	db01      	blt.n	800873a <_malloc_r+0x1a>
 8008736:	42a9      	cmp	r1, r5
 8008738:	d903      	bls.n	8008742 <_malloc_r+0x22>
 800873a:	230c      	movs	r3, #12
 800873c:	6033      	str	r3, [r6, #0]
 800873e:	2000      	movs	r0, #0
 8008740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008742:	f001 fabd 	bl	8009cc0 <__malloc_lock>
 8008746:	4921      	ldr	r1, [pc, #132]	; (80087cc <_malloc_r+0xac>)
 8008748:	680a      	ldr	r2, [r1, #0]
 800874a:	4614      	mov	r4, r2
 800874c:	b99c      	cbnz	r4, 8008776 <_malloc_r+0x56>
 800874e:	4f20      	ldr	r7, [pc, #128]	; (80087d0 <_malloc_r+0xb0>)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	b923      	cbnz	r3, 800875e <_malloc_r+0x3e>
 8008754:	4621      	mov	r1, r4
 8008756:	4630      	mov	r0, r6
 8008758:	f000 fc80 	bl	800905c <_sbrk_r>
 800875c:	6038      	str	r0, [r7, #0]
 800875e:	4629      	mov	r1, r5
 8008760:	4630      	mov	r0, r6
 8008762:	f000 fc7b 	bl	800905c <_sbrk_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	d123      	bne.n	80087b2 <_malloc_r+0x92>
 800876a:	230c      	movs	r3, #12
 800876c:	6033      	str	r3, [r6, #0]
 800876e:	4630      	mov	r0, r6
 8008770:	f001 faac 	bl	8009ccc <__malloc_unlock>
 8008774:	e7e3      	b.n	800873e <_malloc_r+0x1e>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	1b5b      	subs	r3, r3, r5
 800877a:	d417      	bmi.n	80087ac <_malloc_r+0x8c>
 800877c:	2b0b      	cmp	r3, #11
 800877e:	d903      	bls.n	8008788 <_malloc_r+0x68>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	441c      	add	r4, r3
 8008784:	6025      	str	r5, [r4, #0]
 8008786:	e004      	b.n	8008792 <_malloc_r+0x72>
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	42a2      	cmp	r2, r4
 800878c:	bf0c      	ite	eq
 800878e:	600b      	streq	r3, [r1, #0]
 8008790:	6053      	strne	r3, [r2, #4]
 8008792:	4630      	mov	r0, r6
 8008794:	f001 fa9a 	bl	8009ccc <__malloc_unlock>
 8008798:	f104 000b 	add.w	r0, r4, #11
 800879c:	1d23      	adds	r3, r4, #4
 800879e:	f020 0007 	bic.w	r0, r0, #7
 80087a2:	1ac2      	subs	r2, r0, r3
 80087a4:	d0cc      	beq.n	8008740 <_malloc_r+0x20>
 80087a6:	1a1b      	subs	r3, r3, r0
 80087a8:	50a3      	str	r3, [r4, r2]
 80087aa:	e7c9      	b.n	8008740 <_malloc_r+0x20>
 80087ac:	4622      	mov	r2, r4
 80087ae:	6864      	ldr	r4, [r4, #4]
 80087b0:	e7cc      	b.n	800874c <_malloc_r+0x2c>
 80087b2:	1cc4      	adds	r4, r0, #3
 80087b4:	f024 0403 	bic.w	r4, r4, #3
 80087b8:	42a0      	cmp	r0, r4
 80087ba:	d0e3      	beq.n	8008784 <_malloc_r+0x64>
 80087bc:	1a21      	subs	r1, r4, r0
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 fc4c 	bl	800905c <_sbrk_r>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d1dd      	bne.n	8008784 <_malloc_r+0x64>
 80087c8:	e7cf      	b.n	800876a <_malloc_r+0x4a>
 80087ca:	bf00      	nop
 80087cc:	20000268 	.word	0x20000268
 80087d0:	2000026c 	.word	0x2000026c

080087d4 <__cvt>:
 80087d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087d6:	ed2d 8b02 	vpush	{d8}
 80087da:	eeb0 8b40 	vmov.f64	d8, d0
 80087de:	b085      	sub	sp, #20
 80087e0:	4617      	mov	r7, r2
 80087e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80087e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087e6:	ee18 2a90 	vmov	r2, s17
 80087ea:	f025 0520 	bic.w	r5, r5, #32
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	bfb6      	itet	lt
 80087f2:	222d      	movlt	r2, #45	; 0x2d
 80087f4:	2200      	movge	r2, #0
 80087f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80087fa:	2d46      	cmp	r5, #70	; 0x46
 80087fc:	460c      	mov	r4, r1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	d004      	beq.n	800880c <__cvt+0x38>
 8008802:	2d45      	cmp	r5, #69	; 0x45
 8008804:	d100      	bne.n	8008808 <__cvt+0x34>
 8008806:	3401      	adds	r4, #1
 8008808:	2102      	movs	r1, #2
 800880a:	e000      	b.n	800880e <__cvt+0x3a>
 800880c:	2103      	movs	r1, #3
 800880e:	ab03      	add	r3, sp, #12
 8008810:	9301      	str	r3, [sp, #4]
 8008812:	ab02      	add	r3, sp, #8
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4622      	mov	r2, r4
 8008818:	4633      	mov	r3, r6
 800881a:	eeb0 0b48 	vmov.f64	d0, d8
 800881e:	f000 fcbb 	bl	8009198 <_dtoa_r>
 8008822:	2d47      	cmp	r5, #71	; 0x47
 8008824:	d109      	bne.n	800883a <__cvt+0x66>
 8008826:	07fb      	lsls	r3, r7, #31
 8008828:	d407      	bmi.n	800883a <__cvt+0x66>
 800882a:	9b03      	ldr	r3, [sp, #12]
 800882c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800882e:	1a1b      	subs	r3, r3, r0
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	b005      	add	sp, #20
 8008834:	ecbd 8b02 	vpop	{d8}
 8008838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800883a:	2d46      	cmp	r5, #70	; 0x46
 800883c:	eb00 0204 	add.w	r2, r0, r4
 8008840:	d10c      	bne.n	800885c <__cvt+0x88>
 8008842:	7803      	ldrb	r3, [r0, #0]
 8008844:	2b30      	cmp	r3, #48	; 0x30
 8008846:	d107      	bne.n	8008858 <__cvt+0x84>
 8008848:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008850:	bf1c      	itt	ne
 8008852:	f1c4 0401 	rsbne	r4, r4, #1
 8008856:	6034      	strne	r4, [r6, #0]
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	441a      	add	r2, r3
 800885c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008864:	bf08      	it	eq
 8008866:	9203      	streq	r2, [sp, #12]
 8008868:	2130      	movs	r1, #48	; 0x30
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	4293      	cmp	r3, r2
 800886e:	d2dc      	bcs.n	800882a <__cvt+0x56>
 8008870:	1c5c      	adds	r4, r3, #1
 8008872:	9403      	str	r4, [sp, #12]
 8008874:	7019      	strb	r1, [r3, #0]
 8008876:	e7f8      	b.n	800886a <__cvt+0x96>

08008878 <__exponent>:
 8008878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800887a:	4603      	mov	r3, r0
 800887c:	2900      	cmp	r1, #0
 800887e:	bfb8      	it	lt
 8008880:	4249      	neglt	r1, r1
 8008882:	f803 2b02 	strb.w	r2, [r3], #2
 8008886:	bfb4      	ite	lt
 8008888:	222d      	movlt	r2, #45	; 0x2d
 800888a:	222b      	movge	r2, #43	; 0x2b
 800888c:	2909      	cmp	r1, #9
 800888e:	7042      	strb	r2, [r0, #1]
 8008890:	dd2a      	ble.n	80088e8 <__exponent+0x70>
 8008892:	f10d 0407 	add.w	r4, sp, #7
 8008896:	46a4      	mov	ip, r4
 8008898:	270a      	movs	r7, #10
 800889a:	46a6      	mov	lr, r4
 800889c:	460a      	mov	r2, r1
 800889e:	fb91 f6f7 	sdiv	r6, r1, r7
 80088a2:	fb07 1516 	mls	r5, r7, r6, r1
 80088a6:	3530      	adds	r5, #48	; 0x30
 80088a8:	2a63      	cmp	r2, #99	; 0x63
 80088aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80088ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80088b2:	4631      	mov	r1, r6
 80088b4:	dcf1      	bgt.n	800889a <__exponent+0x22>
 80088b6:	3130      	adds	r1, #48	; 0x30
 80088b8:	f1ae 0502 	sub.w	r5, lr, #2
 80088bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80088c0:	1c44      	adds	r4, r0, #1
 80088c2:	4629      	mov	r1, r5
 80088c4:	4561      	cmp	r1, ip
 80088c6:	d30a      	bcc.n	80088de <__exponent+0x66>
 80088c8:	f10d 0209 	add.w	r2, sp, #9
 80088cc:	eba2 020e 	sub.w	r2, r2, lr
 80088d0:	4565      	cmp	r5, ip
 80088d2:	bf88      	it	hi
 80088d4:	2200      	movhi	r2, #0
 80088d6:	4413      	add	r3, r2
 80088d8:	1a18      	subs	r0, r3, r0
 80088da:	b003      	add	sp, #12
 80088dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80088e6:	e7ed      	b.n	80088c4 <__exponent+0x4c>
 80088e8:	2330      	movs	r3, #48	; 0x30
 80088ea:	3130      	adds	r1, #48	; 0x30
 80088ec:	7083      	strb	r3, [r0, #2]
 80088ee:	70c1      	strb	r1, [r0, #3]
 80088f0:	1d03      	adds	r3, r0, #4
 80088f2:	e7f1      	b.n	80088d8 <__exponent+0x60>
 80088f4:	0000      	movs	r0, r0
	...

080088f8 <_printf_float>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	b08b      	sub	sp, #44	; 0x2c
 80088fe:	460c      	mov	r4, r1
 8008900:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008904:	4616      	mov	r6, r2
 8008906:	461f      	mov	r7, r3
 8008908:	4605      	mov	r5, r0
 800890a:	f001 f9c7 	bl	8009c9c <_localeconv_r>
 800890e:	f8d0 b000 	ldr.w	fp, [r0]
 8008912:	4658      	mov	r0, fp
 8008914:	f7f7 fc94 	bl	8000240 <strlen>
 8008918:	2300      	movs	r3, #0
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	f8d8 3000 	ldr.w	r3, [r8]
 8008920:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	3307      	adds	r3, #7
 8008928:	f023 0307 	bic.w	r3, r3, #7
 800892c:	f103 0108 	add.w	r1, r3, #8
 8008930:	f8c8 1000 	str.w	r1, [r8]
 8008934:	4682      	mov	sl, r0
 8008936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800893a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800893e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008ba0 <_printf_float+0x2a8>
 8008942:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008946:	eeb0 6bc0 	vabs.f64	d6, d0
 800894a:	eeb4 6b47 	vcmp.f64	d6, d7
 800894e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008952:	dd24      	ble.n	800899e <_printf_float+0xa6>
 8008954:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	d502      	bpl.n	8008964 <_printf_float+0x6c>
 800895e:	232d      	movs	r3, #45	; 0x2d
 8008960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008964:	4b90      	ldr	r3, [pc, #576]	; (8008ba8 <_printf_float+0x2b0>)
 8008966:	4891      	ldr	r0, [pc, #580]	; (8008bac <_printf_float+0x2b4>)
 8008968:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800896c:	bf94      	ite	ls
 800896e:	4698      	movls	r8, r3
 8008970:	4680      	movhi	r8, r0
 8008972:	2303      	movs	r3, #3
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	f022 0204 	bic.w	r2, r2, #4
 800897a:	2300      	movs	r3, #0
 800897c:	6022      	str	r2, [r4, #0]
 800897e:	9304      	str	r3, [sp, #16]
 8008980:	9700      	str	r7, [sp, #0]
 8008982:	4633      	mov	r3, r6
 8008984:	aa09      	add	r2, sp, #36	; 0x24
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 f9d3 	bl	8008d34 <_printf_common>
 800898e:	3001      	adds	r0, #1
 8008990:	f040 808a 	bne.w	8008aa8 <_printf_float+0x1b0>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	b00b      	add	sp, #44	; 0x2c
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	eeb4 0b40 	vcmp.f64	d0, d0
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d709      	bvc.n	80089bc <_printf_float+0xc4>
 80089a8:	ee10 3a90 	vmov	r3, s1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bfbc      	itt	lt
 80089b0:	232d      	movlt	r3, #45	; 0x2d
 80089b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089b6:	487e      	ldr	r0, [pc, #504]	; (8008bb0 <_printf_float+0x2b8>)
 80089b8:	4b7e      	ldr	r3, [pc, #504]	; (8008bb4 <_printf_float+0x2bc>)
 80089ba:	e7d5      	b.n	8008968 <_printf_float+0x70>
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80089c2:	9104      	str	r1, [sp, #16]
 80089c4:	1c59      	adds	r1, r3, #1
 80089c6:	d13c      	bne.n	8008a42 <_printf_float+0x14a>
 80089c8:	2306      	movs	r3, #6
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	2300      	movs	r3, #0
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	ab08      	add	r3, sp, #32
 80089d2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80089d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089da:	ab07      	add	r3, sp, #28
 80089dc:	6861      	ldr	r1, [r4, #4]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	6022      	str	r2, [r4, #0]
 80089e2:	f10d 031b 	add.w	r3, sp, #27
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7ff fef4 	bl	80087d4 <__cvt>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	9907      	ldr	r1, [sp, #28]
 80089f0:	2b47      	cmp	r3, #71	; 0x47
 80089f2:	4680      	mov	r8, r0
 80089f4:	d108      	bne.n	8008a08 <_printf_float+0x110>
 80089f6:	1cc8      	adds	r0, r1, #3
 80089f8:	db02      	blt.n	8008a00 <_printf_float+0x108>
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	4299      	cmp	r1, r3
 80089fe:	dd41      	ble.n	8008a84 <_printf_float+0x18c>
 8008a00:	f1a9 0902 	sub.w	r9, r9, #2
 8008a04:	fa5f f989 	uxtb.w	r9, r9
 8008a08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a0c:	d820      	bhi.n	8008a50 <_printf_float+0x158>
 8008a0e:	3901      	subs	r1, #1
 8008a10:	464a      	mov	r2, r9
 8008a12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a16:	9107      	str	r1, [sp, #28]
 8008a18:	f7ff ff2e 	bl	8008878 <__exponent>
 8008a1c:	9a08      	ldr	r2, [sp, #32]
 8008a1e:	9004      	str	r0, [sp, #16]
 8008a20:	1813      	adds	r3, r2, r0
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	6123      	str	r3, [r4, #16]
 8008a26:	dc02      	bgt.n	8008a2e <_printf_float+0x136>
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	07d2      	lsls	r2, r2, #31
 8008a2c:	d501      	bpl.n	8008a32 <_printf_float+0x13a>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0a2      	beq.n	8008980 <_printf_float+0x88>
 8008a3a:	232d      	movs	r3, #45	; 0x2d
 8008a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a40:	e79e      	b.n	8008980 <_printf_float+0x88>
 8008a42:	9904      	ldr	r1, [sp, #16]
 8008a44:	2947      	cmp	r1, #71	; 0x47
 8008a46:	d1c1      	bne.n	80089cc <_printf_float+0xd4>
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1bf      	bne.n	80089cc <_printf_float+0xd4>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e7bc      	b.n	80089ca <_printf_float+0xd2>
 8008a50:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008a54:	d118      	bne.n	8008a88 <_printf_float+0x190>
 8008a56:	2900      	cmp	r1, #0
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	dd0b      	ble.n	8008a74 <_printf_float+0x17c>
 8008a5c:	6121      	str	r1, [r4, #16]
 8008a5e:	b913      	cbnz	r3, 8008a66 <_printf_float+0x16e>
 8008a60:	6822      	ldr	r2, [r4, #0]
 8008a62:	07d0      	lsls	r0, r2, #31
 8008a64:	d502      	bpl.n	8008a6c <_printf_float+0x174>
 8008a66:	3301      	adds	r3, #1
 8008a68:	440b      	add	r3, r1
 8008a6a:	6123      	str	r3, [r4, #16]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	e7de      	b.n	8008a32 <_printf_float+0x13a>
 8008a74:	b913      	cbnz	r3, 8008a7c <_printf_float+0x184>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	07d2      	lsls	r2, r2, #31
 8008a7a:	d501      	bpl.n	8008a80 <_printf_float+0x188>
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	e7f4      	b.n	8008a6a <_printf_float+0x172>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7f2      	b.n	8008a6a <_printf_float+0x172>
 8008a84:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	4299      	cmp	r1, r3
 8008a8c:	db05      	blt.n	8008a9a <_printf_float+0x1a2>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	6121      	str	r1, [r4, #16]
 8008a92:	07d8      	lsls	r0, r3, #31
 8008a94:	d5ea      	bpl.n	8008a6c <_printf_float+0x174>
 8008a96:	1c4b      	adds	r3, r1, #1
 8008a98:	e7e7      	b.n	8008a6a <_printf_float+0x172>
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	bfd4      	ite	le
 8008a9e:	f1c1 0202 	rsble	r2, r1, #2
 8008aa2:	2201      	movgt	r2, #1
 8008aa4:	4413      	add	r3, r2
 8008aa6:	e7e0      	b.n	8008a6a <_printf_float+0x172>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	055a      	lsls	r2, r3, #21
 8008aac:	d407      	bmi.n	8008abe <_printf_float+0x1c6>
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	d12a      	bne.n	8008b12 <_printf_float+0x21a>
 8008abc:	e76a      	b.n	8008994 <_printf_float+0x9c>
 8008abe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ac2:	f240 80e2 	bls.w	8008c8a <_printf_float+0x392>
 8008ac6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008aca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad2:	d133      	bne.n	8008b3c <_printf_float+0x244>
 8008ad4:	4a38      	ldr	r2, [pc, #224]	; (8008bb8 <_printf_float+0x2c0>)
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	47b8      	blx	r7
 8008ade:	3001      	adds	r0, #1
 8008ae0:	f43f af58 	beq.w	8008994 <_printf_float+0x9c>
 8008ae4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	db02      	blt.n	8008af2 <_printf_float+0x1fa>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	07d8      	lsls	r0, r3, #31
 8008af0:	d50f      	bpl.n	8008b12 <_printf_float+0x21a>
 8008af2:	4653      	mov	r3, sl
 8008af4:	465a      	mov	r2, fp
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	f43f af49 	beq.w	8008994 <_printf_float+0x9c>
 8008b02:	f04f 0800 	mov.w	r8, #0
 8008b06:	f104 091a 	add.w	r9, r4, #26
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4543      	cmp	r3, r8
 8008b10:	dc09      	bgt.n	8008b26 <_printf_float+0x22e>
 8008b12:	6823      	ldr	r3, [r4, #0]
 8008b14:	079b      	lsls	r3, r3, #30
 8008b16:	f100 8108 	bmi.w	8008d2a <_printf_float+0x432>
 8008b1a:	68e0      	ldr	r0, [r4, #12]
 8008b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b1e:	4298      	cmp	r0, r3
 8008b20:	bfb8      	it	lt
 8008b22:	4618      	movlt	r0, r3
 8008b24:	e738      	b.n	8008998 <_printf_float+0xa0>
 8008b26:	2301      	movs	r3, #1
 8008b28:	464a      	mov	r2, r9
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f af2f 	beq.w	8008994 <_printf_float+0x9c>
 8008b36:	f108 0801 	add.w	r8, r8, #1
 8008b3a:	e7e6      	b.n	8008b0a <_printf_float+0x212>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dc3c      	bgt.n	8008bbc <_printf_float+0x2c4>
 8008b42:	4a1d      	ldr	r2, [pc, #116]	; (8008bb8 <_printf_float+0x2c0>)
 8008b44:	2301      	movs	r3, #1
 8008b46:	4631      	mov	r1, r6
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b8      	blx	r7
 8008b4c:	3001      	adds	r0, #1
 8008b4e:	f43f af21 	beq.w	8008994 <_printf_float+0x9c>
 8008b52:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	d102      	bne.n	8008b60 <_printf_float+0x268>
 8008b5a:	6823      	ldr	r3, [r4, #0]
 8008b5c:	07d9      	lsls	r1, r3, #31
 8008b5e:	d5d8      	bpl.n	8008b12 <_printf_float+0x21a>
 8008b60:	4653      	mov	r3, sl
 8008b62:	465a      	mov	r2, fp
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b8      	blx	r7
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	f43f af12 	beq.w	8008994 <_printf_float+0x9c>
 8008b70:	f04f 0900 	mov.w	r9, #0
 8008b74:	f104 0a1a 	add.w	sl, r4, #26
 8008b78:	9b07      	ldr	r3, [sp, #28]
 8008b7a:	425b      	negs	r3, r3
 8008b7c:	454b      	cmp	r3, r9
 8008b7e:	dc01      	bgt.n	8008b84 <_printf_float+0x28c>
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	e795      	b.n	8008ab0 <_printf_float+0x1b8>
 8008b84:	2301      	movs	r3, #1
 8008b86:	4652      	mov	r2, sl
 8008b88:	4631      	mov	r1, r6
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b8      	blx	r7
 8008b8e:	3001      	adds	r0, #1
 8008b90:	f43f af00 	beq.w	8008994 <_printf_float+0x9c>
 8008b94:	f109 0901 	add.w	r9, r9, #1
 8008b98:	e7ee      	b.n	8008b78 <_printf_float+0x280>
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	ffffffff 	.word	0xffffffff
 8008ba4:	7fefffff 	.word	0x7fefffff
 8008ba8:	0800af54 	.word	0x0800af54
 8008bac:	0800af58 	.word	0x0800af58
 8008bb0:	0800af60 	.word	0x0800af60
 8008bb4:	0800af5c 	.word	0x0800af5c
 8008bb8:	0800af64 	.word	0x0800af64
 8008bbc:	9a08      	ldr	r2, [sp, #32]
 8008bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	bfa8      	it	ge
 8008bc4:	461a      	movge	r2, r3
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	4691      	mov	r9, r2
 8008bca:	dc38      	bgt.n	8008c3e <_printf_float+0x346>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9305      	str	r3, [sp, #20]
 8008bd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd4:	f104 021a 	add.w	r2, r4, #26
 8008bd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bda:	9905      	ldr	r1, [sp, #20]
 8008bdc:	9304      	str	r3, [sp, #16]
 8008bde:	eba3 0309 	sub.w	r3, r3, r9
 8008be2:	428b      	cmp	r3, r1
 8008be4:	dc33      	bgt.n	8008c4e <_printf_float+0x356>
 8008be6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	db3c      	blt.n	8008c68 <_printf_float+0x370>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	07da      	lsls	r2, r3, #31
 8008bf2:	d439      	bmi.n	8008c68 <_printf_float+0x370>
 8008bf4:	9a08      	ldr	r2, [sp, #32]
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	9907      	ldr	r1, [sp, #28]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	eba2 0901 	sub.w	r9, r2, r1
 8008c00:	4599      	cmp	r9, r3
 8008c02:	bfa8      	it	ge
 8008c04:	4699      	movge	r9, r3
 8008c06:	f1b9 0f00 	cmp.w	r9, #0
 8008c0a:	dc35      	bgt.n	8008c78 <_printf_float+0x380>
 8008c0c:	f04f 0800 	mov.w	r8, #0
 8008c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c14:	f104 0a1a 	add.w	sl, r4, #26
 8008c18:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008c1c:	1a9b      	subs	r3, r3, r2
 8008c1e:	eba3 0309 	sub.w	r3, r3, r9
 8008c22:	4543      	cmp	r3, r8
 8008c24:	f77f af75 	ble.w	8008b12 <_printf_float+0x21a>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4652      	mov	r2, sl
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	47b8      	blx	r7
 8008c32:	3001      	adds	r0, #1
 8008c34:	f43f aeae 	beq.w	8008994 <_printf_float+0x9c>
 8008c38:	f108 0801 	add.w	r8, r8, #1
 8008c3c:	e7ec      	b.n	8008c18 <_printf_float+0x320>
 8008c3e:	4613      	mov	r3, r2
 8008c40:	4631      	mov	r1, r6
 8008c42:	4642      	mov	r2, r8
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d1bf      	bne.n	8008bcc <_printf_float+0x2d4>
 8008c4c:	e6a2      	b.n	8008994 <_printf_float+0x9c>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	9204      	str	r2, [sp, #16]
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae9b 	beq.w	8008994 <_printf_float+0x9c>
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	9a04      	ldr	r2, [sp, #16]
 8008c62:	3301      	adds	r3, #1
 8008c64:	9305      	str	r3, [sp, #20]
 8008c66:	e7b7      	b.n	8008bd8 <_printf_float+0x2e0>
 8008c68:	4653      	mov	r3, sl
 8008c6a:	465a      	mov	r2, fp
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b8      	blx	r7
 8008c72:	3001      	adds	r0, #1
 8008c74:	d1be      	bne.n	8008bf4 <_printf_float+0x2fc>
 8008c76:	e68d      	b.n	8008994 <_printf_float+0x9c>
 8008c78:	9a04      	ldr	r2, [sp, #16]
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	4442      	add	r2, r8
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	d1c1      	bne.n	8008c0c <_printf_float+0x314>
 8008c88:	e684      	b.n	8008994 <_printf_float+0x9c>
 8008c8a:	9a08      	ldr	r2, [sp, #32]
 8008c8c:	2a01      	cmp	r2, #1
 8008c8e:	dc01      	bgt.n	8008c94 <_printf_float+0x39c>
 8008c90:	07db      	lsls	r3, r3, #31
 8008c92:	d537      	bpl.n	8008d04 <_printf_float+0x40c>
 8008c94:	2301      	movs	r3, #1
 8008c96:	4642      	mov	r2, r8
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	47b8      	blx	r7
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	f43f ae78 	beq.w	8008994 <_printf_float+0x9c>
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	465a      	mov	r2, fp
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4628      	mov	r0, r5
 8008cac:	47b8      	blx	r7
 8008cae:	3001      	adds	r0, #1
 8008cb0:	f43f ae70 	beq.w	8008994 <_printf_float+0x9c>
 8008cb4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008cb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc0:	d01b      	beq.n	8008cfa <_printf_float+0x402>
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	f108 0201 	add.w	r2, r8, #1
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d10e      	bne.n	8008cf2 <_printf_float+0x3fa>
 8008cd4:	e65e      	b.n	8008994 <_printf_float+0x9c>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	464a      	mov	r2, r9
 8008cda:	4631      	mov	r1, r6
 8008cdc:	4628      	mov	r0, r5
 8008cde:	47b8      	blx	r7
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f43f ae57 	beq.w	8008994 <_printf_float+0x9c>
 8008ce6:	f108 0801 	add.w	r8, r8, #1
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4543      	cmp	r3, r8
 8008cf0:	dcf1      	bgt.n	8008cd6 <_printf_float+0x3de>
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cf8:	e6db      	b.n	8008ab2 <_printf_float+0x1ba>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	f104 091a 	add.w	r9, r4, #26
 8008d02:	e7f2      	b.n	8008cea <_printf_float+0x3f2>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4642      	mov	r2, r8
 8008d08:	e7df      	b.n	8008cca <_printf_float+0x3d2>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae3d 	beq.w	8008994 <_printf_float+0x9c>
 8008d1a:	f108 0801 	add.w	r8, r8, #1
 8008d1e:	68e3      	ldr	r3, [r4, #12]
 8008d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d22:	1a5b      	subs	r3, r3, r1
 8008d24:	4543      	cmp	r3, r8
 8008d26:	dcf0      	bgt.n	8008d0a <_printf_float+0x412>
 8008d28:	e6f7      	b.n	8008b1a <_printf_float+0x222>
 8008d2a:	f04f 0800 	mov.w	r8, #0
 8008d2e:	f104 0919 	add.w	r9, r4, #25
 8008d32:	e7f4      	b.n	8008d1e <_printf_float+0x426>

08008d34 <_printf_common>:
 8008d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	4616      	mov	r6, r2
 8008d3a:	4699      	mov	r9, r3
 8008d3c:	688a      	ldr	r2, [r1, #8]
 8008d3e:	690b      	ldr	r3, [r1, #16]
 8008d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bfb8      	it	lt
 8008d48:	4613      	movlt	r3, r2
 8008d4a:	6033      	str	r3, [r6, #0]
 8008d4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d50:	4607      	mov	r7, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	b10a      	cbz	r2, 8008d5a <_printf_common+0x26>
 8008d56:	3301      	adds	r3, #1
 8008d58:	6033      	str	r3, [r6, #0]
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	0699      	lsls	r1, r3, #26
 8008d5e:	bf42      	ittt	mi
 8008d60:	6833      	ldrmi	r3, [r6, #0]
 8008d62:	3302      	addmi	r3, #2
 8008d64:	6033      	strmi	r3, [r6, #0]
 8008d66:	6825      	ldr	r5, [r4, #0]
 8008d68:	f015 0506 	ands.w	r5, r5, #6
 8008d6c:	d106      	bne.n	8008d7c <_printf_common+0x48>
 8008d6e:	f104 0a19 	add.w	sl, r4, #25
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	6832      	ldr	r2, [r6, #0]
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	42ab      	cmp	r3, r5
 8008d7a:	dc26      	bgt.n	8008dca <_printf_common+0x96>
 8008d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d80:	1e13      	subs	r3, r2, #0
 8008d82:	6822      	ldr	r2, [r4, #0]
 8008d84:	bf18      	it	ne
 8008d86:	2301      	movne	r3, #1
 8008d88:	0692      	lsls	r2, r2, #26
 8008d8a:	d42b      	bmi.n	8008de4 <_printf_common+0xb0>
 8008d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d90:	4649      	mov	r1, r9
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c0      	blx	r8
 8008d96:	3001      	adds	r0, #1
 8008d98:	d01e      	beq.n	8008dd8 <_printf_common+0xa4>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	68e5      	ldr	r5, [r4, #12]
 8008d9e:	6832      	ldr	r2, [r6, #0]
 8008da0:	f003 0306 	and.w	r3, r3, #6
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	bf08      	it	eq
 8008da8:	1aad      	subeq	r5, r5, r2
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	6922      	ldr	r2, [r4, #16]
 8008dae:	bf0c      	ite	eq
 8008db0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008db4:	2500      	movne	r5, #0
 8008db6:	4293      	cmp	r3, r2
 8008db8:	bfc4      	itt	gt
 8008dba:	1a9b      	subgt	r3, r3, r2
 8008dbc:	18ed      	addgt	r5, r5, r3
 8008dbe:	2600      	movs	r6, #0
 8008dc0:	341a      	adds	r4, #26
 8008dc2:	42b5      	cmp	r5, r6
 8008dc4:	d11a      	bne.n	8008dfc <_printf_common+0xc8>
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e008      	b.n	8008ddc <_printf_common+0xa8>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4652      	mov	r2, sl
 8008dce:	4649      	mov	r1, r9
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	47c0      	blx	r8
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d103      	bne.n	8008de0 <_printf_common+0xac>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de0:	3501      	adds	r5, #1
 8008de2:	e7c6      	b.n	8008d72 <_printf_common+0x3e>
 8008de4:	18e1      	adds	r1, r4, r3
 8008de6:	1c5a      	adds	r2, r3, #1
 8008de8:	2030      	movs	r0, #48	; 0x30
 8008dea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dee:	4422      	add	r2, r4
 8008df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008df8:	3302      	adds	r3, #2
 8008dfa:	e7c7      	b.n	8008d8c <_printf_common+0x58>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4622      	mov	r2, r4
 8008e00:	4649      	mov	r1, r9
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c0      	blx	r8
 8008e06:	3001      	adds	r0, #1
 8008e08:	d0e6      	beq.n	8008dd8 <_printf_common+0xa4>
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7d9      	b.n	8008dc2 <_printf_common+0x8e>
	...

08008e10 <_printf_i>:
 8008e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	4691      	mov	r9, r2
 8008e18:	7e27      	ldrb	r7, [r4, #24]
 8008e1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e1c:	2f78      	cmp	r7, #120	; 0x78
 8008e1e:	4680      	mov	r8, r0
 8008e20:	469a      	mov	sl, r3
 8008e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e26:	d807      	bhi.n	8008e38 <_printf_i+0x28>
 8008e28:	2f62      	cmp	r7, #98	; 0x62
 8008e2a:	d80a      	bhi.n	8008e42 <_printf_i+0x32>
 8008e2c:	2f00      	cmp	r7, #0
 8008e2e:	f000 80d8 	beq.w	8008fe2 <_printf_i+0x1d2>
 8008e32:	2f58      	cmp	r7, #88	; 0x58
 8008e34:	f000 80a3 	beq.w	8008f7e <_printf_i+0x16e>
 8008e38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e40:	e03a      	b.n	8008eb8 <_printf_i+0xa8>
 8008e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e46:	2b15      	cmp	r3, #21
 8008e48:	d8f6      	bhi.n	8008e38 <_printf_i+0x28>
 8008e4a:	a001      	add	r0, pc, #4	; (adr r0, 8008e50 <_printf_i+0x40>)
 8008e4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008e50:	08008ea9 	.word	0x08008ea9
 8008e54:	08008ebd 	.word	0x08008ebd
 8008e58:	08008e39 	.word	0x08008e39
 8008e5c:	08008e39 	.word	0x08008e39
 8008e60:	08008e39 	.word	0x08008e39
 8008e64:	08008e39 	.word	0x08008e39
 8008e68:	08008ebd 	.word	0x08008ebd
 8008e6c:	08008e39 	.word	0x08008e39
 8008e70:	08008e39 	.word	0x08008e39
 8008e74:	08008e39 	.word	0x08008e39
 8008e78:	08008e39 	.word	0x08008e39
 8008e7c:	08008fc9 	.word	0x08008fc9
 8008e80:	08008eed 	.word	0x08008eed
 8008e84:	08008fab 	.word	0x08008fab
 8008e88:	08008e39 	.word	0x08008e39
 8008e8c:	08008e39 	.word	0x08008e39
 8008e90:	08008feb 	.word	0x08008feb
 8008e94:	08008e39 	.word	0x08008e39
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008e39 	.word	0x08008e39
 8008ea0:	08008e39 	.word	0x08008e39
 8008ea4:	08008fb3 	.word	0x08008fb3
 8008ea8:	680b      	ldr	r3, [r1, #0]
 8008eaa:	1d1a      	adds	r2, r3, #4
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	600a      	str	r2, [r1, #0]
 8008eb0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e0a3      	b.n	8009004 <_printf_i+0x1f4>
 8008ebc:	6825      	ldr	r5, [r4, #0]
 8008ebe:	6808      	ldr	r0, [r1, #0]
 8008ec0:	062e      	lsls	r6, r5, #24
 8008ec2:	f100 0304 	add.w	r3, r0, #4
 8008ec6:	d50a      	bpl.n	8008ede <_printf_i+0xce>
 8008ec8:	6805      	ldr	r5, [r0, #0]
 8008eca:	600b      	str	r3, [r1, #0]
 8008ecc:	2d00      	cmp	r5, #0
 8008ece:	da03      	bge.n	8008ed8 <_printf_i+0xc8>
 8008ed0:	232d      	movs	r3, #45	; 0x2d
 8008ed2:	426d      	negs	r5, r5
 8008ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ed8:	485e      	ldr	r0, [pc, #376]	; (8009054 <_printf_i+0x244>)
 8008eda:	230a      	movs	r3, #10
 8008edc:	e019      	b.n	8008f12 <_printf_i+0x102>
 8008ede:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ee2:	6805      	ldr	r5, [r0, #0]
 8008ee4:	600b      	str	r3, [r1, #0]
 8008ee6:	bf18      	it	ne
 8008ee8:	b22d      	sxthne	r5, r5
 8008eea:	e7ef      	b.n	8008ecc <_printf_i+0xbc>
 8008eec:	680b      	ldr	r3, [r1, #0]
 8008eee:	6825      	ldr	r5, [r4, #0]
 8008ef0:	1d18      	adds	r0, r3, #4
 8008ef2:	6008      	str	r0, [r1, #0]
 8008ef4:	0628      	lsls	r0, r5, #24
 8008ef6:	d501      	bpl.n	8008efc <_printf_i+0xec>
 8008ef8:	681d      	ldr	r5, [r3, #0]
 8008efa:	e002      	b.n	8008f02 <_printf_i+0xf2>
 8008efc:	0669      	lsls	r1, r5, #25
 8008efe:	d5fb      	bpl.n	8008ef8 <_printf_i+0xe8>
 8008f00:	881d      	ldrh	r5, [r3, #0]
 8008f02:	4854      	ldr	r0, [pc, #336]	; (8009054 <_printf_i+0x244>)
 8008f04:	2f6f      	cmp	r7, #111	; 0x6f
 8008f06:	bf0c      	ite	eq
 8008f08:	2308      	moveq	r3, #8
 8008f0a:	230a      	movne	r3, #10
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f12:	6866      	ldr	r6, [r4, #4]
 8008f14:	60a6      	str	r6, [r4, #8]
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	bfa2      	ittt	ge
 8008f1a:	6821      	ldrge	r1, [r4, #0]
 8008f1c:	f021 0104 	bicge.w	r1, r1, #4
 8008f20:	6021      	strge	r1, [r4, #0]
 8008f22:	b90d      	cbnz	r5, 8008f28 <_printf_i+0x118>
 8008f24:	2e00      	cmp	r6, #0
 8008f26:	d04d      	beq.n	8008fc4 <_printf_i+0x1b4>
 8008f28:	4616      	mov	r6, r2
 8008f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f32:	5dc7      	ldrb	r7, [r0, r7]
 8008f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f38:	462f      	mov	r7, r5
 8008f3a:	42bb      	cmp	r3, r7
 8008f3c:	460d      	mov	r5, r1
 8008f3e:	d9f4      	bls.n	8008f2a <_printf_i+0x11a>
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d10b      	bne.n	8008f5c <_printf_i+0x14c>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	07df      	lsls	r7, r3, #31
 8008f48:	d508      	bpl.n	8008f5c <_printf_i+0x14c>
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6861      	ldr	r1, [r4, #4]
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	bfde      	ittt	le
 8008f52:	2330      	movle	r3, #48	; 0x30
 8008f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f58:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f5c:	1b92      	subs	r2, r2, r6
 8008f5e:	6122      	str	r2, [r4, #16]
 8008f60:	f8cd a000 	str.w	sl, [sp]
 8008f64:	464b      	mov	r3, r9
 8008f66:	aa03      	add	r2, sp, #12
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff fee2 	bl	8008d34 <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d14c      	bne.n	800900e <_printf_i+0x1fe>
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	b004      	add	sp, #16
 8008f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f7e:	4835      	ldr	r0, [pc, #212]	; (8009054 <_printf_i+0x244>)
 8008f80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	680e      	ldr	r6, [r1, #0]
 8008f88:	061f      	lsls	r7, r3, #24
 8008f8a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008f8e:	600e      	str	r6, [r1, #0]
 8008f90:	d514      	bpl.n	8008fbc <_printf_i+0x1ac>
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	bf44      	itt	mi
 8008f96:	f043 0320 	orrmi.w	r3, r3, #32
 8008f9a:	6023      	strmi	r3, [r4, #0]
 8008f9c:	b91d      	cbnz	r5, 8008fa6 <_printf_i+0x196>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	f023 0320 	bic.w	r3, r3, #32
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	2310      	movs	r3, #16
 8008fa8:	e7b0      	b.n	8008f0c <_printf_i+0xfc>
 8008faa:	6823      	ldr	r3, [r4, #0]
 8008fac:	f043 0320 	orr.w	r3, r3, #32
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	2378      	movs	r3, #120	; 0x78
 8008fb4:	4828      	ldr	r0, [pc, #160]	; (8009058 <_printf_i+0x248>)
 8008fb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fba:	e7e3      	b.n	8008f84 <_printf_i+0x174>
 8008fbc:	065e      	lsls	r6, r3, #25
 8008fbe:	bf48      	it	mi
 8008fc0:	b2ad      	uxthmi	r5, r5
 8008fc2:	e7e6      	b.n	8008f92 <_printf_i+0x182>
 8008fc4:	4616      	mov	r6, r2
 8008fc6:	e7bb      	b.n	8008f40 <_printf_i+0x130>
 8008fc8:	680b      	ldr	r3, [r1, #0]
 8008fca:	6826      	ldr	r6, [r4, #0]
 8008fcc:	6960      	ldr	r0, [r4, #20]
 8008fce:	1d1d      	adds	r5, r3, #4
 8008fd0:	600d      	str	r5, [r1, #0]
 8008fd2:	0635      	lsls	r5, r6, #24
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	d501      	bpl.n	8008fdc <_printf_i+0x1cc>
 8008fd8:	6018      	str	r0, [r3, #0]
 8008fda:	e002      	b.n	8008fe2 <_printf_i+0x1d2>
 8008fdc:	0671      	lsls	r1, r6, #25
 8008fde:	d5fb      	bpl.n	8008fd8 <_printf_i+0x1c8>
 8008fe0:	8018      	strh	r0, [r3, #0]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	4616      	mov	r6, r2
 8008fe8:	e7ba      	b.n	8008f60 <_printf_i+0x150>
 8008fea:	680b      	ldr	r3, [r1, #0]
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	600a      	str	r2, [r1, #0]
 8008ff0:	681e      	ldr	r6, [r3, #0]
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7f7 f92a 	bl	8000250 <memchr>
 8008ffc:	b108      	cbz	r0, 8009002 <_printf_i+0x1f2>
 8008ffe:	1b80      	subs	r0, r0, r6
 8009000:	6060      	str	r0, [r4, #4]
 8009002:	6863      	ldr	r3, [r4, #4]
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	2300      	movs	r3, #0
 8009008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800900c:	e7a8      	b.n	8008f60 <_printf_i+0x150>
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	4632      	mov	r2, r6
 8009012:	4649      	mov	r1, r9
 8009014:	4640      	mov	r0, r8
 8009016:	47d0      	blx	sl
 8009018:	3001      	adds	r0, #1
 800901a:	d0ab      	beq.n	8008f74 <_printf_i+0x164>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	079b      	lsls	r3, r3, #30
 8009020:	d413      	bmi.n	800904a <_printf_i+0x23a>
 8009022:	68e0      	ldr	r0, [r4, #12]
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	4298      	cmp	r0, r3
 8009028:	bfb8      	it	lt
 800902a:	4618      	movlt	r0, r3
 800902c:	e7a4      	b.n	8008f78 <_printf_i+0x168>
 800902e:	2301      	movs	r3, #1
 8009030:	4632      	mov	r2, r6
 8009032:	4649      	mov	r1, r9
 8009034:	4640      	mov	r0, r8
 8009036:	47d0      	blx	sl
 8009038:	3001      	adds	r0, #1
 800903a:	d09b      	beq.n	8008f74 <_printf_i+0x164>
 800903c:	3501      	adds	r5, #1
 800903e:	68e3      	ldr	r3, [r4, #12]
 8009040:	9903      	ldr	r1, [sp, #12]
 8009042:	1a5b      	subs	r3, r3, r1
 8009044:	42ab      	cmp	r3, r5
 8009046:	dcf2      	bgt.n	800902e <_printf_i+0x21e>
 8009048:	e7eb      	b.n	8009022 <_printf_i+0x212>
 800904a:	2500      	movs	r5, #0
 800904c:	f104 0619 	add.w	r6, r4, #25
 8009050:	e7f5      	b.n	800903e <_printf_i+0x22e>
 8009052:	bf00      	nop
 8009054:	0800af66 	.word	0x0800af66
 8009058:	0800af77 	.word	0x0800af77

0800905c <_sbrk_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	; (8009078 <_sbrk_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f8 fe32 	bl	8001cd0 <_sbrk>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_sbrk_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_sbrk_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	200007f0 	.word	0x200007f0

0800907c <quorem>:
 800907c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	6903      	ldr	r3, [r0, #16]
 8009082:	690c      	ldr	r4, [r1, #16]
 8009084:	42a3      	cmp	r3, r4
 8009086:	4607      	mov	r7, r0
 8009088:	f2c0 8081 	blt.w	800918e <quorem+0x112>
 800908c:	3c01      	subs	r4, #1
 800908e:	f101 0814 	add.w	r8, r1, #20
 8009092:	f100 0514 	add.w	r5, r0, #20
 8009096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090a4:	3301      	adds	r3, #1
 80090a6:	429a      	cmp	r2, r3
 80090a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80090ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80090b4:	d331      	bcc.n	800911a <quorem+0x9e>
 80090b6:	f04f 0e00 	mov.w	lr, #0
 80090ba:	4640      	mov	r0, r8
 80090bc:	46ac      	mov	ip, r5
 80090be:	46f2      	mov	sl, lr
 80090c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80090c4:	b293      	uxth	r3, r2
 80090c6:	fb06 e303 	mla	r3, r6, r3, lr
 80090ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	ebaa 0303 	sub.w	r3, sl, r3
 80090d4:	0c12      	lsrs	r2, r2, #16
 80090d6:	f8dc a000 	ldr.w	sl, [ip]
 80090da:	fb06 e202 	mla	r2, r6, r2, lr
 80090de:	fa13 f38a 	uxtah	r3, r3, sl
 80090e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090e6:	fa1f fa82 	uxth.w	sl, r2
 80090ea:	f8dc 2000 	ldr.w	r2, [ip]
 80090ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80090f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090fc:	4581      	cmp	r9, r0
 80090fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009102:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009106:	d2db      	bcs.n	80090c0 <quorem+0x44>
 8009108:	f855 300b 	ldr.w	r3, [r5, fp]
 800910c:	b92b      	cbnz	r3, 800911a <quorem+0x9e>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	3b04      	subs	r3, #4
 8009112:	429d      	cmp	r5, r3
 8009114:	461a      	mov	r2, r3
 8009116:	d32e      	bcc.n	8009176 <quorem+0xfa>
 8009118:	613c      	str	r4, [r7, #16]
 800911a:	4638      	mov	r0, r7
 800911c:	f001 f85a 	bl	800a1d4 <__mcmp>
 8009120:	2800      	cmp	r0, #0
 8009122:	db24      	blt.n	800916e <quorem+0xf2>
 8009124:	3601      	adds	r6, #1
 8009126:	4628      	mov	r0, r5
 8009128:	f04f 0c00 	mov.w	ip, #0
 800912c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009130:	f8d0 e000 	ldr.w	lr, [r0]
 8009134:	b293      	uxth	r3, r2
 8009136:	ebac 0303 	sub.w	r3, ip, r3
 800913a:	0c12      	lsrs	r2, r2, #16
 800913c:	fa13 f38e 	uxtah	r3, r3, lr
 8009140:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009148:	b29b      	uxth	r3, r3
 800914a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800914e:	45c1      	cmp	r9, r8
 8009150:	f840 3b04 	str.w	r3, [r0], #4
 8009154:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009158:	d2e8      	bcs.n	800912c <quorem+0xb0>
 800915a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800915e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009162:	b922      	cbnz	r2, 800916e <quorem+0xf2>
 8009164:	3b04      	subs	r3, #4
 8009166:	429d      	cmp	r5, r3
 8009168:	461a      	mov	r2, r3
 800916a:	d30a      	bcc.n	8009182 <quorem+0x106>
 800916c:	613c      	str	r4, [r7, #16]
 800916e:	4630      	mov	r0, r6
 8009170:	b003      	add	sp, #12
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	3b04      	subs	r3, #4
 800917a:	2a00      	cmp	r2, #0
 800917c:	d1cc      	bne.n	8009118 <quorem+0x9c>
 800917e:	3c01      	subs	r4, #1
 8009180:	e7c7      	b.n	8009112 <quorem+0x96>
 8009182:	6812      	ldr	r2, [r2, #0]
 8009184:	3b04      	subs	r3, #4
 8009186:	2a00      	cmp	r2, #0
 8009188:	d1f0      	bne.n	800916c <quorem+0xf0>
 800918a:	3c01      	subs	r4, #1
 800918c:	e7eb      	b.n	8009166 <quorem+0xea>
 800918e:	2000      	movs	r0, #0
 8009190:	e7ee      	b.n	8009170 <quorem+0xf4>
 8009192:	0000      	movs	r0, r0
 8009194:	0000      	movs	r0, r0
	...

08009198 <_dtoa_r>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	ec59 8b10 	vmov	r8, r9, d0
 80091a0:	b095      	sub	sp, #84	; 0x54
 80091a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80091a6:	9107      	str	r1, [sp, #28]
 80091a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80091ac:	4606      	mov	r6, r0
 80091ae:	9209      	str	r2, [sp, #36]	; 0x24
 80091b0:	9310      	str	r3, [sp, #64]	; 0x40
 80091b2:	b975      	cbnz	r5, 80091d2 <_dtoa_r+0x3a>
 80091b4:	2010      	movs	r0, #16
 80091b6:	f7ff fa53 	bl	8008660 <malloc>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6270      	str	r0, [r6, #36]	; 0x24
 80091be:	b920      	cbnz	r0, 80091ca <_dtoa_r+0x32>
 80091c0:	4bab      	ldr	r3, [pc, #684]	; (8009470 <_dtoa_r+0x2d8>)
 80091c2:	21ea      	movs	r1, #234	; 0xea
 80091c4:	48ab      	ldr	r0, [pc, #684]	; (8009474 <_dtoa_r+0x2dc>)
 80091c6:	f001 f915 	bl	800a3f4 <__assert_func>
 80091ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80091ce:	6005      	str	r5, [r0, #0]
 80091d0:	60c5      	str	r5, [r0, #12]
 80091d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091d4:	6819      	ldr	r1, [r3, #0]
 80091d6:	b151      	cbz	r1, 80091ee <_dtoa_r+0x56>
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	604a      	str	r2, [r1, #4]
 80091dc:	2301      	movs	r3, #1
 80091de:	4093      	lsls	r3, r2
 80091e0:	608b      	str	r3, [r1, #8]
 80091e2:	4630      	mov	r0, r6
 80091e4:	f000 fdb8 	bl	8009d58 <_Bfree>
 80091e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	f1b9 0300 	subs.w	r3, r9, #0
 80091f2:	bfbb      	ittet	lt
 80091f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091f8:	9303      	strlt	r3, [sp, #12]
 80091fa:	2300      	movge	r3, #0
 80091fc:	2201      	movlt	r2, #1
 80091fe:	bfac      	ite	ge
 8009200:	6023      	strge	r3, [r4, #0]
 8009202:	6022      	strlt	r2, [r4, #0]
 8009204:	4b9c      	ldr	r3, [pc, #624]	; (8009478 <_dtoa_r+0x2e0>)
 8009206:	9c03      	ldr	r4, [sp, #12]
 8009208:	43a3      	bics	r3, r4
 800920a:	d11a      	bne.n	8009242 <_dtoa_r+0xaa>
 800920c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800920e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009218:	ea53 0308 	orrs.w	r3, r3, r8
 800921c:	f000 8512 	beq.w	8009c44 <_dtoa_r+0xaac>
 8009220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009222:	b953      	cbnz	r3, 800923a <_dtoa_r+0xa2>
 8009224:	4b95      	ldr	r3, [pc, #596]	; (800947c <_dtoa_r+0x2e4>)
 8009226:	e01f      	b.n	8009268 <_dtoa_r+0xd0>
 8009228:	4b95      	ldr	r3, [pc, #596]	; (8009480 <_dtoa_r+0x2e8>)
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	9800      	ldr	r0, [sp, #0]
 8009234:	b015      	add	sp, #84	; 0x54
 8009236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923a:	4b90      	ldr	r3, [pc, #576]	; (800947c <_dtoa_r+0x2e4>)
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	3303      	adds	r3, #3
 8009240:	e7f5      	b.n	800922e <_dtoa_r+0x96>
 8009242:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009246:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009252:	d10b      	bne.n	800926c <_dtoa_r+0xd4>
 8009254:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009256:	2301      	movs	r3, #1
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 84ee 	beq.w	8009c3e <_dtoa_r+0xaa6>
 8009262:	4888      	ldr	r0, [pc, #544]	; (8009484 <_dtoa_r+0x2ec>)
 8009264:	6018      	str	r0, [r3, #0]
 8009266:	1e43      	subs	r3, r0, #1
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	e7e2      	b.n	8009232 <_dtoa_r+0x9a>
 800926c:	a913      	add	r1, sp, #76	; 0x4c
 800926e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009272:	aa12      	add	r2, sp, #72	; 0x48
 8009274:	4630      	mov	r0, r6
 8009276:	f001 f851 	bl	800a31c <__d2b>
 800927a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800927e:	4605      	mov	r5, r0
 8009280:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009282:	2900      	cmp	r1, #0
 8009284:	d047      	beq.n	8009316 <_dtoa_r+0x17e>
 8009286:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009288:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800928c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009290:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009294:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009298:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800929c:	2400      	movs	r4, #0
 800929e:	ec43 2b16 	vmov	d6, r2, r3
 80092a2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80092a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009458 <_dtoa_r+0x2c0>
 80092aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80092ae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009460 <_dtoa_r+0x2c8>
 80092b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80092b6:	eeb0 7b46 	vmov.f64	d7, d6
 80092ba:	ee06 1a90 	vmov	s13, r1
 80092be:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80092c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009468 <_dtoa_r+0x2d0>
 80092c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80092ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80092ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	ee16 ba90 	vmov	fp, s13
 80092da:	9411      	str	r4, [sp, #68]	; 0x44
 80092dc:	d508      	bpl.n	80092f0 <_dtoa_r+0x158>
 80092de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80092e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80092e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ea:	bf18      	it	ne
 80092ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80092f0:	f1bb 0f16 	cmp.w	fp, #22
 80092f4:	d832      	bhi.n	800935c <_dtoa_r+0x1c4>
 80092f6:	4b64      	ldr	r3, [pc, #400]	; (8009488 <_dtoa_r+0x2f0>)
 80092f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092fc:	ed93 7b00 	vldr	d7, [r3]
 8009300:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009304:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930c:	d501      	bpl.n	8009312 <_dtoa_r+0x17a>
 800930e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009312:	2300      	movs	r3, #0
 8009314:	e023      	b.n	800935e <_dtoa_r+0x1c6>
 8009316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009318:	4401      	add	r1, r0
 800931a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800931e:	2b20      	cmp	r3, #32
 8009320:	bfc3      	ittte	gt
 8009322:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009326:	fa04 f303 	lslgt.w	r3, r4, r3
 800932a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800932e:	f1c3 0320 	rsble	r3, r3, #32
 8009332:	bfc6      	itte	gt
 8009334:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009338:	ea43 0308 	orrgt.w	r3, r3, r8
 800933c:	fa08 f303 	lslle.w	r3, r8, r3
 8009340:	ee07 3a90 	vmov	s15, r3
 8009344:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009348:	3901      	subs	r1, #1
 800934a:	ed8d 7b00 	vstr	d7, [sp]
 800934e:	9c01      	ldr	r4, [sp, #4]
 8009350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009354:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009358:	2401      	movs	r4, #1
 800935a:	e7a0      	b.n	800929e <_dtoa_r+0x106>
 800935c:	2301      	movs	r3, #1
 800935e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009360:	1a43      	subs	r3, r0, r1
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	bf45      	ittet	mi
 8009366:	f1c3 0301 	rsbmi	r3, r3, #1
 800936a:	9305      	strmi	r3, [sp, #20]
 800936c:	2300      	movpl	r3, #0
 800936e:	2300      	movmi	r3, #0
 8009370:	9206      	str	r2, [sp, #24]
 8009372:	bf54      	ite	pl
 8009374:	9305      	strpl	r3, [sp, #20]
 8009376:	9306      	strmi	r3, [sp, #24]
 8009378:	f1bb 0f00 	cmp.w	fp, #0
 800937c:	db18      	blt.n	80093b0 <_dtoa_r+0x218>
 800937e:	9b06      	ldr	r3, [sp, #24]
 8009380:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009384:	445b      	add	r3, fp
 8009386:	9306      	str	r3, [sp, #24]
 8009388:	2300      	movs	r3, #0
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	2a09      	cmp	r2, #9
 800938e:	d849      	bhi.n	8009424 <_dtoa_r+0x28c>
 8009390:	2a05      	cmp	r2, #5
 8009392:	bfc4      	itt	gt
 8009394:	3a04      	subgt	r2, #4
 8009396:	9207      	strgt	r2, [sp, #28]
 8009398:	9a07      	ldr	r2, [sp, #28]
 800939a:	f1a2 0202 	sub.w	r2, r2, #2
 800939e:	bfcc      	ite	gt
 80093a0:	2400      	movgt	r4, #0
 80093a2:	2401      	movle	r4, #1
 80093a4:	2a03      	cmp	r2, #3
 80093a6:	d848      	bhi.n	800943a <_dtoa_r+0x2a2>
 80093a8:	e8df f002 	tbb	[pc, r2]
 80093ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80093b0:	9b05      	ldr	r3, [sp, #20]
 80093b2:	2200      	movs	r2, #0
 80093b4:	eba3 030b 	sub.w	r3, r3, fp
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	920e      	str	r2, [sp, #56]	; 0x38
 80093bc:	f1cb 0300 	rsb	r3, fp, #0
 80093c0:	e7e3      	b.n	800938a <_dtoa_r+0x1f2>
 80093c2:	2200      	movs	r2, #0
 80093c4:	9208      	str	r2, [sp, #32]
 80093c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c8:	2a00      	cmp	r2, #0
 80093ca:	dc39      	bgt.n	8009440 <_dtoa_r+0x2a8>
 80093cc:	f04f 0a01 	mov.w	sl, #1
 80093d0:	46d1      	mov	r9, sl
 80093d2:	4652      	mov	r2, sl
 80093d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80093d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80093da:	2100      	movs	r1, #0
 80093dc:	6079      	str	r1, [r7, #4]
 80093de:	2004      	movs	r0, #4
 80093e0:	f100 0c14 	add.w	ip, r0, #20
 80093e4:	4594      	cmp	ip, r2
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	d92f      	bls.n	800944a <_dtoa_r+0x2b2>
 80093ea:	4630      	mov	r0, r6
 80093ec:	930c      	str	r3, [sp, #48]	; 0x30
 80093ee:	f000 fc73 	bl	8009cd8 <_Balloc>
 80093f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f4:	9000      	str	r0, [sp, #0]
 80093f6:	4602      	mov	r2, r0
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d149      	bne.n	8009490 <_dtoa_r+0x2f8>
 80093fc:	4b23      	ldr	r3, [pc, #140]	; (800948c <_dtoa_r+0x2f4>)
 80093fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009402:	e6df      	b.n	80091c4 <_dtoa_r+0x2c>
 8009404:	2201      	movs	r2, #1
 8009406:	e7dd      	b.n	80093c4 <_dtoa_r+0x22c>
 8009408:	2200      	movs	r2, #0
 800940a:	9208      	str	r2, [sp, #32]
 800940c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800940e:	eb0b 0a02 	add.w	sl, fp, r2
 8009412:	f10a 0901 	add.w	r9, sl, #1
 8009416:	464a      	mov	r2, r9
 8009418:	2a01      	cmp	r2, #1
 800941a:	bfb8      	it	lt
 800941c:	2201      	movlt	r2, #1
 800941e:	e7db      	b.n	80093d8 <_dtoa_r+0x240>
 8009420:	2201      	movs	r2, #1
 8009422:	e7f2      	b.n	800940a <_dtoa_r+0x272>
 8009424:	2401      	movs	r4, #1
 8009426:	2200      	movs	r2, #0
 8009428:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800942c:	f04f 3aff 	mov.w	sl, #4294967295
 8009430:	2100      	movs	r1, #0
 8009432:	46d1      	mov	r9, sl
 8009434:	2212      	movs	r2, #18
 8009436:	9109      	str	r1, [sp, #36]	; 0x24
 8009438:	e7ce      	b.n	80093d8 <_dtoa_r+0x240>
 800943a:	2201      	movs	r2, #1
 800943c:	9208      	str	r2, [sp, #32]
 800943e:	e7f5      	b.n	800942c <_dtoa_r+0x294>
 8009440:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009444:	46d1      	mov	r9, sl
 8009446:	4652      	mov	r2, sl
 8009448:	e7c6      	b.n	80093d8 <_dtoa_r+0x240>
 800944a:	3101      	adds	r1, #1
 800944c:	6079      	str	r1, [r7, #4]
 800944e:	0040      	lsls	r0, r0, #1
 8009450:	e7c6      	b.n	80093e0 <_dtoa_r+0x248>
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	636f4361 	.word	0x636f4361
 800945c:	3fd287a7 	.word	0x3fd287a7
 8009460:	8b60c8b3 	.word	0x8b60c8b3
 8009464:	3fc68a28 	.word	0x3fc68a28
 8009468:	509f79fb 	.word	0x509f79fb
 800946c:	3fd34413 	.word	0x3fd34413
 8009470:	0800af95 	.word	0x0800af95
 8009474:	0800afac 	.word	0x0800afac
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	0800af91 	.word	0x0800af91
 8009480:	0800af88 	.word	0x0800af88
 8009484:	0800af65 	.word	0x0800af65
 8009488:	0800b0a8 	.word	0x0800b0a8
 800948c:	0800b00b 	.word	0x0800b00b
 8009490:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009492:	9900      	ldr	r1, [sp, #0]
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	f1b9 0f0e 	cmp.w	r9, #14
 800949a:	d872      	bhi.n	8009582 <_dtoa_r+0x3ea>
 800949c:	2c00      	cmp	r4, #0
 800949e:	d070      	beq.n	8009582 <_dtoa_r+0x3ea>
 80094a0:	f1bb 0f00 	cmp.w	fp, #0
 80094a4:	f340 80a6 	ble.w	80095f4 <_dtoa_r+0x45c>
 80094a8:	49ca      	ldr	r1, [pc, #808]	; (80097d4 <_dtoa_r+0x63c>)
 80094aa:	f00b 020f 	and.w	r2, fp, #15
 80094ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80094b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80094b6:	ed92 7b00 	vldr	d7, [r2]
 80094ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 80094be:	f000 808d 	beq.w	80095dc <_dtoa_r+0x444>
 80094c2:	4ac5      	ldr	r2, [pc, #788]	; (80097d8 <_dtoa_r+0x640>)
 80094c4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80094c8:	ed92 6b08 	vldr	d6, [r2, #32]
 80094cc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80094d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80094d4:	f001 010f 	and.w	r1, r1, #15
 80094d8:	2203      	movs	r2, #3
 80094da:	48bf      	ldr	r0, [pc, #764]	; (80097d8 <_dtoa_r+0x640>)
 80094dc:	2900      	cmp	r1, #0
 80094de:	d17f      	bne.n	80095e0 <_dtoa_r+0x448>
 80094e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80094e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80094e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094ee:	2900      	cmp	r1, #0
 80094f0:	f000 80b2 	beq.w	8009658 <_dtoa_r+0x4c0>
 80094f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80094f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009504:	f140 80a8 	bpl.w	8009658 <_dtoa_r+0x4c0>
 8009508:	f1b9 0f00 	cmp.w	r9, #0
 800950c:	f000 80a4 	beq.w	8009658 <_dtoa_r+0x4c0>
 8009510:	f1ba 0f00 	cmp.w	sl, #0
 8009514:	dd31      	ble.n	800957a <_dtoa_r+0x3e2>
 8009516:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800951a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800951e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009522:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009526:	3201      	adds	r2, #1
 8009528:	4650      	mov	r0, sl
 800952a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800952e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009532:	ee07 2a90 	vmov	s15, r2
 8009536:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800953a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800953e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009542:	9c03      	ldr	r4, [sp, #12]
 8009544:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009548:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800954c:	2800      	cmp	r0, #0
 800954e:	f040 8086 	bne.w	800965e <_dtoa_r+0x4c6>
 8009552:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009556:	ee36 6b47 	vsub.f64	d6, d6, d7
 800955a:	ec42 1b17 	vmov	d7, r1, r2
 800955e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	f300 8272 	bgt.w	8009a4e <_dtoa_r+0x8b6>
 800956a:	eeb1 7b47 	vneg.f64	d7, d7
 800956e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009576:	f100 8267 	bmi.w	8009a48 <_dtoa_r+0x8b0>
 800957a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800957e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009582:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009584:	2a00      	cmp	r2, #0
 8009586:	f2c0 8129 	blt.w	80097dc <_dtoa_r+0x644>
 800958a:	f1bb 0f0e 	cmp.w	fp, #14
 800958e:	f300 8125 	bgt.w	80097dc <_dtoa_r+0x644>
 8009592:	4b90      	ldr	r3, [pc, #576]	; (80097d4 <_dtoa_r+0x63c>)
 8009594:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009598:	ed93 6b00 	vldr	d6, [r3]
 800959c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f280 80c3 	bge.w	800972a <_dtoa_r+0x592>
 80095a4:	f1b9 0f00 	cmp.w	r9, #0
 80095a8:	f300 80bf 	bgt.w	800972a <_dtoa_r+0x592>
 80095ac:	f040 824c 	bne.w	8009a48 <_dtoa_r+0x8b0>
 80095b0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80095b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c4:	464c      	mov	r4, r9
 80095c6:	464f      	mov	r7, r9
 80095c8:	f280 8222 	bge.w	8009a10 <_dtoa_r+0x878>
 80095cc:	f8dd 8000 	ldr.w	r8, [sp]
 80095d0:	2331      	movs	r3, #49	; 0x31
 80095d2:	f808 3b01 	strb.w	r3, [r8], #1
 80095d6:	f10b 0b01 	add.w	fp, fp, #1
 80095da:	e21e      	b.n	8009a1a <_dtoa_r+0x882>
 80095dc:	2202      	movs	r2, #2
 80095de:	e77c      	b.n	80094da <_dtoa_r+0x342>
 80095e0:	07cc      	lsls	r4, r1, #31
 80095e2:	d504      	bpl.n	80095ee <_dtoa_r+0x456>
 80095e4:	ed90 6b00 	vldr	d6, [r0]
 80095e8:	3201      	adds	r2, #1
 80095ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80095ee:	1049      	asrs	r1, r1, #1
 80095f0:	3008      	adds	r0, #8
 80095f2:	e773      	b.n	80094dc <_dtoa_r+0x344>
 80095f4:	d02e      	beq.n	8009654 <_dtoa_r+0x4bc>
 80095f6:	f1cb 0100 	rsb	r1, fp, #0
 80095fa:	4a76      	ldr	r2, [pc, #472]	; (80097d4 <_dtoa_r+0x63c>)
 80095fc:	f001 000f 	and.w	r0, r1, #15
 8009600:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009604:	ed92 7b00 	vldr	d7, [r2]
 8009608:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800960c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009610:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009614:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009618:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800961c:	486e      	ldr	r0, [pc, #440]	; (80097d8 <_dtoa_r+0x640>)
 800961e:	1109      	asrs	r1, r1, #4
 8009620:	2400      	movs	r4, #0
 8009622:	2202      	movs	r2, #2
 8009624:	b939      	cbnz	r1, 8009636 <_dtoa_r+0x49e>
 8009626:	2c00      	cmp	r4, #0
 8009628:	f43f af60 	beq.w	80094ec <_dtoa_r+0x354>
 800962c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009634:	e75a      	b.n	80094ec <_dtoa_r+0x354>
 8009636:	07cf      	lsls	r7, r1, #31
 8009638:	d509      	bpl.n	800964e <_dtoa_r+0x4b6>
 800963a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800963e:	ed90 7b00 	vldr	d7, [r0]
 8009642:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009646:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800964a:	3201      	adds	r2, #1
 800964c:	2401      	movs	r4, #1
 800964e:	1049      	asrs	r1, r1, #1
 8009650:	3008      	adds	r0, #8
 8009652:	e7e7      	b.n	8009624 <_dtoa_r+0x48c>
 8009654:	2202      	movs	r2, #2
 8009656:	e749      	b.n	80094ec <_dtoa_r+0x354>
 8009658:	465f      	mov	r7, fp
 800965a:	4648      	mov	r0, r9
 800965c:	e765      	b.n	800952a <_dtoa_r+0x392>
 800965e:	ec42 1b17 	vmov	d7, r1, r2
 8009662:	4a5c      	ldr	r2, [pc, #368]	; (80097d4 <_dtoa_r+0x63c>)
 8009664:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009668:	ed12 4b02 	vldr	d4, [r2, #-8]
 800966c:	9a00      	ldr	r2, [sp, #0]
 800966e:	1814      	adds	r4, r2, r0
 8009670:	9a08      	ldr	r2, [sp, #32]
 8009672:	b352      	cbz	r2, 80096ca <_dtoa_r+0x532>
 8009674:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009678:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800967c:	f8dd 8000 	ldr.w	r8, [sp]
 8009680:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009684:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009688:	ee35 7b47 	vsub.f64	d7, d5, d7
 800968c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009690:	ee14 2a90 	vmov	r2, s9
 8009694:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009698:	3230      	adds	r2, #48	; 0x30
 800969a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800969e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a6:	f808 2b01 	strb.w	r2, [r8], #1
 80096aa:	d439      	bmi.n	8009720 <_dtoa_r+0x588>
 80096ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 80096b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80096b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b8:	d472      	bmi.n	80097a0 <_dtoa_r+0x608>
 80096ba:	45a0      	cmp	r8, r4
 80096bc:	f43f af5d 	beq.w	800957a <_dtoa_r+0x3e2>
 80096c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80096c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80096c8:	e7e0      	b.n	800968c <_dtoa_r+0x4f4>
 80096ca:	f8dd 8000 	ldr.w	r8, [sp]
 80096ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096d2:	4621      	mov	r1, r4
 80096d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80096d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80096dc:	ee14 2a90 	vmov	r2, s9
 80096e0:	3230      	adds	r2, #48	; 0x30
 80096e2:	f808 2b01 	strb.w	r2, [r8], #1
 80096e6:	45a0      	cmp	r8, r4
 80096e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80096ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80096f0:	d118      	bne.n	8009724 <_dtoa_r+0x58c>
 80096f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80096f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80096fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80096fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009702:	dc4d      	bgt.n	80097a0 <_dtoa_r+0x608>
 8009704:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009708:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800970c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009710:	f57f af33 	bpl.w	800957a <_dtoa_r+0x3e2>
 8009714:	4688      	mov	r8, r1
 8009716:	3901      	subs	r1, #1
 8009718:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800971c:	2b30      	cmp	r3, #48	; 0x30
 800971e:	d0f9      	beq.n	8009714 <_dtoa_r+0x57c>
 8009720:	46bb      	mov	fp, r7
 8009722:	e02a      	b.n	800977a <_dtoa_r+0x5e2>
 8009724:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009728:	e7d6      	b.n	80096d8 <_dtoa_r+0x540>
 800972a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800972e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009732:	f8dd 8000 	ldr.w	r8, [sp]
 8009736:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800973a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800973e:	ee15 3a10 	vmov	r3, s10
 8009742:	3330      	adds	r3, #48	; 0x30
 8009744:	f808 3b01 	strb.w	r3, [r8], #1
 8009748:	9b00      	ldr	r3, [sp, #0]
 800974a:	eba8 0303 	sub.w	r3, r8, r3
 800974e:	4599      	cmp	r9, r3
 8009750:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009754:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009758:	d133      	bne.n	80097c2 <_dtoa_r+0x62a>
 800975a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800975e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009766:	dc1a      	bgt.n	800979e <_dtoa_r+0x606>
 8009768:	eeb4 7b46 	vcmp.f64	d7, d6
 800976c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009770:	d103      	bne.n	800977a <_dtoa_r+0x5e2>
 8009772:	ee15 3a10 	vmov	r3, s10
 8009776:	07d9      	lsls	r1, r3, #31
 8009778:	d411      	bmi.n	800979e <_dtoa_r+0x606>
 800977a:	4629      	mov	r1, r5
 800977c:	4630      	mov	r0, r6
 800977e:	f000 faeb 	bl	8009d58 <_Bfree>
 8009782:	2300      	movs	r3, #0
 8009784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009786:	f888 3000 	strb.w	r3, [r8]
 800978a:	f10b 0301 	add.w	r3, fp, #1
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009792:	2b00      	cmp	r3, #0
 8009794:	f43f ad4d 	beq.w	8009232 <_dtoa_r+0x9a>
 8009798:	f8c3 8000 	str.w	r8, [r3]
 800979c:	e549      	b.n	8009232 <_dtoa_r+0x9a>
 800979e:	465f      	mov	r7, fp
 80097a0:	4643      	mov	r3, r8
 80097a2:	4698      	mov	r8, r3
 80097a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097a8:	2a39      	cmp	r2, #57	; 0x39
 80097aa:	d106      	bne.n	80097ba <_dtoa_r+0x622>
 80097ac:	9a00      	ldr	r2, [sp, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d1f7      	bne.n	80097a2 <_dtoa_r+0x60a>
 80097b2:	9900      	ldr	r1, [sp, #0]
 80097b4:	2230      	movs	r2, #48	; 0x30
 80097b6:	3701      	adds	r7, #1
 80097b8:	700a      	strb	r2, [r1, #0]
 80097ba:	781a      	ldrb	r2, [r3, #0]
 80097bc:	3201      	adds	r2, #1
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	e7ae      	b.n	8009720 <_dtoa_r+0x588>
 80097c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ce:	d1b2      	bne.n	8009736 <_dtoa_r+0x59e>
 80097d0:	e7d3      	b.n	800977a <_dtoa_r+0x5e2>
 80097d2:	bf00      	nop
 80097d4:	0800b0a8 	.word	0x0800b0a8
 80097d8:	0800b080 	.word	0x0800b080
 80097dc:	9908      	ldr	r1, [sp, #32]
 80097de:	2900      	cmp	r1, #0
 80097e0:	f000 80d1 	beq.w	8009986 <_dtoa_r+0x7ee>
 80097e4:	9907      	ldr	r1, [sp, #28]
 80097e6:	2901      	cmp	r1, #1
 80097e8:	f300 80b4 	bgt.w	8009954 <_dtoa_r+0x7bc>
 80097ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80097ee:	2900      	cmp	r1, #0
 80097f0:	f000 80ac 	beq.w	800994c <_dtoa_r+0x7b4>
 80097f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80097fc:	461c      	mov	r4, r3
 80097fe:	930a      	str	r3, [sp, #40]	; 0x28
 8009800:	9b05      	ldr	r3, [sp, #20]
 8009802:	4413      	add	r3, r2
 8009804:	9305      	str	r3, [sp, #20]
 8009806:	9b06      	ldr	r3, [sp, #24]
 8009808:	2101      	movs	r1, #1
 800980a:	4413      	add	r3, r2
 800980c:	4630      	mov	r0, r6
 800980e:	9306      	str	r3, [sp, #24]
 8009810:	f000 fb5e 	bl	8009ed0 <__i2b>
 8009814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009816:	4607      	mov	r7, r0
 8009818:	f1b8 0f00 	cmp.w	r8, #0
 800981c:	dd0d      	ble.n	800983a <_dtoa_r+0x6a2>
 800981e:	9a06      	ldr	r2, [sp, #24]
 8009820:	2a00      	cmp	r2, #0
 8009822:	dd0a      	ble.n	800983a <_dtoa_r+0x6a2>
 8009824:	4542      	cmp	r2, r8
 8009826:	9905      	ldr	r1, [sp, #20]
 8009828:	bfa8      	it	ge
 800982a:	4642      	movge	r2, r8
 800982c:	1a89      	subs	r1, r1, r2
 800982e:	9105      	str	r1, [sp, #20]
 8009830:	9906      	ldr	r1, [sp, #24]
 8009832:	eba8 0802 	sub.w	r8, r8, r2
 8009836:	1a8a      	subs	r2, r1, r2
 8009838:	9206      	str	r2, [sp, #24]
 800983a:	b303      	cbz	r3, 800987e <_dtoa_r+0x6e6>
 800983c:	9a08      	ldr	r2, [sp, #32]
 800983e:	2a00      	cmp	r2, #0
 8009840:	f000 80a6 	beq.w	8009990 <_dtoa_r+0x7f8>
 8009844:	2c00      	cmp	r4, #0
 8009846:	dd13      	ble.n	8009870 <_dtoa_r+0x6d8>
 8009848:	4639      	mov	r1, r7
 800984a:	4622      	mov	r2, r4
 800984c:	4630      	mov	r0, r6
 800984e:	930c      	str	r3, [sp, #48]	; 0x30
 8009850:	f000 fbfa 	bl	800a048 <__pow5mult>
 8009854:	462a      	mov	r2, r5
 8009856:	4601      	mov	r1, r0
 8009858:	4607      	mov	r7, r0
 800985a:	4630      	mov	r0, r6
 800985c:	f000 fb4e 	bl	8009efc <__multiply>
 8009860:	4629      	mov	r1, r5
 8009862:	900a      	str	r0, [sp, #40]	; 0x28
 8009864:	4630      	mov	r0, r6
 8009866:	f000 fa77 	bl	8009d58 <_Bfree>
 800986a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800986c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800986e:	4615      	mov	r5, r2
 8009870:	1b1a      	subs	r2, r3, r4
 8009872:	d004      	beq.n	800987e <_dtoa_r+0x6e6>
 8009874:	4629      	mov	r1, r5
 8009876:	4630      	mov	r0, r6
 8009878:	f000 fbe6 	bl	800a048 <__pow5mult>
 800987c:	4605      	mov	r5, r0
 800987e:	2101      	movs	r1, #1
 8009880:	4630      	mov	r0, r6
 8009882:	f000 fb25 	bl	8009ed0 <__i2b>
 8009886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009888:	2b00      	cmp	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	f340 8082 	ble.w	8009994 <_dtoa_r+0x7fc>
 8009890:	461a      	mov	r2, r3
 8009892:	4601      	mov	r1, r0
 8009894:	4630      	mov	r0, r6
 8009896:	f000 fbd7 	bl	800a048 <__pow5mult>
 800989a:	9b07      	ldr	r3, [sp, #28]
 800989c:	2b01      	cmp	r3, #1
 800989e:	4604      	mov	r4, r0
 80098a0:	dd7b      	ble.n	800999a <_dtoa_r+0x802>
 80098a2:	2300      	movs	r3, #0
 80098a4:	930a      	str	r3, [sp, #40]	; 0x28
 80098a6:	6922      	ldr	r2, [r4, #16]
 80098a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80098ac:	6910      	ldr	r0, [r2, #16]
 80098ae:	f000 fabf 	bl	8009e30 <__hi0bits>
 80098b2:	f1c0 0020 	rsb	r0, r0, #32
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	4418      	add	r0, r3
 80098ba:	f010 001f 	ands.w	r0, r0, #31
 80098be:	f000 808d 	beq.w	80099dc <_dtoa_r+0x844>
 80098c2:	f1c0 0220 	rsb	r2, r0, #32
 80098c6:	2a04      	cmp	r2, #4
 80098c8:	f340 8086 	ble.w	80099d8 <_dtoa_r+0x840>
 80098cc:	f1c0 001c 	rsb	r0, r0, #28
 80098d0:	9b05      	ldr	r3, [sp, #20]
 80098d2:	4403      	add	r3, r0
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	9b06      	ldr	r3, [sp, #24]
 80098d8:	4403      	add	r3, r0
 80098da:	4480      	add	r8, r0
 80098dc:	9306      	str	r3, [sp, #24]
 80098de:	9b05      	ldr	r3, [sp, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dd05      	ble.n	80098f0 <_dtoa_r+0x758>
 80098e4:	4629      	mov	r1, r5
 80098e6:	461a      	mov	r2, r3
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 fc07 	bl	800a0fc <__lshift>
 80098ee:	4605      	mov	r5, r0
 80098f0:	9b06      	ldr	r3, [sp, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd05      	ble.n	8009902 <_dtoa_r+0x76a>
 80098f6:	4621      	mov	r1, r4
 80098f8:	461a      	mov	r2, r3
 80098fa:	4630      	mov	r0, r6
 80098fc:	f000 fbfe 	bl	800a0fc <__lshift>
 8009900:	4604      	mov	r4, r0
 8009902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d06b      	beq.n	80099e0 <_dtoa_r+0x848>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f000 fc62 	bl	800a1d4 <__mcmp>
 8009910:	2800      	cmp	r0, #0
 8009912:	da65      	bge.n	80099e0 <_dtoa_r+0x848>
 8009914:	2300      	movs	r3, #0
 8009916:	4629      	mov	r1, r5
 8009918:	220a      	movs	r2, #10
 800991a:	4630      	mov	r0, r6
 800991c:	f000 fa3e 	bl	8009d9c <__multadd>
 8009920:	9b08      	ldr	r3, [sp, #32]
 8009922:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009926:	4605      	mov	r5, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8192 	beq.w	8009c52 <_dtoa_r+0xaba>
 800992e:	4639      	mov	r1, r7
 8009930:	2300      	movs	r3, #0
 8009932:	220a      	movs	r2, #10
 8009934:	4630      	mov	r0, r6
 8009936:	f000 fa31 	bl	8009d9c <__multadd>
 800993a:	f1ba 0f00 	cmp.w	sl, #0
 800993e:	4607      	mov	r7, r0
 8009940:	f300 808e 	bgt.w	8009a60 <_dtoa_r+0x8c8>
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	2b02      	cmp	r3, #2
 8009948:	dc51      	bgt.n	80099ee <_dtoa_r+0x856>
 800994a:	e089      	b.n	8009a60 <_dtoa_r+0x8c8>
 800994c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800994e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009952:	e751      	b.n	80097f8 <_dtoa_r+0x660>
 8009954:	f109 34ff 	add.w	r4, r9, #4294967295
 8009958:	42a3      	cmp	r3, r4
 800995a:	bfbf      	itttt	lt
 800995c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800995e:	1ae3      	sublt	r3, r4, r3
 8009960:	18d2      	addlt	r2, r2, r3
 8009962:	4613      	movlt	r3, r2
 8009964:	bfb7      	itett	lt
 8009966:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009968:	1b1c      	subge	r4, r3, r4
 800996a:	4623      	movlt	r3, r4
 800996c:	2400      	movlt	r4, #0
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	bfb5      	itete	lt
 8009974:	9a05      	ldrlt	r2, [sp, #20]
 8009976:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800997a:	eba2 0809 	sublt.w	r8, r2, r9
 800997e:	464a      	movge	r2, r9
 8009980:	bfb8      	it	lt
 8009982:	2200      	movlt	r2, #0
 8009984:	e73b      	b.n	80097fe <_dtoa_r+0x666>
 8009986:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800998a:	9f08      	ldr	r7, [sp, #32]
 800998c:	461c      	mov	r4, r3
 800998e:	e743      	b.n	8009818 <_dtoa_r+0x680>
 8009990:	461a      	mov	r2, r3
 8009992:	e76f      	b.n	8009874 <_dtoa_r+0x6dc>
 8009994:	9b07      	ldr	r3, [sp, #28]
 8009996:	2b01      	cmp	r3, #1
 8009998:	dc18      	bgt.n	80099cc <_dtoa_r+0x834>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	b9b3      	cbnz	r3, 80099cc <_dtoa_r+0x834>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80099a4:	b9a2      	cbnz	r2, 80099d0 <_dtoa_r+0x838>
 80099a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80099aa:	0d12      	lsrs	r2, r2, #20
 80099ac:	0512      	lsls	r2, r2, #20
 80099ae:	b18a      	cbz	r2, 80099d4 <_dtoa_r+0x83c>
 80099b0:	9b05      	ldr	r3, [sp, #20]
 80099b2:	3301      	adds	r3, #1
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	3301      	adds	r3, #1
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	2301      	movs	r3, #1
 80099be:	930a      	str	r3, [sp, #40]	; 0x28
 80099c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f47f af6f 	bne.w	80098a6 <_dtoa_r+0x70e>
 80099c8:	2001      	movs	r0, #1
 80099ca:	e774      	b.n	80098b6 <_dtoa_r+0x71e>
 80099cc:	2300      	movs	r3, #0
 80099ce:	e7f6      	b.n	80099be <_dtoa_r+0x826>
 80099d0:	9b02      	ldr	r3, [sp, #8]
 80099d2:	e7f4      	b.n	80099be <_dtoa_r+0x826>
 80099d4:	920a      	str	r2, [sp, #40]	; 0x28
 80099d6:	e7f3      	b.n	80099c0 <_dtoa_r+0x828>
 80099d8:	d081      	beq.n	80098de <_dtoa_r+0x746>
 80099da:	4610      	mov	r0, r2
 80099dc:	301c      	adds	r0, #28
 80099de:	e777      	b.n	80098d0 <_dtoa_r+0x738>
 80099e0:	f1b9 0f00 	cmp.w	r9, #0
 80099e4:	dc37      	bgt.n	8009a56 <_dtoa_r+0x8be>
 80099e6:	9b07      	ldr	r3, [sp, #28]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	dd34      	ble.n	8009a56 <_dtoa_r+0x8be>
 80099ec:	46ca      	mov	sl, r9
 80099ee:	f1ba 0f00 	cmp.w	sl, #0
 80099f2:	d10d      	bne.n	8009a10 <_dtoa_r+0x878>
 80099f4:	4621      	mov	r1, r4
 80099f6:	4653      	mov	r3, sl
 80099f8:	2205      	movs	r2, #5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 f9ce 	bl	8009d9c <__multadd>
 8009a00:	4601      	mov	r1, r0
 8009a02:	4604      	mov	r4, r0
 8009a04:	4628      	mov	r0, r5
 8009a06:	f000 fbe5 	bl	800a1d4 <__mcmp>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f73f adde 	bgt.w	80095cc <_dtoa_r+0x434>
 8009a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a12:	f8dd 8000 	ldr.w	r8, [sp]
 8009a16:	ea6f 0b03 	mvn.w	fp, r3
 8009a1a:	f04f 0900 	mov.w	r9, #0
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4630      	mov	r0, r6
 8009a22:	f000 f999 	bl	8009d58 <_Bfree>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	f43f aea7 	beq.w	800977a <_dtoa_r+0x5e2>
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d005      	beq.n	8009a3e <_dtoa_r+0x8a6>
 8009a32:	45b9      	cmp	r9, r7
 8009a34:	d003      	beq.n	8009a3e <_dtoa_r+0x8a6>
 8009a36:	4649      	mov	r1, r9
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f000 f98d 	bl	8009d58 <_Bfree>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	4630      	mov	r0, r6
 8009a42:	f000 f989 	bl	8009d58 <_Bfree>
 8009a46:	e698      	b.n	800977a <_dtoa_r+0x5e2>
 8009a48:	2400      	movs	r4, #0
 8009a4a:	4627      	mov	r7, r4
 8009a4c:	e7e0      	b.n	8009a10 <_dtoa_r+0x878>
 8009a4e:	46bb      	mov	fp, r7
 8009a50:	4604      	mov	r4, r0
 8009a52:	4607      	mov	r7, r0
 8009a54:	e5ba      	b.n	80095cc <_dtoa_r+0x434>
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	46ca      	mov	sl, r9
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	f000 8100 	beq.w	8009c60 <_dtoa_r+0xac8>
 8009a60:	f1b8 0f00 	cmp.w	r8, #0
 8009a64:	dd05      	ble.n	8009a72 <_dtoa_r+0x8da>
 8009a66:	4639      	mov	r1, r7
 8009a68:	4642      	mov	r2, r8
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f000 fb46 	bl	800a0fc <__lshift>
 8009a70:	4607      	mov	r7, r0
 8009a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d05d      	beq.n	8009b34 <_dtoa_r+0x99c>
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 f92c 	bl	8009cd8 <_Balloc>
 8009a80:	4680      	mov	r8, r0
 8009a82:	b928      	cbnz	r0, 8009a90 <_dtoa_r+0x8f8>
 8009a84:	4b82      	ldr	r3, [pc, #520]	; (8009c90 <_dtoa_r+0xaf8>)
 8009a86:	4602      	mov	r2, r0
 8009a88:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a8c:	f7ff bb9a 	b.w	80091c4 <_dtoa_r+0x2c>
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	3202      	adds	r2, #2
 8009a94:	0092      	lsls	r2, r2, #2
 8009a96:	f107 010c 	add.w	r1, r7, #12
 8009a9a:	300c      	adds	r0, #12
 8009a9c:	f000 f902 	bl	8009ca4 <memcpy>
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	4641      	mov	r1, r8
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 fb29 	bl	800a0fc <__lshift>
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	3301      	adds	r3, #1
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	9b00      	ldr	r3, [sp, #0]
 8009ab2:	4453      	add	r3, sl
 8009ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab6:	9b02      	ldr	r3, [sp, #8]
 8009ab8:	f003 0301 	and.w	r3, r3, #1
 8009abc:	46b9      	mov	r9, r7
 8009abe:	9308      	str	r3, [sp, #32]
 8009ac0:	4607      	mov	r7, r0
 8009ac2:	9b05      	ldr	r3, [sp, #20]
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	4628      	mov	r0, r5
 8009aca:	9302      	str	r3, [sp, #8]
 8009acc:	f7ff fad6 	bl	800907c <quorem>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	3330      	adds	r3, #48	; 0x30
 8009ad4:	9006      	str	r0, [sp, #24]
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	4628      	mov	r0, r5
 8009ada:	930a      	str	r3, [sp, #40]	; 0x28
 8009adc:	f000 fb7a 	bl	800a1d4 <__mcmp>
 8009ae0:	463a      	mov	r2, r7
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	4621      	mov	r1, r4
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 fb90 	bl	800a20c <__mdiff>
 8009aec:	68c2      	ldr	r2, [r0, #12]
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	4680      	mov	r8, r0
 8009af2:	bb0a      	cbnz	r2, 8009b38 <_dtoa_r+0x9a0>
 8009af4:	4601      	mov	r1, r0
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 fb6c 	bl	800a1d4 <__mcmp>
 8009afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afe:	4602      	mov	r2, r0
 8009b00:	4641      	mov	r1, r8
 8009b02:	4630      	mov	r0, r6
 8009b04:	920e      	str	r2, [sp, #56]	; 0x38
 8009b06:	930a      	str	r3, [sp, #40]	; 0x28
 8009b08:	f000 f926 	bl	8009d58 <_Bfree>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009b14:	ea43 0102 	orr.w	r1, r3, r2
 8009b18:	9b08      	ldr	r3, [sp, #32]
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b1e:	d10d      	bne.n	8009b3c <_dtoa_r+0x9a4>
 8009b20:	2b39      	cmp	r3, #57	; 0x39
 8009b22:	d029      	beq.n	8009b78 <_dtoa_r+0x9e0>
 8009b24:	f1ba 0f00 	cmp.w	sl, #0
 8009b28:	dd01      	ble.n	8009b2e <_dtoa_r+0x996>
 8009b2a:	9b06      	ldr	r3, [sp, #24]
 8009b2c:	3331      	adds	r3, #49	; 0x31
 8009b2e:	9a02      	ldr	r2, [sp, #8]
 8009b30:	7013      	strb	r3, [r2, #0]
 8009b32:	e774      	b.n	8009a1e <_dtoa_r+0x886>
 8009b34:	4638      	mov	r0, r7
 8009b36:	e7b8      	b.n	8009aaa <_dtoa_r+0x912>
 8009b38:	2201      	movs	r2, #1
 8009b3a:	e7e1      	b.n	8009b00 <_dtoa_r+0x968>
 8009b3c:	f1ba 0f00 	cmp.w	sl, #0
 8009b40:	db06      	blt.n	8009b50 <_dtoa_r+0x9b8>
 8009b42:	9907      	ldr	r1, [sp, #28]
 8009b44:	ea41 0a0a 	orr.w	sl, r1, sl
 8009b48:	9908      	ldr	r1, [sp, #32]
 8009b4a:	ea5a 0101 	orrs.w	r1, sl, r1
 8009b4e:	d120      	bne.n	8009b92 <_dtoa_r+0x9fa>
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	ddec      	ble.n	8009b2e <_dtoa_r+0x996>
 8009b54:	4629      	mov	r1, r5
 8009b56:	2201      	movs	r2, #1
 8009b58:	4630      	mov	r0, r6
 8009b5a:	9305      	str	r3, [sp, #20]
 8009b5c:	f000 face 	bl	800a0fc <__lshift>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4605      	mov	r5, r0
 8009b64:	f000 fb36 	bl	800a1d4 <__mcmp>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	9b05      	ldr	r3, [sp, #20]
 8009b6c:	dc02      	bgt.n	8009b74 <_dtoa_r+0x9dc>
 8009b6e:	d1de      	bne.n	8009b2e <_dtoa_r+0x996>
 8009b70:	07da      	lsls	r2, r3, #31
 8009b72:	d5dc      	bpl.n	8009b2e <_dtoa_r+0x996>
 8009b74:	2b39      	cmp	r3, #57	; 0x39
 8009b76:	d1d8      	bne.n	8009b2a <_dtoa_r+0x992>
 8009b78:	9a02      	ldr	r2, [sp, #8]
 8009b7a:	2339      	movs	r3, #57	; 0x39
 8009b7c:	7013      	strb	r3, [r2, #0]
 8009b7e:	4643      	mov	r3, r8
 8009b80:	4698      	mov	r8, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009b88:	2a39      	cmp	r2, #57	; 0x39
 8009b8a:	d051      	beq.n	8009c30 <_dtoa_r+0xa98>
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	701a      	strb	r2, [r3, #0]
 8009b90:	e745      	b.n	8009a1e <_dtoa_r+0x886>
 8009b92:	2a00      	cmp	r2, #0
 8009b94:	dd03      	ble.n	8009b9e <_dtoa_r+0xa06>
 8009b96:	2b39      	cmp	r3, #57	; 0x39
 8009b98:	d0ee      	beq.n	8009b78 <_dtoa_r+0x9e0>
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	e7c7      	b.n	8009b2e <_dtoa_r+0x996>
 8009b9e:	9a05      	ldr	r2, [sp, #20]
 8009ba0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ba2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ba6:	428a      	cmp	r2, r1
 8009ba8:	d02b      	beq.n	8009c02 <_dtoa_r+0xa6a>
 8009baa:	4629      	mov	r1, r5
 8009bac:	2300      	movs	r3, #0
 8009bae:	220a      	movs	r2, #10
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f000 f8f3 	bl	8009d9c <__multadd>
 8009bb6:	45b9      	cmp	r9, r7
 8009bb8:	4605      	mov	r5, r0
 8009bba:	f04f 0300 	mov.w	r3, #0
 8009bbe:	f04f 020a 	mov.w	r2, #10
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	d107      	bne.n	8009bd8 <_dtoa_r+0xa40>
 8009bc8:	f000 f8e8 	bl	8009d9c <__multadd>
 8009bcc:	4681      	mov	r9, r0
 8009bce:	4607      	mov	r7, r0
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	e774      	b.n	8009ac2 <_dtoa_r+0x92a>
 8009bd8:	f000 f8e0 	bl	8009d9c <__multadd>
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4681      	mov	r9, r0
 8009be0:	2300      	movs	r3, #0
 8009be2:	220a      	movs	r2, #10
 8009be4:	4630      	mov	r0, r6
 8009be6:	f000 f8d9 	bl	8009d9c <__multadd>
 8009bea:	4607      	mov	r7, r0
 8009bec:	e7f0      	b.n	8009bd0 <_dtoa_r+0xa38>
 8009bee:	f1ba 0f00 	cmp.w	sl, #0
 8009bf2:	9a00      	ldr	r2, [sp, #0]
 8009bf4:	bfcc      	ite	gt
 8009bf6:	46d0      	movgt	r8, sl
 8009bf8:	f04f 0801 	movle.w	r8, #1
 8009bfc:	4490      	add	r8, r2
 8009bfe:	f04f 0900 	mov.w	r9, #0
 8009c02:	4629      	mov	r1, r5
 8009c04:	2201      	movs	r2, #1
 8009c06:	4630      	mov	r0, r6
 8009c08:	9302      	str	r3, [sp, #8]
 8009c0a:	f000 fa77 	bl	800a0fc <__lshift>
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4605      	mov	r5, r0
 8009c12:	f000 fadf 	bl	800a1d4 <__mcmp>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	dcb1      	bgt.n	8009b7e <_dtoa_r+0x9e6>
 8009c1a:	d102      	bne.n	8009c22 <_dtoa_r+0xa8a>
 8009c1c:	9b02      	ldr	r3, [sp, #8]
 8009c1e:	07db      	lsls	r3, r3, #31
 8009c20:	d4ad      	bmi.n	8009b7e <_dtoa_r+0x9e6>
 8009c22:	4643      	mov	r3, r8
 8009c24:	4698      	mov	r8, r3
 8009c26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c2a:	2a30      	cmp	r2, #48	; 0x30
 8009c2c:	d0fa      	beq.n	8009c24 <_dtoa_r+0xa8c>
 8009c2e:	e6f6      	b.n	8009a1e <_dtoa_r+0x886>
 8009c30:	9a00      	ldr	r2, [sp, #0]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d1a4      	bne.n	8009b80 <_dtoa_r+0x9e8>
 8009c36:	f10b 0b01 	add.w	fp, fp, #1
 8009c3a:	2331      	movs	r3, #49	; 0x31
 8009c3c:	e778      	b.n	8009b30 <_dtoa_r+0x998>
 8009c3e:	4b15      	ldr	r3, [pc, #84]	; (8009c94 <_dtoa_r+0xafc>)
 8009c40:	f7ff bb12 	b.w	8009268 <_dtoa_r+0xd0>
 8009c44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f47f aaee 	bne.w	8009228 <_dtoa_r+0x90>
 8009c4c:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <_dtoa_r+0xb00>)
 8009c4e:	f7ff bb0b 	b.w	8009268 <_dtoa_r+0xd0>
 8009c52:	f1ba 0f00 	cmp.w	sl, #0
 8009c56:	dc03      	bgt.n	8009c60 <_dtoa_r+0xac8>
 8009c58:	9b07      	ldr	r3, [sp, #28]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	f73f aec7 	bgt.w	80099ee <_dtoa_r+0x856>
 8009c60:	f8dd 8000 	ldr.w	r8, [sp]
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7ff fa08 	bl	800907c <quorem>
 8009c6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009c70:	f808 3b01 	strb.w	r3, [r8], #1
 8009c74:	9a00      	ldr	r2, [sp, #0]
 8009c76:	eba8 0202 	sub.w	r2, r8, r2
 8009c7a:	4592      	cmp	sl, r2
 8009c7c:	ddb7      	ble.n	8009bee <_dtoa_r+0xa56>
 8009c7e:	4629      	mov	r1, r5
 8009c80:	2300      	movs	r3, #0
 8009c82:	220a      	movs	r2, #10
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 f889 	bl	8009d9c <__multadd>
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	e7ea      	b.n	8009c64 <_dtoa_r+0xacc>
 8009c8e:	bf00      	nop
 8009c90:	0800b00b 	.word	0x0800b00b
 8009c94:	0800af64 	.word	0x0800af64
 8009c98:	0800af88 	.word	0x0800af88

08009c9c <_localeconv_r>:
 8009c9c:	4800      	ldr	r0, [pc, #0]	; (8009ca0 <_localeconv_r+0x4>)
 8009c9e:	4770      	bx	lr
 8009ca0:	200001b8 	.word	0x200001b8

08009ca4 <memcpy>:
 8009ca4:	440a      	add	r2, r1
 8009ca6:	4291      	cmp	r1, r2
 8009ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cac:	d100      	bne.n	8009cb0 <memcpy+0xc>
 8009cae:	4770      	bx	lr
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cba:	4291      	cmp	r1, r2
 8009cbc:	d1f9      	bne.n	8009cb2 <memcpy+0xe>
 8009cbe:	bd10      	pop	{r4, pc}

08009cc0 <__malloc_lock>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	; (8009cc8 <__malloc_lock+0x8>)
 8009cc2:	f000 bbc8 	b.w	800a456 <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	200007f8 	.word	0x200007f8

08009ccc <__malloc_unlock>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	; (8009cd4 <__malloc_unlock+0x8>)
 8009cce:	f000 bbc3 	b.w	800a458 <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	200007f8 	.word	0x200007f8

08009cd8 <_Balloc>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009cdc:	4604      	mov	r4, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	b976      	cbnz	r6, 8009d00 <_Balloc+0x28>
 8009ce2:	2010      	movs	r0, #16
 8009ce4:	f7fe fcbc 	bl	8008660 <malloc>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6260      	str	r0, [r4, #36]	; 0x24
 8009cec:	b920      	cbnz	r0, 8009cf8 <_Balloc+0x20>
 8009cee:	4b18      	ldr	r3, [pc, #96]	; (8009d50 <_Balloc+0x78>)
 8009cf0:	4818      	ldr	r0, [pc, #96]	; (8009d54 <_Balloc+0x7c>)
 8009cf2:	2166      	movs	r1, #102	; 0x66
 8009cf4:	f000 fb7e 	bl	800a3f4 <__assert_func>
 8009cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009cfc:	6006      	str	r6, [r0, #0]
 8009cfe:	60c6      	str	r6, [r0, #12]
 8009d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d02:	68f3      	ldr	r3, [r6, #12]
 8009d04:	b183      	cbz	r3, 8009d28 <_Balloc+0x50>
 8009d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d0e:	b9b8      	cbnz	r0, 8009d40 <_Balloc+0x68>
 8009d10:	2101      	movs	r1, #1
 8009d12:	fa01 f605 	lsl.w	r6, r1, r5
 8009d16:	1d72      	adds	r2, r6, #5
 8009d18:	0092      	lsls	r2, r2, #2
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 fb5a 	bl	800a3d4 <_calloc_r>
 8009d20:	b160      	cbz	r0, 8009d3c <_Balloc+0x64>
 8009d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d26:	e00e      	b.n	8009d46 <_Balloc+0x6e>
 8009d28:	2221      	movs	r2, #33	; 0x21
 8009d2a:	2104      	movs	r1, #4
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fb51 	bl	800a3d4 <_calloc_r>
 8009d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d34:	60f0      	str	r0, [r6, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d1e4      	bne.n	8009d06 <_Balloc+0x2e>
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	6802      	ldr	r2, [r0, #0]
 8009d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d46:	2300      	movs	r3, #0
 8009d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d4c:	e7f7      	b.n	8009d3e <_Balloc+0x66>
 8009d4e:	bf00      	nop
 8009d50:	0800af95 	.word	0x0800af95
 8009d54:	0800b01c 	.word	0x0800b01c

08009d58 <_Bfree>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	460c      	mov	r4, r1
 8009d60:	b976      	cbnz	r6, 8009d80 <_Bfree+0x28>
 8009d62:	2010      	movs	r0, #16
 8009d64:	f7fe fc7c 	bl	8008660 <malloc>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8009d6c:	b920      	cbnz	r0, 8009d78 <_Bfree+0x20>
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <_Bfree+0x3c>)
 8009d70:	4809      	ldr	r0, [pc, #36]	; (8009d98 <_Bfree+0x40>)
 8009d72:	218a      	movs	r1, #138	; 0x8a
 8009d74:	f000 fb3e 	bl	800a3f4 <__assert_func>
 8009d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d7c:	6006      	str	r6, [r0, #0]
 8009d7e:	60c6      	str	r6, [r0, #12]
 8009d80:	b13c      	cbz	r4, 8009d92 <_Bfree+0x3a>
 8009d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d84:	6862      	ldr	r2, [r4, #4]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d8c:	6021      	str	r1, [r4, #0]
 8009d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	0800af95 	.word	0x0800af95
 8009d98:	0800b01c 	.word	0x0800b01c

08009d9c <__multadd>:
 8009d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da0:	690e      	ldr	r6, [r1, #16]
 8009da2:	4607      	mov	r7, r0
 8009da4:	4698      	mov	r8, r3
 8009da6:	460c      	mov	r4, r1
 8009da8:	f101 0014 	add.w	r0, r1, #20
 8009dac:	2300      	movs	r3, #0
 8009dae:	6805      	ldr	r5, [r0, #0]
 8009db0:	b2a9      	uxth	r1, r5
 8009db2:	fb02 8101 	mla	r1, r2, r1, r8
 8009db6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009dba:	0c2d      	lsrs	r5, r5, #16
 8009dbc:	fb02 c505 	mla	r5, r2, r5, ip
 8009dc0:	b289      	uxth	r1, r1
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009dc8:	429e      	cmp	r6, r3
 8009dca:	f840 1b04 	str.w	r1, [r0], #4
 8009dce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009dd2:	dcec      	bgt.n	8009dae <__multadd+0x12>
 8009dd4:	f1b8 0f00 	cmp.w	r8, #0
 8009dd8:	d022      	beq.n	8009e20 <__multadd+0x84>
 8009dda:	68a3      	ldr	r3, [r4, #8]
 8009ddc:	42b3      	cmp	r3, r6
 8009dde:	dc19      	bgt.n	8009e14 <__multadd+0x78>
 8009de0:	6861      	ldr	r1, [r4, #4]
 8009de2:	4638      	mov	r0, r7
 8009de4:	3101      	adds	r1, #1
 8009de6:	f7ff ff77 	bl	8009cd8 <_Balloc>
 8009dea:	4605      	mov	r5, r0
 8009dec:	b928      	cbnz	r0, 8009dfa <__multadd+0x5e>
 8009dee:	4602      	mov	r2, r0
 8009df0:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <__multadd+0x8c>)
 8009df2:	480e      	ldr	r0, [pc, #56]	; (8009e2c <__multadd+0x90>)
 8009df4:	21b5      	movs	r1, #181	; 0xb5
 8009df6:	f000 fafd 	bl	800a3f4 <__assert_func>
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	3202      	adds	r2, #2
 8009dfe:	f104 010c 	add.w	r1, r4, #12
 8009e02:	0092      	lsls	r2, r2, #2
 8009e04:	300c      	adds	r0, #12
 8009e06:	f7ff ff4d 	bl	8009ca4 <memcpy>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	f7ff ffa3 	bl	8009d58 <_Bfree>
 8009e12:	462c      	mov	r4, r5
 8009e14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009e18:	3601      	adds	r6, #1
 8009e1a:	f8c3 8014 	str.w	r8, [r3, #20]
 8009e1e:	6126      	str	r6, [r4, #16]
 8009e20:	4620      	mov	r0, r4
 8009e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e26:	bf00      	nop
 8009e28:	0800b00b 	.word	0x0800b00b
 8009e2c:	0800b01c 	.word	0x0800b01c

08009e30 <__hi0bits>:
 8009e30:	0c03      	lsrs	r3, r0, #16
 8009e32:	041b      	lsls	r3, r3, #16
 8009e34:	b9d3      	cbnz	r3, 8009e6c <__hi0bits+0x3c>
 8009e36:	0400      	lsls	r0, r0, #16
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e3e:	bf04      	itt	eq
 8009e40:	0200      	lsleq	r0, r0, #8
 8009e42:	3308      	addeq	r3, #8
 8009e44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009e48:	bf04      	itt	eq
 8009e4a:	0100      	lsleq	r0, r0, #4
 8009e4c:	3304      	addeq	r3, #4
 8009e4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009e52:	bf04      	itt	eq
 8009e54:	0080      	lsleq	r0, r0, #2
 8009e56:	3302      	addeq	r3, #2
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	db05      	blt.n	8009e68 <__hi0bits+0x38>
 8009e5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009e60:	f103 0301 	add.w	r3, r3, #1
 8009e64:	bf08      	it	eq
 8009e66:	2320      	moveq	r3, #32
 8009e68:	4618      	mov	r0, r3
 8009e6a:	4770      	bx	lr
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e7e4      	b.n	8009e3a <__hi0bits+0xa>

08009e70 <__lo0bits>:
 8009e70:	6803      	ldr	r3, [r0, #0]
 8009e72:	f013 0207 	ands.w	r2, r3, #7
 8009e76:	4601      	mov	r1, r0
 8009e78:	d00b      	beq.n	8009e92 <__lo0bits+0x22>
 8009e7a:	07da      	lsls	r2, r3, #31
 8009e7c:	d424      	bmi.n	8009ec8 <__lo0bits+0x58>
 8009e7e:	0798      	lsls	r0, r3, #30
 8009e80:	bf49      	itett	mi
 8009e82:	085b      	lsrmi	r3, r3, #1
 8009e84:	089b      	lsrpl	r3, r3, #2
 8009e86:	2001      	movmi	r0, #1
 8009e88:	600b      	strmi	r3, [r1, #0]
 8009e8a:	bf5c      	itt	pl
 8009e8c:	600b      	strpl	r3, [r1, #0]
 8009e8e:	2002      	movpl	r0, #2
 8009e90:	4770      	bx	lr
 8009e92:	b298      	uxth	r0, r3
 8009e94:	b9b0      	cbnz	r0, 8009ec4 <__lo0bits+0x54>
 8009e96:	0c1b      	lsrs	r3, r3, #16
 8009e98:	2010      	movs	r0, #16
 8009e9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e9e:	bf04      	itt	eq
 8009ea0:	0a1b      	lsreq	r3, r3, #8
 8009ea2:	3008      	addeq	r0, #8
 8009ea4:	071a      	lsls	r2, r3, #28
 8009ea6:	bf04      	itt	eq
 8009ea8:	091b      	lsreq	r3, r3, #4
 8009eaa:	3004      	addeq	r0, #4
 8009eac:	079a      	lsls	r2, r3, #30
 8009eae:	bf04      	itt	eq
 8009eb0:	089b      	lsreq	r3, r3, #2
 8009eb2:	3002      	addeq	r0, #2
 8009eb4:	07da      	lsls	r2, r3, #31
 8009eb6:	d403      	bmi.n	8009ec0 <__lo0bits+0x50>
 8009eb8:	085b      	lsrs	r3, r3, #1
 8009eba:	f100 0001 	add.w	r0, r0, #1
 8009ebe:	d005      	beq.n	8009ecc <__lo0bits+0x5c>
 8009ec0:	600b      	str	r3, [r1, #0]
 8009ec2:	4770      	bx	lr
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	e7e8      	b.n	8009e9a <__lo0bits+0x2a>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	4770      	bx	lr
 8009ecc:	2020      	movs	r0, #32
 8009ece:	4770      	bx	lr

08009ed0 <__i2b>:
 8009ed0:	b510      	push	{r4, lr}
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	f7ff feff 	bl	8009cd8 <_Balloc>
 8009eda:	4602      	mov	r2, r0
 8009edc:	b928      	cbnz	r0, 8009eea <__i2b+0x1a>
 8009ede:	4b05      	ldr	r3, [pc, #20]	; (8009ef4 <__i2b+0x24>)
 8009ee0:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <__i2b+0x28>)
 8009ee2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ee6:	f000 fa85 	bl	800a3f4 <__assert_func>
 8009eea:	2301      	movs	r3, #1
 8009eec:	6144      	str	r4, [r0, #20]
 8009eee:	6103      	str	r3, [r0, #16]
 8009ef0:	bd10      	pop	{r4, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800b00b 	.word	0x0800b00b
 8009ef8:	0800b01c 	.word	0x0800b01c

08009efc <__multiply>:
 8009efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f00:	4614      	mov	r4, r2
 8009f02:	690a      	ldr	r2, [r1, #16]
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	bfb8      	it	lt
 8009f0a:	460b      	movlt	r3, r1
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	bfbc      	itt	lt
 8009f10:	4625      	movlt	r5, r4
 8009f12:	461c      	movlt	r4, r3
 8009f14:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009f18:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009f1c:	68ab      	ldr	r3, [r5, #8]
 8009f1e:	6869      	ldr	r1, [r5, #4]
 8009f20:	eb0a 0709 	add.w	r7, sl, r9
 8009f24:	42bb      	cmp	r3, r7
 8009f26:	b085      	sub	sp, #20
 8009f28:	bfb8      	it	lt
 8009f2a:	3101      	addlt	r1, #1
 8009f2c:	f7ff fed4 	bl	8009cd8 <_Balloc>
 8009f30:	b930      	cbnz	r0, 8009f40 <__multiply+0x44>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4b42      	ldr	r3, [pc, #264]	; (800a040 <__multiply+0x144>)
 8009f36:	4843      	ldr	r0, [pc, #268]	; (800a044 <__multiply+0x148>)
 8009f38:	f240 115d 	movw	r1, #349	; 0x15d
 8009f3c:	f000 fa5a 	bl	800a3f4 <__assert_func>
 8009f40:	f100 0614 	add.w	r6, r0, #20
 8009f44:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009f48:	4633      	mov	r3, r6
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	4543      	cmp	r3, r8
 8009f4e:	d31e      	bcc.n	8009f8e <__multiply+0x92>
 8009f50:	f105 0c14 	add.w	ip, r5, #20
 8009f54:	f104 0314 	add.w	r3, r4, #20
 8009f58:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009f5c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009f60:	9202      	str	r2, [sp, #8]
 8009f62:	ebac 0205 	sub.w	r2, ip, r5
 8009f66:	3a15      	subs	r2, #21
 8009f68:	f022 0203 	bic.w	r2, r2, #3
 8009f6c:	3204      	adds	r2, #4
 8009f6e:	f105 0115 	add.w	r1, r5, #21
 8009f72:	458c      	cmp	ip, r1
 8009f74:	bf38      	it	cc
 8009f76:	2204      	movcc	r2, #4
 8009f78:	9201      	str	r2, [sp, #4]
 8009f7a:	9a02      	ldr	r2, [sp, #8]
 8009f7c:	9303      	str	r3, [sp, #12]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d808      	bhi.n	8009f94 <__multiply+0x98>
 8009f82:	2f00      	cmp	r7, #0
 8009f84:	dc55      	bgt.n	800a032 <__multiply+0x136>
 8009f86:	6107      	str	r7, [r0, #16]
 8009f88:	b005      	add	sp, #20
 8009f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8e:	f843 2b04 	str.w	r2, [r3], #4
 8009f92:	e7db      	b.n	8009f4c <__multiply+0x50>
 8009f94:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f98:	f1ba 0f00 	cmp.w	sl, #0
 8009f9c:	d020      	beq.n	8009fe0 <__multiply+0xe4>
 8009f9e:	f105 0e14 	add.w	lr, r5, #20
 8009fa2:	46b1      	mov	r9, r6
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009faa:	f8d9 b000 	ldr.w	fp, [r9]
 8009fae:	b2a1      	uxth	r1, r4
 8009fb0:	fa1f fb8b 	uxth.w	fp, fp
 8009fb4:	fb0a b101 	mla	r1, sl, r1, fp
 8009fb8:	4411      	add	r1, r2
 8009fba:	f8d9 2000 	ldr.w	r2, [r9]
 8009fbe:	0c24      	lsrs	r4, r4, #16
 8009fc0:	0c12      	lsrs	r2, r2, #16
 8009fc2:	fb0a 2404 	mla	r4, sl, r4, r2
 8009fc6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009fca:	b289      	uxth	r1, r1
 8009fcc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009fd0:	45f4      	cmp	ip, lr
 8009fd2:	f849 1b04 	str.w	r1, [r9], #4
 8009fd6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009fda:	d8e4      	bhi.n	8009fa6 <__multiply+0xaa>
 8009fdc:	9901      	ldr	r1, [sp, #4]
 8009fde:	5072      	str	r2, [r6, r1]
 8009fe0:	9a03      	ldr	r2, [sp, #12]
 8009fe2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	f1b9 0f00 	cmp.w	r9, #0
 8009fec:	d01f      	beq.n	800a02e <__multiply+0x132>
 8009fee:	6834      	ldr	r4, [r6, #0]
 8009ff0:	f105 0114 	add.w	r1, r5, #20
 8009ff4:	46b6      	mov	lr, r6
 8009ff6:	f04f 0a00 	mov.w	sl, #0
 8009ffa:	880a      	ldrh	r2, [r1, #0]
 8009ffc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a000:	fb09 b202 	mla	r2, r9, r2, fp
 800a004:	4492      	add	sl, r2
 800a006:	b2a4      	uxth	r4, r4
 800a008:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a00c:	f84e 4b04 	str.w	r4, [lr], #4
 800a010:	f851 4b04 	ldr.w	r4, [r1], #4
 800a014:	f8be 2000 	ldrh.w	r2, [lr]
 800a018:	0c24      	lsrs	r4, r4, #16
 800a01a:	fb09 2404 	mla	r4, r9, r4, r2
 800a01e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a022:	458c      	cmp	ip, r1
 800a024:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a028:	d8e7      	bhi.n	8009ffa <__multiply+0xfe>
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	50b4      	str	r4, [r6, r2]
 800a02e:	3604      	adds	r6, #4
 800a030:	e7a3      	b.n	8009f7a <__multiply+0x7e>
 800a032:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1a5      	bne.n	8009f86 <__multiply+0x8a>
 800a03a:	3f01      	subs	r7, #1
 800a03c:	e7a1      	b.n	8009f82 <__multiply+0x86>
 800a03e:	bf00      	nop
 800a040:	0800b00b 	.word	0x0800b00b
 800a044:	0800b01c 	.word	0x0800b01c

0800a048 <__pow5mult>:
 800a048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a04c:	4615      	mov	r5, r2
 800a04e:	f012 0203 	ands.w	r2, r2, #3
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	d007      	beq.n	800a068 <__pow5mult+0x20>
 800a058:	4c25      	ldr	r4, [pc, #148]	; (800a0f0 <__pow5mult+0xa8>)
 800a05a:	3a01      	subs	r2, #1
 800a05c:	2300      	movs	r3, #0
 800a05e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a062:	f7ff fe9b 	bl	8009d9c <__multadd>
 800a066:	4607      	mov	r7, r0
 800a068:	10ad      	asrs	r5, r5, #2
 800a06a:	d03d      	beq.n	800a0e8 <__pow5mult+0xa0>
 800a06c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a06e:	b97c      	cbnz	r4, 800a090 <__pow5mult+0x48>
 800a070:	2010      	movs	r0, #16
 800a072:	f7fe faf5 	bl	8008660 <malloc>
 800a076:	4602      	mov	r2, r0
 800a078:	6270      	str	r0, [r6, #36]	; 0x24
 800a07a:	b928      	cbnz	r0, 800a088 <__pow5mult+0x40>
 800a07c:	4b1d      	ldr	r3, [pc, #116]	; (800a0f4 <__pow5mult+0xac>)
 800a07e:	481e      	ldr	r0, [pc, #120]	; (800a0f8 <__pow5mult+0xb0>)
 800a080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a084:	f000 f9b6 	bl	800a3f4 <__assert_func>
 800a088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a08c:	6004      	str	r4, [r0, #0]
 800a08e:	60c4      	str	r4, [r0, #12]
 800a090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a098:	b94c      	cbnz	r4, 800a0ae <__pow5mult+0x66>
 800a09a:	f240 2171 	movw	r1, #625	; 0x271
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7ff ff16 	bl	8009ed0 <__i2b>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	07eb      	lsls	r3, r5, #31
 800a0b4:	d50a      	bpl.n	800a0cc <__pow5mult+0x84>
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4622      	mov	r2, r4
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ff1e 	bl	8009efc <__multiply>
 800a0c0:	4639      	mov	r1, r7
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f7ff fe47 	bl	8009d58 <_Bfree>
 800a0ca:	4647      	mov	r7, r8
 800a0cc:	106d      	asrs	r5, r5, #1
 800a0ce:	d00b      	beq.n	800a0e8 <__pow5mult+0xa0>
 800a0d0:	6820      	ldr	r0, [r4, #0]
 800a0d2:	b938      	cbnz	r0, 800a0e4 <__pow5mult+0x9c>
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7ff ff0f 	bl	8009efc <__multiply>
 800a0de:	6020      	str	r0, [r4, #0]
 800a0e0:	f8c0 9000 	str.w	r9, [r0]
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	e7e4      	b.n	800a0b2 <__pow5mult+0x6a>
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ee:	bf00      	nop
 800a0f0:	0800b170 	.word	0x0800b170
 800a0f4:	0800af95 	.word	0x0800af95
 800a0f8:	0800b01c 	.word	0x0800b01c

0800a0fc <__lshift>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	6849      	ldr	r1, [r1, #4]
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	4607      	mov	r7, r0
 800a10e:	4691      	mov	r9, r2
 800a110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a114:	f108 0601 	add.w	r6, r8, #1
 800a118:	42b3      	cmp	r3, r6
 800a11a:	db0b      	blt.n	800a134 <__lshift+0x38>
 800a11c:	4638      	mov	r0, r7
 800a11e:	f7ff fddb 	bl	8009cd8 <_Balloc>
 800a122:	4605      	mov	r5, r0
 800a124:	b948      	cbnz	r0, 800a13a <__lshift+0x3e>
 800a126:	4602      	mov	r2, r0
 800a128:	4b28      	ldr	r3, [pc, #160]	; (800a1cc <__lshift+0xd0>)
 800a12a:	4829      	ldr	r0, [pc, #164]	; (800a1d0 <__lshift+0xd4>)
 800a12c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a130:	f000 f960 	bl	800a3f4 <__assert_func>
 800a134:	3101      	adds	r1, #1
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	e7ee      	b.n	800a118 <__lshift+0x1c>
 800a13a:	2300      	movs	r3, #0
 800a13c:	f100 0114 	add.w	r1, r0, #20
 800a140:	f100 0210 	add.w	r2, r0, #16
 800a144:	4618      	mov	r0, r3
 800a146:	4553      	cmp	r3, sl
 800a148:	db33      	blt.n	800a1b2 <__lshift+0xb6>
 800a14a:	6920      	ldr	r0, [r4, #16]
 800a14c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a150:	f104 0314 	add.w	r3, r4, #20
 800a154:	f019 091f 	ands.w	r9, r9, #31
 800a158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a15c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a160:	d02b      	beq.n	800a1ba <__lshift+0xbe>
 800a162:	f1c9 0e20 	rsb	lr, r9, #32
 800a166:	468a      	mov	sl, r1
 800a168:	2200      	movs	r2, #0
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	fa00 f009 	lsl.w	r0, r0, r9
 800a170:	4302      	orrs	r2, r0
 800a172:	f84a 2b04 	str.w	r2, [sl], #4
 800a176:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17a:	459c      	cmp	ip, r3
 800a17c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a180:	d8f3      	bhi.n	800a16a <__lshift+0x6e>
 800a182:	ebac 0304 	sub.w	r3, ip, r4
 800a186:	3b15      	subs	r3, #21
 800a188:	f023 0303 	bic.w	r3, r3, #3
 800a18c:	3304      	adds	r3, #4
 800a18e:	f104 0015 	add.w	r0, r4, #21
 800a192:	4584      	cmp	ip, r0
 800a194:	bf38      	it	cc
 800a196:	2304      	movcc	r3, #4
 800a198:	50ca      	str	r2, [r1, r3]
 800a19a:	b10a      	cbz	r2, 800a1a0 <__lshift+0xa4>
 800a19c:	f108 0602 	add.w	r6, r8, #2
 800a1a0:	3e01      	subs	r6, #1
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	612e      	str	r6, [r5, #16]
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	f7ff fdd6 	bl	8009d58 <_Bfree>
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	e7c5      	b.n	800a146 <__lshift+0x4a>
 800a1ba:	3904      	subs	r1, #4
 800a1bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a1c4:	459c      	cmp	ip, r3
 800a1c6:	d8f9      	bhi.n	800a1bc <__lshift+0xc0>
 800a1c8:	e7ea      	b.n	800a1a0 <__lshift+0xa4>
 800a1ca:	bf00      	nop
 800a1cc:	0800b00b 	.word	0x0800b00b
 800a1d0:	0800b01c 	.word	0x0800b01c

0800a1d4 <__mcmp>:
 800a1d4:	b530      	push	{r4, r5, lr}
 800a1d6:	6902      	ldr	r2, [r0, #16]
 800a1d8:	690c      	ldr	r4, [r1, #16]
 800a1da:	1b12      	subs	r2, r2, r4
 800a1dc:	d10e      	bne.n	800a1fc <__mcmp+0x28>
 800a1de:	f100 0314 	add.w	r3, r0, #20
 800a1e2:	3114      	adds	r1, #20
 800a1e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a1e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a1ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a1f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1f4:	42a5      	cmp	r5, r4
 800a1f6:	d003      	beq.n	800a200 <__mcmp+0x2c>
 800a1f8:	d305      	bcc.n	800a206 <__mcmp+0x32>
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	bd30      	pop	{r4, r5, pc}
 800a200:	4283      	cmp	r3, r0
 800a202:	d3f3      	bcc.n	800a1ec <__mcmp+0x18>
 800a204:	e7fa      	b.n	800a1fc <__mcmp+0x28>
 800a206:	f04f 32ff 	mov.w	r2, #4294967295
 800a20a:	e7f7      	b.n	800a1fc <__mcmp+0x28>

0800a20c <__mdiff>:
 800a20c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	460c      	mov	r4, r1
 800a212:	4606      	mov	r6, r0
 800a214:	4611      	mov	r1, r2
 800a216:	4620      	mov	r0, r4
 800a218:	4617      	mov	r7, r2
 800a21a:	f7ff ffdb 	bl	800a1d4 <__mcmp>
 800a21e:	1e05      	subs	r5, r0, #0
 800a220:	d110      	bne.n	800a244 <__mdiff+0x38>
 800a222:	4629      	mov	r1, r5
 800a224:	4630      	mov	r0, r6
 800a226:	f7ff fd57 	bl	8009cd8 <_Balloc>
 800a22a:	b930      	cbnz	r0, 800a23a <__mdiff+0x2e>
 800a22c:	4b39      	ldr	r3, [pc, #228]	; (800a314 <__mdiff+0x108>)
 800a22e:	4602      	mov	r2, r0
 800a230:	f240 2132 	movw	r1, #562	; 0x232
 800a234:	4838      	ldr	r0, [pc, #224]	; (800a318 <__mdiff+0x10c>)
 800a236:	f000 f8dd 	bl	800a3f4 <__assert_func>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a244:	bfa4      	itt	ge
 800a246:	463b      	movge	r3, r7
 800a248:	4627      	movge	r7, r4
 800a24a:	4630      	mov	r0, r6
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	bfa6      	itte	ge
 800a250:	461c      	movge	r4, r3
 800a252:	2500      	movge	r5, #0
 800a254:	2501      	movlt	r5, #1
 800a256:	f7ff fd3f 	bl	8009cd8 <_Balloc>
 800a25a:	b920      	cbnz	r0, 800a266 <__mdiff+0x5a>
 800a25c:	4b2d      	ldr	r3, [pc, #180]	; (800a314 <__mdiff+0x108>)
 800a25e:	4602      	mov	r2, r0
 800a260:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a264:	e7e6      	b.n	800a234 <__mdiff+0x28>
 800a266:	693e      	ldr	r6, [r7, #16]
 800a268:	60c5      	str	r5, [r0, #12]
 800a26a:	6925      	ldr	r5, [r4, #16]
 800a26c:	f107 0114 	add.w	r1, r7, #20
 800a270:	f104 0914 	add.w	r9, r4, #20
 800a274:	f100 0e14 	add.w	lr, r0, #20
 800a278:	f107 0210 	add.w	r2, r7, #16
 800a27c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a280:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a284:	46f2      	mov	sl, lr
 800a286:	2700      	movs	r7, #0
 800a288:	f859 3b04 	ldr.w	r3, [r9], #4
 800a28c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a290:	fa1f f883 	uxth.w	r8, r3
 800a294:	fa17 f78b 	uxtah	r7, r7, fp
 800a298:	0c1b      	lsrs	r3, r3, #16
 800a29a:	eba7 0808 	sub.w	r8, r7, r8
 800a29e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a2a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a2a6:	fa1f f888 	uxth.w	r8, r8
 800a2aa:	141f      	asrs	r7, r3, #16
 800a2ac:	454d      	cmp	r5, r9
 800a2ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a2b2:	f84a 3b04 	str.w	r3, [sl], #4
 800a2b6:	d8e7      	bhi.n	800a288 <__mdiff+0x7c>
 800a2b8:	1b2b      	subs	r3, r5, r4
 800a2ba:	3b15      	subs	r3, #21
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	3415      	adds	r4, #21
 800a2c4:	42a5      	cmp	r5, r4
 800a2c6:	bf38      	it	cc
 800a2c8:	2304      	movcc	r3, #4
 800a2ca:	4419      	add	r1, r3
 800a2cc:	4473      	add	r3, lr
 800a2ce:	469e      	mov	lr, r3
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	4565      	cmp	r5, ip
 800a2d4:	d30e      	bcc.n	800a2f4 <__mdiff+0xe8>
 800a2d6:	f10c 0203 	add.w	r2, ip, #3
 800a2da:	1a52      	subs	r2, r2, r1
 800a2dc:	f022 0203 	bic.w	r2, r2, #3
 800a2e0:	3903      	subs	r1, #3
 800a2e2:	458c      	cmp	ip, r1
 800a2e4:	bf38      	it	cc
 800a2e6:	2200      	movcc	r2, #0
 800a2e8:	441a      	add	r2, r3
 800a2ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a2ee:	b17b      	cbz	r3, 800a310 <__mdiff+0x104>
 800a2f0:	6106      	str	r6, [r0, #16]
 800a2f2:	e7a5      	b.n	800a240 <__mdiff+0x34>
 800a2f4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a2f8:	fa17 f488 	uxtah	r4, r7, r8
 800a2fc:	1422      	asrs	r2, r4, #16
 800a2fe:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a302:	b2a4      	uxth	r4, r4
 800a304:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a308:	f84e 4b04 	str.w	r4, [lr], #4
 800a30c:	1417      	asrs	r7, r2, #16
 800a30e:	e7e0      	b.n	800a2d2 <__mdiff+0xc6>
 800a310:	3e01      	subs	r6, #1
 800a312:	e7ea      	b.n	800a2ea <__mdiff+0xde>
 800a314:	0800b00b 	.word	0x0800b00b
 800a318:	0800b01c 	.word	0x0800b01c

0800a31c <__d2b>:
 800a31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a320:	4689      	mov	r9, r1
 800a322:	2101      	movs	r1, #1
 800a324:	ec57 6b10 	vmov	r6, r7, d0
 800a328:	4690      	mov	r8, r2
 800a32a:	f7ff fcd5 	bl	8009cd8 <_Balloc>
 800a32e:	4604      	mov	r4, r0
 800a330:	b930      	cbnz	r0, 800a340 <__d2b+0x24>
 800a332:	4602      	mov	r2, r0
 800a334:	4b25      	ldr	r3, [pc, #148]	; (800a3cc <__d2b+0xb0>)
 800a336:	4826      	ldr	r0, [pc, #152]	; (800a3d0 <__d2b+0xb4>)
 800a338:	f240 310a 	movw	r1, #778	; 0x30a
 800a33c:	f000 f85a 	bl	800a3f4 <__assert_func>
 800a340:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a344:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a348:	bb35      	cbnz	r5, 800a398 <__d2b+0x7c>
 800a34a:	2e00      	cmp	r6, #0
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	d028      	beq.n	800a3a2 <__d2b+0x86>
 800a350:	4668      	mov	r0, sp
 800a352:	9600      	str	r6, [sp, #0]
 800a354:	f7ff fd8c 	bl	8009e70 <__lo0bits>
 800a358:	9900      	ldr	r1, [sp, #0]
 800a35a:	b300      	cbz	r0, 800a39e <__d2b+0x82>
 800a35c:	9a01      	ldr	r2, [sp, #4]
 800a35e:	f1c0 0320 	rsb	r3, r0, #32
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	430b      	orrs	r3, r1
 800a368:	40c2      	lsrs	r2, r0
 800a36a:	6163      	str	r3, [r4, #20]
 800a36c:	9201      	str	r2, [sp, #4]
 800a36e:	9b01      	ldr	r3, [sp, #4]
 800a370:	61a3      	str	r3, [r4, #24]
 800a372:	2b00      	cmp	r3, #0
 800a374:	bf14      	ite	ne
 800a376:	2202      	movne	r2, #2
 800a378:	2201      	moveq	r2, #1
 800a37a:	6122      	str	r2, [r4, #16]
 800a37c:	b1d5      	cbz	r5, 800a3b4 <__d2b+0x98>
 800a37e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a382:	4405      	add	r5, r0
 800a384:	f8c9 5000 	str.w	r5, [r9]
 800a388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a38c:	f8c8 0000 	str.w	r0, [r8]
 800a390:	4620      	mov	r0, r4
 800a392:	b003      	add	sp, #12
 800a394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a39c:	e7d5      	b.n	800a34a <__d2b+0x2e>
 800a39e:	6161      	str	r1, [r4, #20]
 800a3a0:	e7e5      	b.n	800a36e <__d2b+0x52>
 800a3a2:	a801      	add	r0, sp, #4
 800a3a4:	f7ff fd64 	bl	8009e70 <__lo0bits>
 800a3a8:	9b01      	ldr	r3, [sp, #4]
 800a3aa:	6163      	str	r3, [r4, #20]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	6122      	str	r2, [r4, #16]
 800a3b0:	3020      	adds	r0, #32
 800a3b2:	e7e3      	b.n	800a37c <__d2b+0x60>
 800a3b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3bc:	f8c9 0000 	str.w	r0, [r9]
 800a3c0:	6918      	ldr	r0, [r3, #16]
 800a3c2:	f7ff fd35 	bl	8009e30 <__hi0bits>
 800a3c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3ca:	e7df      	b.n	800a38c <__d2b+0x70>
 800a3cc:	0800b00b 	.word	0x0800b00b
 800a3d0:	0800b01c 	.word	0x0800b01c

0800a3d4 <_calloc_r>:
 800a3d4:	b513      	push	{r0, r1, r4, lr}
 800a3d6:	434a      	muls	r2, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	9201      	str	r2, [sp, #4]
 800a3dc:	f7fe f9a0 	bl	8008720 <_malloc_r>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	b118      	cbz	r0, 800a3ec <_calloc_r+0x18>
 800a3e4:	9a01      	ldr	r2, [sp, #4]
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	f7fe f942 	bl	8008670 <memset>
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	b002      	add	sp, #8
 800a3f0:	bd10      	pop	{r4, pc}
	...

0800a3f4 <__assert_func>:
 800a3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3f6:	4614      	mov	r4, r2
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4b09      	ldr	r3, [pc, #36]	; (800a420 <__assert_func+0x2c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4605      	mov	r5, r0
 800a400:	68d8      	ldr	r0, [r3, #12]
 800a402:	b14c      	cbz	r4, 800a418 <__assert_func+0x24>
 800a404:	4b07      	ldr	r3, [pc, #28]	; (800a424 <__assert_func+0x30>)
 800a406:	9100      	str	r1, [sp, #0]
 800a408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a40c:	4906      	ldr	r1, [pc, #24]	; (800a428 <__assert_func+0x34>)
 800a40e:	462b      	mov	r3, r5
 800a410:	f000 f80e 	bl	800a430 <fiprintf>
 800a414:	f000 fa5a 	bl	800a8cc <abort>
 800a418:	4b04      	ldr	r3, [pc, #16]	; (800a42c <__assert_func+0x38>)
 800a41a:	461c      	mov	r4, r3
 800a41c:	e7f3      	b.n	800a406 <__assert_func+0x12>
 800a41e:	bf00      	nop
 800a420:	20000064 	.word	0x20000064
 800a424:	0800b17c 	.word	0x0800b17c
 800a428:	0800b189 	.word	0x0800b189
 800a42c:	0800b1b7 	.word	0x0800b1b7

0800a430 <fiprintf>:
 800a430:	b40e      	push	{r1, r2, r3}
 800a432:	b503      	push	{r0, r1, lr}
 800a434:	4601      	mov	r1, r0
 800a436:	ab03      	add	r3, sp, #12
 800a438:	4805      	ldr	r0, [pc, #20]	; (800a450 <fiprintf+0x20>)
 800a43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	f000 f845 	bl	800a4d0 <_vfiprintf_r>
 800a446:	b002      	add	sp, #8
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	20000064 	.word	0x20000064

0800a454 <__retarget_lock_init_recursive>:
 800a454:	4770      	bx	lr

0800a456 <__retarget_lock_acquire_recursive>:
 800a456:	4770      	bx	lr

0800a458 <__retarget_lock_release_recursive>:
 800a458:	4770      	bx	lr

0800a45a <__ascii_mbtowc>:
 800a45a:	b082      	sub	sp, #8
 800a45c:	b901      	cbnz	r1, 800a460 <__ascii_mbtowc+0x6>
 800a45e:	a901      	add	r1, sp, #4
 800a460:	b142      	cbz	r2, 800a474 <__ascii_mbtowc+0x1a>
 800a462:	b14b      	cbz	r3, 800a478 <__ascii_mbtowc+0x1e>
 800a464:	7813      	ldrb	r3, [r2, #0]
 800a466:	600b      	str	r3, [r1, #0]
 800a468:	7812      	ldrb	r2, [r2, #0]
 800a46a:	1e10      	subs	r0, r2, #0
 800a46c:	bf18      	it	ne
 800a46e:	2001      	movne	r0, #1
 800a470:	b002      	add	sp, #8
 800a472:	4770      	bx	lr
 800a474:	4610      	mov	r0, r2
 800a476:	e7fb      	b.n	800a470 <__ascii_mbtowc+0x16>
 800a478:	f06f 0001 	mvn.w	r0, #1
 800a47c:	e7f8      	b.n	800a470 <__ascii_mbtowc+0x16>

0800a47e <__sfputc_r>:
 800a47e:	6893      	ldr	r3, [r2, #8]
 800a480:	3b01      	subs	r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	b410      	push	{r4}
 800a486:	6093      	str	r3, [r2, #8]
 800a488:	da08      	bge.n	800a49c <__sfputc_r+0x1e>
 800a48a:	6994      	ldr	r4, [r2, #24]
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	db01      	blt.n	800a494 <__sfputc_r+0x16>
 800a490:	290a      	cmp	r1, #10
 800a492:	d103      	bne.n	800a49c <__sfputc_r+0x1e>
 800a494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a498:	f000 b94a 	b.w	800a730 <__swbuf_r>
 800a49c:	6813      	ldr	r3, [r2, #0]
 800a49e:	1c58      	adds	r0, r3, #1
 800a4a0:	6010      	str	r0, [r2, #0]
 800a4a2:	7019      	strb	r1, [r3, #0]
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <__sfputs_r>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	18d5      	adds	r5, r2, r3
 800a4b6:	42ac      	cmp	r4, r5
 800a4b8:	d101      	bne.n	800a4be <__sfputs_r+0x12>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e007      	b.n	800a4ce <__sfputs_r+0x22>
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	463a      	mov	r2, r7
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff ffda 	bl	800a47e <__sfputc_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d1f3      	bne.n	800a4b6 <__sfputs_r+0xa>
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4d0 <_vfiprintf_r>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	b09d      	sub	sp, #116	; 0x74
 800a4d8:	4614      	mov	r4, r2
 800a4da:	4698      	mov	r8, r3
 800a4dc:	4606      	mov	r6, r0
 800a4de:	b118      	cbz	r0, 800a4e8 <_vfiprintf_r+0x18>
 800a4e0:	6983      	ldr	r3, [r0, #24]
 800a4e2:	b90b      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x18>
 800a4e4:	f000 fb14 	bl	800ab10 <__sinit>
 800a4e8:	4b89      	ldr	r3, [pc, #548]	; (800a710 <_vfiprintf_r+0x240>)
 800a4ea:	429d      	cmp	r5, r3
 800a4ec:	d11b      	bne.n	800a526 <_vfiprintf_r+0x56>
 800a4ee:	6875      	ldr	r5, [r6, #4]
 800a4f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4f2:	07d9      	lsls	r1, r3, #31
 800a4f4:	d405      	bmi.n	800a502 <_vfiprintf_r+0x32>
 800a4f6:	89ab      	ldrh	r3, [r5, #12]
 800a4f8:	059a      	lsls	r2, r3, #22
 800a4fa:	d402      	bmi.n	800a502 <_vfiprintf_r+0x32>
 800a4fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4fe:	f7ff ffaa 	bl	800a456 <__retarget_lock_acquire_recursive>
 800a502:	89ab      	ldrh	r3, [r5, #12]
 800a504:	071b      	lsls	r3, r3, #28
 800a506:	d501      	bpl.n	800a50c <_vfiprintf_r+0x3c>
 800a508:	692b      	ldr	r3, [r5, #16]
 800a50a:	b9eb      	cbnz	r3, 800a548 <_vfiprintf_r+0x78>
 800a50c:	4629      	mov	r1, r5
 800a50e:	4630      	mov	r0, r6
 800a510:	f000 f96e 	bl	800a7f0 <__swsetup_r>
 800a514:	b1c0      	cbz	r0, 800a548 <_vfiprintf_r+0x78>
 800a516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a518:	07dc      	lsls	r4, r3, #31
 800a51a:	d50e      	bpl.n	800a53a <_vfiprintf_r+0x6a>
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	b01d      	add	sp, #116	; 0x74
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a526:	4b7b      	ldr	r3, [pc, #492]	; (800a714 <_vfiprintf_r+0x244>)
 800a528:	429d      	cmp	r5, r3
 800a52a:	d101      	bne.n	800a530 <_vfiprintf_r+0x60>
 800a52c:	68b5      	ldr	r5, [r6, #8]
 800a52e:	e7df      	b.n	800a4f0 <_vfiprintf_r+0x20>
 800a530:	4b79      	ldr	r3, [pc, #484]	; (800a718 <_vfiprintf_r+0x248>)
 800a532:	429d      	cmp	r5, r3
 800a534:	bf08      	it	eq
 800a536:	68f5      	ldreq	r5, [r6, #12]
 800a538:	e7da      	b.n	800a4f0 <_vfiprintf_r+0x20>
 800a53a:	89ab      	ldrh	r3, [r5, #12]
 800a53c:	0598      	lsls	r0, r3, #22
 800a53e:	d4ed      	bmi.n	800a51c <_vfiprintf_r+0x4c>
 800a540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a542:	f7ff ff89 	bl	800a458 <__retarget_lock_release_recursive>
 800a546:	e7e9      	b.n	800a51c <_vfiprintf_r+0x4c>
 800a548:	2300      	movs	r3, #0
 800a54a:	9309      	str	r3, [sp, #36]	; 0x24
 800a54c:	2320      	movs	r3, #32
 800a54e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a552:	f8cd 800c 	str.w	r8, [sp, #12]
 800a556:	2330      	movs	r3, #48	; 0x30
 800a558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a71c <_vfiprintf_r+0x24c>
 800a55c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a560:	f04f 0901 	mov.w	r9, #1
 800a564:	4623      	mov	r3, r4
 800a566:	469a      	mov	sl, r3
 800a568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a56c:	b10a      	cbz	r2, 800a572 <_vfiprintf_r+0xa2>
 800a56e:	2a25      	cmp	r2, #37	; 0x25
 800a570:	d1f9      	bne.n	800a566 <_vfiprintf_r+0x96>
 800a572:	ebba 0b04 	subs.w	fp, sl, r4
 800a576:	d00b      	beq.n	800a590 <_vfiprintf_r+0xc0>
 800a578:	465b      	mov	r3, fp
 800a57a:	4622      	mov	r2, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	4630      	mov	r0, r6
 800a580:	f7ff ff94 	bl	800a4ac <__sfputs_r>
 800a584:	3001      	adds	r0, #1
 800a586:	f000 80aa 	beq.w	800a6de <_vfiprintf_r+0x20e>
 800a58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a58c:	445a      	add	r2, fp
 800a58e:	9209      	str	r2, [sp, #36]	; 0x24
 800a590:	f89a 3000 	ldrb.w	r3, [sl]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80a2 	beq.w	800a6de <_vfiprintf_r+0x20e>
 800a59a:	2300      	movs	r3, #0
 800a59c:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5a4:	f10a 0a01 	add.w	sl, sl, #1
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b2:	4654      	mov	r4, sl
 800a5b4:	2205      	movs	r2, #5
 800a5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ba:	4858      	ldr	r0, [pc, #352]	; (800a71c <_vfiprintf_r+0x24c>)
 800a5bc:	f7f5 fe48 	bl	8000250 <memchr>
 800a5c0:	9a04      	ldr	r2, [sp, #16]
 800a5c2:	b9d8      	cbnz	r0, 800a5fc <_vfiprintf_r+0x12c>
 800a5c4:	06d1      	lsls	r1, r2, #27
 800a5c6:	bf44      	itt	mi
 800a5c8:	2320      	movmi	r3, #32
 800a5ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ce:	0713      	lsls	r3, r2, #28
 800a5d0:	bf44      	itt	mi
 800a5d2:	232b      	movmi	r3, #43	; 0x2b
 800a5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a5de:	d015      	beq.n	800a60c <_vfiprintf_r+0x13c>
 800a5e0:	9a07      	ldr	r2, [sp, #28]
 800a5e2:	4654      	mov	r4, sl
 800a5e4:	2000      	movs	r0, #0
 800a5e6:	f04f 0c0a 	mov.w	ip, #10
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f0:	3b30      	subs	r3, #48	; 0x30
 800a5f2:	2b09      	cmp	r3, #9
 800a5f4:	d94e      	bls.n	800a694 <_vfiprintf_r+0x1c4>
 800a5f6:	b1b0      	cbz	r0, 800a626 <_vfiprintf_r+0x156>
 800a5f8:	9207      	str	r2, [sp, #28]
 800a5fa:	e014      	b.n	800a626 <_vfiprintf_r+0x156>
 800a5fc:	eba0 0308 	sub.w	r3, r0, r8
 800a600:	fa09 f303 	lsl.w	r3, r9, r3
 800a604:	4313      	orrs	r3, r2
 800a606:	9304      	str	r3, [sp, #16]
 800a608:	46a2      	mov	sl, r4
 800a60a:	e7d2      	b.n	800a5b2 <_vfiprintf_r+0xe2>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	1d19      	adds	r1, r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	9103      	str	r1, [sp, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	bfbb      	ittet	lt
 800a618:	425b      	neglt	r3, r3
 800a61a:	f042 0202 	orrlt.w	r2, r2, #2
 800a61e:	9307      	strge	r3, [sp, #28]
 800a620:	9307      	strlt	r3, [sp, #28]
 800a622:	bfb8      	it	lt
 800a624:	9204      	strlt	r2, [sp, #16]
 800a626:	7823      	ldrb	r3, [r4, #0]
 800a628:	2b2e      	cmp	r3, #46	; 0x2e
 800a62a:	d10c      	bne.n	800a646 <_vfiprintf_r+0x176>
 800a62c:	7863      	ldrb	r3, [r4, #1]
 800a62e:	2b2a      	cmp	r3, #42	; 0x2a
 800a630:	d135      	bne.n	800a69e <_vfiprintf_r+0x1ce>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	1d1a      	adds	r2, r3, #4
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	9203      	str	r2, [sp, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bfb8      	it	lt
 800a63e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a642:	3402      	adds	r4, #2
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a72c <_vfiprintf_r+0x25c>
 800a64a:	7821      	ldrb	r1, [r4, #0]
 800a64c:	2203      	movs	r2, #3
 800a64e:	4650      	mov	r0, sl
 800a650:	f7f5 fdfe 	bl	8000250 <memchr>
 800a654:	b140      	cbz	r0, 800a668 <_vfiprintf_r+0x198>
 800a656:	2340      	movs	r3, #64	; 0x40
 800a658:	eba0 000a 	sub.w	r0, r0, sl
 800a65c:	fa03 f000 	lsl.w	r0, r3, r0
 800a660:	9b04      	ldr	r3, [sp, #16]
 800a662:	4303      	orrs	r3, r0
 800a664:	3401      	adds	r4, #1
 800a666:	9304      	str	r3, [sp, #16]
 800a668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66c:	482c      	ldr	r0, [pc, #176]	; (800a720 <_vfiprintf_r+0x250>)
 800a66e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a672:	2206      	movs	r2, #6
 800a674:	f7f5 fdec 	bl	8000250 <memchr>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d03f      	beq.n	800a6fc <_vfiprintf_r+0x22c>
 800a67c:	4b29      	ldr	r3, [pc, #164]	; (800a724 <_vfiprintf_r+0x254>)
 800a67e:	bb1b      	cbnz	r3, 800a6c8 <_vfiprintf_r+0x1f8>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	3307      	adds	r3, #7
 800a684:	f023 0307 	bic.w	r3, r3, #7
 800a688:	3308      	adds	r3, #8
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68e:	443b      	add	r3, r7
 800a690:	9309      	str	r3, [sp, #36]	; 0x24
 800a692:	e767      	b.n	800a564 <_vfiprintf_r+0x94>
 800a694:	fb0c 3202 	mla	r2, ip, r2, r3
 800a698:	460c      	mov	r4, r1
 800a69a:	2001      	movs	r0, #1
 800a69c:	e7a5      	b.n	800a5ea <_vfiprintf_r+0x11a>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	3401      	adds	r4, #1
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	f04f 0c0a 	mov.w	ip, #10
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b0:	3a30      	subs	r2, #48	; 0x30
 800a6b2:	2a09      	cmp	r2, #9
 800a6b4:	d903      	bls.n	800a6be <_vfiprintf_r+0x1ee>
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0c5      	beq.n	800a646 <_vfiprintf_r+0x176>
 800a6ba:	9105      	str	r1, [sp, #20]
 800a6bc:	e7c3      	b.n	800a646 <_vfiprintf_r+0x176>
 800a6be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e7f0      	b.n	800a6aa <_vfiprintf_r+0x1da>
 800a6c8:	ab03      	add	r3, sp, #12
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	462a      	mov	r2, r5
 800a6ce:	4b16      	ldr	r3, [pc, #88]	; (800a728 <_vfiprintf_r+0x258>)
 800a6d0:	a904      	add	r1, sp, #16
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7fe f910 	bl	80088f8 <_printf_float>
 800a6d8:	4607      	mov	r7, r0
 800a6da:	1c78      	adds	r0, r7, #1
 800a6dc:	d1d6      	bne.n	800a68c <_vfiprintf_r+0x1bc>
 800a6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e0:	07d9      	lsls	r1, r3, #31
 800a6e2:	d405      	bmi.n	800a6f0 <_vfiprintf_r+0x220>
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	059a      	lsls	r2, r3, #22
 800a6e8:	d402      	bmi.n	800a6f0 <_vfiprintf_r+0x220>
 800a6ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ec:	f7ff feb4 	bl	800a458 <__retarget_lock_release_recursive>
 800a6f0:	89ab      	ldrh	r3, [r5, #12]
 800a6f2:	065b      	lsls	r3, r3, #25
 800a6f4:	f53f af12 	bmi.w	800a51c <_vfiprintf_r+0x4c>
 800a6f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6fa:	e711      	b.n	800a520 <_vfiprintf_r+0x50>
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462a      	mov	r2, r5
 800a702:	4b09      	ldr	r3, [pc, #36]	; (800a728 <_vfiprintf_r+0x258>)
 800a704:	a904      	add	r1, sp, #16
 800a706:	4630      	mov	r0, r6
 800a708:	f7fe fb82 	bl	8008e10 <_printf_i>
 800a70c:	e7e4      	b.n	800a6d8 <_vfiprintf_r+0x208>
 800a70e:	bf00      	nop
 800a710:	0800b2f4 	.word	0x0800b2f4
 800a714:	0800b314 	.word	0x0800b314
 800a718:	0800b2d4 	.word	0x0800b2d4
 800a71c:	0800b1c2 	.word	0x0800b1c2
 800a720:	0800b1cc 	.word	0x0800b1cc
 800a724:	080088f9 	.word	0x080088f9
 800a728:	0800a4ad 	.word	0x0800a4ad
 800a72c:	0800b1c8 	.word	0x0800b1c8

0800a730 <__swbuf_r>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	460e      	mov	r6, r1
 800a734:	4614      	mov	r4, r2
 800a736:	4605      	mov	r5, r0
 800a738:	b118      	cbz	r0, 800a742 <__swbuf_r+0x12>
 800a73a:	6983      	ldr	r3, [r0, #24]
 800a73c:	b90b      	cbnz	r3, 800a742 <__swbuf_r+0x12>
 800a73e:	f000 f9e7 	bl	800ab10 <__sinit>
 800a742:	4b21      	ldr	r3, [pc, #132]	; (800a7c8 <__swbuf_r+0x98>)
 800a744:	429c      	cmp	r4, r3
 800a746:	d12b      	bne.n	800a7a0 <__swbuf_r+0x70>
 800a748:	686c      	ldr	r4, [r5, #4]
 800a74a:	69a3      	ldr	r3, [r4, #24]
 800a74c:	60a3      	str	r3, [r4, #8]
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	071a      	lsls	r2, r3, #28
 800a752:	d52f      	bpl.n	800a7b4 <__swbuf_r+0x84>
 800a754:	6923      	ldr	r3, [r4, #16]
 800a756:	b36b      	cbz	r3, 800a7b4 <__swbuf_r+0x84>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	6820      	ldr	r0, [r4, #0]
 800a75c:	1ac0      	subs	r0, r0, r3
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	b2f6      	uxtb	r6, r6
 800a762:	4283      	cmp	r3, r0
 800a764:	4637      	mov	r7, r6
 800a766:	dc04      	bgt.n	800a772 <__swbuf_r+0x42>
 800a768:	4621      	mov	r1, r4
 800a76a:	4628      	mov	r0, r5
 800a76c:	f000 f93c 	bl	800a9e8 <_fflush_r>
 800a770:	bb30      	cbnz	r0, 800a7c0 <__swbuf_r+0x90>
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	3b01      	subs	r3, #1
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	6022      	str	r2, [r4, #0]
 800a77e:	701e      	strb	r6, [r3, #0]
 800a780:	6963      	ldr	r3, [r4, #20]
 800a782:	3001      	adds	r0, #1
 800a784:	4283      	cmp	r3, r0
 800a786:	d004      	beq.n	800a792 <__swbuf_r+0x62>
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	07db      	lsls	r3, r3, #31
 800a78c:	d506      	bpl.n	800a79c <__swbuf_r+0x6c>
 800a78e:	2e0a      	cmp	r6, #10
 800a790:	d104      	bne.n	800a79c <__swbuf_r+0x6c>
 800a792:	4621      	mov	r1, r4
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f927 	bl	800a9e8 <_fflush_r>
 800a79a:	b988      	cbnz	r0, 800a7c0 <__swbuf_r+0x90>
 800a79c:	4638      	mov	r0, r7
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <__swbuf_r+0x9c>)
 800a7a2:	429c      	cmp	r4, r3
 800a7a4:	d101      	bne.n	800a7aa <__swbuf_r+0x7a>
 800a7a6:	68ac      	ldr	r4, [r5, #8]
 800a7a8:	e7cf      	b.n	800a74a <__swbuf_r+0x1a>
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <__swbuf_r+0xa0>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	bf08      	it	eq
 800a7b0:	68ec      	ldreq	r4, [r5, #12]
 800a7b2:	e7ca      	b.n	800a74a <__swbuf_r+0x1a>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	f000 f81a 	bl	800a7f0 <__swsetup_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d0cb      	beq.n	800a758 <__swbuf_r+0x28>
 800a7c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a7c4:	e7ea      	b.n	800a79c <__swbuf_r+0x6c>
 800a7c6:	bf00      	nop
 800a7c8:	0800b2f4 	.word	0x0800b2f4
 800a7cc:	0800b314 	.word	0x0800b314
 800a7d0:	0800b2d4 	.word	0x0800b2d4

0800a7d4 <__ascii_wctomb>:
 800a7d4:	b149      	cbz	r1, 800a7ea <__ascii_wctomb+0x16>
 800a7d6:	2aff      	cmp	r2, #255	; 0xff
 800a7d8:	bf85      	ittet	hi
 800a7da:	238a      	movhi	r3, #138	; 0x8a
 800a7dc:	6003      	strhi	r3, [r0, #0]
 800a7de:	700a      	strbls	r2, [r1, #0]
 800a7e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7e4:	bf98      	it	ls
 800a7e6:	2001      	movls	r0, #1
 800a7e8:	4770      	bx	lr
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <__swsetup_r>:
 800a7f0:	4b32      	ldr	r3, [pc, #200]	; (800a8bc <__swsetup_r+0xcc>)
 800a7f2:	b570      	push	{r4, r5, r6, lr}
 800a7f4:	681d      	ldr	r5, [r3, #0]
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460c      	mov	r4, r1
 800a7fa:	b125      	cbz	r5, 800a806 <__swsetup_r+0x16>
 800a7fc:	69ab      	ldr	r3, [r5, #24]
 800a7fe:	b913      	cbnz	r3, 800a806 <__swsetup_r+0x16>
 800a800:	4628      	mov	r0, r5
 800a802:	f000 f985 	bl	800ab10 <__sinit>
 800a806:	4b2e      	ldr	r3, [pc, #184]	; (800a8c0 <__swsetup_r+0xd0>)
 800a808:	429c      	cmp	r4, r3
 800a80a:	d10f      	bne.n	800a82c <__swsetup_r+0x3c>
 800a80c:	686c      	ldr	r4, [r5, #4]
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a814:	0719      	lsls	r1, r3, #28
 800a816:	d42c      	bmi.n	800a872 <__swsetup_r+0x82>
 800a818:	06dd      	lsls	r5, r3, #27
 800a81a:	d411      	bmi.n	800a840 <__swsetup_r+0x50>
 800a81c:	2309      	movs	r3, #9
 800a81e:	6033      	str	r3, [r6, #0]
 800a820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a824:	81a3      	strh	r3, [r4, #12]
 800a826:	f04f 30ff 	mov.w	r0, #4294967295
 800a82a:	e03e      	b.n	800a8aa <__swsetup_r+0xba>
 800a82c:	4b25      	ldr	r3, [pc, #148]	; (800a8c4 <__swsetup_r+0xd4>)
 800a82e:	429c      	cmp	r4, r3
 800a830:	d101      	bne.n	800a836 <__swsetup_r+0x46>
 800a832:	68ac      	ldr	r4, [r5, #8]
 800a834:	e7eb      	b.n	800a80e <__swsetup_r+0x1e>
 800a836:	4b24      	ldr	r3, [pc, #144]	; (800a8c8 <__swsetup_r+0xd8>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	bf08      	it	eq
 800a83c:	68ec      	ldreq	r4, [r5, #12]
 800a83e:	e7e6      	b.n	800a80e <__swsetup_r+0x1e>
 800a840:	0758      	lsls	r0, r3, #29
 800a842:	d512      	bpl.n	800a86a <__swsetup_r+0x7a>
 800a844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a846:	b141      	cbz	r1, 800a85a <__swsetup_r+0x6a>
 800a848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a84c:	4299      	cmp	r1, r3
 800a84e:	d002      	beq.n	800a856 <__swsetup_r+0x66>
 800a850:	4630      	mov	r0, r6
 800a852:	f7fd ff15 	bl	8008680 <_free_r>
 800a856:	2300      	movs	r3, #0
 800a858:	6363      	str	r3, [r4, #52]	; 0x34
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	2300      	movs	r3, #0
 800a864:	6063      	str	r3, [r4, #4]
 800a866:	6923      	ldr	r3, [r4, #16]
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f043 0308 	orr.w	r3, r3, #8
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	6923      	ldr	r3, [r4, #16]
 800a874:	b94b      	cbnz	r3, 800a88a <__swsetup_r+0x9a>
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a87c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a880:	d003      	beq.n	800a88a <__swsetup_r+0x9a>
 800a882:	4621      	mov	r1, r4
 800a884:	4630      	mov	r0, r6
 800a886:	f000 fa05 	bl	800ac94 <__smakebuf_r>
 800a88a:	89a0      	ldrh	r0, [r4, #12]
 800a88c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a890:	f010 0301 	ands.w	r3, r0, #1
 800a894:	d00a      	beq.n	800a8ac <__swsetup_r+0xbc>
 800a896:	2300      	movs	r3, #0
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	6963      	ldr	r3, [r4, #20]
 800a89c:	425b      	negs	r3, r3
 800a89e:	61a3      	str	r3, [r4, #24]
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	b943      	cbnz	r3, 800a8b6 <__swsetup_r+0xc6>
 800a8a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8a8:	d1ba      	bne.n	800a820 <__swsetup_r+0x30>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	0781      	lsls	r1, r0, #30
 800a8ae:	bf58      	it	pl
 800a8b0:	6963      	ldrpl	r3, [r4, #20]
 800a8b2:	60a3      	str	r3, [r4, #8]
 800a8b4:	e7f4      	b.n	800a8a0 <__swsetup_r+0xb0>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e7f7      	b.n	800a8aa <__swsetup_r+0xba>
 800a8ba:	bf00      	nop
 800a8bc:	20000064 	.word	0x20000064
 800a8c0:	0800b2f4 	.word	0x0800b2f4
 800a8c4:	0800b314 	.word	0x0800b314
 800a8c8:	0800b2d4 	.word	0x0800b2d4

0800a8cc <abort>:
 800a8cc:	b508      	push	{r3, lr}
 800a8ce:	2006      	movs	r0, #6
 800a8d0:	f000 fa48 	bl	800ad64 <raise>
 800a8d4:	2001      	movs	r0, #1
 800a8d6:	f7f7 f983 	bl	8001be0 <_exit>
	...

0800a8dc <__sflush_r>:
 800a8dc:	898a      	ldrh	r2, [r1, #12]
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	0710      	lsls	r0, r2, #28
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	d458      	bmi.n	800a99c <__sflush_r+0xc0>
 800a8ea:	684b      	ldr	r3, [r1, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dc05      	bgt.n	800a8fc <__sflush_r+0x20>
 800a8f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dc02      	bgt.n	800a8fc <__sflush_r+0x20>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fe:	2e00      	cmp	r6, #0
 800a900:	d0f9      	beq.n	800a8f6 <__sflush_r+0x1a>
 800a902:	2300      	movs	r3, #0
 800a904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a908:	682f      	ldr	r7, [r5, #0]
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	d032      	beq.n	800a974 <__sflush_r+0x98>
 800a90e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a910:	89a3      	ldrh	r3, [r4, #12]
 800a912:	075a      	lsls	r2, r3, #29
 800a914:	d505      	bpl.n	800a922 <__sflush_r+0x46>
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	1ac0      	subs	r0, r0, r3
 800a91a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a91c:	b10b      	cbz	r3, 800a922 <__sflush_r+0x46>
 800a91e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a920:	1ac0      	subs	r0, r0, r3
 800a922:	2300      	movs	r3, #0
 800a924:	4602      	mov	r2, r0
 800a926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a928:	6a21      	ldr	r1, [r4, #32]
 800a92a:	4628      	mov	r0, r5
 800a92c:	47b0      	blx	r6
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	d106      	bne.n	800a942 <__sflush_r+0x66>
 800a934:	6829      	ldr	r1, [r5, #0]
 800a936:	291d      	cmp	r1, #29
 800a938:	d82c      	bhi.n	800a994 <__sflush_r+0xb8>
 800a93a:	4a2a      	ldr	r2, [pc, #168]	; (800a9e4 <__sflush_r+0x108>)
 800a93c:	40ca      	lsrs	r2, r1
 800a93e:	07d6      	lsls	r6, r2, #31
 800a940:	d528      	bpl.n	800a994 <__sflush_r+0xb8>
 800a942:	2200      	movs	r2, #0
 800a944:	6062      	str	r2, [r4, #4]
 800a946:	04d9      	lsls	r1, r3, #19
 800a948:	6922      	ldr	r2, [r4, #16]
 800a94a:	6022      	str	r2, [r4, #0]
 800a94c:	d504      	bpl.n	800a958 <__sflush_r+0x7c>
 800a94e:	1c42      	adds	r2, r0, #1
 800a950:	d101      	bne.n	800a956 <__sflush_r+0x7a>
 800a952:	682b      	ldr	r3, [r5, #0]
 800a954:	b903      	cbnz	r3, 800a958 <__sflush_r+0x7c>
 800a956:	6560      	str	r0, [r4, #84]	; 0x54
 800a958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a95a:	602f      	str	r7, [r5, #0]
 800a95c:	2900      	cmp	r1, #0
 800a95e:	d0ca      	beq.n	800a8f6 <__sflush_r+0x1a>
 800a960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a964:	4299      	cmp	r1, r3
 800a966:	d002      	beq.n	800a96e <__sflush_r+0x92>
 800a968:	4628      	mov	r0, r5
 800a96a:	f7fd fe89 	bl	8008680 <_free_r>
 800a96e:	2000      	movs	r0, #0
 800a970:	6360      	str	r0, [r4, #52]	; 0x34
 800a972:	e7c1      	b.n	800a8f8 <__sflush_r+0x1c>
 800a974:	6a21      	ldr	r1, [r4, #32]
 800a976:	2301      	movs	r3, #1
 800a978:	4628      	mov	r0, r5
 800a97a:	47b0      	blx	r6
 800a97c:	1c41      	adds	r1, r0, #1
 800a97e:	d1c7      	bne.n	800a910 <__sflush_r+0x34>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0c4      	beq.n	800a910 <__sflush_r+0x34>
 800a986:	2b1d      	cmp	r3, #29
 800a988:	d001      	beq.n	800a98e <__sflush_r+0xb2>
 800a98a:	2b16      	cmp	r3, #22
 800a98c:	d101      	bne.n	800a992 <__sflush_r+0xb6>
 800a98e:	602f      	str	r7, [r5, #0]
 800a990:	e7b1      	b.n	800a8f6 <__sflush_r+0x1a>
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	e7ad      	b.n	800a8f8 <__sflush_r+0x1c>
 800a99c:	690f      	ldr	r7, [r1, #16]
 800a99e:	2f00      	cmp	r7, #0
 800a9a0:	d0a9      	beq.n	800a8f6 <__sflush_r+0x1a>
 800a9a2:	0793      	lsls	r3, r2, #30
 800a9a4:	680e      	ldr	r6, [r1, #0]
 800a9a6:	bf08      	it	eq
 800a9a8:	694b      	ldreq	r3, [r1, #20]
 800a9aa:	600f      	str	r7, [r1, #0]
 800a9ac:	bf18      	it	ne
 800a9ae:	2300      	movne	r3, #0
 800a9b0:	eba6 0807 	sub.w	r8, r6, r7
 800a9b4:	608b      	str	r3, [r1, #8]
 800a9b6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ba:	dd9c      	ble.n	800a8f6 <__sflush_r+0x1a>
 800a9bc:	6a21      	ldr	r1, [r4, #32]
 800a9be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9c0:	4643      	mov	r3, r8
 800a9c2:	463a      	mov	r2, r7
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b0      	blx	r6
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dc06      	bgt.n	800a9da <__sflush_r+0xfe>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d2:	81a3      	strh	r3, [r4, #12]
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	e78e      	b.n	800a8f8 <__sflush_r+0x1c>
 800a9da:	4407      	add	r7, r0
 800a9dc:	eba8 0800 	sub.w	r8, r8, r0
 800a9e0:	e7e9      	b.n	800a9b6 <__sflush_r+0xda>
 800a9e2:	bf00      	nop
 800a9e4:	20400001 	.word	0x20400001

0800a9e8 <_fflush_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	690b      	ldr	r3, [r1, #16]
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	b913      	cbnz	r3, 800a9f8 <_fflush_r+0x10>
 800a9f2:	2500      	movs	r5, #0
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	bd38      	pop	{r3, r4, r5, pc}
 800a9f8:	b118      	cbz	r0, 800aa02 <_fflush_r+0x1a>
 800a9fa:	6983      	ldr	r3, [r0, #24]
 800a9fc:	b90b      	cbnz	r3, 800aa02 <_fflush_r+0x1a>
 800a9fe:	f000 f887 	bl	800ab10 <__sinit>
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <_fflush_r+0x6c>)
 800aa04:	429c      	cmp	r4, r3
 800aa06:	d11b      	bne.n	800aa40 <_fflush_r+0x58>
 800aa08:	686c      	ldr	r4, [r5, #4]
 800aa0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d0ef      	beq.n	800a9f2 <_fflush_r+0xa>
 800aa12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa14:	07d0      	lsls	r0, r2, #31
 800aa16:	d404      	bmi.n	800aa22 <_fflush_r+0x3a>
 800aa18:	0599      	lsls	r1, r3, #22
 800aa1a:	d402      	bmi.n	800aa22 <_fflush_r+0x3a>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1e:	f7ff fd1a 	bl	800a456 <__retarget_lock_acquire_recursive>
 800aa22:	4628      	mov	r0, r5
 800aa24:	4621      	mov	r1, r4
 800aa26:	f7ff ff59 	bl	800a8dc <__sflush_r>
 800aa2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa2c:	07da      	lsls	r2, r3, #31
 800aa2e:	4605      	mov	r5, r0
 800aa30:	d4e0      	bmi.n	800a9f4 <_fflush_r+0xc>
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	059b      	lsls	r3, r3, #22
 800aa36:	d4dd      	bmi.n	800a9f4 <_fflush_r+0xc>
 800aa38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa3a:	f7ff fd0d 	bl	800a458 <__retarget_lock_release_recursive>
 800aa3e:	e7d9      	b.n	800a9f4 <_fflush_r+0xc>
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <_fflush_r+0x70>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d101      	bne.n	800aa4a <_fflush_r+0x62>
 800aa46:	68ac      	ldr	r4, [r5, #8]
 800aa48:	e7df      	b.n	800aa0a <_fflush_r+0x22>
 800aa4a:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <_fflush_r+0x74>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	bf08      	it	eq
 800aa50:	68ec      	ldreq	r4, [r5, #12]
 800aa52:	e7da      	b.n	800aa0a <_fflush_r+0x22>
 800aa54:	0800b2f4 	.word	0x0800b2f4
 800aa58:	0800b314 	.word	0x0800b314
 800aa5c:	0800b2d4 	.word	0x0800b2d4

0800aa60 <std>:
 800aa60:	2300      	movs	r3, #0
 800aa62:	b510      	push	{r4, lr}
 800aa64:	4604      	mov	r4, r0
 800aa66:	e9c0 3300 	strd	r3, r3, [r0]
 800aa6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa6e:	6083      	str	r3, [r0, #8]
 800aa70:	8181      	strh	r1, [r0, #12]
 800aa72:	6643      	str	r3, [r0, #100]	; 0x64
 800aa74:	81c2      	strh	r2, [r0, #14]
 800aa76:	6183      	str	r3, [r0, #24]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	2208      	movs	r2, #8
 800aa7c:	305c      	adds	r0, #92	; 0x5c
 800aa7e:	f7fd fdf7 	bl	8008670 <memset>
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <std+0x38>)
 800aa84:	6263      	str	r3, [r4, #36]	; 0x24
 800aa86:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <std+0x3c>)
 800aa88:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <std+0x40>)
 800aa8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <std+0x44>)
 800aa90:	6224      	str	r4, [r4, #32]
 800aa92:	6323      	str	r3, [r4, #48]	; 0x30
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	bf00      	nop
 800aa98:	0800ad9d 	.word	0x0800ad9d
 800aa9c:	0800adbf 	.word	0x0800adbf
 800aaa0:	0800adf7 	.word	0x0800adf7
 800aaa4:	0800ae1b 	.word	0x0800ae1b

0800aaa8 <_cleanup_r>:
 800aaa8:	4901      	ldr	r1, [pc, #4]	; (800aab0 <_cleanup_r+0x8>)
 800aaaa:	f000 b8af 	b.w	800ac0c <_fwalk_reent>
 800aaae:	bf00      	nop
 800aab0:	0800a9e9 	.word	0x0800a9e9

0800aab4 <__sfmoreglue>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	1e4a      	subs	r2, r1, #1
 800aab8:	2568      	movs	r5, #104	; 0x68
 800aaba:	4355      	muls	r5, r2
 800aabc:	460e      	mov	r6, r1
 800aabe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aac2:	f7fd fe2d 	bl	8008720 <_malloc_r>
 800aac6:	4604      	mov	r4, r0
 800aac8:	b140      	cbz	r0, 800aadc <__sfmoreglue+0x28>
 800aaca:	2100      	movs	r1, #0
 800aacc:	e9c0 1600 	strd	r1, r6, [r0]
 800aad0:	300c      	adds	r0, #12
 800aad2:	60a0      	str	r0, [r4, #8]
 800aad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aad8:	f7fd fdca 	bl	8008670 <memset>
 800aadc:	4620      	mov	r0, r4
 800aade:	bd70      	pop	{r4, r5, r6, pc}

0800aae0 <__sfp_lock_acquire>:
 800aae0:	4801      	ldr	r0, [pc, #4]	; (800aae8 <__sfp_lock_acquire+0x8>)
 800aae2:	f7ff bcb8 	b.w	800a456 <__retarget_lock_acquire_recursive>
 800aae6:	bf00      	nop
 800aae8:	200007fc 	.word	0x200007fc

0800aaec <__sfp_lock_release>:
 800aaec:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <__sfp_lock_release+0x8>)
 800aaee:	f7ff bcb3 	b.w	800a458 <__retarget_lock_release_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	200007fc 	.word	0x200007fc

0800aaf8 <__sinit_lock_acquire>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__sinit_lock_acquire+0x8>)
 800aafa:	f7ff bcac 	b.w	800a456 <__retarget_lock_acquire_recursive>
 800aafe:	bf00      	nop
 800ab00:	200007f7 	.word	0x200007f7

0800ab04 <__sinit_lock_release>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__sinit_lock_release+0x8>)
 800ab06:	f7ff bca7 	b.w	800a458 <__retarget_lock_release_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	200007f7 	.word	0x200007f7

0800ab10 <__sinit>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	4604      	mov	r4, r0
 800ab14:	f7ff fff0 	bl	800aaf8 <__sinit_lock_acquire>
 800ab18:	69a3      	ldr	r3, [r4, #24]
 800ab1a:	b11b      	cbz	r3, 800ab24 <__sinit+0x14>
 800ab1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab20:	f7ff bff0 	b.w	800ab04 <__sinit_lock_release>
 800ab24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab28:	6523      	str	r3, [r4, #80]	; 0x50
 800ab2a:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <__sinit+0x68>)
 800ab2c:	4a13      	ldr	r2, [pc, #76]	; (800ab7c <__sinit+0x6c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab32:	42a3      	cmp	r3, r4
 800ab34:	bf04      	itt	eq
 800ab36:	2301      	moveq	r3, #1
 800ab38:	61a3      	streq	r3, [r4, #24]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 f820 	bl	800ab80 <__sfp>
 800ab40:	6060      	str	r0, [r4, #4]
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f81c 	bl	800ab80 <__sfp>
 800ab48:	60a0      	str	r0, [r4, #8]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f818 	bl	800ab80 <__sfp>
 800ab50:	2200      	movs	r2, #0
 800ab52:	60e0      	str	r0, [r4, #12]
 800ab54:	2104      	movs	r1, #4
 800ab56:	6860      	ldr	r0, [r4, #4]
 800ab58:	f7ff ff82 	bl	800aa60 <std>
 800ab5c:	68a0      	ldr	r0, [r4, #8]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	2109      	movs	r1, #9
 800ab62:	f7ff ff7d 	bl	800aa60 <std>
 800ab66:	68e0      	ldr	r0, [r4, #12]
 800ab68:	2202      	movs	r2, #2
 800ab6a:	2112      	movs	r1, #18
 800ab6c:	f7ff ff78 	bl	800aa60 <std>
 800ab70:	2301      	movs	r3, #1
 800ab72:	61a3      	str	r3, [r4, #24]
 800ab74:	e7d2      	b.n	800ab1c <__sinit+0xc>
 800ab76:	bf00      	nop
 800ab78:	0800af50 	.word	0x0800af50
 800ab7c:	0800aaa9 	.word	0x0800aaa9

0800ab80 <__sfp>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	4607      	mov	r7, r0
 800ab84:	f7ff ffac 	bl	800aae0 <__sfp_lock_acquire>
 800ab88:	4b1e      	ldr	r3, [pc, #120]	; (800ac04 <__sfp+0x84>)
 800ab8a:	681e      	ldr	r6, [r3, #0]
 800ab8c:	69b3      	ldr	r3, [r6, #24]
 800ab8e:	b913      	cbnz	r3, 800ab96 <__sfp+0x16>
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff ffbd 	bl	800ab10 <__sinit>
 800ab96:	3648      	adds	r6, #72	; 0x48
 800ab98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	d503      	bpl.n	800aba8 <__sfp+0x28>
 800aba0:	6833      	ldr	r3, [r6, #0]
 800aba2:	b30b      	cbz	r3, 800abe8 <__sfp+0x68>
 800aba4:	6836      	ldr	r6, [r6, #0]
 800aba6:	e7f7      	b.n	800ab98 <__sfp+0x18>
 800aba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abac:	b9d5      	cbnz	r5, 800abe4 <__sfp+0x64>
 800abae:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <__sfp+0x88>)
 800abb0:	60e3      	str	r3, [r4, #12]
 800abb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abb6:	6665      	str	r5, [r4, #100]	; 0x64
 800abb8:	f7ff fc4c 	bl	800a454 <__retarget_lock_init_recursive>
 800abbc:	f7ff ff96 	bl	800aaec <__sfp_lock_release>
 800abc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abc8:	6025      	str	r5, [r4, #0]
 800abca:	61a5      	str	r5, [r4, #24]
 800abcc:	2208      	movs	r2, #8
 800abce:	4629      	mov	r1, r5
 800abd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abd4:	f7fd fd4c 	bl	8008670 <memset>
 800abd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abe0:	4620      	mov	r0, r4
 800abe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abe4:	3468      	adds	r4, #104	; 0x68
 800abe6:	e7d9      	b.n	800ab9c <__sfp+0x1c>
 800abe8:	2104      	movs	r1, #4
 800abea:	4638      	mov	r0, r7
 800abec:	f7ff ff62 	bl	800aab4 <__sfmoreglue>
 800abf0:	4604      	mov	r4, r0
 800abf2:	6030      	str	r0, [r6, #0]
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1d5      	bne.n	800aba4 <__sfp+0x24>
 800abf8:	f7ff ff78 	bl	800aaec <__sfp_lock_release>
 800abfc:	230c      	movs	r3, #12
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	e7ee      	b.n	800abe0 <__sfp+0x60>
 800ac02:	bf00      	nop
 800ac04:	0800af50 	.word	0x0800af50
 800ac08:	ffff0001 	.word	0xffff0001

0800ac0c <_fwalk_reent>:
 800ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	4606      	mov	r6, r0
 800ac12:	4688      	mov	r8, r1
 800ac14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac18:	2700      	movs	r7, #0
 800ac1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac1e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac22:	d505      	bpl.n	800ac30 <_fwalk_reent+0x24>
 800ac24:	6824      	ldr	r4, [r4, #0]
 800ac26:	2c00      	cmp	r4, #0
 800ac28:	d1f7      	bne.n	800ac1a <_fwalk_reent+0xe>
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac30:	89ab      	ldrh	r3, [r5, #12]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d907      	bls.n	800ac46 <_fwalk_reent+0x3a>
 800ac36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	d003      	beq.n	800ac46 <_fwalk_reent+0x3a>
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4630      	mov	r0, r6
 800ac42:	47c0      	blx	r8
 800ac44:	4307      	orrs	r7, r0
 800ac46:	3568      	adds	r5, #104	; 0x68
 800ac48:	e7e9      	b.n	800ac1e <_fwalk_reent+0x12>

0800ac4a <__swhatbuf_r>:
 800ac4a:	b570      	push	{r4, r5, r6, lr}
 800ac4c:	460e      	mov	r6, r1
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	2900      	cmp	r1, #0
 800ac54:	b096      	sub	sp, #88	; 0x58
 800ac56:	4614      	mov	r4, r2
 800ac58:	461d      	mov	r5, r3
 800ac5a:	da07      	bge.n	800ac6c <__swhatbuf_r+0x22>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	89b3      	ldrh	r3, [r6, #12]
 800ac62:	061a      	lsls	r2, r3, #24
 800ac64:	d410      	bmi.n	800ac88 <__swhatbuf_r+0x3e>
 800ac66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6a:	e00e      	b.n	800ac8a <__swhatbuf_r+0x40>
 800ac6c:	466a      	mov	r2, sp
 800ac6e:	f000 f8fb 	bl	800ae68 <_fstat_r>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	dbf2      	blt.n	800ac5c <__swhatbuf_r+0x12>
 800ac76:	9a01      	ldr	r2, [sp, #4]
 800ac78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ac7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ac80:	425a      	negs	r2, r3
 800ac82:	415a      	adcs	r2, r3
 800ac84:	602a      	str	r2, [r5, #0]
 800ac86:	e7ee      	b.n	800ac66 <__swhatbuf_r+0x1c>
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	2000      	movs	r0, #0
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	b016      	add	sp, #88	; 0x58
 800ac90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac94 <__smakebuf_r>:
 800ac94:	898b      	ldrh	r3, [r1, #12]
 800ac96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac98:	079d      	lsls	r5, r3, #30
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	d507      	bpl.n	800acb0 <__smakebuf_r+0x1c>
 800aca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	2301      	movs	r3, #1
 800acaa:	6163      	str	r3, [r4, #20]
 800acac:	b002      	add	sp, #8
 800acae:	bd70      	pop	{r4, r5, r6, pc}
 800acb0:	ab01      	add	r3, sp, #4
 800acb2:	466a      	mov	r2, sp
 800acb4:	f7ff ffc9 	bl	800ac4a <__swhatbuf_r>
 800acb8:	9900      	ldr	r1, [sp, #0]
 800acba:	4605      	mov	r5, r0
 800acbc:	4630      	mov	r0, r6
 800acbe:	f7fd fd2f 	bl	8008720 <_malloc_r>
 800acc2:	b948      	cbnz	r0, 800acd8 <__smakebuf_r+0x44>
 800acc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc8:	059a      	lsls	r2, r3, #22
 800acca:	d4ef      	bmi.n	800acac <__smakebuf_r+0x18>
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	f043 0302 	orr.w	r3, r3, #2
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	e7e3      	b.n	800aca0 <__smakebuf_r+0xc>
 800acd8:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <__smakebuf_r+0x7c>)
 800acda:	62b3      	str	r3, [r6, #40]	; 0x28
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	6020      	str	r0, [r4, #0]
 800ace0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	9b00      	ldr	r3, [sp, #0]
 800ace8:	6163      	str	r3, [r4, #20]
 800acea:	9b01      	ldr	r3, [sp, #4]
 800acec:	6120      	str	r0, [r4, #16]
 800acee:	b15b      	cbz	r3, 800ad08 <__smakebuf_r+0x74>
 800acf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acf4:	4630      	mov	r0, r6
 800acf6:	f000 f8c9 	bl	800ae8c <_isatty_r>
 800acfa:	b128      	cbz	r0, 800ad08 <__smakebuf_r+0x74>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	f023 0303 	bic.w	r3, r3, #3
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	81a3      	strh	r3, [r4, #12]
 800ad08:	89a0      	ldrh	r0, [r4, #12]
 800ad0a:	4305      	orrs	r5, r0
 800ad0c:	81a5      	strh	r5, [r4, #12]
 800ad0e:	e7cd      	b.n	800acac <__smakebuf_r+0x18>
 800ad10:	0800aaa9 	.word	0x0800aaa9

0800ad14 <_raise_r>:
 800ad14:	291f      	cmp	r1, #31
 800ad16:	b538      	push	{r3, r4, r5, lr}
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460d      	mov	r5, r1
 800ad1c:	d904      	bls.n	800ad28 <_raise_r+0x14>
 800ad1e:	2316      	movs	r3, #22
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad2a:	b112      	cbz	r2, 800ad32 <_raise_r+0x1e>
 800ad2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad30:	b94b      	cbnz	r3, 800ad46 <_raise_r+0x32>
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 f830 	bl	800ad98 <_getpid_r>
 800ad38:	462a      	mov	r2, r5
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad42:	f000 b817 	b.w	800ad74 <_kill_r>
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d00a      	beq.n	800ad60 <_raise_r+0x4c>
 800ad4a:	1c59      	adds	r1, r3, #1
 800ad4c:	d103      	bne.n	800ad56 <_raise_r+0x42>
 800ad4e:	2316      	movs	r3, #22
 800ad50:	6003      	str	r3, [r0, #0]
 800ad52:	2001      	movs	r0, #1
 800ad54:	e7e7      	b.n	800ad26 <_raise_r+0x12>
 800ad56:	2400      	movs	r4, #0
 800ad58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	4798      	blx	r3
 800ad60:	2000      	movs	r0, #0
 800ad62:	e7e0      	b.n	800ad26 <_raise_r+0x12>

0800ad64 <raise>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <raise+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f7ff bfd3 	b.w	800ad14 <_raise_r>
 800ad6e:	bf00      	nop
 800ad70:	20000064 	.word	0x20000064

0800ad74 <_kill_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d07      	ldr	r5, [pc, #28]	; (800ad94 <_kill_r+0x20>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	4611      	mov	r1, r2
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	f7f6 ff1d 	bl	8001bc0 <_kill>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	d102      	bne.n	800ad90 <_kill_r+0x1c>
 800ad8a:	682b      	ldr	r3, [r5, #0]
 800ad8c:	b103      	cbz	r3, 800ad90 <_kill_r+0x1c>
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	bd38      	pop	{r3, r4, r5, pc}
 800ad92:	bf00      	nop
 800ad94:	200007f0 	.word	0x200007f0

0800ad98 <_getpid_r>:
 800ad98:	f7f6 bf0a 	b.w	8001bb0 <_getpid>

0800ad9c <__sread>:
 800ad9c:	b510      	push	{r4, lr}
 800ad9e:	460c      	mov	r4, r1
 800ada0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada4:	f000 f894 	bl	800aed0 <_read_r>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	bfab      	itete	ge
 800adac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adae:	89a3      	ldrhlt	r3, [r4, #12]
 800adb0:	181b      	addge	r3, r3, r0
 800adb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adb6:	bfac      	ite	ge
 800adb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800adba:	81a3      	strhlt	r3, [r4, #12]
 800adbc:	bd10      	pop	{r4, pc}

0800adbe <__swrite>:
 800adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	461f      	mov	r7, r3
 800adc4:	898b      	ldrh	r3, [r1, #12]
 800adc6:	05db      	lsls	r3, r3, #23
 800adc8:	4605      	mov	r5, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	4616      	mov	r6, r2
 800adce:	d505      	bpl.n	800addc <__swrite+0x1e>
 800add0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add4:	2302      	movs	r3, #2
 800add6:	2200      	movs	r2, #0
 800add8:	f000 f868 	bl	800aeac <_lseek_r>
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	4632      	mov	r2, r6
 800adea:	463b      	mov	r3, r7
 800adec:	4628      	mov	r0, r5
 800adee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adf2:	f000 b817 	b.w	800ae24 <_write_r>

0800adf6 <__sseek>:
 800adf6:	b510      	push	{r4, lr}
 800adf8:	460c      	mov	r4, r1
 800adfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adfe:	f000 f855 	bl	800aeac <_lseek_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	bf15      	itete	ne
 800ae08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae12:	81a3      	strheq	r3, [r4, #12]
 800ae14:	bf18      	it	ne
 800ae16:	81a3      	strhne	r3, [r4, #12]
 800ae18:	bd10      	pop	{r4, pc}

0800ae1a <__sclose>:
 800ae1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1e:	f000 b813 	b.w	800ae48 <_close_r>
	...

0800ae24 <_write_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d07      	ldr	r5, [pc, #28]	; (800ae44 <_write_r+0x20>)
 800ae28:	4604      	mov	r4, r0
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	2200      	movs	r2, #0
 800ae30:	602a      	str	r2, [r5, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7f6 fefb 	bl	8001c2e <_write>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_write_r+0x1e>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_write_r+0x1e>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	200007f0 	.word	0x200007f0

0800ae48 <_close_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	; (800ae64 <_close_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f6 ff07 	bl	8001c66 <_close>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_close_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_close_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	200007f0 	.word	0x200007f0

0800ae68 <_fstat_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4d07      	ldr	r5, [pc, #28]	; (800ae88 <_fstat_r+0x20>)
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4604      	mov	r4, r0
 800ae70:	4608      	mov	r0, r1
 800ae72:	4611      	mov	r1, r2
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	f7f6 ff02 	bl	8001c7e <_fstat>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d102      	bne.n	800ae84 <_fstat_r+0x1c>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	b103      	cbz	r3, 800ae84 <_fstat_r+0x1c>
 800ae82:	6023      	str	r3, [r4, #0]
 800ae84:	bd38      	pop	{r3, r4, r5, pc}
 800ae86:	bf00      	nop
 800ae88:	200007f0 	.word	0x200007f0

0800ae8c <_isatty_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4d06      	ldr	r5, [pc, #24]	; (800aea8 <_isatty_r+0x1c>)
 800ae90:	2300      	movs	r3, #0
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	602b      	str	r3, [r5, #0]
 800ae98:	f7f6 ff01 	bl	8001c9e <_isatty>
 800ae9c:	1c43      	adds	r3, r0, #1
 800ae9e:	d102      	bne.n	800aea6 <_isatty_r+0x1a>
 800aea0:	682b      	ldr	r3, [r5, #0]
 800aea2:	b103      	cbz	r3, 800aea6 <_isatty_r+0x1a>
 800aea4:	6023      	str	r3, [r4, #0]
 800aea6:	bd38      	pop	{r3, r4, r5, pc}
 800aea8:	200007f0 	.word	0x200007f0

0800aeac <_lseek_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d07      	ldr	r5, [pc, #28]	; (800aecc <_lseek_r+0x20>)
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	4608      	mov	r0, r1
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	602a      	str	r2, [r5, #0]
 800aeba:	461a      	mov	r2, r3
 800aebc:	f7f6 fefa 	bl	8001cb4 <_lseek>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_lseek_r+0x1e>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_lseek_r+0x1e>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	200007f0 	.word	0x200007f0

0800aed0 <_read_r>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	4d07      	ldr	r5, [pc, #28]	; (800aef0 <_read_r+0x20>)
 800aed4:	4604      	mov	r4, r0
 800aed6:	4608      	mov	r0, r1
 800aed8:	4611      	mov	r1, r2
 800aeda:	2200      	movs	r2, #0
 800aedc:	602a      	str	r2, [r5, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f7f6 fe88 	bl	8001bf4 <_read>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d102      	bne.n	800aeee <_read_r+0x1e>
 800aee8:	682b      	ldr	r3, [r5, #0]
 800aeea:	b103      	cbz	r3, 800aeee <_read_r+0x1e>
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	bd38      	pop	{r3, r4, r5, pc}
 800aef0:	200007f0 	.word	0x200007f0

0800aef4 <_init>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr

0800af00 <_fini>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr
>>>>>>> fsm_rd_rfid
