<<<<<<< HEAD

fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009998  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009b98  08009b98  00019b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa4  08009fa4  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa4  08009fa4  00019fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fac  08009fac  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000238  0800a1ec  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800a1ec  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021982  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047df  00000000  00000000  00041be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  000463c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  00047938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c26e  00000000  00000000  00048c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfd1  00000000  00000000  00074efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010672b  00000000  00000000  00091ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001985fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062ac  00000000  00000000  00198650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b80 	.word	0x08009b80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	08009b80 	.word	0x08009b80

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC2_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC2_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC2_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC2_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC2_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC2_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC2_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC2_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC2_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC2_Init+0x98>)
 800064a:	f001 fd89 	bl	8002160 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fc2c 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC2_Init+0x98>)
 800066a:	f002 f87b 	bl	8002764 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fc1c 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000290 	.word	0x20000290
 8000684:	40012100 	.word	0x40012100
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fd37 	bl	8002160 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fbda 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000704:	2306      	movs	r3, #6
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f002 f829 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fbca 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f002 f81b 	bl	8002764 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fbbc 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f002 f80d 	bl	8002764 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fbae 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f001 ffff 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fba0 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f001 fff1 	bl	8002764 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fb92 	bl	8000eb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f001 ffe3 	bl	8002764 <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fb84 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000338 	.word	0x20000338
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <HAL_ADC_MspInit+0x210>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d15d      	bne.n	800089a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a75      	ldr	r2, [pc, #468]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	486c      	ldr	r0, [pc, #432]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 8000822:	f002 ff8b 	bl	800373c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000828:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <HAL_ADC_MspInit+0x220>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800086e:	f002 fb5b 	bl	8002f28 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000878:	f000 fb1a 	bl	8000eb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a55      	ldr	r2, [pc, #340]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2012      	movs	r0, #18
 800088e:	f002 fb14 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000892:	2012      	movs	r0, #18
 8000894:	f002 fb2d 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000898:	e093      	b.n	80009c2 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <HAL_ADC_MspInit+0x224>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f040 808e 	bne.w	80009c2 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 8000906:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <HAL_ADC_MspInit+0x228>)
 800091c:	f002 ff0e 	bl	800373c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_ADC_MspInit+0x22c>)
 8000934:	f002 ff02 	bl	800373c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 800094c:	f002 fef6 	bl	800373c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0x234>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000998:	f002 fac6 	bl	8002f28 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009a2:	f000 fa85 	bl	8000eb0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2012      	movs	r0, #18
 80009b8:	f002 fa7f 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009bc:	2012      	movs	r0, #18
 80009be:	f002 fa98 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012100 	.word	0x40012100
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	20000380 	.word	0x20000380
 80009dc:	40026440 	.word	0x40026440
 80009e0:	40012200 	.word	0x40012200
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	200002d8 	.word	0x200002d8
 80009f0:	40026428 	.word	0x40026428

080009f4 <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	891b      	ldrh	r3, [r3, #8]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f003 f844 	bl	8003a94 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	785a      	ldrb	r2, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	11db      	asrs	r3, r3, #7
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	f1c3 0304 	rsb	r3, r3, #4
 8000a58:	11db      	asrs	r3, r3, #7
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <debounce_isr>:

//	if(htim -> Instance == TIM6){

void debounce_isr(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <debounce_isr+0x44>)
 8000a78:	f7ff ffbc 	bl	80009f4 <debounce>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 1;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 0;

	button.pin_output = state * ((~pre_state) & 0x01);
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <debounce_isr+0x48>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	fb12 f303 	smulbb	r3, r2, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <debounce_isr+0x44>)
 8000a9e:	729a      	strb	r2, [r3, #10]

	// update previous button state
	pre_state = state;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <debounce_isr+0x48>)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	7013      	strb	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200004a8 	.word	0x200004a8
 8000ab4:	20000254 	.word	0x20000254

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2039      	movs	r0, #57	; 0x39
 8000adc:	f002 f9ed 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae0:	2039      	movs	r0, #57	; 0x39
 8000ae2:	f002 fa06 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	203a      	movs	r0, #58	; 0x3a
 8000aec:	f002 f9e5 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af0:	203a      	movs	r0, #58	; 0x3a
 8000af2:	f002 f9fe 	bl	8002ef2 <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2160      	movs	r1, #96	; 0x60
 8000b96:	482d      	ldr	r0, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000b98:	f002 ff94 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 2181 	movw	r1, #17025	; 0x4281
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000ba4:	f002 ff8e 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f244 0104 	movw	r1, #16388	; 0x4004
 8000bae:	4829      	ldr	r0, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000bb0:	f002 ff88 	bl	8003ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000bc8:	f002 fdb8 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000be4:	f002 fdaa 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000be8:	f244 2381 	movw	r3, #17025	; 0x4281
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000c02:	f002 fd9b 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000c06:	f244 0304 	movw	r3, #16388	; 0x4004
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000c20:	f002 fd8c 	bl	800373c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000c3a:	f002 fd7f 	bl	800373c <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020800 	.word	0x40020800

08000c5c <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <lfollower_start+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d007      	beq.n	8000c78 <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 8000c68:	f000 fb18 	bl	800129c <qtr_init>
	// start movement
	move_start();
 8000c6c:	f000 f9f4 	bl	8001058 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <lfollower_start+0x20>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e000      	b.n	8000c7a <lfollower_start+0x1e>
		return;
 8000c78:	bf00      	nop
}
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000257 	.word	0x20000257

08000c80 <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lfollower_stop+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d007      	beq.n	8000c9c <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 8000c8c:	f000 fb14 	bl	80012b8 <qtr_kill>
	// stop movement
	move_stop();
 8000c90:	f000 f9f6 	bl	8001080 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <lfollower_stop+0x20>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e000      	b.n	8000c9e <lfollower_stop+0x1e>
		return;
 8000c9c:	bf00      	nop
}
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000257 	.word	0x20000257

08000ca4 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	ed2d 8b02 	vpush	{d8}
 8000caa:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <lfollower_isr+0x80>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e02f      	b.n	8000d18 <lfollower_isr+0x74>
//	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f000 fb41 	bl	8001340 <qtr_get_analog>
 8000cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fb3c 	bl	8001340 <qtr_get_analog>
 8000cc8:	eef0 7a40 	vmov.f32	s15, s0
 8000ccc:	eef0 0a67 	vmov.f32	s1, s15
 8000cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <lfollower_isr+0x84>)
 8000cd6:	f000 fa55 	bl	8001184 <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <lfollower_isr+0x84>)
 8000cdc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ce0:	eef1 7a67 	vneg.f32	s15, s15
 8000ce4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d2c <lfollower_isr+0x88>
 8000ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d30 <lfollower_isr+0x8c>
 8000cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <lfollower_isr+0x84>)
 8000cf6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cfa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d2c <lfollower_isr+0x88>
 8000cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d02:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d30 <lfollower_isr+0x8c>
 8000d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d0a:	eef0 0a67 	vmov.f32	s1, s15
 8000d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d12:	f000 f9c9 	bl	80010a8 <move_control>

	return EXIT_SUCCESS;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	ecbd 8b02 	vpop	{d8}
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000257 	.word	0x20000257
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	3e99999a 	.word	0x3e99999a
 8000d30:	3f333333 	.word	0x3f333333

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f001 f990 	bl	800205e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f825 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f7ff fedf 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d46:	f7ff feb7 	bl	8000ab8 <MX_DMA_Init>
  MX_SPI3_Init();
 8000d4a:	f000 fb23 	bl	8001394 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000d4e:	f001 f895 	bl	8001e7c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000d52:	f000 fec3 	bl	8001adc <MX_TIM6_Init>
  MX_ADC3_Init();
 8000d56:	f7ff fc99 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000d5a:	f000 fe5b 	bl	8001a14 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d5e:	f001 f85d 	bl	8001e1c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d62:	f000 fe07 	bl	8001974 <MX_TIM3_Init>
  MX_ADC2_Init();
 8000d66:	f7ff fc3f 	bl	80005e8 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <main+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <main+0x54>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

  int err = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]

  while (1)
  {
	err = test_modules();
 8000d7a:	f000 fded 	bl	8001958 <test_modules>
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	e7fb      	b.n	8000d7a <main+0x46>
 8000d82:	bf00      	nop
 8000d84:	20000255 	.word	0x20000255
 8000d88:	20000256 	.word	0x20000256

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0b8      	sub	sp, #224	; 0xe0
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d96:	2234      	movs	r2, #52	; 0x34
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fab6 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2290      	movs	r2, #144	; 0x90
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 faa7 	bl	800730c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ea8 <SystemClock_Config+0x11c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a39      	ldr	r2, [pc, #228]	; (8000ea8 <SystemClock_Config+0x11c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <SystemClock_Config+0x11c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <SystemClock_Config+0x120>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a34      	ldr	r2, [pc, #208]	; (8000eac <SystemClock_Config+0x120>)
 8000ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b32      	ldr	r3, [pc, #200]	; (8000eac <SystemClock_Config+0x120>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e12:	23d8      	movs	r3, #216	; 0xd8
 8000e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fecf 	bl	8003bcc <HAL_RCC_OscConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e34:	f000 f83c 	bl	8000eb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e38:	f002 fe78 	bl	8003b2c <HAL_PWREx_EnableOverDrive>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e42:	f000 f835 	bl	8000eb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e68:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e6c:	2107      	movs	r1, #7
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 f95a 	bl	8004128 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e7a:	f000 f819 	bl	8000eb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000e7e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e82:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e84:	2300      	movs	r3, #0
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fb1f 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e9c:	f000 f808 	bl	8000eb0 <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	37e0      	adds	r7, #224	; 0xe0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <Error_Handler+0x8>
	...

08000ebc <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <motion_start+0x38>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d012      	beq.n	8000eee <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8000ec8:	f7ff fec8 	bl	8000c5c <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <motion_start+0x38>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d103      	bne.n	8000edc <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <motion_start+0x38>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
		return;
 8000eda:	e009      	b.n	8000ef0 <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <motion_start+0x38>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 8000ee2:	f000 fb99 	bl	8001618 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8000ee6:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <motion_start+0x3c>)
 8000ee8:	f004 f93e 	bl	8005168 <HAL_TIM_Base_Start_IT>
 8000eec:	e000      	b.n	8000ef0 <motion_start+0x34>
		return;
 8000eee:	bf00      	nop
}
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	2000054c 	.word	0x2000054c

08000efc <motion_stop>:

void motion_stop(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 8000f00:	f7ff febe 	bl	8000c80 <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <motion_stop+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d005      	beq.n	8000f18 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <motion_stop+0x24>)
 8000f0e:	f004 f9a3 	bl	8005258 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 8000f12:	f000 fb93 	bl	800163c <stop_detector_deInit>
 8000f16:	e000      	b.n	8000f1a <motion_stop+0x1e>
		return;
 8000f18:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	2000054c 	.word	0x2000054c

08000f24 <motion_isr>:

void motion_isr(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8000f2a:	f000 fb95 	bl	8001658 <stop_detector_isr>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <motion_isr+0x80>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d111      	bne.n	8000f5e <motion_isr+0x3a>
	{
		if(timeout_flag)
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <motion_isr+0x84>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d005      	beq.n	8000f4e <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <motion_isr+0x80>)
 8000f44:	2206      	movs	r2, #6
 8000f46:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8000f48:	f7ff ffd8 	bl	8000efc <motion_stop>
			// motion timeout occured
//			motion_status = MOT_TIMEOUT;
			return;
 8000f4c:	e027      	b.n	8000f9e <motion_isr+0x7a>
		}
		if(err == 0)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d123      	bne.n	8000f9c <motion_isr+0x78>
		{
			// obstacle has been moved
			// stop timeout
			timeout_stop();
 8000f54:	f000 ff4c 	bl	8001df0 <timeout_stop>
			// restart movement
			motion_start();
 8000f58:	f7ff ffb0 	bl	8000ebc <motion_start>
 8000f5c:	e011      	b.n	8000f82 <motion_isr+0x5e>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <motion_isr+0x5e>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <motion_isr+0x80>)
 8000f6c:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <motion_isr+0x80>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d102      	bne.n	8000f7c <motion_isr+0x58>
			timeout_start(HOLD_TIMEOUT);
 8000f76:	201e      	movs	r0, #30
 8000f78:	f000 ff08 	bl	8001d8c <timeout_start>

		// obstacle/stop mark found
		// stop movement
		motion_stop();
 8000f7c:	f7ff ffbe 	bl	8000efc <motion_stop>
		return;
 8000f80:	e00d      	b.n	8000f9e <motion_isr+0x7a>
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 8000f82:	f7ff fe8f 	bl	8000ca4 <lfollower_isr>
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	if(err)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <motion_isr+0x7a>
	{
		// signal motion error
		motion_status = MOT_ERR;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <motion_isr+0x80>)
 8000f92:	2205      	movs	r2, #5
 8000f94:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 8000f96:	f7ff ffb1 	bl	8000efc <motion_stop>
 8000f9a:	e000      	b.n	8000f9e <motion_isr+0x7a>
			return;
 8000f9c:	bf00      	nop
	}
}
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000030 	.word	0x20000030
 8000fa8:	20000284 	.word	0x20000284

08000fac <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <motor_init+0x1c>)
 8000fbc:	f004 f9d2 	bl	8005364 <HAL_TIM_PWM_Start>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200004b4 	.word	0x200004b4

08000fcc <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <motor_kill+0x28>)
 8000fdc:	f004 fabc 	bl	8005558 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f807 	bl	8000ff8 <motor_control>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200004b4 	.word	0x200004b4

08000ff8 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
 8001004:	4613      	mov	r3, r2
 8001006:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6858      	ldr	r0, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	8919      	ldrh	r1, [r3, #8]
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <motor_control+0x58>)
 8001014:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001018:	461a      	mov	r2, r3
 800101a:	f002 fd53 	bl	8003ac4 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68d8      	ldr	r0, [r3, #12]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	8a19      	ldrh	r1, [r3, #16]
 8001026:	78bb      	ldrb	r3, [r7, #2]
 8001028:	4a09      	ldr	r2, [pc, #36]	; (8001050 <motor_control+0x58>)
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	461a      	mov	r2, r3
 8001032:	f002 fd47 	bl	8003ac4 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	b292      	uxth	r2, r2
 8001040:	4619      	mov	r1, r3
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <motor_control+0x5c>)
 8001044:	f000 fe40 	bl	8001cc8 <set_pwm>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08009b98 	.word	0x08009b98
 8001054:	200004b4 	.word	0x200004b4

08001058 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <move_start+0x1c>)
 800105e:	f7ff ffa5 	bl	8000fac <motor_init>
	motor_init(&motor_left);
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <move_start+0x20>)
 8001064:	f7ff ffa2 	bl	8000fac <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <move_start+0x24>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000034 	.word	0x20000034
 8001078:	20000048 	.word	0x20000048
 800107c:	20000258 	.word	0x20000258

08001080 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <move_stop+0x1c>)
 8001086:	f7ff ffa1 	bl	8000fcc <motor_kill>
	motor_kill(&motor_left);
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <move_stop+0x20>)
 800108c:	f7ff ff9e 	bl	8000fcc <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <move_stop+0x24>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000034 	.word	0x20000034
 80010a0:	20000048 	.word	0x20000048
 80010a4:	20000258 	.word	0x20000258

080010a8 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80010b2:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <move_control+0xd0>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 80010be:	f7ff ffcb 	bl	8001058 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 80010c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ca:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001168 <move_control+0xc0>
 80010ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010d2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 80010de:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001168 <move_control+0xc0>
 80010ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010f2:	edc7 7a01 	vstr	s15, [r7, #4]
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 80010fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fe:	eef0 7ae7 	vabs.f32	s15, s15
 8001102:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001106:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001170 <move_control+0xc8>
 800110a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800110e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001112:	edc7 7a01 	vstr	s15, [r7, #4]
 8001116:	793b      	ldrb	r3, [r7, #4]
 8001118:	b2d9      	uxtb	r1, r3
 800111a:	7dbb      	ldrb	r3, [r7, #22]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	4815      	ldr	r0, [pc, #84]	; (800117c <move_control+0xd4>)
 8001126:	f7ff ff67 	bl	8000ff8 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 800112a:	edd7 7a03 	vldr	s15, [r7, #12]
 800112e:	eef0 7ae7 	vabs.f32	s15, s15
 8001132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001136:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001170 <move_control+0xc8>
 800113a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800113e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001142:	edc7 7a01 	vstr	s15, [r7, #4]
 8001146:	793b      	ldrb	r3, [r7, #4]
 8001148:	b2d9      	uxtb	r1, r3
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <move_control+0xd8>)
 8001156:	f7ff ff4f 	bl	8000ff8 <motor_control>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	7ae147ae 	.word	0x7ae147ae
 800116c:	3fefae14 	.word	0x3fefae14
 8001170:	00000000 	.word	0x00000000
 8001174:	40590000 	.word	0x40590000
 8001178:	20000258 	.word	0x20000258
 800117c:	20000034 	.word	0x20000034
 8001180:	20000048 	.word	0x20000048

08001184 <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001190:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 8001194:	ed97 7a02 	vldr	s14, [r7, #8]
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80011e4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001298 <pid_calcule+0x114>
 80011e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	ed93 7a00 	vldr	s14, [r3]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	edd3 6a01 	vldr	s13, [r3, #4]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	69da      	ldr	r2, [r3, #28]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd08      	ble.n	8001262 <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	699a      	ldr	r2, [r3, #24]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8001260:	e013      	b.n	800128a <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800126e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d400      	bmi.n	800127a <pid_calcule+0xf6>
}
 8001278:	e007      	b.n	800128a <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	615a      	str	r2, [r3, #20]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	3e99999a 	.word	0x3e99999a

0800129c <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 80012a0:	2206      	movs	r2, #6
 80012a2:	4903      	ldr	r1, [pc, #12]	; (80012b0 <qtr_init+0x14>)
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <qtr_init+0x18>)
 80012a6:	f001 f8e1 	bl	800246c <HAL_ADC_Start_DMA>
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000025c 	.word	0x2000025c
 80012b4:	20000338 	.word	0x20000338

080012b8 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <qtr_kill+0x10>)
 80012be:	f001 f9cf 	bl	8002660 <HAL_ADC_Stop_DMA>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000338 	.word	0x20000338
 80012cc:	00000000 	.word	0x00000000

080012d0 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a16      	ldr	r2, [pc, #88]	; (8001338 <qtr_get_digital+0x68>)
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80012ea:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001320 <qtr_get_digital+0x50>
 80012ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80012f2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001328 <qtr_get_digital+0x58>
 80012f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012fa:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001330 <qtr_get_digital+0x60>
 80012fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	bfcc      	ite	gt
 8001308:	2301      	movgt	r3, #1
 800130a:	2300      	movle	r3, #0
 800130c:	b2db      	uxtb	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	66666666 	.word	0x66666666
 8001324:	400a6666 	.word	0x400a6666
 8001328:	00000000 	.word	0x00000000
 800132c:	40affe00 	.word	0x40affe00
 8001330:	9999999a 	.word	0x9999999a
 8001334:	40039999 	.word	0x40039999
 8001338:	2000025c 	.word	0x2000025c
 800133c:	00000000 	.word	0x00000000

08001340 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4a10      	ldr	r2, [pc, #64]	; (8001390 <qtr_get_analog+0x50>)
 800134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800135a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001380 <qtr_get_analog+0x40>
 800135e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001362:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001388 <qtr_get_analog+0x48>
 8001366:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800136a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	f3af 8000 	nop.w
 8001380:	66666666 	.word	0x66666666
 8001384:	400a6666 	.word	0x400a6666
 8001388:	00000000 	.word	0x00000000
 800138c:	40affe00 	.word	0x40affe00
 8001390:	2000025c 	.word	0x2000025c

08001394 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_SPI3_Init+0x74>)
 800139a:	4a1c      	ldr	r2, [pc, #112]	; (800140c <MX_SPI3_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_SPI3_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <MX_SPI3_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <MX_SPI3_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_SPI3_Init+0x74>)
 80013c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ca:	2218      	movs	r2, #24
 80013cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_SPI3_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_SPI3_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e2:	2207      	movs	r2, #7
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_SPI3_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_SPI3_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_SPI3_Init+0x74>)
 80013f4:	f003 fc96 	bl	8004d24 <HAL_SPI_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f7ff fd57 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200003e0 	.word	0x200003e0
 800140c:	40003c00 	.word	0x40003c00

08001410 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1b      	ldr	r2, [pc, #108]	; (800149c <HAL_SPI_MspInit+0x8c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d130      	bne.n	8001494 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a1a      	ldr	r2, [pc, #104]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 8001438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_SPI_MspInit+0x90>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001462:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001474:	2306      	movs	r3, #6
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4619      	mov	r1, r3
 800147e:	4809      	ldr	r0, [pc, #36]	; (80014a4 <HAL_SPI_MspInit+0x94>)
 8001480:	f002 f95c 	bl	800373c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2033      	movs	r0, #51	; 0x33
 800148a:	f001 fd16 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800148e:	2033      	movs	r0, #51	; 0x33
 8001490:	f001 fd2f 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40003c00 	.word	0x40003c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x44>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x44>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x44>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x44>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x44>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x44>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>
	...

080014f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80014fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <HardFault_Handler+0x18>)
 8001502:	f002 faf8 	bl	8003af6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150a:	f000 fe05 	bl	8002118 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800150e:	e7f5      	b.n	80014fc <HardFault_Handler+0x4>
 8001510:	40020400 	.word	0x40020400

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <MemManage_Handler+0x4>

0800151a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <BusFault_Handler+0x4>

08001520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <UsageFault_Handler+0x4>

08001526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001554:	f000 fdc0 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <ADC_IRQHandler+0x14>)
 8001562:	f000 fe41 	bl	80021e8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <ADC_IRQHandler+0x18>)
 8001568:	f000 fe3e 	bl	80021e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000290 	.word	0x20000290
 8001574:	20000338 	.word	0x20000338

08001578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM3_IRQHandler+0x10>)
 800157e:	f004 f86b 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000500 	.word	0x20000500

0800158c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <TIM4_IRQHandler+0x10>)
 8001592:	f004 f861 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200004b4 	.word	0x200004b4

080015a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <USART1_IRQHandler+0x10>)
 80015a6:	f005 f82d 	bl	8006604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000061c 	.word	0x2000061c

080015b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <USART3_IRQHandler+0x10>)
 80015ba:	f005 f823 	bl	8006604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000598 	.word	0x20000598

080015c8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <SPI3_IRQHandler+0x10>)
 80015ce:	f003 fc55 	bl	8004e7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003e0 	.word	0x200003e0

080015dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM6_DAC_IRQHandler+0x10>)
 80015e2:	f004 f839 	bl	8005658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000054c 	.word	0x2000054c

080015f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <DMA2_Stream1_IRQHandler+0x10>)
 80015f6:	f001 fe37 	bl	8003268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002d8 	.word	0x200002d8

08001604 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA2_Stream2_IRQHandler+0x10>)
 800160a:	f001 fe2d 	bl	8003268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000380 	.word	0x20000380

08001618 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	4904      	ldr	r1, [pc, #16]	; (8001630 <stop_detector_init+0x18>)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <stop_detector_init+0x1c>)
 8001622:	f000 ff23 	bl	800246c <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <stop_detector_init+0x20>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000274 	.word	0x20000274
 8001634:	20000290 	.word	0x20000290
 8001638:	20000278 	.word	0x20000278

0800163c <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <stop_detector_deInit+0x14>)
 8001642:	f001 f80d 	bl	8002660 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <stop_detector_deInit+0x18>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000290 	.word	0x20000290
 8001654:	20000278 	.word	0x20000278

08001658 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <stop_detector_isr+0x98>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e039      	b.n	80016e6 <stop_detector_isr+0x8e>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 8001672:	2005      	movs	r0, #5
 8001674:	f7ff fe2c 	bl	80012d0 <qtr_get_digital>
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fe24 	bl	80012d0 <qtr_get_digital>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if(sens == 3)// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> check this
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b03      	cmp	r3, #3
 8001696:	d101      	bne.n	800169c <stop_detector_isr+0x44>
		// return cross found error
		return E_ST_CROSS_FOUND;
 8001698:	2301      	movs	r3, #1
 800169a:	e024      	b.n	80016e6 <stop_detector_isr+0x8e>
//		return 0;

	// current sensors value equal to the previous sensor values
	// and only one sensor enabled
	else if((sens == sens_prev) && (sens != 0))
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <stop_detector_isr+0x9c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d104      	bne.n	80016b0 <stop_detector_isr+0x58>
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <stop_detector_isr+0x58>
		// return room found error
		return E_ST_ROOM_FOUND;
 80016ac:	2302      	movs	r3, #2
 80016ae:	e01a      	b.n	80016e6 <stop_detector_isr+0x8e>

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <stop_detector_isr+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016b8:	d306      	bcc.n	80016c8 <stop_detector_isr+0x70>
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <stop_detector_isr+0xa4>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016c2:	d301      	bcc.n	80016c8 <stop_detector_isr+0x70>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <stop_detector_isr+0x72>
 80016c8:	2300      	movs	r3, #0
 80016ca:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <stop_detector_isr+0xa0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <stop_detector_isr+0xa4>)
 80016d2:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 80016d4:	79bb      	ldrb	r3, [r7, #6]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <stop_detector_isr+0x86>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 80016da:	2303      	movs	r3, #3
 80016dc:	e003      	b.n	80016e6 <stop_detector_isr+0x8e>
//		return 0;

	// update sensors value
	sens_prev = sens;
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <stop_detector_isr+0x9c>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000278 	.word	0x20000278
 80016f4:	20000279 	.word	0x20000279
 80016f8:	20000274 	.word	0x20000274
 80016fc:	2000027c 	.word	0x2000027c

08001700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return 1;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_kill>:

int _kill(int pid, int sig)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800171a:	f005 fdc5 	bl	80072a8 <__errno>
 800171e:	4603      	mov	r3, r0
 8001720:	2216      	movs	r2, #22
 8001722:	601a      	str	r2, [r3, #0]
	return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <_exit>:

void _exit (int status)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ffe7 	bl	8001710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001742:	e7fe      	b.n	8001742 <_exit+0x12>

08001744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e00a      	b.n	800176c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001756:	f3af 8000 	nop.w
 800175a:	4601      	mov	r1, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	dbf0      	blt.n	8001756 <_read+0x12>
	}

return len;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e009      	b.n	80017a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	60ba      	str	r2, [r7, #8]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	dbf1      	blt.n	8001790 <_write+0x12>
	}
	return len;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_close>:

int _close(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017de:	605a      	str	r2, [r3, #4]
	return 0;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_isatty>:

int _isatty(int file)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
	return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
	return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f005 fd2a 	bl	80072a8 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20080000 	.word	0x20080000
 8001880:	00000400 	.word	0x00000400
 8001884:	20000280 	.word	0x20000280
 8001888:	200006b8 	.word	0x200006b8

0800188c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <test_motion>:

/******************************************************************************
Test motion module
******************************************************************************/
void test_motion(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	// start movement
	motion_start();
 80018b4:	f7ff fb02 	bl	8000ebc <motion_start>

	// while motion is ON
	while(motion_status == MOT_ON)
 80018b8:	bf00      	nop
 80018ba:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <test_motion+0x18>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0fb      	beq.n	80018ba <test_motion+0xa>
		;
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000030 	.word	0x20000030

080018cc <test_stop_sensor>:

/******************************************************************************
Test stop sensors module
******************************************************************************/
void test_stop_sensor(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	// use test_motion()

	// motion stopped
	if(motion_status == MOT_CROSS_FOUND)
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <test_stop_sensor+0x84>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d110      	bne.n	80018fa <test_stop_sensor+0x2e>
	{
		// Cross found. enable BLUE LED
		write_led(LBLUE, 1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	481d      	ldr	r0, [pc, #116]	; (8001954 <test_stop_sensor+0x88>)
 80018de:	f002 f8f1 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LGREEN, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2101      	movs	r1, #1
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <test_stop_sensor+0x88>)
 80018e8:	f002 f8ec 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LRED, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <test_stop_sensor+0x88>)
 80018f4:	f002 f8e6 	bl	8003ac4 <HAL_GPIO_WritePin>
		// Obstacle found. enable RED LED
		write_led(LBLUE, 0);
		write_led(LGREEN, 0);
		write_led(LRED, 1);
	}
}
 80018f8:	e028      	b.n	800194c <test_stop_sensor+0x80>
	else if(motion_status == MOT_ROOM_FOUND)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <test_stop_sensor+0x84>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d110      	bne.n	8001924 <test_stop_sensor+0x58>
		write_led(LBLUE, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	4813      	ldr	r0, [pc, #76]	; (8001954 <test_stop_sensor+0x88>)
 8001908:	f002 f8dc 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LGREEN, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	2101      	movs	r1, #1
 8001910:	4810      	ldr	r0, [pc, #64]	; (8001954 <test_stop_sensor+0x88>)
 8001912:	f002 f8d7 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LRED, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <test_stop_sensor+0x88>)
 800191e:	f002 f8d1 	bl	8003ac4 <HAL_GPIO_WritePin>
}
 8001922:	e013      	b.n	800194c <test_stop_sensor+0x80>
	else if(motion_status == MOT_HOLD)
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <test_stop_sensor+0x84>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b04      	cmp	r3, #4
 800192a:	d10f      	bne.n	800194c <test_stop_sensor+0x80>
		write_led(LBLUE, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <test_stop_sensor+0x88>)
 8001932:	f002 f8c7 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LGREEN, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	4806      	ldr	r0, [pc, #24]	; (8001954 <test_stop_sensor+0x88>)
 800193c:	f002 f8c2 	bl	8003ac4 <HAL_GPIO_WritePin>
		write_led(LRED, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <test_stop_sensor+0x88>)
 8001948:	f002 f8bc 	bl	8003ac4 <HAL_GPIO_WritePin>
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000030 	.word	0x20000030
 8001954:	40020400 	.word	0x40020400

08001958 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
	int err = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
//		test_lf_print_qtr();

//	while(1)
//		test_timeout(10);

	test_motion();
 8001962:	f7ff ffa5 	bl	80018b0 <test_motion>
//	while(1)
		test_stop_sensor();
 8001966:	f7ff ffb1 	bl	80018cc <test_stop_sensor>
//	err = test_rfid();
//	test_debounce();

//	test_bluetooth();

	return err;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MX_TIM3_Init+0x98>)
 8001994:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <MX_TIM3_Init+0x9c>)
 8001996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <MX_TIM3_Init+0x98>)
 800199a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800199e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 80019a6:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019a8:	f240 7207 	movw	r2, #1799	; 0x707
 80019ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ba:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019bc:	f003 fb7d 	bl	80050ba <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80019c6:	f7ff fa73 	bl	8000eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019d8:	f004 f86e 	bl	8005ab8 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80019e2:	f7ff fa65 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e6:	2320      	movs	r3, #32
 80019e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <MX_TIM3_Init+0x98>)
 80019f4:	f004 fd0c 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80019fe:	f7ff fa57 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000500 	.word	0x20000500
 8001a10:	40000400 	.word	0x40000400

08001a14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a38:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a3a:	4a27      	ldr	r2, [pc, #156]	; (8001ad8 <MX_TIM4_Init+0xc4>)
 8001a3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a40:	226b      	movs	r2, #107	; 0x6b
 8001a42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a4c:	2264      	movs	r2, #100	; 0x64
 8001a4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a5c:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a5e:	f003 fc2a 	bl	80052b6 <HAL_TIM_PWM_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a68:	f7ff fa22 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001a7c:	f004 fcc8 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a86:	f7ff fa13 	bl	8000eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a8a:	2360      	movs	r3, #96	; 0x60
 8001a8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001aa2:	f003 fef9 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001aac:	f7ff fa00 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001ab8:	f003 feee 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001ac2:	f7ff f9f5 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM4_Init+0xc0>)
 8001ac8:	f000 f8a6 	bl	8001c18 <HAL_TIM_MspPostInit>

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200004b4 	.word	0x200004b4
 8001ad8:	40000800 	.word	0x40000800

08001adc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_TIM6_Init+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001af4:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001af8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001b02:	2263      	movs	r2, #99	; 0x63
 8001b04:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001b0e:	f003 fad4 	bl	80050ba <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b18:	f7ff f9ca 	bl	8000eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_TIM6_Init+0x64>)
 8001b2a:	f004 fc71 	bl	8006410 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b34:	f7ff f9bc 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000054c 	.word	0x2000054c
 8001b44:	40001000 	.word	0x40001000

08001b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1a      	ldr	r2, [pc, #104]	; (8001bc0 <HAL_TIM_Base_MspInit+0x78>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d114      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b5a:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	201d      	movs	r0, #29
 8001b78:	f001 f99f 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b7c:	201d      	movs	r0, #29
 8001b7e:	f001 f9b8 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b82:	e018      	b.n	8001bb6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_TIM_Base_MspInit+0x80>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b94:	f043 0310 	orr.w	r3, r3, #16
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_TIM_Base_MspInit+0x7c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2036      	movs	r0, #54	; 0x36
 8001bac:	f001 f985 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bb0:	2036      	movs	r0, #54	; 0x36
 8001bb2:	f001 f99e 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40001000 	.word	0x40001000

08001bcc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <HAL_TIM_PWM_MspInit+0x44>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d113      	bne.n	8001c06 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_TIM_PWM_MspInit+0x48>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <HAL_TIM_PWM_MspInit+0x48>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_TIM_PWM_MspInit+0x48>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	201e      	movs	r0, #30
 8001bfc:	f001 f95d 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c00:	201e      	movs	r0, #30
 8001c02:	f001 f976 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_TIM_MspPostInit+0xa0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d139      	bne.n	8001cae <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_TIM_MspPostInit+0xa4>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	480e      	ldr	r0, [pc, #56]	; (8001cc0 <HAL_TIM_MspPostInit+0xa8>)
 8001c88:	f001 fd58 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <HAL_TIM_MspPostInit+0xac>)
 8001caa:	f001 fd47 	bl	800373c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40000800 	.word	0x40000800
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d104      	bne.n	8001ce8 <set_pwm+0x20>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	883a      	ldrh	r2, [r7, #0]
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ce6:	e023      	b.n	8001d30 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d104      	bne.n	8001cf8 <set_pwm+0x30>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	883b      	ldrh	r3, [r7, #0]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cf6:	e01b      	b.n	8001d30 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d104      	bne.n	8001d08 <set_pwm+0x40>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	883b      	ldrh	r3, [r7, #0]
 8001d04:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d06:	e013      	b.n	8001d30 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d104      	bne.n	8001d18 <set_pwm+0x50>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	883b      	ldrh	r3, [r7, #0]
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001d16:	e00b      	b.n	8001d30 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d104      	bne.n	8001d28 <set_pwm+0x60>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001d26:	e003      	b.n	8001d30 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d102      	bne.n	8001d52 <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8001d4c:	f7ff f8ea 	bl	8000f24 <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{
		debounce_isr();
	}
}
 8001d50:	e011      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if(htim == &TIM_TIMEOUTS)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d107      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x2e>
		timeout_isr();
 8001d5a:	f000 f853 	bl	8001e04 <timeout_isr>
		write_led(LBLUE, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001d64:	f001 feae 	bl	8003ac4 <HAL_GPIO_WritePin>
}
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if(htim == &TIM_DEBOUNCE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x3a>
		debounce_isr();
 8001d72:	f7fe fe7b 	bl	8000a6c <debounce_isr>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000054c 	.word	0x2000054c
 8001d84:	20000500 	.word	0x20000500
 8001d88:	40020400 	.word	0x40020400

08001d8c <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(int time_sec)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b24      	cmp	r3, #36	; 0x24
 8001d98:	dd04      	ble.n	8001da4 <timeout_start+0x18>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <timeout_start+0x5c>)
 8001d9c:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	e008      	b.n	8001db6 <timeout_start+0x2a>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec) - 1; // >>>>>>>>>>>>> check this
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <timeout_start+0x5c>)
 8001db4:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8001db6:	480c      	ldr	r0, [pc, #48]	; (8001de8 <timeout_start+0x5c>)
 8001db8:	f003 f97f 	bl	80050ba <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <timeout_start+0x3c>
		// init error
		Error_Handler();
 8001dc2:	f7ff f875 	bl	8000eb0 <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8001dc6:	e00a      	b.n	8001dde <timeout_start+0x52>
		timeout_flag = 0;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <timeout_start+0x60>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <timeout_start+0x5c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0201 	mvn.w	r2, #1
 8001dd6:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <timeout_start+0x5c>)
 8001dda:	f003 f9c5 	bl	8005168 <HAL_TIM_Base_Start_IT>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000500 	.word	0x20000500
 8001dec:	20000284 	.word	0x20000284

08001df0 <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <timeout_stop+0x10>)
 8001df6:	f003 fa2f 	bl	8005258 <HAL_TIM_Base_Stop_IT>
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000500 	.word	0x20000500

08001e04 <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	// set timeout flag
	timeout_flag = 1;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <timeout_isr+0x14>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8001e0e:	f7ff ffef 	bl	8001df0 <timeout_stop>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000284 	.word	0x20000284

08001e1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <MX_USART1_UART_Init+0x5c>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e26:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_USART1_UART_Init+0x58>)
 8001e60:	f004 fb82 	bl	8006568 <HAL_UART_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e6a:	f7ff f821 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000061c 	.word	0x2000061c
 8001e78:	40011000 	.word	0x40011000

08001e7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <MX_USART3_UART_Init+0x5c>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_USART3_UART_Init+0x58>)
 8001ec0:	f004 fb52 	bl	8006568 <HAL_UART_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001eca:	f7fe fff1 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000598 	.word	0x20000598
 8001ed8:	40004800 	.word	0x40004800

08001edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08c      	sub	sp, #48	; 0x30
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3f      	ldr	r2, [pc, #252]	; (8001ff8 <HAL_UART_MspInit+0x11c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d141      	bne.n	8001f82 <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f40:	2304      	movs	r3, #4
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	482d      	ldr	r0, [pc, #180]	; (8002000 <HAL_UART_MspInit+0x124>)
 8001f4c:	f001 fbf6 	bl	800373c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001f50:	2340      	movs	r3, #64	; 0x40
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f60:	2307      	movs	r3, #7
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4825      	ldr	r0, [pc, #148]	; (8002000 <HAL_UART_MspInit+0x124>)
 8001f6c:	f001 fbe6 	bl	800373c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2025      	movs	r0, #37	; 0x25
 8001f76:	f000 ffa0 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f7a:	2025      	movs	r0, #37	; 0x25
 8001f7c:	f000 ffb9 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f80:	e035      	b.n	8001fee <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_UART_MspInit+0x128>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d130      	bne.n	8001fee <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f96:	6413      	str	r3, [r2, #64]	; 0x40
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb0:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0x120>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480b      	ldr	r0, [pc, #44]	; (8002008 <HAL_UART_MspInit+0x12c>)
 8001fda:	f001 fbaf 	bl	800373c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2027      	movs	r0, #39	; 0x27
 8001fe4:	f000 ff69 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fe8:	2027      	movs	r0, #39	; 0x27
 8001fea:	f000 ff82 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 8001fee:	bf00      	nop
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020400 	.word	0x40020400
 8002004:	40004800 	.word	0x40004800
 8002008:	40020c00 	.word	0x40020c00

0800200c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002044 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002010:	480d      	ldr	r0, [pc, #52]	; (8002048 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002012:	490e      	ldr	r1, [pc, #56]	; (800204c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002028:	4c0b      	ldr	r4, [pc, #44]	; (8002058 <LoopFillZerobss+0x26>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002036:	f7ff fc29 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f005 f93b 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203e:	f7fe fe79 	bl	8000d34 <main>
  bx  lr    
 8002042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002044:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002050:	08009fb4 	.word	0x08009fb4
  ldr r2, =_sbss
 8002054:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002058:	200006b8 	.word	0x200006b8

0800205c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800205c:	e7fe      	b.n	800205c <CAN1_RX0_IRQHandler>

0800205e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002062:	2003      	movs	r0, #3
 8002064:	f000 ff1e 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f805 	bl	8002078 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800206e:	f7ff fa1b 	bl	80014a8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 ff39 	bl	8002f0e <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 ff01 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000005c 	.word	0x2000005c
 80020d0:	20000064 	.word	0x20000064
 80020d4:	20000060 	.word	0x20000060

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000064 	.word	0x20000064
 80020fc:	200006a4 	.word	0x200006a4

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200006a4 	.word	0x200006a4

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000064 	.word	0x20000064

08002160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e031      	b.n	80021da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fb1c 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_ADC_Init+0x84>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fc22 	bl	80029f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	ffffeefd 	.word	0xffffeefd

080021e8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	bf0c      	ite	eq
 8002206:	2301      	moveq	r3, #1
 8002208:	2300      	movne	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b20      	cmp	r3, #32
 800221a:	bf0c      	ite	eq
 800221c:	2301      	moveq	r3, #1
 800221e:	2300      	movne	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d049      	beq.n	80022be <HAL_ADC_IRQHandler+0xd6>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d046      	beq.n	80022be <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d12b      	bne.n	80022ae <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800225a:	2b00      	cmp	r3, #0
 800225c:	d127      	bne.n	80022ae <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002276:	2b00      	cmp	r3, #0
 8002278:	d119      	bne.n	80022ae <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0220 	bic.w	r2, r2, #32
 8002288:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0201 	orr.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fa30 	bl	8002714 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0212 	mvn.w	r2, #18
 80022bc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022de:	2b80      	cmp	r3, #128	; 0x80
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d057      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x1b8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d054      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d139      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12b      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002342:	2b00      	cmp	r3, #0
 8002344:	d124      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d11d      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fcad 	bl	8002cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f06f 020c 	mvn.w	r2, #12
 800239e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	bf0c      	ite	eq
 80023ae:	2301      	moveq	r3, #1
 80023b0:	2300      	movne	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_ADC_IRQHandler+0x21a>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d014      	beq.n	8002402 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10d      	bne.n	8002402 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9a2 	bl	800273c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b20      	cmp	r3, #32
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_ADC_IRQHandler+0x27a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0220 	mvn.w	r2, #32
 8002450:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f97c 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0220 	mvn.w	r2, #32
 8002460:	601a      	str	r2, [r3, #0]
  }
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start_DMA+0x1e>
 8002486:	2302      	movs	r3, #2
 8002488:	e0d4      	b.n	8002634 <HAL_ADC_Start_DMA+0x1c8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d018      	beq.n	80024d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024b0:	4b62      	ldr	r3, [pc, #392]	; (800263c <HAL_ADC_Start_DMA+0x1d0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a62      	ldr	r2, [pc, #392]	; (8002640 <HAL_ADC_Start_DMA+0x1d4>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f040 809c 	bne.w	800261a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e6:	4b57      	ldr	r3, [pc, #348]	; (8002644 <HAL_ADC_Start_DMA+0x1d8>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d106      	bne.n	800252c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f023 0206 	bic.w	r2, r3, #6
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	; 0x44
 800252a:	e002      	b.n	8002532 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	4a42      	ldr	r2, [pc, #264]	; (8002648 <HAL_ADC_Start_DMA+0x1dc>)
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	4a41      	ldr	r2, [pc, #260]	; (800264c <HAL_ADC_Start_DMA+0x1e0>)
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4a40      	ldr	r2, [pc, #256]	; (8002650 <HAL_ADC_Start_DMA+0x1e4>)
 8002550:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800255a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800256a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	334c      	adds	r3, #76	; 0x4c
 8002586:	4619      	mov	r1, r3
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f000 fd7a 	bl	8003084 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002590:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_ADC_Start_DMA+0x1e8>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d143      	bne.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	e03a      	b.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a25      	ldr	r2, [pc, #148]	; (8002658 <HAL_ADC_Start_DMA+0x1ec>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10e      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x178>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025e2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_ADC_Start_DMA+0x1e8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d120      	bne.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_ADC_Start_DMA+0x1f0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d11b      	bne.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d114      	bne.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e00b      	b.n	8002632 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000005c 	.word	0x2000005c
 8002640:	431bde83 	.word	0x431bde83
 8002644:	fffff8fe 	.word	0xfffff8fe
 8002648:	08002bed 	.word	0x08002bed
 800264c:	08002ca7 	.word	0x08002ca7
 8002650:	08002cc3 	.word	0x08002cc3
 8002654:	40012300 	.word	0x40012300
 8002658:	40012000 	.word	0x40012000
 800265c:	40012200 	.word	0x40012200

08002660 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_ADC_Stop_DMA+0x1a>
 8002676:	2302      	movs	r3, #2
 8002678:	e046      	b.n	8002708 <HAL_ADC_Stop_DMA+0xa8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d12e      	bne.n	80026fe <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d10f      	bne.n	80026de <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd3e 	bl	8003144 <HAL_DMA_Abort>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_ADC_Stop_DMA+0xb0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	ffffeefe 	.word	0xffffeefe

08002714 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e12a      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x272>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b09      	cmp	r3, #9
 800278e:	d93a      	bls.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002798:	d035      	beq.n	8002806 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	2207      	movs	r2, #7
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	400a      	ands	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a87      	ldr	r2, [pc, #540]	; (80029e4 <HAL_ADC_ConfigChannel+0x280>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10a      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68d9      	ldr	r1, [r3, #12]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027de:	e035      	b.n	800284c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	3b1e      	subs	r3, #30
 80027fa:	409a      	lsls	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002804:	e022      	b.n	800284c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6919      	ldr	r1, [r3, #16]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	2207      	movs	r2, #7
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43da      	mvns	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	400a      	ands	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	4603      	mov	r3, r0
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4403      	add	r3, r0
 8002842:	409a      	lsls	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d824      	bhi.n	800289e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	3b05      	subs	r3, #5
 8002866:	221f      	movs	r2, #31
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43da      	mvns	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	400a      	ands	r2, r1
 8002874:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	4618      	mov	r0, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	3b05      	subs	r3, #5
 8002890:	fa00 f203 	lsl.w	r2, r0, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
 800289c:	e04c      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d824      	bhi.n	80028f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b23      	subs	r3, #35	; 0x23
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	400a      	ands	r2, r1
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b23      	subs	r3, #35	; 0x23
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
 80028ee:	e023      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b41      	subs	r3, #65	; 0x41
 8002902:	221f      	movs	r2, #31
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43da      	mvns	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	400a      	ands	r2, r1
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	3b41      	subs	r3, #65	; 0x41
 800292c:	fa00 f203 	lsl.w	r2, r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_ADC_ConfigChannel+0x284>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10a      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1f4>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a26      	ldr	r2, [pc, #152]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 8002952:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002956:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <HAL_ADC_ConfigChannel+0x284>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d109      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x212>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b12      	cmp	r3, #18
 8002968:	d105      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800296a:	4b20      	ldr	r3, [pc, #128]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 8002970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002974:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_ADC_ConfigChannel+0x284>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d125      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x268>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <HAL_ADC_ConfigChannel+0x280>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d003      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x22e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b11      	cmp	r3, #17
 8002990:	d11c      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <HAL_ADC_ConfigChannel+0x288>)
 8002998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800299c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <HAL_ADC_ConfigChannel+0x280>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d111      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_ADC_ConfigChannel+0x28c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <HAL_ADC_ConfigChannel+0x290>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0c9a      	lsrs	r2, r3, #18
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029be:	e002      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	10000012 	.word	0x10000012
 80029e8:	40012000 	.word	0x40012000
 80029ec:	40012300 	.word	0x40012300
 80029f0:	2000005c 	.word	0x2000005c
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a00:	4b78      	ldr	r3, [pc, #480]	; (8002be4 <ADC_Init+0x1ec>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <ADC_Init+0x1ec>)
 8002a06:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a0a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <ADC_Init+0x1ec>)
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4973      	ldr	r1, [pc, #460]	; (8002be4 <ADC_Init+0x1ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <ADC_Init+0x1f0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d022      	beq.n	8002ad2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	e00f      	b.n	8002af2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0202 	bic.w	r2, r2, #2
 8002b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	005a      	lsls	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01b      	beq.n	8002b58 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	035a      	lsls	r2, r3, #13
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	e007      	b.n	8002b68 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	051a      	lsls	r2, r3, #20
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002baa:	025a      	lsls	r2, r3, #9
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	029a      	lsls	r2, r3, #10
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012300 	.word	0x40012300
 8002be8:	0f000001 	.word	0x0f000001

08002bec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d13c      	bne.n	8002c80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d12b      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d127      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d119      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0220 	bic.w	r2, r2, #32
 8002c52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d105      	bne.n	8002c78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fd4b 	bl	8002714 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c7e:	e00e      	b.n	8002c9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f7ff fd5f 	bl	8002750 <HAL_ADC_ErrorCallback>
}
 8002c92:	e004      	b.n	8002c9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd37 	bl	8002728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	; 0x40
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fd34 	bl	8002750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00
 8002d48:	05fa0000 	.word	0x05fa0000

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff29 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff3e 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff31 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff f8e4 	bl	8002100 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e099      	b.n	8003078 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f64:	e00f      	b.n	8002f86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f66:	f7ff f8cb 	bl	8002100 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d908      	bls.n	8002f86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e078      	b.n	8003078 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e8      	bne.n	8002f66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_DMA_Init+0x158>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f023 0307 	bic.w	r3, r3, #7
 8003006:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b04      	cmp	r3, #4
 8003018:	d117      	bne.n	800304a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00e      	beq.n	800304a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fb09 	bl	8003644 <DMA_CheckFifoParam>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003046:	2301      	movs	r3, #1
 8003048:	e016      	b.n	8003078 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fac0 	bl	80035d8 <DMA_CalcBaseAndBitshift>
 8003058:	4603      	mov	r3, r0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	223f      	movs	r2, #63	; 0x3f
 8003062:	409a      	lsls	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	e010803f 	.word	0xe010803f

08003084 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_DMA_Start_IT+0x26>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e048      	b.n	800313c <HAL_DMA_Start_IT+0xb8>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d137      	bne.n	800312e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fa52 	bl	800357c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030dc:	223f      	movs	r2, #63	; 0x3f
 80030de:	409a      	lsls	r2, r3
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0216 	orr.w	r2, r2, #22
 80030f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003102:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0208 	orr.w	r2, r2, #8
 800311a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e005      	b.n	800313a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003152:	f7fe ffd5 	bl	8002100 <HAL_GetTick>
 8003156:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d008      	beq.n	8003176 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2280      	movs	r2, #128	; 0x80
 8003168:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e052      	b.n	800321c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0216 	bic.w	r2, r2, #22
 8003184:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003194:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <HAL_DMA_Abort+0x62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0208 	bic.w	r2, r2, #8
 80031b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c6:	e013      	b.n	80031f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031c8:	f7fe ff9a 	bl	8002100 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d90c      	bls.n	80031f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2203      	movs	r2, #3
 80031e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e015      	b.n	800321c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e4      	bne.n	80031c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	223f      	movs	r2, #63	; 0x3f
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d004      	beq.n	8003242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e00c      	b.n	800325c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2205      	movs	r2, #5
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0201 	bic.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003274:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_DMA_IRQHandler+0x258>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a92      	ldr	r2, [pc, #584]	; (80034c4 <HAL_DMA_IRQHandler+0x25c>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003292:	2208      	movs	r2, #8
 8003294:	409a      	lsls	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01a      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0204 	bic.w	r2, r2, #4
 80032ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2208      	movs	r2, #8
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2201      	movs	r2, #1
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d012      	beq.n	800330a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2201      	movs	r2, #1
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0202 	orr.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330e:	2204      	movs	r2, #4
 8003310:	409a      	lsls	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d012      	beq.n	8003340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	2204      	movs	r2, #4
 800332e:	409a      	lsls	r2, r3
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2210      	movs	r2, #16
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d043      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d03c      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003362:	2210      	movs	r2, #16
 8003364:	409a      	lsls	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d018      	beq.n	80033aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d024      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
 8003396:	e01f      	b.n	80033d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	4798      	blx	r3
 80033a8:	e016      	b.n	80033d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0208 	bic.w	r2, r2, #8
 80033c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	2220      	movs	r2, #32
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 808e 	beq.w	8003506 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8086 	beq.w	8003506 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2220      	movs	r2, #32
 8003400:	409a      	lsls	r2, r3
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b05      	cmp	r3, #5
 8003410:	d136      	bne.n	8003480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0216 	bic.w	r2, r2, #22
 8003420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <HAL_DMA_IRQHandler+0x1da>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0208 	bic.w	r2, r2, #8
 8003450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	223f      	movs	r2, #63	; 0x3f
 8003458:	409a      	lsls	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	2b00      	cmp	r3, #0
 8003474:	d07d      	beq.n	8003572 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
        }
        return;
 800347e:	e078      	b.n	8003572 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d108      	bne.n	80034ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d030      	beq.n	8003506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
 80034ac:	e02b      	b.n	8003506 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d027      	beq.n	8003506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
 80034be:	e022      	b.n	8003506 <HAL_DMA_IRQHandler+0x29e>
 80034c0:	2000005c 	.word	0x2000005c
 80034c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0210 	bic.w	r2, r2, #16
 80034e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	2b00      	cmp	r3, #0
 800350c:	d032      	beq.n	8003574 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d022      	beq.n	8003560 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2205      	movs	r2, #5
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	3301      	adds	r3, #1
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d307      	bcc.n	800354e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f2      	bne.n	8003532 <HAL_DMA_IRQHandler+0x2ca>
 800354c:	e000      	b.n	8003550 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800354e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
 8003570:	e000      	b.n	8003574 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003572:	bf00      	nop
    }
  }
}
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d108      	bne.n	80035bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035ba:	e007      	b.n	80035cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3b10      	subs	r3, #16
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <DMA_CalcBaseAndBitshift+0x60>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035f2:	4a12      	ldr	r2, [pc, #72]	; (800363c <DMA_CalcBaseAndBitshift+0x64>)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d908      	bls.n	8003618 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <DMA_CalcBaseAndBitshift+0x68>)
 800360e:	4013      	ands	r3, r2
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	659a      	str	r2, [r3, #88]	; 0x58
 8003616:	e006      	b.n	8003626 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <DMA_CalcBaseAndBitshift+0x68>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	aaaaaaab 	.word	0xaaaaaaab
 800363c:	08009bb8 	.word	0x08009bb8
 8003640:	fffffc00 	.word	0xfffffc00

08003644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11f      	bne.n	800369e <DMA_CheckFifoParam+0x5a>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d856      	bhi.n	8003712 <DMA_CheckFifoParam+0xce>
 8003664:	a201      	add	r2, pc, #4	; (adr r2, 800366c <DMA_CheckFifoParam+0x28>)
 8003666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366a:	bf00      	nop
 800366c:	0800367d 	.word	0x0800367d
 8003670:	0800368f 	.word	0x0800368f
 8003674:	0800367d 	.word	0x0800367d
 8003678:	08003713 	.word	0x08003713
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d046      	beq.n	8003716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368c:	e043      	b.n	8003716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003696:	d140      	bne.n	800371a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369c:	e03d      	b.n	800371a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036a6:	d121      	bne.n	80036ec <DMA_CheckFifoParam+0xa8>
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d837      	bhi.n	800371e <DMA_CheckFifoParam+0xda>
 80036ae:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <DMA_CheckFifoParam+0x70>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036cb 	.word	0x080036cb
 80036bc:	080036c5 	.word	0x080036c5
 80036c0:	080036dd 	.word	0x080036dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      break;
 80036c8:	e030      	b.n	800372c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d025      	beq.n	8003722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036da:	e022      	b.n	8003722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e4:	d11f      	bne.n	8003726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ea:	e01c      	b.n	8003726 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d903      	bls.n	80036fa <DMA_CheckFifoParam+0xb6>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d003      	beq.n	8003700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f8:	e018      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
      break;
 80036fe:	e015      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e00b      	b.n	800372a <DMA_CheckFifoParam+0xe6>
      break;
 8003712:	bf00      	nop
 8003714:	e00a      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e008      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e006      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;
 800371e:	bf00      	nop
 8003720:	e004      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
 8003724:	e002      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;   
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <DMA_CheckFifoParam+0xe8>
      break;
 800372a:	bf00      	nop
    }
  } 
  
  return status; 
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop

0800373c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	e175      	b.n	8003a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	429a      	cmp	r2, r3
 8003776:	f040 8164 	bne.w	8003a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d00b      	beq.n	800379a <HAL_GPIO_Init+0x5e>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800378e:	2b11      	cmp	r3, #17
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b12      	cmp	r3, #18
 8003798:	d130      	bne.n	80037fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2203      	movs	r2, #3
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d0:	2201      	movs	r2, #1
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 0201 	and.w	r2, r3, #1
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x100>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d123      	bne.n	8003884 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	08da      	lsrs	r2, r3, #3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3208      	adds	r2, #8
 8003844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	220f      	movs	r2, #15
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80be 	beq.w	8003a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c6:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_GPIO_Init+0x324>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_GPIO_Init+0x324>)
 80038cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_GPIO_Init+0x324>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038de:	4a61      	ldr	r2, [pc, #388]	; (8003a64 <HAL_GPIO_Init+0x328>)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	089b      	lsrs	r3, r3, #2
 80038e4:	3302      	adds	r3, #2
 80038e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a58      	ldr	r2, [pc, #352]	; (8003a68 <HAL_GPIO_Init+0x32c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d037      	beq.n	800397a <HAL_GPIO_Init+0x23e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <HAL_GPIO_Init+0x330>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d031      	beq.n	8003976 <HAL_GPIO_Init+0x23a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a56      	ldr	r2, [pc, #344]	; (8003a70 <HAL_GPIO_Init+0x334>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02b      	beq.n	8003972 <HAL_GPIO_Init+0x236>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a55      	ldr	r2, [pc, #340]	; (8003a74 <HAL_GPIO_Init+0x338>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d025      	beq.n	800396e <HAL_GPIO_Init+0x232>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a54      	ldr	r2, [pc, #336]	; (8003a78 <HAL_GPIO_Init+0x33c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d01f      	beq.n	800396a <HAL_GPIO_Init+0x22e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a53      	ldr	r2, [pc, #332]	; (8003a7c <HAL_GPIO_Init+0x340>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_GPIO_Init+0x22a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a52      	ldr	r2, [pc, #328]	; (8003a80 <HAL_GPIO_Init+0x344>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0x226>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <HAL_GPIO_Init+0x348>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00d      	beq.n	800395e <HAL_GPIO_Init+0x222>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a50      	ldr	r2, [pc, #320]	; (8003a88 <HAL_GPIO_Init+0x34c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d007      	beq.n	800395a <HAL_GPIO_Init+0x21e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	; (8003a8c <HAL_GPIO_Init+0x350>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_GPIO_Init+0x21a>
 8003952:	2309      	movs	r3, #9
 8003954:	e012      	b.n	800397c <HAL_GPIO_Init+0x240>
 8003956:	230a      	movs	r3, #10
 8003958:	e010      	b.n	800397c <HAL_GPIO_Init+0x240>
 800395a:	2308      	movs	r3, #8
 800395c:	e00e      	b.n	800397c <HAL_GPIO_Init+0x240>
 800395e:	2307      	movs	r3, #7
 8003960:	e00c      	b.n	800397c <HAL_GPIO_Init+0x240>
 8003962:	2306      	movs	r3, #6
 8003964:	e00a      	b.n	800397c <HAL_GPIO_Init+0x240>
 8003966:	2305      	movs	r3, #5
 8003968:	e008      	b.n	800397c <HAL_GPIO_Init+0x240>
 800396a:	2304      	movs	r3, #4
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x240>
 800396e:	2303      	movs	r3, #3
 8003970:	e004      	b.n	800397c <HAL_GPIO_Init+0x240>
 8003972:	2302      	movs	r3, #2
 8003974:	e002      	b.n	800397c <HAL_GPIO_Init+0x240>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_GPIO_Init+0x240>
 800397a:	2300      	movs	r3, #0
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f002 0203 	and.w	r2, r2, #3
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	4093      	lsls	r3, r2
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800398c:	4935      	ldr	r1, [pc, #212]	; (8003a64 <HAL_GPIO_Init+0x328>)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	3302      	adds	r3, #2
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399a:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_GPIO_Init+0x354>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039be:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <HAL_GPIO_Init+0x354>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039c4:	4b32      	ldr	r3, [pc, #200]	; (8003a90 <HAL_GPIO_Init+0x354>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e8:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <HAL_GPIO_Init+0x354>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <HAL_GPIO_Init+0x354>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_GPIO_Init+0x354>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_GPIO_Init+0x354>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <HAL_GPIO_Init+0x354>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	f67f ae86 	bls.w	800375c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020c00 	.word	0x40020c00
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40021400 	.word	0x40021400
 8003a80:	40021800 	.word	0x40021800
 8003a84:	40021c00 	.word	0x40021c00
 8003a88:	40022000 	.word	0x40022000
 8003a8c:	40022400 	.word	0x40022400
 8003a90:	40013c00 	.word	0x40013c00

08003a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e001      	b.n	8003ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ae0:	e003      	b.n	8003aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ae2:	887b      	ldrh	r3, [r7, #2]
 8003ae4:	041a      	lsls	r2, r3, #16
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	619a      	str	r2, [r3, #24]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b085      	sub	sp, #20
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b08:	887a      	ldrh	r2, [r7, #2]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	041a      	lsls	r2, r3, #16
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	400b      	ands	r3, r1
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	619a      	str	r2, [r3, #24]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b5a:	f7fe fad1 	bl	8002100 <HAL_GetTick>
 8003b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b60:	e009      	b.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b62:	f7fe facd 	bl	8002100 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b70:	d901      	bls.n	8003b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e022      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d1ee      	bne.n	8003b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b84:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0f      	ldr	r2, [pc, #60]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b90:	f7fe fab6 	bl	8002100 <HAL_GetTick>
 8003b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b96:	e009      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b98:	f7fe fab2 	bl	8002100 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba6:	d901      	bls.n	8003bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e007      	b.n	8003bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d1ee      	bne.n	8003b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40007000 	.word	0x40007000

08003bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e29b      	b.n	800411a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8087 	beq.w	8003cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bf0:	4b96      	ldr	r3, [pc, #600]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d00c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfc:	4b93      	ldr	r3, [pc, #588]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d112      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
 8003c08:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d06c      	beq.n	8003cfc <HAL_RCC_OscConfig+0x130>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d168      	bne.n	8003cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e275      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x7a>
 8003c38:	4b84      	ldr	r3, [pc, #528]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a83      	ldr	r2, [pc, #524]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e02e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x9c>
 8003c4e:	4b7f      	ldr	r3, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a7e      	ldr	r2, [pc, #504]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b7c      	ldr	r3, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7b      	ldr	r2, [pc, #492]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0xc0>
 8003c72:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b73      	ldr	r3, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xd8>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe fa28 	bl	8002100 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fa24 	bl	8002100 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e229      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe8>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fa14 	bl	8002100 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe fa10 	bl	8002100 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e215      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b57      	ldr	r3, [pc, #348]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x110>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d069      	beq.n	8003dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b4d      	ldr	r3, [pc, #308]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1e9      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	493d      	ldr	r1, [pc, #244]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e040      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d023      	beq.n	8003dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a38      	ldr	r2, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe f9c6 	bl	8002100 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe f9c2 	bl	8002100 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1c7      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4929      	ldr	r1, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
 8003daa:	e018      	b.n	8003dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db8:	f7fe f9a2 	bl	8002100 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe f99e 	bl	8002100 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1a3      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d038      	beq.n	8003e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df2:	4b16      	ldr	r3, [pc, #88]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df6:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fe f97f 	bl	8002100 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe f97b 	bl	8002100 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e180      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x23a>
 8003e24:	e01a      	b.n	8003e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fe f965 	bl	8002100 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fe f961 	bl	8002100 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d903      	bls.n	8003e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e166      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
 8003e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e50:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80a4 	beq.w	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a88      	ldr	r2, [pc, #544]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b86      	ldr	r3, [pc, #536]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e92:	4b83      	ldr	r3, [pc, #524]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d118      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e9e:	4b80      	ldr	r3, [pc, #512]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7f      	ldr	r2, [pc, #508]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe f929 	bl	8002100 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb2:	f7fe f925 	bl	8002100 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b64      	cmp	r3, #100	; 0x64
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e12a      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b76      	ldr	r3, [pc, #472]	; (80040a0 <HAL_RCC_OscConfig+0x4d4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d106      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x31a>
 8003ed8:	4b70      	ldr	r3, [pc, #448]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a6f      	ldr	r2, [pc, #444]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	e02d      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x33c>
 8003eee:	4b6b      	ldr	r3, [pc, #428]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a6a      	ldr	r2, [pc, #424]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8003efa:	4b68      	ldr	r3, [pc, #416]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	f023 0304 	bic.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	; 0x70
 8003f06:	e01c      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d10c      	bne.n	8003f2a <HAL_RCC_OscConfig+0x35e>
 8003f10:	4b62      	ldr	r3, [pc, #392]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a61      	ldr	r2, [pc, #388]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f16:	f043 0304 	orr.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f20:	4a5e      	ldr	r2, [pc, #376]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	; 0x70
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0x376>
 8003f2a:	4b5c      	ldr	r3, [pc, #368]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5b      	ldr	r2, [pc, #364]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3a:	4a58      	ldr	r2, [pc, #352]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f3c:	f023 0304 	bic.w	r3, r3, #4
 8003f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d015      	beq.n	8003f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe f8d9 	bl	8002100 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe f8d5 	bl	8002100 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e0d8      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	4b4c      	ldr	r3, [pc, #304]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ee      	beq.n	8003f52 <HAL_RCC_OscConfig+0x386>
 8003f74:	e014      	b.n	8003fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe f8c3 	bl	8002100 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f8bf 	bl	8002100 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0c2      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	4b41      	ldr	r3, [pc, #260]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ee      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d105      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa6:	4b3d      	ldr	r3, [pc, #244]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a3c      	ldr	r2, [pc, #240]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ae 	beq.w	8004118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fbc:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d06d      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d14b      	bne.n	8004068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a31      	ldr	r2, [pc, #196]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f890 	bl	8002100 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fe f88c 	bl	8002100 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e091      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69da      	ldr	r2, [r3, #28]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	061b      	lsls	r3, r3, #24
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	491b      	ldr	r1, [pc, #108]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800403a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe f85e 	bl	8002100 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fe f85a 	bl	8002100 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e05f      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x47c>
 8004066:	e057      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 800406e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fe f844 	bl	8002100 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fe f840 	bl	8002100 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e045      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_RCC_OscConfig+0x4d0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x4b0>
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x54c>
 800409c:	40023800 	.word	0x40023800
 80040a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040a4:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <HAL_RCC_OscConfig+0x558>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d030      	beq.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d129      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d122      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040d4:	4013      	ands	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040dc:	4293      	cmp	r3, r2
 80040de:	d119      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	3b01      	subs	r3, #1
 80040ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d10f      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d0      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	4965      	ldr	r1, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800418e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e073      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4936      	ldr	r1, [pc, #216]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd ff70 	bl	8002100 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fd ff6c 	bl	8002100 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 020f 	bic.w	r2, r3, #15
 8004262:	4922      	ldr	r1, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1d0>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1d4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd fecc 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023c00 	.word	0x40023c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	08009ba0 	.word	0x08009ba0
 80042f8:	2000005c 	.word	0x2000005c
 80042fc:	20000060 	.word	0x20000060

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004306:	2100      	movs	r1, #0
 8004308:	6079      	str	r1, [r7, #4]
 800430a:	2100      	movs	r1, #0
 800430c:	60f9      	str	r1, [r7, #12]
 800430e:	2100      	movs	r1, #0
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004312:	2100      	movs	r1, #0
 8004314:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004316:	4952      	ldr	r1, [pc, #328]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004318:	6889      	ldr	r1, [r1, #8]
 800431a:	f001 010c 	and.w	r1, r1, #12
 800431e:	2908      	cmp	r1, #8
 8004320:	d00d      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x3e>
 8004322:	2908      	cmp	r1, #8
 8004324:	f200 8094 	bhi.w	8004450 <HAL_RCC_GetSysClockFreq+0x150>
 8004328:	2900      	cmp	r1, #0
 800432a:	d002      	beq.n	8004332 <HAL_RCC_GetSysClockFreq+0x32>
 800432c:	2904      	cmp	r1, #4
 800432e:	d003      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x38>
 8004330:	e08e      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004332:	4b4c      	ldr	r3, [pc, #304]	; (8004464 <HAL_RCC_GetSysClockFreq+0x164>)
 8004334:	60bb      	str	r3, [r7, #8]
      break;
 8004336:	e08e      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004338:	4b4b      	ldr	r3, [pc, #300]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 800433a:	60bb      	str	r3, [r7, #8]
      break;
 800433c:	e08b      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800433e:	4948      	ldr	r1, [pc, #288]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004340:	6849      	ldr	r1, [r1, #4]
 8004342:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004346:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004348:	4945      	ldr	r1, [pc, #276]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 800434a:	6849      	ldr	r1, [r1, #4]
 800434c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004350:	2900      	cmp	r1, #0
 8004352:	d024      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004354:	4942      	ldr	r1, [pc, #264]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004356:	6849      	ldr	r1, [r1, #4]
 8004358:	0989      	lsrs	r1, r1, #6
 800435a:	4608      	mov	r0, r1
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004364:	f04f 0500 	mov.w	r5, #0
 8004368:	ea00 0204 	and.w	r2, r0, r4
 800436c:	ea01 0305 	and.w	r3, r1, r5
 8004370:	493d      	ldr	r1, [pc, #244]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 8004372:	fb01 f003 	mul.w	r0, r1, r3
 8004376:	2100      	movs	r1, #0
 8004378:	fb01 f102 	mul.w	r1, r1, r2
 800437c:	1844      	adds	r4, r0, r1
 800437e:	493a      	ldr	r1, [pc, #232]	; (8004468 <HAL_RCC_GetSysClockFreq+0x168>)
 8004380:	fba2 0101 	umull	r0, r1, r2, r1
 8004384:	1863      	adds	r3, r4, r1
 8004386:	4619      	mov	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	f7fb ffae 	bl	80002f0 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	e04a      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800439e:	4b30      	ldr	r3, [pc, #192]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	099b      	lsrs	r3, r3, #6
 80043a4:	461a      	mov	r2, r3
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	ea02 0400 	and.w	r4, r2, r0
 80043b6:	ea03 0501 	and.w	r5, r3, r1
 80043ba:	4620      	mov	r0, r4
 80043bc:	4629      	mov	r1, r5
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	014b      	lsls	r3, r1, #5
 80043c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043cc:	0142      	lsls	r2, r0, #5
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	1b00      	subs	r0, r0, r4
 80043d4:	eb61 0105 	sbc.w	r1, r1, r5
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	018b      	lsls	r3, r1, #6
 80043e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043e6:	0182      	lsls	r2, r0, #6
 80043e8:	1a12      	subs	r2, r2, r0
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	f04f 0000 	mov.w	r0, #0
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	00d9      	lsls	r1, r3, #3
 80043f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043fc:	00d0      	lsls	r0, r2, #3
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	1912      	adds	r2, r2, r4
 8004404:	eb45 0303 	adc.w	r3, r5, r3
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	0299      	lsls	r1, r3, #10
 8004412:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004416:	0290      	lsls	r0, r2, #10
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f7fb ff62 	bl	80002f0 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_GetSysClockFreq+0x160>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	3301      	adds	r3, #1
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	60bb      	str	r3, [r7, #8]
      break;
 800444e:	e002      	b.n	8004456 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <HAL_RCC_GetSysClockFreq+0x164>)
 8004452:	60bb      	str	r3, [r7, #8]
      break;
 8004454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004456:	68bb      	ldr	r3, [r7, #8]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	00f42400 	.word	0x00f42400
 8004468:	017d7840 	.word	0x017d7840

0800446c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HAL_RCC_GetHCLKFreq+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	2000005c 	.word	0x2000005c

08004484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004488:	f7ff fff0 	bl	800446c <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	08009bb0 	.word	0x08009bb0

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044b0:	f7ff ffdc 	bl	800446c <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0b5b      	lsrs	r3, r3, #13
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	08009bb0 	.word	0x08009bb0

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d012      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044fc:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a68      	ldr	r2, [pc, #416]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004506:	6093      	str	r3, [r2, #8]
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004510:	4964      	ldr	r1, [pc, #400]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d017      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800452e:	4b5d      	ldr	r3, [pc, #372]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	4959      	ldr	r1, [pc, #356]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800456a:	4b4e      	ldr	r3, [pc, #312]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	494a      	ldr	r1, [pc, #296]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 808b 	beq.w	80046ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
 80045c4:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045d0:	4b35      	ldr	r3, [pc, #212]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fd fd90 	bl	8002100 <HAL_GetTick>
 80045e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd fd8c 	bl	8002100 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e38f      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045f6:	4b2c      	ldr	r3, [pc, #176]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004602:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d035      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d02e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004620:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800462a:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a1a      	ldr	r2, [pc, #104]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004642:	4a18      	ldr	r2, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d114      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fd fd54 	bl	8002100 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	e00a      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800465c:	f7fd fd50 	bl	8002100 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f241 3288 	movw	r2, #5000	; 0x1388
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e351      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d111      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469a:	400b      	ands	r3, r1
 800469c:	4901      	ldr	r1, [pc, #4]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
 80046a2:	e00b      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40007000 	.word	0x40007000
 80046ac:	0ffffcff 	.word	0x0ffffcff
 80046b0:	4bb3      	ldr	r3, [pc, #716]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4ab2      	ldr	r2, [pc, #712]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046ba:	6093      	str	r3, [r2, #8]
 80046bc:	4bb0      	ldr	r3, [pc, #704]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	49ad      	ldr	r1, [pc, #692]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0310 	and.w	r3, r3, #16
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046da:	4ba9      	ldr	r3, [pc, #676]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	4aa7      	ldr	r2, [pc, #668]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046ea:	4ba5      	ldr	r3, [pc, #660]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	49a2      	ldr	r1, [pc, #648]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004708:	4b9d      	ldr	r3, [pc, #628]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004716:	499a      	ldr	r1, [pc, #616]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800472a:	4b95      	ldr	r3, [pc, #596]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	4991      	ldr	r1, [pc, #580]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800474c:	4b8c      	ldr	r3, [pc, #560]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475a:	4989      	ldr	r1, [pc, #548]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800476e:	4b84      	ldr	r3, [pc, #528]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4980      	ldr	r1, [pc, #512]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004790:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4978      	ldr	r1, [pc, #480]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b2:	4b73      	ldr	r3, [pc, #460]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f023 020c 	bic.w	r2, r3, #12
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	496f      	ldr	r1, [pc, #444]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	4967      	ldr	r1, [pc, #412]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047f6:	4b62      	ldr	r3, [pc, #392]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	495e      	ldr	r1, [pc, #376]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004826:	4956      	ldr	r1, [pc, #344]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004848:	494d      	ldr	r1, [pc, #308]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	4945      	ldr	r1, [pc, #276]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800487e:	4b40      	ldr	r3, [pc, #256]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800488c:	493c      	ldr	r1, [pc, #240]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a0:	4b37      	ldr	r3, [pc, #220]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ae:	4934      	ldr	r1, [pc, #208]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d0:	492b      	ldr	r1, [pc, #172]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e0:	d101      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	491b      	ldr	r1, [pc, #108]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004934:	4912      	ldr	r1, [pc, #72]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004958:	4909      	ldr	r1, [pc, #36]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800496c:	4b04      	ldr	r3, [pc, #16]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	e002      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	4986      	ldr	r1, [pc, #536]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004998:	4b81      	ldr	r3, [pc, #516]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800499a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a8:	497d      	ldr	r1, [pc, #500]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d006      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 80d6 	beq.w	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c4:	4b76      	ldr	r3, [pc, #472]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d0:	f7fd fb96 	bl	8002100 <HAL_GetTick>
 80049d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d8:	f7fd fb92 	bl	8002100 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e195      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049ea:	4b6d      	ldr	r3, [pc, #436]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f0      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d021      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a1e:	0e1b      	lsrs	r3, r3, #24
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	019a      	lsls	r2, r3, #6
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	071b      	lsls	r3, r3, #28
 8004a3e:	4958      	ldr	r1, [pc, #352]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02e      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a70:	d129      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a72:	4b4b      	ldr	r3, [pc, #300]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a80:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a86:	0f1b      	lsrs	r3, r3, #28
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	019a      	lsls	r2, r3, #6
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	061b      	lsls	r3, r3, #24
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	071b      	lsls	r3, r3, #28
 8004aa6:	493e      	ldr	r1, [pc, #248]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004aae:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab4:	f023 021f 	bic.w	r2, r3, #31
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4938      	ldr	r1, [pc, #224]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01d      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ad2:	4b33      	ldr	r3, [pc, #204]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	0f1b      	lsrs	r3, r3, #28
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	491a      	ldr	r1, [pc, #104]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b3e:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fad9 	bl	8002100 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b52:	f7fd fad5 	bl	8002100 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b64      	cmp	r3, #100	; 0x64
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0d8      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	f040 80ce 	bne.w	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fd fabc 	bl	8002100 <HAL_GetTick>
 8004b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b8c:	f7fd fab8 	bl	8002100 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d904      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0bb      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b9e:	bf00      	nop
 8004ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ba4:	4b5e      	ldr	r3, [pc, #376]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb0:	d0ec      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02e      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d12a      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bda:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	0c1b      	lsrs	r3, r3, #16
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004be8:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	0f1b      	lsrs	r3, r3, #28
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	019a      	lsls	r2, r3, #6
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	041b      	lsls	r3, r3, #16
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	071b      	lsls	r3, r3, #28
 8004c0e:	4944      	ldr	r1, [pc, #272]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c16:	4b42      	ldr	r3, [pc, #264]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c44:	d11d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c54:	4b32      	ldr	r3, [pc, #200]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0f1b      	lsrs	r3, r3, #28
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d028      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c9c:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	4917      	ldr	r1, [pc, #92]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004cca:	4b15      	ldr	r3, [pc, #84]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4911      	ldr	r1, [pc, #68]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fd fa08 	bl	8002100 <HAL_GetTick>
 8004cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cf4:	f7fd fa04 	bl	8002100 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e007      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d1ef      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e09d      	b.n	8004e72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d009      	beq.n	8004d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
 8004d4e:	e005      	b.n	8004d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fc fb4a 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d9c:	d902      	bls.n	8004da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	e002      	b.n	8004daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004db2:	d007      	beq.n	8004dc4 <HAL_SPI_Init+0xa0>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dbc:	d002      	beq.n	8004dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e06:	ea42 0103 	orr.w	r1, r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 0204 	and.w	r2, r3, #4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e40:	ea42 0103 	orr.w	r1, r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
    return;
 8004ebe:	e0d7      	b.n	8005070 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_SPI_IRQHandler+0x66>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	09db      	lsrs	r3, r3, #7
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
    return;
 8004ee0:	e0c6      	b.n	8005070 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10c      	bne.n	8004f08 <HAL_SPI_IRQHandler+0x8c>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	099b      	lsrs	r3, r3, #6
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	0a1b      	lsrs	r3, r3, #8
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80b4 	beq.w	8005070 <HAL_SPI_IRQHandler+0x1f4>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80ad 	beq.w	8005070 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	099b      	lsrs	r3, r3, #6
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d023      	beq.n	8004f6a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d011      	beq.n	8004f52 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f32:	f043 0204 	orr.w	r2, r3, #4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	e00b      	b.n	8004f6a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]
        return;
 8004f68:	e082      	b.n	8005070 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d014      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00c      	beq.n	8004fc6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	f043 0208 	orr.w	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d04f      	beq.n	800506e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fdc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <HAL_SPI_IRQHandler+0x17e>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d034      	beq.n	8005064 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0203 	bic.w	r2, r2, #3
 8005008:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_SPI_IRQHandler+0x1fc>)
 8005018:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe f900 	bl	8003224 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	2b00      	cmp	r3, #0
 800503c:	d016      	beq.n	800506c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	4a0d      	ldr	r2, [pc, #52]	; (8005078 <HAL_SPI_IRQHandler+0x1fc>)
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe f8ea 	bl	8003224 <HAL_DMA_Abort_IT>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005062:	e003      	b.n	800506c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f809 	bl	800507c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800506a:	e000      	b.n	800506e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800506c:	bf00      	nop
    return;
 800506e:	bf00      	nop
  }
}
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	08005091 	.word	0x08005091

0800507c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ffe5 	bl	800507c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e049      	b.n	8005160 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7fc fd31 	bl	8001b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2202      	movs	r2, #2
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4619      	mov	r1, r3
 80050f8:	4610      	mov	r0, r2
 80050fa:	f000 fdcb 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e054      	b.n	800522a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <HAL_TIM_Base_Start_IT+0xd0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d01d      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a22      	ldr	r2, [pc, #136]	; (800523c <HAL_TIM_Base_Start_IT+0xd4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_TIM_Base_Start_IT+0xd8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <HAL_TIM_Base_Start_IT+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_TIM_Base_Start_IT+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <HAL_TIM_Base_Start_IT+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d115      	bne.n	8005214 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_TIM_Base_Start_IT+0xec>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d015      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d011      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e008      	b.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e000      	b.n	8005228 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40001800 	.word	0x40001800
 8005254:	00010007 	.word	0x00010007

08005258 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0201 	bic.w	r2, r2, #1
 800526e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a1a      	ldr	r2, [r3, #32]
 8005276:	f241 1311 	movw	r3, #4369	; 0x1111
 800527a:	4013      	ands	r3, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10f      	bne.n	80052a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6a1a      	ldr	r2, [r3, #32]
 8005286:	f240 4344 	movw	r3, #1092	; 0x444
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d107      	bne.n	80052a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e049      	b.n	800535c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fc fc75 	bl	8001bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 fccd 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start+0x24>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e03c      	b.n	8005402 <HAL_TIM_PWM_Start+0x9e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d109      	bne.n	80053a2 <HAL_TIM_PWM_Start+0x3e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e02f      	b.n	8005402 <HAL_TIM_PWM_Start+0x9e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d109      	bne.n	80053bc <HAL_TIM_PWM_Start+0x58>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e022      	b.n	8005402 <HAL_TIM_PWM_Start+0x9e>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d109      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x72>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	e015      	b.n	8005402 <HAL_TIM_PWM_Start+0x9e>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d109      	bne.n	80053f0 <HAL_TIM_PWM_Start+0x8c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <HAL_TIM_PWM_Start+0x9e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e092      	b.n	8005530 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <HAL_TIM_PWM_Start+0xb6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005418:	e023      	b.n	8005462 <HAL_TIM_PWM_Start+0xfe>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b04      	cmp	r3, #4
 800541e:	d104      	bne.n	800542a <HAL_TIM_PWM_Start+0xc6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2202      	movs	r2, #2
 8005424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005428:	e01b      	b.n	8005462 <HAL_TIM_PWM_Start+0xfe>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0xd6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	e013      	b.n	8005462 <HAL_TIM_PWM_Start+0xfe>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0xe6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005448:	e00b      	b.n	8005462 <HAL_TIM_PWM_Start+0xfe>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b10      	cmp	r3, #16
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xf6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005458:	e003      	b.n	8005462 <HAL_TIM_PWM_Start+0xfe>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 ffaa 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a30      	ldr	r2, [pc, #192]	; (8005538 <HAL_TIM_PWM_Start+0x1d4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_PWM_Start+0x120>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2f      	ldr	r2, [pc, #188]	; (800553c <HAL_TIM_PWM_Start+0x1d8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_TIM_PWM_Start+0x124>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_TIM_PWM_Start+0x126>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800549c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a25      	ldr	r2, [pc, #148]	; (8005538 <HAL_TIM_PWM_Start+0x1d4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d022      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d01d      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a22      	ldr	r2, [pc, #136]	; (8005540 <HAL_TIM_PWM_Start+0x1dc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a20      	ldr	r2, [pc, #128]	; (8005544 <HAL_TIM_PWM_Start+0x1e0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <HAL_TIM_PWM_Start+0x1e4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a19      	ldr	r2, [pc, #100]	; (800553c <HAL_TIM_PWM_Start+0x1d8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_TIM_PWM_Start+0x1e8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIM_PWM_Start+0x18a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	; (8005550 <HAL_TIM_PWM_Start+0x1ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d115      	bne.n	800551a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b17      	ldr	r3, [pc, #92]	; (8005554 <HAL_TIM_PWM_Start+0x1f0>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b06      	cmp	r3, #6
 80054fe:	d015      	beq.n	800552c <HAL_TIM_PWM_Start+0x1c8>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005506:	d011      	beq.n	800552c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005518:	e008      	b.n	800552c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f042 0201 	orr.w	r2, r2, #1
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e000      	b.n	800552e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40010000 	.word	0x40010000
 800553c:	40010400 	.word	0x40010400
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40014000 	.word	0x40014000
 8005550:	40001800 	.word	0x40001800
 8005554:	00010007 	.word	0x00010007

08005558 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 ff2a 	bl	80063c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a36      	ldr	r2, [pc, #216]	; (8005650 <HAL_TIM_PWM_Stop+0xf8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_PWM_Stop+0x2c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a35      	ldr	r2, [pc, #212]	; (8005654 <HAL_TIM_PWM_Stop+0xfc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_TIM_PWM_Stop+0x30>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_TIM_PWM_Stop+0x32>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d017      	beq.n	80055be <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a1a      	ldr	r2, [r3, #32]
 8005594:	f241 1311 	movw	r3, #4369	; 0x1111
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10f      	bne.n	80055be <HAL_TIM_PWM_Stop+0x66>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	f240 4344 	movw	r3, #1092	; 0x444
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d107      	bne.n	80055be <HAL_TIM_PWM_Stop+0x66>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10f      	bne.n	80055ee <HAL_TIM_PWM_Stop+0x96>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	f240 4344 	movw	r3, #1092	; 0x444
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d107      	bne.n	80055ee <HAL_TIM_PWM_Stop+0x96>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Stop+0xa6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	e023      	b.n	8005646 <HAL_TIM_PWM_Stop+0xee>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Stop+0xb6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	e01b      	b.n	8005646 <HAL_TIM_PWM_Stop+0xee>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_PWM_Stop+0xc6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	e013      	b.n	8005646 <HAL_TIM_PWM_Stop+0xee>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Stop+0xd6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800562c:	e00b      	b.n	8005646 <HAL_TIM_PWM_Stop+0xee>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b10      	cmp	r3, #16
 8005632:	d104      	bne.n	800563e <HAL_TIM_PWM_Stop+0xe6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563c:	e003      	b.n	8005646 <HAL_TIM_PWM_Stop+0xee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b02      	cmp	r3, #2
 800566c:	d122      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b02      	cmp	r3, #2
 800567a:	d11b      	bne.n	80056b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0202 	mvn.w	r2, #2
 8005684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fadc 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80056a0:	e005      	b.n	80056ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 face 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fadf 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	f003 0304 	and.w	r3, r3, #4
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d122      	bne.n	8005708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d11b      	bne.n	8005708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0204 	mvn.w	r2, #4
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2202      	movs	r2, #2
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fab2 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 faa4 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fab5 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b08      	cmp	r3, #8
 8005714:	d122      	bne.n	800575c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b08      	cmp	r3, #8
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f06f 0208 	mvn.w	r2, #8
 800572c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2204      	movs	r2, #4
 8005732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa88 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 8005748:	e005      	b.n	8005756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fa7a 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fa8b 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b10      	cmp	r3, #16
 8005768:	d122      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b10      	cmp	r3, #16
 8005776:	d11b      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f06f 0210 	mvn.w	r2, #16
 8005780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2208      	movs	r2, #8
 8005786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa5e 	bl	8005c58 <HAL_TIM_IC_CaptureCallback>
 800579c:	e005      	b.n	80057aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa50 	bl	8005c44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fa61 	bl	8005c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0201 	mvn.w	r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fab0 	bl	8001d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fe9c 	bl	8006540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005816:	d10e      	bne.n	8005836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d107      	bne.n	8005836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800582e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fe8f 	bl	8006554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d10e      	bne.n	8005862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d107      	bne.n	8005862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800585a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa0f 	bl	8005c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b20      	cmp	r3, #32
 800586e:	d10e      	bne.n	800588e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d107      	bne.n	800588e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f06f 0220 	mvn.w	r2, #32
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fe4f 	bl	800652c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0fd      	b.n	8005aae <HAL_TIM_PWM_ConfigChannel+0x216>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b14      	cmp	r3, #20
 80058be:	f200 80f0 	bhi.w	8005aa2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	0800591d 	.word	0x0800591d
 80058cc:	08005aa3 	.word	0x08005aa3
 80058d0:	08005aa3 	.word	0x08005aa3
 80058d4:	08005aa3 	.word	0x08005aa3
 80058d8:	0800595d 	.word	0x0800595d
 80058dc:	08005aa3 	.word	0x08005aa3
 80058e0:	08005aa3 	.word	0x08005aa3
 80058e4:	08005aa3 	.word	0x08005aa3
 80058e8:	0800599f 	.word	0x0800599f
 80058ec:	08005aa3 	.word	0x08005aa3
 80058f0:	08005aa3 	.word	0x08005aa3
 80058f4:	08005aa3 	.word	0x08005aa3
 80058f8:	080059df 	.word	0x080059df
 80058fc:	08005aa3 	.word	0x08005aa3
 8005900:	08005aa3 	.word	0x08005aa3
 8005904:	08005aa3 	.word	0x08005aa3
 8005908:	08005a21 	.word	0x08005a21
 800590c:	08005aa3 	.word	0x08005aa3
 8005910:	08005aa3 	.word	0x08005aa3
 8005914:	08005aa3 	.word	0x08005aa3
 8005918:	08005a61 	.word	0x08005a61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fa56 	bl	8005dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0208 	orr.w	r2, r2, #8
 8005936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0204 	bic.w	r2, r2, #4
 8005946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6999      	ldr	r1, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	619a      	str	r2, [r3, #24]
      break;
 800595a:	e0a3      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 faa8 	bl	8005eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6999      	ldr	r1, [r3, #24]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	021a      	lsls	r2, r3, #8
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	619a      	str	r2, [r3, #24]
      break;
 800599c:	e082      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 faff 	bl	8005fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0208 	orr.w	r2, r2, #8
 80059b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0204 	bic.w	r2, r2, #4
 80059c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	61da      	str	r2, [r3, #28]
      break;
 80059dc:	e062      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fb55 	bl	8006094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69d9      	ldr	r1, [r3, #28]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	021a      	lsls	r2, r3, #8
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	61da      	str	r2, [r3, #28]
      break;
 8005a1e:	e041      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fb8c 	bl	8006144 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0208 	orr.w	r2, r2, #8
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0204 	bic.w	r2, r2, #4
 8005a4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a5e:	e021      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fbbe 	bl	80061e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aa0:	e000      	b.n	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005aa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIM_ConfigClockSource+0x18>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e0b3      	b.n	8005c38 <HAL_TIM_ConfigClockSource+0x180>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <HAL_TIM_ConfigClockSource+0x188>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b08:	d03e      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xd0>
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b0e:	f200 8087 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b16:	f000 8085 	beq.w	8005c24 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d87f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b20:	2b70      	cmp	r3, #112	; 0x70
 8005b22:	d01a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xa2>
 8005b24:	2b70      	cmp	r3, #112	; 0x70
 8005b26:	d87b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b28:	2b60      	cmp	r3, #96	; 0x60
 8005b2a:	d050      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x116>
 8005b2c:	2b60      	cmp	r3, #96	; 0x60
 8005b2e:	d877      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b30:	2b50      	cmp	r3, #80	; 0x50
 8005b32:	d03c      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xf6>
 8005b34:	2b50      	cmp	r3, #80	; 0x50
 8005b36:	d873      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b40      	cmp	r3, #64	; 0x40
 8005b3a:	d058      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x136>
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d86f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d064      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x156>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d86b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d060      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x156>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d867      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05c      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x156>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d05a      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b58:	e062      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f000 fc0b 	bl	8006384 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e04e      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f000 fbf4 	bl	8006384 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e03b      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 fb68 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2150      	movs	r1, #80	; 0x50
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fbc1 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e02b      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 fb87 	bl	80062ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2160      	movs	r1, #96	; 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fbb1 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005bec:	e01b      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 fb48 	bl	8006290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2140      	movs	r1, #64	; 0x40
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fba1 	bl	800634e <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e00b      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 fb98 	bl	800634e <TIM_ITRx_SetConfig>
        break;
 8005c1e:	e002      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	fffeff88 	.word	0xfffeff88

08005c44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a40      	ldr	r2, [pc, #256]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3d      	ldr	r2, [pc, #244]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3c      	ldr	r2, [pc, #240]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3b      	ldr	r2, [pc, #236]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3a      	ldr	r2, [pc, #232]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d02b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d027      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <TIM_Base_SetConfig+0x118>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d023      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a2b      	ldr	r2, [pc, #172]	; (8005db0 <TIM_Base_SetConfig+0x11c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a2a      	ldr	r2, [pc, #168]	; (8005db4 <TIM_Base_SetConfig+0x120>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d017      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <TIM_Base_SetConfig+0x128>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a27      	ldr	r2, [pc, #156]	; (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00f      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a25      	ldr	r2, [pc, #148]	; (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a24      	ldr	r2, [pc, #144]	; (8005dcc <TIM_Base_SetConfig+0x138>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d003      	beq.n	8005d46 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d108      	bne.n	8005d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <TIM_Base_SetConfig+0x114>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40014400 	.word	0x40014400
 8005dc4:	40014800 	.word	0x40014800
 8005dc8:	40001800 	.word	0x40001800
 8005dcc:	40001c00 	.word	0x40001c00
 8005dd0:	40002000 	.word	0x40002000

08005dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <TIM_OC1_SetConfig+0xd8>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 0302 	bic.w	r3, r3, #2
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC1_SetConfig+0x64>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <TIM_OC1_SetConfig+0xe0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10c      	bne.n	8005e52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0308 	bic.w	r3, r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f023 0304 	bic.w	r3, r3, #4
 8005e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a16      	ldr	r2, [pc, #88]	; (8005eb0 <TIM_OC1_SetConfig+0xdc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_OC1_SetConfig+0x8e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <TIM_OC1_SetConfig+0xe0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d111      	bne.n	8005e86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	fffeff8f 	.word	0xfffeff8f
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0210 	bic.w	r2, r3, #16
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4b2e      	ldr	r3, [pc, #184]	; (8005f9c <TIM_OC2_SetConfig+0xe4>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a23      	ldr	r2, [pc, #140]	; (8005fa0 <TIM_OC2_SetConfig+0xe8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_OC2_SetConfig+0x68>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <TIM_OC2_SetConfig+0xec>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d10d      	bne.n	8005f3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <TIM_OC2_SetConfig+0xe8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC2_SetConfig+0x94>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <TIM_OC2_SetConfig+0xec>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d113      	bne.n	8005f74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	621a      	str	r2, [r3, #32]
}
 8005f8e:	bf00      	nop
 8005f90:	371c      	adds	r7, #28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	feff8fff 	.word	0xfeff8fff
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010400 	.word	0x40010400

08005fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b2d      	ldr	r3, [pc, #180]	; (8006088 <TIM_OC3_SetConfig+0xe0>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a22      	ldr	r2, [pc, #136]	; (800608c <TIM_OC3_SetConfig+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d003      	beq.n	800600e <TIM_OC3_SetConfig+0x66>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a21      	ldr	r2, [pc, #132]	; (8006090 <TIM_OC3_SetConfig+0xe8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d10d      	bne.n	800602a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <TIM_OC3_SetConfig+0xe4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_OC3_SetConfig+0x92>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a16      	ldr	r2, [pc, #88]	; (8006090 <TIM_OC3_SetConfig+0xe8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	621a      	str	r2, [r3, #32]
}
 800607c:	bf00      	nop
 800607e:	371c      	adds	r7, #28
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	fffeff8f 	.word	0xfffeff8f
 800608c:	40010000 	.word	0x40010000
 8006090:	40010400 	.word	0x40010400

08006094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <TIM_OC4_SetConfig+0xa4>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	021b      	lsls	r3, r3, #8
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a13      	ldr	r2, [pc, #76]	; (800613c <TIM_OC4_SetConfig+0xa8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_OC4_SetConfig+0x68>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a12      	ldr	r2, [pc, #72]	; (8006140 <TIM_OC4_SetConfig+0xac>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d109      	bne.n	8006110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	019b      	lsls	r3, r3, #6
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	feff8fff 	.word	0xfeff8fff
 800613c:	40010000 	.word	0x40010000
 8006140:	40010400 	.word	0x40010400

08006144 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <TIM_OC5_SetConfig+0x98>)
 8006170:	4013      	ands	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006184:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <TIM_OC5_SetConfig+0x9c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC5_SetConfig+0x5e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <TIM_OC5_SetConfig+0xa0>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d109      	bne.n	80061b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	fffeff8f 	.word	0xfffeff8f
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <TIM_OC6_SetConfig+0x9c>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800622a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	051b      	lsls	r3, r3, #20
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a13      	ldr	r2, [pc, #76]	; (8006288 <TIM_OC6_SetConfig+0xa0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC6_SetConfig+0x60>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a12      	ldr	r2, [pc, #72]	; (800628c <TIM_OC6_SetConfig+0xa4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d109      	bne.n	800625c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	029b      	lsls	r3, r3, #10
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	feff8fff 	.word	0xfeff8fff
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f023 0201 	bic.w	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f023 030a 	bic.w	r3, r3, #10
 80062cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	60f8      	str	r0, [r7, #12]
 80062f6:	60b9      	str	r1, [r7, #8]
 80062f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0210 	bic.w	r2, r3, #16
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	031b      	lsls	r3, r3, #12
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800634e:	b480      	push	{r7}
 8006350:	b085      	sub	sp, #20
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	f043 0307 	orr.w	r3, r3, #7
 8006370:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	609a      	str	r2, [r3, #8]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800639e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	021a      	lsls	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	431a      	orrs	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	371c      	adds	r7, #28
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2201      	movs	r2, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1a      	ldr	r2, [r3, #32]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a1a      	ldr	r2, [r3, #32]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	431a      	orrs	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006424:	2302      	movs	r3, #2
 8006426:	e06d      	b.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a30      	ldr	r2, [pc, #192]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d004      	beq.n	800645c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2f      	ldr	r2, [pc, #188]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006462:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006474:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a20      	ldr	r2, [pc, #128]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d022      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649a:	d01d      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d018      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1c      	ldr	r2, [pc, #112]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1a      	ldr	r2, [pc, #104]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a16      	ldr	r2, [pc, #88]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d10c      	bne.n	80064f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000
 8006528:	40001800 	.word	0x40001800

0800652c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e040      	b.n	80065fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fb fca6 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0201 	bic.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa56 	bl	8006a58 <UART_SetConfig>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e022      	b.n	80065fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fcac 	bl	8006f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fd33 	bl	8007060 <UART_CheckIdleState>
 80065fa:	4603      	mov	r3, r0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b088      	sub	sp, #32
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	f640 030f 	movw	r3, #2063	; 0x80f
 800662a:	4013      	ands	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d113      	bne.n	800665c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 81cc 	beq.w	80069ea <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
      }
      return;
 800665a:	e1c6      	b.n	80069ea <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80e3 	beq.w	800682a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4ba5      	ldr	r3, [pc, #660]	; (8006908 <HAL_UART_IRQHandler+0x304>)
 8006672:	4013      	ands	r3, r2
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80d8 	beq.w	800682a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_UART_IRQHandler+0xa2>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2201      	movs	r2, #1
 8006694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800669c:	f043 0201 	orr.w	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <HAL_UART_IRQHandler+0xce>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2202      	movs	r2, #2
 80066c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c8:	f043 0204 	orr.w	r2, r3, #4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <HAL_UART_IRQHandler+0xfa>
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2204      	movs	r2, #4
 80066ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f4:	f043 0202 	orr.w	r2, r3, #2
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672a:	f043 0208 	orr.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_UART_IRQHandler+0x15e>
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00c      	beq.n	8006762 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006758:	f043 0220 	orr.w	r2, r3, #32
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8140 	beq.w	80069ee <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00c      	beq.n	8006792 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006798:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d004      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d031      	beq.n	8006816 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd19 	bl	80071ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d123      	bne.n	800680e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d013      	beq.n	8006806 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	4a4a      	ldr	r2, [pc, #296]	; (800690c <HAL_UART_IRQHandler+0x308>)
 80067e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fc fd1a 	bl	8003224 <HAL_DMA_Abort_IT>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d017      	beq.n	8006826 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006800:	4610      	mov	r0, r2
 8006802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e00f      	b.n	8006826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f906 	bl	8006a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e00b      	b.n	8006826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f902 	bl	8006a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e007      	b.n	8006826 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f8fe 	bl	8006a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006824:	e0e3      	b.n	80069ee <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006826:	bf00      	nop
    return;
 8006828:	e0e1      	b.n	80069ee <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682e:	2b01      	cmp	r3, #1
 8006830:	f040 80a7 	bne.w	8006982 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f003 0310 	and.w	r3, r3, #16
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80a1 	beq.w	8006982 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 809b 	beq.w	8006982 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2210      	movs	r2, #16
 8006852:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b40      	cmp	r3, #64	; 0x40
 8006860:	d156      	bne.n	8006910 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800686c:	893b      	ldrh	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80bf 	beq.w	80069f2 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800687a:	893a      	ldrh	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	f080 80b8 	bcs.w	80069f2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	893a      	ldrh	r2, [r7, #8]
 8006886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006894:	d02a      	beq.n	80068ec <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0201 	bic.w	r2, r2, #1
 80068b4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2220      	movs	r2, #32
 80068ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0210 	bic.w	r2, r2, #16
 80068e0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fc fc2c 	bl	8003144 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f893 	bl	8006a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006906:	e074      	b.n	80069f2 <HAL_UART_IRQHandler+0x3ee>
 8006908:	04000120 	.word	0x04000120
 800690c:	08007249 	.word	0x08007249
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691c:	b29b      	uxth	r3, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d063      	beq.n	80069f6 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800692e:	897b      	ldrh	r3, [r7, #10]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d060      	beq.n	80069f6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006942:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0210 	bic.w	r2, r2, #16
 8006974:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006976:	897b      	ldrh	r3, [r7, #10]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f856 	bl	8006a2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006980:	e039      	b.n	80069f6 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <HAL_UART_IRQHandler+0x3a4>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d008      	beq.n	80069a8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800699e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f84f 	bl	8006a44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069a6:	e029      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00d      	beq.n	80069ce <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d008      	beq.n	80069ce <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01a      	beq.n	80069fa <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	4798      	blx	r3
    }
    return;
 80069cc:	e015      	b.n	80069fa <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0x3f8>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00c      	beq.n	80069fc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fc46 	bl	8007274 <UART_EndTransmit_IT>
    return;
 80069e8:	e008      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80069ea:	bf00      	nop
 80069ec:	e006      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
    return;
 80069ee:	bf00      	nop
 80069f0:	e004      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
      return;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <HAL_UART_IRQHandler+0x3f8>
    return;
 80069fa:	bf00      	nop
  }

}
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop

08006a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4ba7      	ldr	r3, [pc, #668]	; (8006d20 <UART_SetConfig+0x2c8>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a95      	ldr	r2, [pc, #596]	; (8006d24 <UART_SetConfig+0x2cc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d120      	bne.n	8006b16 <UART_SetConfig+0xbe>
 8006ad4:	4b94      	ldr	r3, [pc, #592]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d816      	bhi.n	8006b10 <UART_SetConfig+0xb8>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x90>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b05 	.word	0x08006b05
 8006af0:	08006aff 	.word	0x08006aff
 8006af4:	08006b0b 	.word	0x08006b0b
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e14f      	b.n	8006d9e <UART_SetConfig+0x346>
 8006afe:	2302      	movs	r3, #2
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e14c      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b04:	2304      	movs	r3, #4
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e149      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b0a:	2308      	movs	r3, #8
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e146      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b10:	2310      	movs	r3, #16
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e143      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a84      	ldr	r2, [pc, #528]	; (8006d2c <UART_SetConfig+0x2d4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d132      	bne.n	8006b86 <UART_SetConfig+0x12e>
 8006b20:	4b81      	ldr	r3, [pc, #516]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	2b0c      	cmp	r3, #12
 8006b2c:	d828      	bhi.n	8006b80 <UART_SetConfig+0x128>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0xdc>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006b81 	.word	0x08006b81
 8006b3c:	08006b81 	.word	0x08006b81
 8006b40:	08006b81 	.word	0x08006b81
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006b81 	.word	0x08006b81
 8006b4c:	08006b81 	.word	0x08006b81
 8006b50:	08006b81 	.word	0x08006b81
 8006b54:	08006b6f 	.word	0x08006b6f
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b81 	.word	0x08006b81
 8006b64:	08006b7b 	.word	0x08006b7b
 8006b68:	2300      	movs	r3, #0
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e117      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	77fb      	strb	r3, [r7, #31]
 8006b72:	e114      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b74:	2304      	movs	r3, #4
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e111      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b7a:	2308      	movs	r3, #8
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e10e      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b80:	2310      	movs	r3, #16
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e10b      	b.n	8006d9e <UART_SetConfig+0x346>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a69      	ldr	r2, [pc, #420]	; (8006d30 <UART_SetConfig+0x2d8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d120      	bne.n	8006bd2 <UART_SetConfig+0x17a>
 8006b90:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b9a:	2b30      	cmp	r3, #48	; 0x30
 8006b9c:	d013      	beq.n	8006bc6 <UART_SetConfig+0x16e>
 8006b9e:	2b30      	cmp	r3, #48	; 0x30
 8006ba0:	d814      	bhi.n	8006bcc <UART_SetConfig+0x174>
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d009      	beq.n	8006bba <UART_SetConfig+0x162>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d810      	bhi.n	8006bcc <UART_SetConfig+0x174>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <UART_SetConfig+0x15c>
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d006      	beq.n	8006bc0 <UART_SetConfig+0x168>
 8006bb2:	e00b      	b.n	8006bcc <UART_SetConfig+0x174>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	77fb      	strb	r3, [r7, #31]
 8006bb8:	e0f1      	b.n	8006d9e <UART_SetConfig+0x346>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	77fb      	strb	r3, [r7, #31]
 8006bbe:	e0ee      	b.n	8006d9e <UART_SetConfig+0x346>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e0eb      	b.n	8006d9e <UART_SetConfig+0x346>
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e0e8      	b.n	8006d9e <UART_SetConfig+0x346>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e0e5      	b.n	8006d9e <UART_SetConfig+0x346>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a57      	ldr	r2, [pc, #348]	; (8006d34 <UART_SetConfig+0x2dc>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d120      	bne.n	8006c1e <UART_SetConfig+0x1c6>
 8006bdc:	4b52      	ldr	r3, [pc, #328]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006be6:	2bc0      	cmp	r3, #192	; 0xc0
 8006be8:	d013      	beq.n	8006c12 <UART_SetConfig+0x1ba>
 8006bea:	2bc0      	cmp	r3, #192	; 0xc0
 8006bec:	d814      	bhi.n	8006c18 <UART_SetConfig+0x1c0>
 8006bee:	2b80      	cmp	r3, #128	; 0x80
 8006bf0:	d009      	beq.n	8006c06 <UART_SetConfig+0x1ae>
 8006bf2:	2b80      	cmp	r3, #128	; 0x80
 8006bf4:	d810      	bhi.n	8006c18 <UART_SetConfig+0x1c0>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <UART_SetConfig+0x1a8>
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d006      	beq.n	8006c0c <UART_SetConfig+0x1b4>
 8006bfe:	e00b      	b.n	8006c18 <UART_SetConfig+0x1c0>
 8006c00:	2300      	movs	r3, #0
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e0cb      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c06:	2302      	movs	r3, #2
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e0c8      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e0c5      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c12:	2308      	movs	r3, #8
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e0c2      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c18:	2310      	movs	r3, #16
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e0bf      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a45      	ldr	r2, [pc, #276]	; (8006d38 <UART_SetConfig+0x2e0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d125      	bne.n	8006c74 <UART_SetConfig+0x21c>
 8006c28:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c36:	d017      	beq.n	8006c68 <UART_SetConfig+0x210>
 8006c38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c3c:	d817      	bhi.n	8006c6e <UART_SetConfig+0x216>
 8006c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c42:	d00b      	beq.n	8006c5c <UART_SetConfig+0x204>
 8006c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c48:	d811      	bhi.n	8006c6e <UART_SetConfig+0x216>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <UART_SetConfig+0x1fe>
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	d006      	beq.n	8006c62 <UART_SetConfig+0x20a>
 8006c54:	e00b      	b.n	8006c6e <UART_SetConfig+0x216>
 8006c56:	2300      	movs	r3, #0
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e0a0      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e09d      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c62:	2304      	movs	r3, #4
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e09a      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e097      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c6e:	2310      	movs	r3, #16
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e094      	b.n	8006d9e <UART_SetConfig+0x346>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a30      	ldr	r2, [pc, #192]	; (8006d3c <UART_SetConfig+0x2e4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d125      	bne.n	8006cca <UART_SetConfig+0x272>
 8006c7e:	4b2a      	ldr	r3, [pc, #168]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c8c:	d017      	beq.n	8006cbe <UART_SetConfig+0x266>
 8006c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c92:	d817      	bhi.n	8006cc4 <UART_SetConfig+0x26c>
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c98:	d00b      	beq.n	8006cb2 <UART_SetConfig+0x25a>
 8006c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c9e:	d811      	bhi.n	8006cc4 <UART_SetConfig+0x26c>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <UART_SetConfig+0x254>
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca8:	d006      	beq.n	8006cb8 <UART_SetConfig+0x260>
 8006caa:	e00b      	b.n	8006cc4 <UART_SetConfig+0x26c>
 8006cac:	2301      	movs	r3, #1
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e075      	b.n	8006d9e <UART_SetConfig+0x346>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e072      	b.n	8006d9e <UART_SetConfig+0x346>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e06f      	b.n	8006d9e <UART_SetConfig+0x346>
 8006cbe:	2308      	movs	r3, #8
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e06c      	b.n	8006d9e <UART_SetConfig+0x346>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e069      	b.n	8006d9e <UART_SetConfig+0x346>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1c      	ldr	r2, [pc, #112]	; (8006d40 <UART_SetConfig+0x2e8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d137      	bne.n	8006d44 <UART_SetConfig+0x2ec>
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <UART_SetConfig+0x2d0>)
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ce2:	d017      	beq.n	8006d14 <UART_SetConfig+0x2bc>
 8006ce4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ce8:	d817      	bhi.n	8006d1a <UART_SetConfig+0x2c2>
 8006cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cee:	d00b      	beq.n	8006d08 <UART_SetConfig+0x2b0>
 8006cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf4:	d811      	bhi.n	8006d1a <UART_SetConfig+0x2c2>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <UART_SetConfig+0x2aa>
 8006cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfe:	d006      	beq.n	8006d0e <UART_SetConfig+0x2b6>
 8006d00:	e00b      	b.n	8006d1a <UART_SetConfig+0x2c2>
 8006d02:	2300      	movs	r3, #0
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e04a      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e047      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d0e:	2304      	movs	r3, #4
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e044      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d14:	2308      	movs	r3, #8
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e041      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d1a:	2310      	movs	r3, #16
 8006d1c:	77fb      	strb	r3, [r7, #31]
 8006d1e:	e03e      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d20:	efff69f3 	.word	0xefff69f3
 8006d24:	40011000 	.word	0x40011000
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	40004400 	.word	0x40004400
 8006d30:	40004800 	.word	0x40004800
 8006d34:	40004c00 	.word	0x40004c00
 8006d38:	40005000 	.word	0x40005000
 8006d3c:	40011400 	.word	0x40011400
 8006d40:	40007800 	.word	0x40007800
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a71      	ldr	r2, [pc, #452]	; (8006f10 <UART_SetConfig+0x4b8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d125      	bne.n	8006d9a <UART_SetConfig+0x342>
 8006d4e:	4b71      	ldr	r3, [pc, #452]	; (8006f14 <UART_SetConfig+0x4bc>)
 8006d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d5c:	d017      	beq.n	8006d8e <UART_SetConfig+0x336>
 8006d5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d62:	d817      	bhi.n	8006d94 <UART_SetConfig+0x33c>
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d68:	d00b      	beq.n	8006d82 <UART_SetConfig+0x32a>
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6e:	d811      	bhi.n	8006d94 <UART_SetConfig+0x33c>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x324>
 8006d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d78:	d006      	beq.n	8006d88 <UART_SetConfig+0x330>
 8006d7a:	e00b      	b.n	8006d94 <UART_SetConfig+0x33c>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	77fb      	strb	r3, [r7, #31]
 8006d80:	e00d      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d82:	2302      	movs	r3, #2
 8006d84:	77fb      	strb	r3, [r7, #31]
 8006d86:	e00a      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e007      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e004      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d94:	2310      	movs	r3, #16
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e001      	b.n	8006d9e <UART_SetConfig+0x346>
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da6:	d15b      	bne.n	8006e60 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006da8:	7ffb      	ldrb	r3, [r7, #31]
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d827      	bhi.n	8006dfe <UART_SetConfig+0x3a6>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <UART_SetConfig+0x35c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	08006dff 	.word	0x08006dff
 8006dc4:	08006def 	.word	0x08006def
 8006dc8:	08006dff 	.word	0x08006dff
 8006dcc:	08006dff 	.word	0x08006dff
 8006dd0:	08006dff 	.word	0x08006dff
 8006dd4:	08006df7 	.word	0x08006df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd8:	f7fd fb54 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 8006ddc:	61b8      	str	r0, [r7, #24]
        break;
 8006dde:	e013      	b.n	8006e08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de0:	f7fd fb64 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006de4:	61b8      	str	r0, [r7, #24]
        break;
 8006de6:	e00f      	b.n	8006e08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de8:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <UART_SetConfig+0x4c0>)
 8006dea:	61bb      	str	r3, [r7, #24]
        break;
 8006dec:	e00c      	b.n	8006e08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dee:	f7fd fa87 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006df2:	61b8      	str	r0, [r7, #24]
        break;
 8006df4:	e008      	b.n	8006e08 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfa:	61bb      	str	r3, [r7, #24]
        break;
 8006dfc:	e004      	b.n	8006e08 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	77bb      	strb	r3, [r7, #30]
        break;
 8006e06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d074      	beq.n	8006ef8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	005a      	lsls	r2, r3, #1
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d916      	bls.n	8006e5a <UART_SetConfig+0x402>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e32:	d212      	bcs.n	8006e5a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f023 030f 	bic.w	r3, r3, #15
 8006e3c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	89fa      	ldrh	r2, [r7, #14]
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	e04e      	b.n	8006ef8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	77bb      	strb	r3, [r7, #30]
 8006e5e:	e04b      	b.n	8006ef8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e60:	7ffb      	ldrb	r3, [r7, #31]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d827      	bhi.n	8006eb6 <UART_SetConfig+0x45e>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x414>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006eb7 	.word	0x08006eb7
 8006e7c:	08006ea7 	.word	0x08006ea7
 8006e80:	08006eb7 	.word	0x08006eb7
 8006e84:	08006eb7 	.word	0x08006eb7
 8006e88:	08006eb7 	.word	0x08006eb7
 8006e8c:	08006eaf 	.word	0x08006eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fd faf8 	bl	8004484 <HAL_RCC_GetPCLK1Freq>
 8006e94:	61b8      	str	r0, [r7, #24]
        break;
 8006e96:	e013      	b.n	8006ec0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e98:	f7fd fb08 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006e9c:	61b8      	str	r0, [r7, #24]
        break;
 8006e9e:	e00f      	b.n	8006ec0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea0:	4b1d      	ldr	r3, [pc, #116]	; (8006f18 <UART_SetConfig+0x4c0>)
 8006ea2:	61bb      	str	r3, [r7, #24]
        break;
 8006ea4:	e00c      	b.n	8006ec0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea6:	f7fd fa2b 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 8006eaa:	61b8      	str	r0, [r7, #24]
        break;
 8006eac:	e008      	b.n	8006ec0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb2:	61bb      	str	r3, [r7, #24]
        break;
 8006eb4:	e004      	b.n	8006ec0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ebe:	bf00      	nop
    }

    if (pclk != 0U)
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	085a      	lsrs	r2, r3, #1
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	441a      	add	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	d908      	bls.n	8006ef4 <UART_SetConfig+0x49c>
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d204      	bcs.n	8006ef4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	e001      	b.n	8006ef8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f04:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40007c00 	.word	0x40007c00
 8006f14:	40023800 	.word	0x40023800
 8006f18:	00f42400 	.word	0x00f42400

08006f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d01a      	beq.n	8007032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800701a:	d10a      	bne.n	8007032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007070:	f7fb f846 	bl	8002100 <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b08      	cmp	r3, #8
 8007082:	d10e      	bne.n	80070a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f82d 	bl	80070f2 <UART_WaitOnFlagUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e023      	b.n	80070ea <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d10e      	bne.n	80070ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f817 	bl	80070f2 <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e00d      	b.n	80070ea <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007102:	e05e      	b.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d05a      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710c:	f7fa fff8 	bl	8002100 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	429a      	cmp	r2, r3
 800711a:	d302      	bcc.n	8007122 <UART_WaitOnFlagUntilTimeout+0x30>
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d11b      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007130:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0201 	bic.w	r2, r2, #1
 8007140:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2220      	movs	r2, #32
 8007146:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e043      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02c      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007176:	d124      	bne.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007190:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2220      	movs	r2, #32
 80071ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2220      	movs	r2, #32
 80071b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e00f      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d091      	beq.n	8007104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007200:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007216:	2b01      	cmp	r3, #1
 8007218:	d107      	bne.n	800722a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0210 	bic.w	r2, r2, #16
 8007228:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2220      	movs	r2, #32
 800722e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f7ff fbd6 	bl	8006a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2220      	movs	r2, #32
 8007290:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fbb3 	bl	8006a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <__errno>:
 80072a8:	4b01      	ldr	r3, [pc, #4]	; (80072b0 <__errno+0x8>)
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000068 	.word	0x20000068

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4d0d      	ldr	r5, [pc, #52]	; (80072ec <__libc_init_array+0x38>)
 80072b8:	4c0d      	ldr	r4, [pc, #52]	; (80072f0 <__libc_init_array+0x3c>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	2600      	movs	r6, #0
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	4d0b      	ldr	r5, [pc, #44]	; (80072f4 <__libc_init_array+0x40>)
 80072c6:	4c0c      	ldr	r4, [pc, #48]	; (80072f8 <__libc_init_array+0x44>)
 80072c8:	f002 fc5a 	bl	8009b80 <_init>
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	2600      	movs	r6, #0
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	08009fac 	.word	0x08009fac
 80072f0:	08009fac 	.word	0x08009fac
 80072f4:	08009fac 	.word	0x08009fac
 80072f8:	08009fb0 	.word	0x08009fb0

080072fc <malloc>:
 80072fc:	4b02      	ldr	r3, [pc, #8]	; (8007308 <malloc+0xc>)
 80072fe:	4601      	mov	r1, r0
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	f000 b85b 	b.w	80073bc <_malloc_r>
 8007306:	bf00      	nop
 8007308:	20000068 	.word	0x20000068

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <_free_r>:
 800731c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800731e:	2900      	cmp	r1, #0
 8007320:	d048      	beq.n	80073b4 <_free_r+0x98>
 8007322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007326:	9001      	str	r0, [sp, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f1a1 0404 	sub.w	r4, r1, #4
 800732e:	bfb8      	it	lt
 8007330:	18e4      	addlt	r4, r4, r3
 8007332:	f001 fb3f 	bl	80089b4 <__malloc_lock>
 8007336:	4a20      	ldr	r2, [pc, #128]	; (80073b8 <_free_r+0x9c>)
 8007338:	9801      	ldr	r0, [sp, #4]
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	4615      	mov	r5, r2
 800733e:	b933      	cbnz	r3, 800734e <_free_r+0x32>
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	6014      	str	r4, [r2, #0]
 8007344:	b003      	add	sp, #12
 8007346:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800734a:	f001 bb39 	b.w	80089c0 <__malloc_unlock>
 800734e:	42a3      	cmp	r3, r4
 8007350:	d90b      	bls.n	800736a <_free_r+0x4e>
 8007352:	6821      	ldr	r1, [r4, #0]
 8007354:	1862      	adds	r2, r4, r1
 8007356:	4293      	cmp	r3, r2
 8007358:	bf04      	itt	eq
 800735a:	681a      	ldreq	r2, [r3, #0]
 800735c:	685b      	ldreq	r3, [r3, #4]
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	bf04      	itt	eq
 8007362:	1852      	addeq	r2, r2, r1
 8007364:	6022      	streq	r2, [r4, #0]
 8007366:	602c      	str	r4, [r5, #0]
 8007368:	e7ec      	b.n	8007344 <_free_r+0x28>
 800736a:	461a      	mov	r2, r3
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	b10b      	cbz	r3, 8007374 <_free_r+0x58>
 8007370:	42a3      	cmp	r3, r4
 8007372:	d9fa      	bls.n	800736a <_free_r+0x4e>
 8007374:	6811      	ldr	r1, [r2, #0]
 8007376:	1855      	adds	r5, r2, r1
 8007378:	42a5      	cmp	r5, r4
 800737a:	d10b      	bne.n	8007394 <_free_r+0x78>
 800737c:	6824      	ldr	r4, [r4, #0]
 800737e:	4421      	add	r1, r4
 8007380:	1854      	adds	r4, r2, r1
 8007382:	42a3      	cmp	r3, r4
 8007384:	6011      	str	r1, [r2, #0]
 8007386:	d1dd      	bne.n	8007344 <_free_r+0x28>
 8007388:	681c      	ldr	r4, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	6053      	str	r3, [r2, #4]
 800738e:	4421      	add	r1, r4
 8007390:	6011      	str	r1, [r2, #0]
 8007392:	e7d7      	b.n	8007344 <_free_r+0x28>
 8007394:	d902      	bls.n	800739c <_free_r+0x80>
 8007396:	230c      	movs	r3, #12
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	e7d3      	b.n	8007344 <_free_r+0x28>
 800739c:	6825      	ldr	r5, [r4, #0]
 800739e:	1961      	adds	r1, r4, r5
 80073a0:	428b      	cmp	r3, r1
 80073a2:	bf04      	itt	eq
 80073a4:	6819      	ldreq	r1, [r3, #0]
 80073a6:	685b      	ldreq	r3, [r3, #4]
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	bf04      	itt	eq
 80073ac:	1949      	addeq	r1, r1, r5
 80073ae:	6021      	streq	r1, [r4, #0]
 80073b0:	6054      	str	r4, [r2, #4]
 80073b2:	e7c7      	b.n	8007344 <_free_r+0x28>
 80073b4:	b003      	add	sp, #12
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	20000288 	.word	0x20000288

080073bc <_malloc_r>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	1ccd      	adds	r5, r1, #3
 80073c0:	f025 0503 	bic.w	r5, r5, #3
 80073c4:	3508      	adds	r5, #8
 80073c6:	2d0c      	cmp	r5, #12
 80073c8:	bf38      	it	cc
 80073ca:	250c      	movcc	r5, #12
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	4606      	mov	r6, r0
 80073d0:	db01      	blt.n	80073d6 <_malloc_r+0x1a>
 80073d2:	42a9      	cmp	r1, r5
 80073d4:	d903      	bls.n	80073de <_malloc_r+0x22>
 80073d6:	230c      	movs	r3, #12
 80073d8:	6033      	str	r3, [r6, #0]
 80073da:	2000      	movs	r0, #0
 80073dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073de:	f001 fae9 	bl	80089b4 <__malloc_lock>
 80073e2:	4921      	ldr	r1, [pc, #132]	; (8007468 <_malloc_r+0xac>)
 80073e4:	680a      	ldr	r2, [r1, #0]
 80073e6:	4614      	mov	r4, r2
 80073e8:	b99c      	cbnz	r4, 8007412 <_malloc_r+0x56>
 80073ea:	4f20      	ldr	r7, [pc, #128]	; (800746c <_malloc_r+0xb0>)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	b923      	cbnz	r3, 80073fa <_malloc_r+0x3e>
 80073f0:	4621      	mov	r1, r4
 80073f2:	4630      	mov	r0, r6
 80073f4:	f000 fc7e 	bl	8007cf4 <_sbrk_r>
 80073f8:	6038      	str	r0, [r7, #0]
 80073fa:	4629      	mov	r1, r5
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 fc79 	bl	8007cf4 <_sbrk_r>
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	d123      	bne.n	800744e <_malloc_r+0x92>
 8007406:	230c      	movs	r3, #12
 8007408:	6033      	str	r3, [r6, #0]
 800740a:	4630      	mov	r0, r6
 800740c:	f001 fad8 	bl	80089c0 <__malloc_unlock>
 8007410:	e7e3      	b.n	80073da <_malloc_r+0x1e>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	1b5b      	subs	r3, r3, r5
 8007416:	d417      	bmi.n	8007448 <_malloc_r+0x8c>
 8007418:	2b0b      	cmp	r3, #11
 800741a:	d903      	bls.n	8007424 <_malloc_r+0x68>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	441c      	add	r4, r3
 8007420:	6025      	str	r5, [r4, #0]
 8007422:	e004      	b.n	800742e <_malloc_r+0x72>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	42a2      	cmp	r2, r4
 8007428:	bf0c      	ite	eq
 800742a:	600b      	streq	r3, [r1, #0]
 800742c:	6053      	strne	r3, [r2, #4]
 800742e:	4630      	mov	r0, r6
 8007430:	f001 fac6 	bl	80089c0 <__malloc_unlock>
 8007434:	f104 000b 	add.w	r0, r4, #11
 8007438:	1d23      	adds	r3, r4, #4
 800743a:	f020 0007 	bic.w	r0, r0, #7
 800743e:	1ac2      	subs	r2, r0, r3
 8007440:	d0cc      	beq.n	80073dc <_malloc_r+0x20>
 8007442:	1a1b      	subs	r3, r3, r0
 8007444:	50a3      	str	r3, [r4, r2]
 8007446:	e7c9      	b.n	80073dc <_malloc_r+0x20>
 8007448:	4622      	mov	r2, r4
 800744a:	6864      	ldr	r4, [r4, #4]
 800744c:	e7cc      	b.n	80073e8 <_malloc_r+0x2c>
 800744e:	1cc4      	adds	r4, r0, #3
 8007450:	f024 0403 	bic.w	r4, r4, #3
 8007454:	42a0      	cmp	r0, r4
 8007456:	d0e3      	beq.n	8007420 <_malloc_r+0x64>
 8007458:	1a21      	subs	r1, r4, r0
 800745a:	4630      	mov	r0, r6
 800745c:	f000 fc4a 	bl	8007cf4 <_sbrk_r>
 8007460:	3001      	adds	r0, #1
 8007462:	d1dd      	bne.n	8007420 <_malloc_r+0x64>
 8007464:	e7cf      	b.n	8007406 <_malloc_r+0x4a>
 8007466:	bf00      	nop
 8007468:	20000288 	.word	0x20000288
 800746c:	2000028c 	.word	0x2000028c

08007470 <__cvt>:
 8007470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007472:	ed2d 8b02 	vpush	{d8}
 8007476:	eeb0 8b40 	vmov.f64	d8, d0
 800747a:	b085      	sub	sp, #20
 800747c:	4617      	mov	r7, r2
 800747e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007480:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007482:	ee18 2a90 	vmov	r2, s17
 8007486:	f025 0520 	bic.w	r5, r5, #32
 800748a:	2a00      	cmp	r2, #0
 800748c:	bfb6      	itet	lt
 800748e:	222d      	movlt	r2, #45	; 0x2d
 8007490:	2200      	movge	r2, #0
 8007492:	eeb1 8b40 	vneglt.f64	d8, d0
 8007496:	2d46      	cmp	r5, #70	; 0x46
 8007498:	460c      	mov	r4, r1
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	d004      	beq.n	80074a8 <__cvt+0x38>
 800749e:	2d45      	cmp	r5, #69	; 0x45
 80074a0:	d100      	bne.n	80074a4 <__cvt+0x34>
 80074a2:	3401      	adds	r4, #1
 80074a4:	2102      	movs	r1, #2
 80074a6:	e000      	b.n	80074aa <__cvt+0x3a>
 80074a8:	2103      	movs	r1, #3
 80074aa:	ab03      	add	r3, sp, #12
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	ab02      	add	r3, sp, #8
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4622      	mov	r2, r4
 80074b4:	4633      	mov	r3, r6
 80074b6:	eeb0 0b48 	vmov.f64	d0, d8
 80074ba:	f000 fcd5 	bl	8007e68 <_dtoa_r>
 80074be:	2d47      	cmp	r5, #71	; 0x47
 80074c0:	d109      	bne.n	80074d6 <__cvt+0x66>
 80074c2:	07fb      	lsls	r3, r7, #31
 80074c4:	d407      	bmi.n	80074d6 <__cvt+0x66>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ca:	1a1b      	subs	r3, r3, r0
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	b005      	add	sp, #20
 80074d0:	ecbd 8b02 	vpop	{d8}
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d6:	2d46      	cmp	r5, #70	; 0x46
 80074d8:	eb00 0204 	add.w	r2, r0, r4
 80074dc:	d10c      	bne.n	80074f8 <__cvt+0x88>
 80074de:	7803      	ldrb	r3, [r0, #0]
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d107      	bne.n	80074f4 <__cvt+0x84>
 80074e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	bf1c      	itt	ne
 80074ee:	f1c4 0401 	rsbne	r4, r4, #1
 80074f2:	6034      	strne	r4, [r6, #0]
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	441a      	add	r2, r3
 80074f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	bf08      	it	eq
 8007502:	9203      	streq	r2, [sp, #12]
 8007504:	2130      	movs	r1, #48	; 0x30
 8007506:	9b03      	ldr	r3, [sp, #12]
 8007508:	4293      	cmp	r3, r2
 800750a:	d2dc      	bcs.n	80074c6 <__cvt+0x56>
 800750c:	1c5c      	adds	r4, r3, #1
 800750e:	9403      	str	r4, [sp, #12]
 8007510:	7019      	strb	r1, [r3, #0]
 8007512:	e7f8      	b.n	8007506 <__cvt+0x96>

08007514 <__exponent>:
 8007514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007516:	4603      	mov	r3, r0
 8007518:	2900      	cmp	r1, #0
 800751a:	bfb8      	it	lt
 800751c:	4249      	neglt	r1, r1
 800751e:	f803 2b02 	strb.w	r2, [r3], #2
 8007522:	bfb4      	ite	lt
 8007524:	222d      	movlt	r2, #45	; 0x2d
 8007526:	222b      	movge	r2, #43	; 0x2b
 8007528:	2909      	cmp	r1, #9
 800752a:	7042      	strb	r2, [r0, #1]
 800752c:	dd2a      	ble.n	8007584 <__exponent+0x70>
 800752e:	f10d 0407 	add.w	r4, sp, #7
 8007532:	46a4      	mov	ip, r4
 8007534:	270a      	movs	r7, #10
 8007536:	46a6      	mov	lr, r4
 8007538:	460a      	mov	r2, r1
 800753a:	fb91 f6f7 	sdiv	r6, r1, r7
 800753e:	fb07 1516 	mls	r5, r7, r6, r1
 8007542:	3530      	adds	r5, #48	; 0x30
 8007544:	2a63      	cmp	r2, #99	; 0x63
 8007546:	f104 34ff 	add.w	r4, r4, #4294967295
 800754a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800754e:	4631      	mov	r1, r6
 8007550:	dcf1      	bgt.n	8007536 <__exponent+0x22>
 8007552:	3130      	adds	r1, #48	; 0x30
 8007554:	f1ae 0502 	sub.w	r5, lr, #2
 8007558:	f804 1c01 	strb.w	r1, [r4, #-1]
 800755c:	1c44      	adds	r4, r0, #1
 800755e:	4629      	mov	r1, r5
 8007560:	4561      	cmp	r1, ip
 8007562:	d30a      	bcc.n	800757a <__exponent+0x66>
 8007564:	f10d 0209 	add.w	r2, sp, #9
 8007568:	eba2 020e 	sub.w	r2, r2, lr
 800756c:	4565      	cmp	r5, ip
 800756e:	bf88      	it	hi
 8007570:	2200      	movhi	r2, #0
 8007572:	4413      	add	r3, r2
 8007574:	1a18      	subs	r0, r3, r0
 8007576:	b003      	add	sp, #12
 8007578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800757a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800757e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007582:	e7ed      	b.n	8007560 <__exponent+0x4c>
 8007584:	2330      	movs	r3, #48	; 0x30
 8007586:	3130      	adds	r1, #48	; 0x30
 8007588:	7083      	strb	r3, [r0, #2]
 800758a:	70c1      	strb	r1, [r0, #3]
 800758c:	1d03      	adds	r3, r0, #4
 800758e:	e7f1      	b.n	8007574 <__exponent+0x60>

08007590 <_printf_float>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	b08b      	sub	sp, #44	; 0x2c
 8007596:	460c      	mov	r4, r1
 8007598:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800759c:	4616      	mov	r6, r2
 800759e:	461f      	mov	r7, r3
 80075a0:	4605      	mov	r5, r0
 80075a2:	f001 f9f5 	bl	8008990 <_localeconv_r>
 80075a6:	f8d0 b000 	ldr.w	fp, [r0]
 80075aa:	4658      	mov	r0, fp
 80075ac:	f7f8 fe48 	bl	8000240 <strlen>
 80075b0:	2300      	movs	r3, #0
 80075b2:	9308      	str	r3, [sp, #32]
 80075b4:	f8d8 3000 	ldr.w	r3, [r8]
 80075b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	3307      	adds	r3, #7
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	f103 0108 	add.w	r1, r3, #8
 80075c8:	f8c8 1000 	str.w	r1, [r8]
 80075cc:	4682      	mov	sl, r0
 80075ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80075d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007838 <_printf_float+0x2a8>
 80075da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80075de:	eeb0 6bc0 	vabs.f64	d6, d0
 80075e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80075e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ea:	dd24      	ble.n	8007636 <_printf_float+0xa6>
 80075ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f4:	d502      	bpl.n	80075fc <_printf_float+0x6c>
 80075f6:	232d      	movs	r3, #45	; 0x2d
 80075f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075fc:	4b90      	ldr	r3, [pc, #576]	; (8007840 <_printf_float+0x2b0>)
 80075fe:	4891      	ldr	r0, [pc, #580]	; (8007844 <_printf_float+0x2b4>)
 8007600:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007604:	bf94      	ite	ls
 8007606:	4698      	movls	r8, r3
 8007608:	4680      	movhi	r8, r0
 800760a:	2303      	movs	r3, #3
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	f022 0204 	bic.w	r2, r2, #4
 8007612:	2300      	movs	r3, #0
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	9700      	str	r7, [sp, #0]
 800761a:	4633      	mov	r3, r6
 800761c:	aa09      	add	r2, sp, #36	; 0x24
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f9d3 	bl	80079cc <_printf_common>
 8007626:	3001      	adds	r0, #1
 8007628:	f040 808a 	bne.w	8007740 <_printf_float+0x1b0>
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	b00b      	add	sp, #44	; 0x2c
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007636:	eeb4 0b40 	vcmp.f64	d0, d0
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d709      	bvc.n	8007654 <_printf_float+0xc4>
 8007640:	ee10 3a90 	vmov	r3, s1
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbc      	itt	lt
 8007648:	232d      	movlt	r3, #45	; 0x2d
 800764a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800764e:	487e      	ldr	r0, [pc, #504]	; (8007848 <_printf_float+0x2b8>)
 8007650:	4b7e      	ldr	r3, [pc, #504]	; (800784c <_printf_float+0x2bc>)
 8007652:	e7d5      	b.n	8007600 <_printf_float+0x70>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800765a:	9104      	str	r1, [sp, #16]
 800765c:	1c59      	adds	r1, r3, #1
 800765e:	d13c      	bne.n	80076da <_printf_float+0x14a>
 8007660:	2306      	movs	r3, #6
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	2300      	movs	r3, #0
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	ab08      	add	r3, sp, #32
 800766a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800766e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007672:	ab07      	add	r3, sp, #28
 8007674:	6861      	ldr	r1, [r4, #4]
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	6022      	str	r2, [r4, #0]
 800767a:	f10d 031b 	add.w	r3, sp, #27
 800767e:	4628      	mov	r0, r5
 8007680:	f7ff fef6 	bl	8007470 <__cvt>
 8007684:	9b04      	ldr	r3, [sp, #16]
 8007686:	9907      	ldr	r1, [sp, #28]
 8007688:	2b47      	cmp	r3, #71	; 0x47
 800768a:	4680      	mov	r8, r0
 800768c:	d108      	bne.n	80076a0 <_printf_float+0x110>
 800768e:	1cc8      	adds	r0, r1, #3
 8007690:	db02      	blt.n	8007698 <_printf_float+0x108>
 8007692:	6863      	ldr	r3, [r4, #4]
 8007694:	4299      	cmp	r1, r3
 8007696:	dd41      	ble.n	800771c <_printf_float+0x18c>
 8007698:	f1a9 0902 	sub.w	r9, r9, #2
 800769c:	fa5f f989 	uxtb.w	r9, r9
 80076a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80076a4:	d820      	bhi.n	80076e8 <_printf_float+0x158>
 80076a6:	3901      	subs	r1, #1
 80076a8:	464a      	mov	r2, r9
 80076aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076ae:	9107      	str	r1, [sp, #28]
 80076b0:	f7ff ff30 	bl	8007514 <__exponent>
 80076b4:	9a08      	ldr	r2, [sp, #32]
 80076b6:	9004      	str	r0, [sp, #16]
 80076b8:	1813      	adds	r3, r2, r0
 80076ba:	2a01      	cmp	r2, #1
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	dc02      	bgt.n	80076c6 <_printf_float+0x136>
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	07d2      	lsls	r2, r2, #31
 80076c4:	d501      	bpl.n	80076ca <_printf_float+0x13a>
 80076c6:	3301      	adds	r3, #1
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d0a2      	beq.n	8007618 <_printf_float+0x88>
 80076d2:	232d      	movs	r3, #45	; 0x2d
 80076d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d8:	e79e      	b.n	8007618 <_printf_float+0x88>
 80076da:	9904      	ldr	r1, [sp, #16]
 80076dc:	2947      	cmp	r1, #71	; 0x47
 80076de:	d1c1      	bne.n	8007664 <_printf_float+0xd4>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1bf      	bne.n	8007664 <_printf_float+0xd4>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e7bc      	b.n	8007662 <_printf_float+0xd2>
 80076e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80076ec:	d118      	bne.n	8007720 <_printf_float+0x190>
 80076ee:	2900      	cmp	r1, #0
 80076f0:	6863      	ldr	r3, [r4, #4]
 80076f2:	dd0b      	ble.n	800770c <_printf_float+0x17c>
 80076f4:	6121      	str	r1, [r4, #16]
 80076f6:	b913      	cbnz	r3, 80076fe <_printf_float+0x16e>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	07d0      	lsls	r0, r2, #31
 80076fc:	d502      	bpl.n	8007704 <_printf_float+0x174>
 80076fe:	3301      	adds	r3, #1
 8007700:	440b      	add	r3, r1
 8007702:	6123      	str	r3, [r4, #16]
 8007704:	2300      	movs	r3, #0
 8007706:	65a1      	str	r1, [r4, #88]	; 0x58
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	e7de      	b.n	80076ca <_printf_float+0x13a>
 800770c:	b913      	cbnz	r3, 8007714 <_printf_float+0x184>
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	07d2      	lsls	r2, r2, #31
 8007712:	d501      	bpl.n	8007718 <_printf_float+0x188>
 8007714:	3302      	adds	r3, #2
 8007716:	e7f4      	b.n	8007702 <_printf_float+0x172>
 8007718:	2301      	movs	r3, #1
 800771a:	e7f2      	b.n	8007702 <_printf_float+0x172>
 800771c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007720:	9b08      	ldr	r3, [sp, #32]
 8007722:	4299      	cmp	r1, r3
 8007724:	db05      	blt.n	8007732 <_printf_float+0x1a2>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	6121      	str	r1, [r4, #16]
 800772a:	07d8      	lsls	r0, r3, #31
 800772c:	d5ea      	bpl.n	8007704 <_printf_float+0x174>
 800772e:	1c4b      	adds	r3, r1, #1
 8007730:	e7e7      	b.n	8007702 <_printf_float+0x172>
 8007732:	2900      	cmp	r1, #0
 8007734:	bfd4      	ite	le
 8007736:	f1c1 0202 	rsble	r2, r1, #2
 800773a:	2201      	movgt	r2, #1
 800773c:	4413      	add	r3, r2
 800773e:	e7e0      	b.n	8007702 <_printf_float+0x172>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	055a      	lsls	r2, r3, #21
 8007744:	d407      	bmi.n	8007756 <_printf_float+0x1c6>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	4642      	mov	r2, r8
 800774a:	4631      	mov	r1, r6
 800774c:	4628      	mov	r0, r5
 800774e:	47b8      	blx	r7
 8007750:	3001      	adds	r0, #1
 8007752:	d12a      	bne.n	80077aa <_printf_float+0x21a>
 8007754:	e76a      	b.n	800762c <_printf_float+0x9c>
 8007756:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800775a:	f240 80e2 	bls.w	8007922 <_printf_float+0x392>
 800775e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776a:	d133      	bne.n	80077d4 <_printf_float+0x244>
 800776c:	4a38      	ldr	r2, [pc, #224]	; (8007850 <_printf_float+0x2c0>)
 800776e:	2301      	movs	r3, #1
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af58 	beq.w	800762c <_printf_float+0x9c>
 800777c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007780:	429a      	cmp	r2, r3
 8007782:	db02      	blt.n	800778a <_printf_float+0x1fa>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	07d8      	lsls	r0, r3, #31
 8007788:	d50f      	bpl.n	80077aa <_printf_float+0x21a>
 800778a:	4653      	mov	r3, sl
 800778c:	465a      	mov	r2, fp
 800778e:	4631      	mov	r1, r6
 8007790:	4628      	mov	r0, r5
 8007792:	47b8      	blx	r7
 8007794:	3001      	adds	r0, #1
 8007796:	f43f af49 	beq.w	800762c <_printf_float+0x9c>
 800779a:	f04f 0800 	mov.w	r8, #0
 800779e:	f104 091a 	add.w	r9, r4, #26
 80077a2:	9b08      	ldr	r3, [sp, #32]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4543      	cmp	r3, r8
 80077a8:	dc09      	bgt.n	80077be <_printf_float+0x22e>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	079b      	lsls	r3, r3, #30
 80077ae:	f100 8108 	bmi.w	80079c2 <_printf_float+0x432>
 80077b2:	68e0      	ldr	r0, [r4, #12]
 80077b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b6:	4298      	cmp	r0, r3
 80077b8:	bfb8      	it	lt
 80077ba:	4618      	movlt	r0, r3
 80077bc:	e738      	b.n	8007630 <_printf_float+0xa0>
 80077be:	2301      	movs	r3, #1
 80077c0:	464a      	mov	r2, r9
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f af2f 	beq.w	800762c <_printf_float+0x9c>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	e7e6      	b.n	80077a2 <_printf_float+0x212>
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dc3c      	bgt.n	8007854 <_printf_float+0x2c4>
 80077da:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <_printf_float+0x2c0>)
 80077dc:	2301      	movs	r3, #1
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f af21 	beq.w	800762c <_printf_float+0x9c>
 80077ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d102      	bne.n	80077f8 <_printf_float+0x268>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	07d9      	lsls	r1, r3, #31
 80077f6:	d5d8      	bpl.n	80077aa <_printf_float+0x21a>
 80077f8:	4653      	mov	r3, sl
 80077fa:	465a      	mov	r2, fp
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f af12 	beq.w	800762c <_printf_float+0x9c>
 8007808:	f04f 0900 	mov.w	r9, #0
 800780c:	f104 0a1a 	add.w	sl, r4, #26
 8007810:	9b07      	ldr	r3, [sp, #28]
 8007812:	425b      	negs	r3, r3
 8007814:	454b      	cmp	r3, r9
 8007816:	dc01      	bgt.n	800781c <_printf_float+0x28c>
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	e795      	b.n	8007748 <_printf_float+0x1b8>
 800781c:	2301      	movs	r3, #1
 800781e:	4652      	mov	r2, sl
 8007820:	4631      	mov	r1, r6
 8007822:	4628      	mov	r0, r5
 8007824:	47b8      	blx	r7
 8007826:	3001      	adds	r0, #1
 8007828:	f43f af00 	beq.w	800762c <_printf_float+0x9c>
 800782c:	f109 0901 	add.w	r9, r9, #1
 8007830:	e7ee      	b.n	8007810 <_printf_float+0x280>
 8007832:	bf00      	nop
 8007834:	f3af 8000 	nop.w
 8007838:	ffffffff 	.word	0xffffffff
 800783c:	7fefffff 	.word	0x7fefffff
 8007840:	08009bc4 	.word	0x08009bc4
 8007844:	08009bc8 	.word	0x08009bc8
 8007848:	08009bd0 	.word	0x08009bd0
 800784c:	08009bcc 	.word	0x08009bcc
 8007850:	08009bd4 	.word	0x08009bd4
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007858:	429a      	cmp	r2, r3
 800785a:	bfa8      	it	ge
 800785c:	461a      	movge	r2, r3
 800785e:	2a00      	cmp	r2, #0
 8007860:	4691      	mov	r9, r2
 8007862:	dc38      	bgt.n	80078d6 <_printf_float+0x346>
 8007864:	2300      	movs	r3, #0
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800786c:	f104 021a 	add.w	r2, r4, #26
 8007870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007872:	9905      	ldr	r1, [sp, #20]
 8007874:	9304      	str	r3, [sp, #16]
 8007876:	eba3 0309 	sub.w	r3, r3, r9
 800787a:	428b      	cmp	r3, r1
 800787c:	dc33      	bgt.n	80078e6 <_printf_float+0x356>
 800787e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007882:	429a      	cmp	r2, r3
 8007884:	db3c      	blt.n	8007900 <_printf_float+0x370>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	07da      	lsls	r2, r3, #31
 800788a:	d439      	bmi.n	8007900 <_printf_float+0x370>
 800788c:	9a08      	ldr	r2, [sp, #32]
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	9907      	ldr	r1, [sp, #28]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	eba2 0901 	sub.w	r9, r2, r1
 8007898:	4599      	cmp	r9, r3
 800789a:	bfa8      	it	ge
 800789c:	4699      	movge	r9, r3
 800789e:	f1b9 0f00 	cmp.w	r9, #0
 80078a2:	dc35      	bgt.n	8007910 <_printf_float+0x380>
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ac:	f104 0a1a 	add.w	sl, r4, #26
 80078b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	eba3 0309 	sub.w	r3, r3, r9
 80078ba:	4543      	cmp	r3, r8
 80078bc:	f77f af75 	ble.w	80077aa <_printf_float+0x21a>
 80078c0:	2301      	movs	r3, #1
 80078c2:	4652      	mov	r2, sl
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	f43f aeae 	beq.w	800762c <_printf_float+0x9c>
 80078d0:	f108 0801 	add.w	r8, r8, #1
 80078d4:	e7ec      	b.n	80078b0 <_printf_float+0x320>
 80078d6:	4613      	mov	r3, r2
 80078d8:	4631      	mov	r1, r6
 80078da:	4642      	mov	r2, r8
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	d1bf      	bne.n	8007864 <_printf_float+0x2d4>
 80078e4:	e6a2      	b.n	800762c <_printf_float+0x9c>
 80078e6:	2301      	movs	r3, #1
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	9204      	str	r2, [sp, #16]
 80078ee:	47b8      	blx	r7
 80078f0:	3001      	adds	r0, #1
 80078f2:	f43f ae9b 	beq.w	800762c <_printf_float+0x9c>
 80078f6:	9b05      	ldr	r3, [sp, #20]
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	3301      	adds	r3, #1
 80078fc:	9305      	str	r3, [sp, #20]
 80078fe:	e7b7      	b.n	8007870 <_printf_float+0x2e0>
 8007900:	4653      	mov	r3, sl
 8007902:	465a      	mov	r2, fp
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	d1be      	bne.n	800788c <_printf_float+0x2fc>
 800790e:	e68d      	b.n	800762c <_printf_float+0x9c>
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	464b      	mov	r3, r9
 8007914:	4442      	add	r2, r8
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d1c1      	bne.n	80078a4 <_printf_float+0x314>
 8007920:	e684      	b.n	800762c <_printf_float+0x9c>
 8007922:	9a08      	ldr	r2, [sp, #32]
 8007924:	2a01      	cmp	r2, #1
 8007926:	dc01      	bgt.n	800792c <_printf_float+0x39c>
 8007928:	07db      	lsls	r3, r3, #31
 800792a:	d537      	bpl.n	800799c <_printf_float+0x40c>
 800792c:	2301      	movs	r3, #1
 800792e:	4642      	mov	r2, r8
 8007930:	4631      	mov	r1, r6
 8007932:	4628      	mov	r0, r5
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f ae78 	beq.w	800762c <_printf_float+0x9c>
 800793c:	4653      	mov	r3, sl
 800793e:	465a      	mov	r2, fp
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	f43f ae70 	beq.w	800762c <_printf_float+0x9c>
 800794c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007958:	d01b      	beq.n	8007992 <_printf_float+0x402>
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	f108 0201 	add.w	r2, r8, #1
 8007960:	3b01      	subs	r3, #1
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d10e      	bne.n	800798a <_printf_float+0x3fa>
 800796c:	e65e      	b.n	800762c <_printf_float+0x9c>
 800796e:	2301      	movs	r3, #1
 8007970:	464a      	mov	r2, r9
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae57 	beq.w	800762c <_printf_float+0x9c>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	3b01      	subs	r3, #1
 8007986:	4543      	cmp	r3, r8
 8007988:	dcf1      	bgt.n	800796e <_printf_float+0x3de>
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007990:	e6db      	b.n	800774a <_printf_float+0x1ba>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	f104 091a 	add.w	r9, r4, #26
 800799a:	e7f2      	b.n	8007982 <_printf_float+0x3f2>
 800799c:	2301      	movs	r3, #1
 800799e:	4642      	mov	r2, r8
 80079a0:	e7df      	b.n	8007962 <_printf_float+0x3d2>
 80079a2:	2301      	movs	r3, #1
 80079a4:	464a      	mov	r2, r9
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	f43f ae3d 	beq.w	800762c <_printf_float+0x9c>
 80079b2:	f108 0801 	add.w	r8, r8, #1
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079ba:	1a5b      	subs	r3, r3, r1
 80079bc:	4543      	cmp	r3, r8
 80079be:	dcf0      	bgt.n	80079a2 <_printf_float+0x412>
 80079c0:	e6f7      	b.n	80077b2 <_printf_float+0x222>
 80079c2:	f04f 0800 	mov.w	r8, #0
 80079c6:	f104 0919 	add.w	r9, r4, #25
 80079ca:	e7f4      	b.n	80079b6 <_printf_float+0x426>

080079cc <_printf_common>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	4616      	mov	r6, r2
 80079d2:	4699      	mov	r9, r3
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfb8      	it	lt
 80079e0:	4613      	movlt	r3, r2
 80079e2:	6033      	str	r3, [r6, #0]
 80079e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e8:	4607      	mov	r7, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b10a      	cbz	r2, 80079f2 <_printf_common+0x26>
 80079ee:	3301      	adds	r3, #1
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	0699      	lsls	r1, r3, #26
 80079f6:	bf42      	ittt	mi
 80079f8:	6833      	ldrmi	r3, [r6, #0]
 80079fa:	3302      	addmi	r3, #2
 80079fc:	6033      	strmi	r3, [r6, #0]
 80079fe:	6825      	ldr	r5, [r4, #0]
 8007a00:	f015 0506 	ands.w	r5, r5, #6
 8007a04:	d106      	bne.n	8007a14 <_printf_common+0x48>
 8007a06:	f104 0a19 	add.w	sl, r4, #25
 8007a0a:	68e3      	ldr	r3, [r4, #12]
 8007a0c:	6832      	ldr	r2, [r6, #0]
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	dc26      	bgt.n	8007a62 <_printf_common+0x96>
 8007a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a18:	1e13      	subs	r3, r2, #0
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	bf18      	it	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	0692      	lsls	r2, r2, #26
 8007a22:	d42b      	bmi.n	8007a7c <_printf_common+0xb0>
 8007a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47c0      	blx	r8
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d01e      	beq.n	8007a70 <_printf_common+0xa4>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	68e5      	ldr	r5, [r4, #12]
 8007a36:	6832      	ldr	r2, [r6, #0]
 8007a38:	f003 0306 	and.w	r3, r3, #6
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	bf08      	it	eq
 8007a40:	1aad      	subeq	r5, r5, r2
 8007a42:	68a3      	ldr	r3, [r4, #8]
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	bf0c      	ite	eq
 8007a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a4c:	2500      	movne	r5, #0
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bfc4      	itt	gt
 8007a52:	1a9b      	subgt	r3, r3, r2
 8007a54:	18ed      	addgt	r5, r5, r3
 8007a56:	2600      	movs	r6, #0
 8007a58:	341a      	adds	r4, #26
 8007a5a:	42b5      	cmp	r5, r6
 8007a5c:	d11a      	bne.n	8007a94 <_printf_common+0xc8>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	e008      	b.n	8007a74 <_printf_common+0xa8>
 8007a62:	2301      	movs	r3, #1
 8007a64:	4652      	mov	r2, sl
 8007a66:	4649      	mov	r1, r9
 8007a68:	4638      	mov	r0, r7
 8007a6a:	47c0      	blx	r8
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d103      	bne.n	8007a78 <_printf_common+0xac>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	3501      	adds	r5, #1
 8007a7a:	e7c6      	b.n	8007a0a <_printf_common+0x3e>
 8007a7c:	18e1      	adds	r1, r4, r3
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	2030      	movs	r0, #48	; 0x30
 8007a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a86:	4422      	add	r2, r4
 8007a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a90:	3302      	adds	r3, #2
 8007a92:	e7c7      	b.n	8007a24 <_printf_common+0x58>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4622      	mov	r2, r4
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c0      	blx	r8
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d0e6      	beq.n	8007a70 <_printf_common+0xa4>
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7d9      	b.n	8007a5a <_printf_common+0x8e>
	...

08007aa8 <_printf_i>:
 8007aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	460c      	mov	r4, r1
 8007aae:	4691      	mov	r9, r2
 8007ab0:	7e27      	ldrb	r7, [r4, #24]
 8007ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ab4:	2f78      	cmp	r7, #120	; 0x78
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	469a      	mov	sl, r3
 8007aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007abe:	d807      	bhi.n	8007ad0 <_printf_i+0x28>
 8007ac0:	2f62      	cmp	r7, #98	; 0x62
 8007ac2:	d80a      	bhi.n	8007ada <_printf_i+0x32>
 8007ac4:	2f00      	cmp	r7, #0
 8007ac6:	f000 80d8 	beq.w	8007c7a <_printf_i+0x1d2>
 8007aca:	2f58      	cmp	r7, #88	; 0x58
 8007acc:	f000 80a3 	beq.w	8007c16 <_printf_i+0x16e>
 8007ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ad8:	e03a      	b.n	8007b50 <_printf_i+0xa8>
 8007ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ade:	2b15      	cmp	r3, #21
 8007ae0:	d8f6      	bhi.n	8007ad0 <_printf_i+0x28>
 8007ae2:	a001      	add	r0, pc, #4	; (adr r0, 8007ae8 <_printf_i+0x40>)
 8007ae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ae8:	08007b41 	.word	0x08007b41
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007ad1 	.word	0x08007ad1
 8007af4:	08007ad1 	.word	0x08007ad1
 8007af8:	08007ad1 	.word	0x08007ad1
 8007afc:	08007ad1 	.word	0x08007ad1
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007ad1 	.word	0x08007ad1
 8007b08:	08007ad1 	.word	0x08007ad1
 8007b0c:	08007ad1 	.word	0x08007ad1
 8007b10:	08007ad1 	.word	0x08007ad1
 8007b14:	08007c61 	.word	0x08007c61
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007c43 	.word	0x08007c43
 8007b20:	08007ad1 	.word	0x08007ad1
 8007b24:	08007ad1 	.word	0x08007ad1
 8007b28:	08007c83 	.word	0x08007c83
 8007b2c:	08007ad1 	.word	0x08007ad1
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007ad1 	.word	0x08007ad1
 8007b38:	08007ad1 	.word	0x08007ad1
 8007b3c:	08007c4b 	.word	0x08007c4b
 8007b40:	680b      	ldr	r3, [r1, #0]
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	600a      	str	r2, [r1, #0]
 8007b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0a3      	b.n	8007c9c <_printf_i+0x1f4>
 8007b54:	6825      	ldr	r5, [r4, #0]
 8007b56:	6808      	ldr	r0, [r1, #0]
 8007b58:	062e      	lsls	r6, r5, #24
 8007b5a:	f100 0304 	add.w	r3, r0, #4
 8007b5e:	d50a      	bpl.n	8007b76 <_printf_i+0xce>
 8007b60:	6805      	ldr	r5, [r0, #0]
 8007b62:	600b      	str	r3, [r1, #0]
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	da03      	bge.n	8007b70 <_printf_i+0xc8>
 8007b68:	232d      	movs	r3, #45	; 0x2d
 8007b6a:	426d      	negs	r5, r5
 8007b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b70:	485e      	ldr	r0, [pc, #376]	; (8007cec <_printf_i+0x244>)
 8007b72:	230a      	movs	r3, #10
 8007b74:	e019      	b.n	8007baa <_printf_i+0x102>
 8007b76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b7a:	6805      	ldr	r5, [r0, #0]
 8007b7c:	600b      	str	r3, [r1, #0]
 8007b7e:	bf18      	it	ne
 8007b80:	b22d      	sxthne	r5, r5
 8007b82:	e7ef      	b.n	8007b64 <_printf_i+0xbc>
 8007b84:	680b      	ldr	r3, [r1, #0]
 8007b86:	6825      	ldr	r5, [r4, #0]
 8007b88:	1d18      	adds	r0, r3, #4
 8007b8a:	6008      	str	r0, [r1, #0]
 8007b8c:	0628      	lsls	r0, r5, #24
 8007b8e:	d501      	bpl.n	8007b94 <_printf_i+0xec>
 8007b90:	681d      	ldr	r5, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <_printf_i+0xf2>
 8007b94:	0669      	lsls	r1, r5, #25
 8007b96:	d5fb      	bpl.n	8007b90 <_printf_i+0xe8>
 8007b98:	881d      	ldrh	r5, [r3, #0]
 8007b9a:	4854      	ldr	r0, [pc, #336]	; (8007cec <_printf_i+0x244>)
 8007b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b9e:	bf0c      	ite	eq
 8007ba0:	2308      	moveq	r3, #8
 8007ba2:	230a      	movne	r3, #10
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007baa:	6866      	ldr	r6, [r4, #4]
 8007bac:	60a6      	str	r6, [r4, #8]
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	bfa2      	ittt	ge
 8007bb2:	6821      	ldrge	r1, [r4, #0]
 8007bb4:	f021 0104 	bicge.w	r1, r1, #4
 8007bb8:	6021      	strge	r1, [r4, #0]
 8007bba:	b90d      	cbnz	r5, 8007bc0 <_printf_i+0x118>
 8007bbc:	2e00      	cmp	r6, #0
 8007bbe:	d04d      	beq.n	8007c5c <_printf_i+0x1b4>
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007bca:	5dc7      	ldrb	r7, [r0, r7]
 8007bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bd0:	462f      	mov	r7, r5
 8007bd2:	42bb      	cmp	r3, r7
 8007bd4:	460d      	mov	r5, r1
 8007bd6:	d9f4      	bls.n	8007bc2 <_printf_i+0x11a>
 8007bd8:	2b08      	cmp	r3, #8
 8007bda:	d10b      	bne.n	8007bf4 <_printf_i+0x14c>
 8007bdc:	6823      	ldr	r3, [r4, #0]
 8007bde:	07df      	lsls	r7, r3, #31
 8007be0:	d508      	bpl.n	8007bf4 <_printf_i+0x14c>
 8007be2:	6923      	ldr	r3, [r4, #16]
 8007be4:	6861      	ldr	r1, [r4, #4]
 8007be6:	4299      	cmp	r1, r3
 8007be8:	bfde      	ittt	le
 8007bea:	2330      	movle	r3, #48	; 0x30
 8007bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bf4:	1b92      	subs	r2, r2, r6
 8007bf6:	6122      	str	r2, [r4, #16]
 8007bf8:	f8cd a000 	str.w	sl, [sp]
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	aa03      	add	r2, sp, #12
 8007c00:	4621      	mov	r1, r4
 8007c02:	4640      	mov	r0, r8
 8007c04:	f7ff fee2 	bl	80079cc <_printf_common>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d14c      	bne.n	8007ca6 <_printf_i+0x1fe>
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	b004      	add	sp, #16
 8007c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c16:	4835      	ldr	r0, [pc, #212]	; (8007cec <_printf_i+0x244>)
 8007c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	680e      	ldr	r6, [r1, #0]
 8007c20:	061f      	lsls	r7, r3, #24
 8007c22:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c26:	600e      	str	r6, [r1, #0]
 8007c28:	d514      	bpl.n	8007c54 <_printf_i+0x1ac>
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	bf44      	itt	mi
 8007c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c32:	6023      	strmi	r3, [r4, #0]
 8007c34:	b91d      	cbnz	r5, 8007c3e <_printf_i+0x196>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	f023 0320 	bic.w	r3, r3, #32
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	2310      	movs	r3, #16
 8007c40:	e7b0      	b.n	8007ba4 <_printf_i+0xfc>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	f043 0320 	orr.w	r3, r3, #32
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	2378      	movs	r3, #120	; 0x78
 8007c4c:	4828      	ldr	r0, [pc, #160]	; (8007cf0 <_printf_i+0x248>)
 8007c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c52:	e7e3      	b.n	8007c1c <_printf_i+0x174>
 8007c54:	065e      	lsls	r6, r3, #25
 8007c56:	bf48      	it	mi
 8007c58:	b2ad      	uxthmi	r5, r5
 8007c5a:	e7e6      	b.n	8007c2a <_printf_i+0x182>
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	e7bb      	b.n	8007bd8 <_printf_i+0x130>
 8007c60:	680b      	ldr	r3, [r1, #0]
 8007c62:	6826      	ldr	r6, [r4, #0]
 8007c64:	6960      	ldr	r0, [r4, #20]
 8007c66:	1d1d      	adds	r5, r3, #4
 8007c68:	600d      	str	r5, [r1, #0]
 8007c6a:	0635      	lsls	r5, r6, #24
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	d501      	bpl.n	8007c74 <_printf_i+0x1cc>
 8007c70:	6018      	str	r0, [r3, #0]
 8007c72:	e002      	b.n	8007c7a <_printf_i+0x1d2>
 8007c74:	0671      	lsls	r1, r6, #25
 8007c76:	d5fb      	bpl.n	8007c70 <_printf_i+0x1c8>
 8007c78:	8018      	strh	r0, [r3, #0]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6123      	str	r3, [r4, #16]
 8007c7e:	4616      	mov	r6, r2
 8007c80:	e7ba      	b.n	8007bf8 <_printf_i+0x150>
 8007c82:	680b      	ldr	r3, [r1, #0]
 8007c84:	1d1a      	adds	r2, r3, #4
 8007c86:	600a      	str	r2, [r1, #0]
 8007c88:	681e      	ldr	r6, [r3, #0]
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7f8 fade 	bl	8000250 <memchr>
 8007c94:	b108      	cbz	r0, 8007c9a <_printf_i+0x1f2>
 8007c96:	1b80      	subs	r0, r0, r6
 8007c98:	6060      	str	r0, [r4, #4]
 8007c9a:	6863      	ldr	r3, [r4, #4]
 8007c9c:	6123      	str	r3, [r4, #16]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca4:	e7a8      	b.n	8007bf8 <_printf_i+0x150>
 8007ca6:	6923      	ldr	r3, [r4, #16]
 8007ca8:	4632      	mov	r2, r6
 8007caa:	4649      	mov	r1, r9
 8007cac:	4640      	mov	r0, r8
 8007cae:	47d0      	blx	sl
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d0ab      	beq.n	8007c0c <_printf_i+0x164>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	079b      	lsls	r3, r3, #30
 8007cb8:	d413      	bmi.n	8007ce2 <_printf_i+0x23a>
 8007cba:	68e0      	ldr	r0, [r4, #12]
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	4298      	cmp	r0, r3
 8007cc0:	bfb8      	it	lt
 8007cc2:	4618      	movlt	r0, r3
 8007cc4:	e7a4      	b.n	8007c10 <_printf_i+0x168>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4632      	mov	r2, r6
 8007cca:	4649      	mov	r1, r9
 8007ccc:	4640      	mov	r0, r8
 8007cce:	47d0      	blx	sl
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d09b      	beq.n	8007c0c <_printf_i+0x164>
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	9903      	ldr	r1, [sp, #12]
 8007cda:	1a5b      	subs	r3, r3, r1
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	dcf2      	bgt.n	8007cc6 <_printf_i+0x21e>
 8007ce0:	e7eb      	b.n	8007cba <_printf_i+0x212>
 8007ce2:	2500      	movs	r5, #0
 8007ce4:	f104 0619 	add.w	r6, r4, #25
 8007ce8:	e7f5      	b.n	8007cd6 <_printf_i+0x22e>
 8007cea:	bf00      	nop
 8007cec:	08009bd6 	.word	0x08009bd6
 8007cf0:	08009be7 	.word	0x08009be7

08007cf4 <_sbrk_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	; (8007d10 <_sbrk_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7f9 fd8e 	bl	8001820 <_sbrk>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_sbrk_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_sbrk_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	200006a8 	.word	0x200006a8

08007d14 <__assert_func>:
 8007d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d16:	4614      	mov	r4, r2
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <__assert_func+0x2c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4605      	mov	r5, r0
 8007d20:	68d8      	ldr	r0, [r3, #12]
 8007d22:	b14c      	cbz	r4, 8007d38 <__assert_func+0x24>
 8007d24:	4b07      	ldr	r3, [pc, #28]	; (8007d44 <__assert_func+0x30>)
 8007d26:	9100      	str	r1, [sp, #0]
 8007d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d2c:	4906      	ldr	r1, [pc, #24]	; (8007d48 <__assert_func+0x34>)
 8007d2e:	462b      	mov	r3, r5
 8007d30:	f000 fe1c 	bl	800896c <fiprintf>
 8007d34:	f001 fbf0 	bl	8009518 <abort>
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <__assert_func+0x38>)
 8007d3a:	461c      	mov	r4, r3
 8007d3c:	e7f3      	b.n	8007d26 <__assert_func+0x12>
 8007d3e:	bf00      	nop
 8007d40:	20000068 	.word	0x20000068
 8007d44:	08009bf8 	.word	0x08009bf8
 8007d48:	08009c05 	.word	0x08009c05
 8007d4c:	08009c33 	.word	0x08009c33

08007d50 <quorem>:
 8007d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	6903      	ldr	r3, [r0, #16]
 8007d56:	690c      	ldr	r4, [r1, #16]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	4607      	mov	r7, r0
 8007d5c:	f2c0 8081 	blt.w	8007e62 <quorem+0x112>
 8007d60:	3c01      	subs	r4, #1
 8007d62:	f101 0814 	add.w	r8, r1, #20
 8007d66:	f100 0514 	add.w	r5, r0, #20
 8007d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d88:	d331      	bcc.n	8007dee <quorem+0x9e>
 8007d8a:	f04f 0e00 	mov.w	lr, #0
 8007d8e:	4640      	mov	r0, r8
 8007d90:	46ac      	mov	ip, r5
 8007d92:	46f2      	mov	sl, lr
 8007d94:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d98:	b293      	uxth	r3, r2
 8007d9a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	ebaa 0303 	sub.w	r3, sl, r3
 8007da8:	0c12      	lsrs	r2, r2, #16
 8007daa:	f8dc a000 	ldr.w	sl, [ip]
 8007dae:	fb06 e202 	mla	r2, r6, r2, lr
 8007db2:	fa13 f38a 	uxtah	r3, r3, sl
 8007db6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dba:	fa1f fa82 	uxth.w	sl, r2
 8007dbe:	f8dc 2000 	ldr.w	r2, [ip]
 8007dc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007dc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd0:	4581      	cmp	r9, r0
 8007dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8007dd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dda:	d2db      	bcs.n	8007d94 <quorem+0x44>
 8007ddc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007de0:	b92b      	cbnz	r3, 8007dee <quorem+0x9e>
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	429d      	cmp	r5, r3
 8007de8:	461a      	mov	r2, r3
 8007dea:	d32e      	bcc.n	8007e4a <quorem+0xfa>
 8007dec:	613c      	str	r4, [r7, #16]
 8007dee:	4638      	mov	r0, r7
 8007df0:	f001 f86a 	bl	8008ec8 <__mcmp>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	db24      	blt.n	8007e42 <quorem+0xf2>
 8007df8:	3601      	adds	r6, #1
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f04f 0c00 	mov.w	ip, #0
 8007e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e04:	f8d0 e000 	ldr.w	lr, [r0]
 8007e08:	b293      	uxth	r3, r2
 8007e0a:	ebac 0303 	sub.w	r3, ip, r3
 8007e0e:	0c12      	lsrs	r2, r2, #16
 8007e10:	fa13 f38e 	uxtah	r3, r3, lr
 8007e14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e22:	45c1      	cmp	r9, r8
 8007e24:	f840 3b04 	str.w	r3, [r0], #4
 8007e28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e2c:	d2e8      	bcs.n	8007e00 <quorem+0xb0>
 8007e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e36:	b922      	cbnz	r2, 8007e42 <quorem+0xf2>
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	d30a      	bcc.n	8007e56 <quorem+0x106>
 8007e40:	613c      	str	r4, [r7, #16]
 8007e42:	4630      	mov	r0, r6
 8007e44:	b003      	add	sp, #12
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	3b04      	subs	r3, #4
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d1cc      	bne.n	8007dec <quorem+0x9c>
 8007e52:	3c01      	subs	r4, #1
 8007e54:	e7c7      	b.n	8007de6 <quorem+0x96>
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	3b04      	subs	r3, #4
 8007e5a:	2a00      	cmp	r2, #0
 8007e5c:	d1f0      	bne.n	8007e40 <quorem+0xf0>
 8007e5e:	3c01      	subs	r4, #1
 8007e60:	e7eb      	b.n	8007e3a <quorem+0xea>
 8007e62:	2000      	movs	r0, #0
 8007e64:	e7ee      	b.n	8007e44 <quorem+0xf4>
	...

08007e68 <_dtoa_r>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	ec59 8b10 	vmov	r8, r9, d0
 8007e70:	b095      	sub	sp, #84	; 0x54
 8007e72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007e76:	9107      	str	r1, [sp, #28]
 8007e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007e7c:	4606      	mov	r6, r0
 8007e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e80:	9310      	str	r3, [sp, #64]	; 0x40
 8007e82:	b975      	cbnz	r5, 8007ea2 <_dtoa_r+0x3a>
 8007e84:	2010      	movs	r0, #16
 8007e86:	f7ff fa39 	bl	80072fc <malloc>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e8e:	b920      	cbnz	r0, 8007e9a <_dtoa_r+0x32>
 8007e90:	4bab      	ldr	r3, [pc, #684]	; (8008140 <_dtoa_r+0x2d8>)
 8007e92:	21ea      	movs	r1, #234	; 0xea
 8007e94:	48ab      	ldr	r0, [pc, #684]	; (8008144 <_dtoa_r+0x2dc>)
 8007e96:	f7ff ff3d 	bl	8007d14 <__assert_func>
 8007e9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e9e:	6005      	str	r5, [r0, #0]
 8007ea0:	60c5      	str	r5, [r0, #12]
 8007ea2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ea4:	6819      	ldr	r1, [r3, #0]
 8007ea6:	b151      	cbz	r1, 8007ebe <_dtoa_r+0x56>
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	604a      	str	r2, [r1, #4]
 8007eac:	2301      	movs	r3, #1
 8007eae:	4093      	lsls	r3, r2
 8007eb0:	608b      	str	r3, [r1, #8]
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 fdca 	bl	8008a4c <_Bfree>
 8007eb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	f1b9 0300 	subs.w	r3, r9, #0
 8007ec2:	bfbb      	ittet	lt
 8007ec4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ec8:	9303      	strlt	r3, [sp, #12]
 8007eca:	2300      	movge	r3, #0
 8007ecc:	2201      	movlt	r2, #1
 8007ece:	bfac      	ite	ge
 8007ed0:	6023      	strge	r3, [r4, #0]
 8007ed2:	6022      	strlt	r2, [r4, #0]
 8007ed4:	4b9c      	ldr	r3, [pc, #624]	; (8008148 <_dtoa_r+0x2e0>)
 8007ed6:	9c03      	ldr	r4, [sp, #12]
 8007ed8:	43a3      	bics	r3, r4
 8007eda:	d11a      	bne.n	8007f12 <_dtoa_r+0xaa>
 8007edc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ede:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ee8:	ea53 0308 	orrs.w	r3, r3, r8
 8007eec:	f000 8512 	beq.w	8008914 <_dtoa_r+0xaac>
 8007ef0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ef2:	b953      	cbnz	r3, 8007f0a <_dtoa_r+0xa2>
 8007ef4:	4b95      	ldr	r3, [pc, #596]	; (800814c <_dtoa_r+0x2e4>)
 8007ef6:	e01f      	b.n	8007f38 <_dtoa_r+0xd0>
 8007ef8:	4b95      	ldr	r3, [pc, #596]	; (8008150 <_dtoa_r+0x2e8>)
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	9800      	ldr	r0, [sp, #0]
 8007f04:	b015      	add	sp, #84	; 0x54
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	4b90      	ldr	r3, [pc, #576]	; (800814c <_dtoa_r+0x2e4>)
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	3303      	adds	r3, #3
 8007f10:	e7f5      	b.n	8007efe <_dtoa_r+0x96>
 8007f12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007f22:	d10b      	bne.n	8007f3c <_dtoa_r+0xd4>
 8007f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f26:	2301      	movs	r3, #1
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 84ee 	beq.w	800890e <_dtoa_r+0xaa6>
 8007f32:	4888      	ldr	r0, [pc, #544]	; (8008154 <_dtoa_r+0x2ec>)
 8007f34:	6018      	str	r0, [r3, #0]
 8007f36:	1e43      	subs	r3, r0, #1
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	e7e2      	b.n	8007f02 <_dtoa_r+0x9a>
 8007f3c:	a913      	add	r1, sp, #76	; 0x4c
 8007f3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f42:	aa12      	add	r2, sp, #72	; 0x48
 8007f44:	4630      	mov	r0, r6
 8007f46:	f001 f863 	bl	8009010 <__d2b>
 8007f4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007f4e:	4605      	mov	r5, r0
 8007f50:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d047      	beq.n	8007fe6 <_dtoa_r+0x17e>
 8007f56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007f58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007f64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	ec43 2b16 	vmov	d6, r2, r3
 8007f72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007f76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008128 <_dtoa_r+0x2c0>
 8007f7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008130 <_dtoa_r+0x2c8>
 8007f82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f86:	eeb0 7b46 	vmov.f64	d7, d6
 8007f8a:	ee06 1a90 	vmov	s13, r1
 8007f8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007f92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008138 <_dtoa_r+0x2d0>
 8007f96:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007f9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa6:	ee16 ba90 	vmov	fp, s13
 8007faa:	9411      	str	r4, [sp, #68]	; 0x44
 8007fac:	d508      	bpl.n	8007fc0 <_dtoa_r+0x158>
 8007fae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007fb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fba:	bf18      	it	ne
 8007fbc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007fc0:	f1bb 0f16 	cmp.w	fp, #22
 8007fc4:	d832      	bhi.n	800802c <_dtoa_r+0x1c4>
 8007fc6:	4b64      	ldr	r3, [pc, #400]	; (8008158 <_dtoa_r+0x2f0>)
 8007fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fcc:	ed93 7b00 	vldr	d7, [r3]
 8007fd0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007fd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	d501      	bpl.n	8007fe2 <_dtoa_r+0x17a>
 8007fde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e023      	b.n	800802e <_dtoa_r+0x1c6>
 8007fe6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007fe8:	4401      	add	r1, r0
 8007fea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	bfc3      	ittte	gt
 8007ff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ff6:	fa04 f303 	lslgt.w	r3, r4, r3
 8007ffa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007ffe:	f1c3 0320 	rsble	r3, r3, #32
 8008002:	bfc6      	itte	gt
 8008004:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008008:	ea43 0308 	orrgt.w	r3, r3, r8
 800800c:	fa08 f303 	lslle.w	r3, r8, r3
 8008010:	ee07 3a90 	vmov	s15, r3
 8008014:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008018:	3901      	subs	r1, #1
 800801a:	ed8d 7b00 	vstr	d7, [sp]
 800801e:	9c01      	ldr	r4, [sp, #4]
 8008020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008024:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008028:	2401      	movs	r4, #1
 800802a:	e7a0      	b.n	8007f6e <_dtoa_r+0x106>
 800802c:	2301      	movs	r3, #1
 800802e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008030:	1a43      	subs	r3, r0, r1
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	bf45      	ittet	mi
 8008036:	f1c3 0301 	rsbmi	r3, r3, #1
 800803a:	9305      	strmi	r3, [sp, #20]
 800803c:	2300      	movpl	r3, #0
 800803e:	2300      	movmi	r3, #0
 8008040:	9206      	str	r2, [sp, #24]
 8008042:	bf54      	ite	pl
 8008044:	9305      	strpl	r3, [sp, #20]
 8008046:	9306      	strmi	r3, [sp, #24]
 8008048:	f1bb 0f00 	cmp.w	fp, #0
 800804c:	db18      	blt.n	8008080 <_dtoa_r+0x218>
 800804e:	9b06      	ldr	r3, [sp, #24]
 8008050:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008054:	445b      	add	r3, fp
 8008056:	9306      	str	r3, [sp, #24]
 8008058:	2300      	movs	r3, #0
 800805a:	9a07      	ldr	r2, [sp, #28]
 800805c:	2a09      	cmp	r2, #9
 800805e:	d849      	bhi.n	80080f4 <_dtoa_r+0x28c>
 8008060:	2a05      	cmp	r2, #5
 8008062:	bfc4      	itt	gt
 8008064:	3a04      	subgt	r2, #4
 8008066:	9207      	strgt	r2, [sp, #28]
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	f1a2 0202 	sub.w	r2, r2, #2
 800806e:	bfcc      	ite	gt
 8008070:	2400      	movgt	r4, #0
 8008072:	2401      	movle	r4, #1
 8008074:	2a03      	cmp	r2, #3
 8008076:	d848      	bhi.n	800810a <_dtoa_r+0x2a2>
 8008078:	e8df f002 	tbb	[pc, r2]
 800807c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008080:	9b05      	ldr	r3, [sp, #20]
 8008082:	2200      	movs	r2, #0
 8008084:	eba3 030b 	sub.w	r3, r3, fp
 8008088:	9305      	str	r3, [sp, #20]
 800808a:	920e      	str	r2, [sp, #56]	; 0x38
 800808c:	f1cb 0300 	rsb	r3, fp, #0
 8008090:	e7e3      	b.n	800805a <_dtoa_r+0x1f2>
 8008092:	2200      	movs	r2, #0
 8008094:	9208      	str	r2, [sp, #32]
 8008096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008098:	2a00      	cmp	r2, #0
 800809a:	dc39      	bgt.n	8008110 <_dtoa_r+0x2a8>
 800809c:	f04f 0a01 	mov.w	sl, #1
 80080a0:	46d1      	mov	r9, sl
 80080a2:	4652      	mov	r2, sl
 80080a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80080a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80080aa:	2100      	movs	r1, #0
 80080ac:	6079      	str	r1, [r7, #4]
 80080ae:	2004      	movs	r0, #4
 80080b0:	f100 0c14 	add.w	ip, r0, #20
 80080b4:	4594      	cmp	ip, r2
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	d92f      	bls.n	800811a <_dtoa_r+0x2b2>
 80080ba:	4630      	mov	r0, r6
 80080bc:	930c      	str	r3, [sp, #48]	; 0x30
 80080be:	f000 fc85 	bl	80089cc <_Balloc>
 80080c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c4:	9000      	str	r0, [sp, #0]
 80080c6:	4602      	mov	r2, r0
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d149      	bne.n	8008160 <_dtoa_r+0x2f8>
 80080cc:	4b23      	ldr	r3, [pc, #140]	; (800815c <_dtoa_r+0x2f4>)
 80080ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080d2:	e6df      	b.n	8007e94 <_dtoa_r+0x2c>
 80080d4:	2201      	movs	r2, #1
 80080d6:	e7dd      	b.n	8008094 <_dtoa_r+0x22c>
 80080d8:	2200      	movs	r2, #0
 80080da:	9208      	str	r2, [sp, #32]
 80080dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080de:	eb0b 0a02 	add.w	sl, fp, r2
 80080e2:	f10a 0901 	add.w	r9, sl, #1
 80080e6:	464a      	mov	r2, r9
 80080e8:	2a01      	cmp	r2, #1
 80080ea:	bfb8      	it	lt
 80080ec:	2201      	movlt	r2, #1
 80080ee:	e7db      	b.n	80080a8 <_dtoa_r+0x240>
 80080f0:	2201      	movs	r2, #1
 80080f2:	e7f2      	b.n	80080da <_dtoa_r+0x272>
 80080f4:	2401      	movs	r4, #1
 80080f6:	2200      	movs	r2, #0
 80080f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80080fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008100:	2100      	movs	r1, #0
 8008102:	46d1      	mov	r9, sl
 8008104:	2212      	movs	r2, #18
 8008106:	9109      	str	r1, [sp, #36]	; 0x24
 8008108:	e7ce      	b.n	80080a8 <_dtoa_r+0x240>
 800810a:	2201      	movs	r2, #1
 800810c:	9208      	str	r2, [sp, #32]
 800810e:	e7f5      	b.n	80080fc <_dtoa_r+0x294>
 8008110:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008114:	46d1      	mov	r9, sl
 8008116:	4652      	mov	r2, sl
 8008118:	e7c6      	b.n	80080a8 <_dtoa_r+0x240>
 800811a:	3101      	adds	r1, #1
 800811c:	6079      	str	r1, [r7, #4]
 800811e:	0040      	lsls	r0, r0, #1
 8008120:	e7c6      	b.n	80080b0 <_dtoa_r+0x248>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	08009c41 	.word	0x08009c41
 8008144:	08009c58 	.word	0x08009c58
 8008148:	7ff00000 	.word	0x7ff00000
 800814c:	08009c3d 	.word	0x08009c3d
 8008150:	08009c34 	.word	0x08009c34
 8008154:	08009bd5 	.word	0x08009bd5
 8008158:	08009d50 	.word	0x08009d50
 800815c:	08009cb7 	.word	0x08009cb7
 8008160:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008162:	9900      	ldr	r1, [sp, #0]
 8008164:	6011      	str	r1, [r2, #0]
 8008166:	f1b9 0f0e 	cmp.w	r9, #14
 800816a:	d872      	bhi.n	8008252 <_dtoa_r+0x3ea>
 800816c:	2c00      	cmp	r4, #0
 800816e:	d070      	beq.n	8008252 <_dtoa_r+0x3ea>
 8008170:	f1bb 0f00 	cmp.w	fp, #0
 8008174:	f340 80a6 	ble.w	80082c4 <_dtoa_r+0x45c>
 8008178:	49ca      	ldr	r1, [pc, #808]	; (80084a4 <_dtoa_r+0x63c>)
 800817a:	f00b 020f 	and.w	r2, fp, #15
 800817e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008182:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008186:	ed92 7b00 	vldr	d7, [r2]
 800818a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800818e:	f000 808d 	beq.w	80082ac <_dtoa_r+0x444>
 8008192:	4ac5      	ldr	r2, [pc, #788]	; (80084a8 <_dtoa_r+0x640>)
 8008194:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008198:	ed92 6b08 	vldr	d6, [r2, #32]
 800819c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80081a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80081a4:	f001 010f 	and.w	r1, r1, #15
 80081a8:	2203      	movs	r2, #3
 80081aa:	48bf      	ldr	r0, [pc, #764]	; (80084a8 <_dtoa_r+0x640>)
 80081ac:	2900      	cmp	r1, #0
 80081ae:	d17f      	bne.n	80082b0 <_dtoa_r+0x448>
 80081b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80081b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081be:	2900      	cmp	r1, #0
 80081c0:	f000 80b2 	beq.w	8008328 <_dtoa_r+0x4c0>
 80081c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80081c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80081d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d4:	f140 80a8 	bpl.w	8008328 <_dtoa_r+0x4c0>
 80081d8:	f1b9 0f00 	cmp.w	r9, #0
 80081dc:	f000 80a4 	beq.w	8008328 <_dtoa_r+0x4c0>
 80081e0:	f1ba 0f00 	cmp.w	sl, #0
 80081e4:	dd31      	ble.n	800824a <_dtoa_r+0x3e2>
 80081e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80081ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80081f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80081f6:	3201      	adds	r2, #1
 80081f8:	4650      	mov	r0, sl
 80081fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80081fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008202:	ee07 2a90 	vmov	s15, r2
 8008206:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800820a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800820e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008212:	9c03      	ldr	r4, [sp, #12]
 8008214:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008218:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800821c:	2800      	cmp	r0, #0
 800821e:	f040 8086 	bne.w	800832e <_dtoa_r+0x4c6>
 8008222:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008226:	ee36 6b47 	vsub.f64	d6, d6, d7
 800822a:	ec42 1b17 	vmov	d7, r1, r2
 800822e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008236:	f300 8272 	bgt.w	800871e <_dtoa_r+0x8b6>
 800823a:	eeb1 7b47 	vneg.f64	d7, d7
 800823e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008246:	f100 8267 	bmi.w	8008718 <_dtoa_r+0x8b0>
 800824a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800824e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008252:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008254:	2a00      	cmp	r2, #0
 8008256:	f2c0 8129 	blt.w	80084ac <_dtoa_r+0x644>
 800825a:	f1bb 0f0e 	cmp.w	fp, #14
 800825e:	f300 8125 	bgt.w	80084ac <_dtoa_r+0x644>
 8008262:	4b90      	ldr	r3, [pc, #576]	; (80084a4 <_dtoa_r+0x63c>)
 8008264:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008268:	ed93 6b00 	vldr	d6, [r3]
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	f280 80c3 	bge.w	80083fa <_dtoa_r+0x592>
 8008274:	f1b9 0f00 	cmp.w	r9, #0
 8008278:	f300 80bf 	bgt.w	80083fa <_dtoa_r+0x592>
 800827c:	f040 824c 	bne.w	8008718 <_dtoa_r+0x8b0>
 8008280:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008284:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008288:	ed9d 7b02 	vldr	d7, [sp, #8]
 800828c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008294:	464c      	mov	r4, r9
 8008296:	464f      	mov	r7, r9
 8008298:	f280 8222 	bge.w	80086e0 <_dtoa_r+0x878>
 800829c:	f8dd 8000 	ldr.w	r8, [sp]
 80082a0:	2331      	movs	r3, #49	; 0x31
 80082a2:	f808 3b01 	strb.w	r3, [r8], #1
 80082a6:	f10b 0b01 	add.w	fp, fp, #1
 80082aa:	e21e      	b.n	80086ea <_dtoa_r+0x882>
 80082ac:	2202      	movs	r2, #2
 80082ae:	e77c      	b.n	80081aa <_dtoa_r+0x342>
 80082b0:	07cc      	lsls	r4, r1, #31
 80082b2:	d504      	bpl.n	80082be <_dtoa_r+0x456>
 80082b4:	ed90 6b00 	vldr	d6, [r0]
 80082b8:	3201      	adds	r2, #1
 80082ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082be:	1049      	asrs	r1, r1, #1
 80082c0:	3008      	adds	r0, #8
 80082c2:	e773      	b.n	80081ac <_dtoa_r+0x344>
 80082c4:	d02e      	beq.n	8008324 <_dtoa_r+0x4bc>
 80082c6:	f1cb 0100 	rsb	r1, fp, #0
 80082ca:	4a76      	ldr	r2, [pc, #472]	; (80084a4 <_dtoa_r+0x63c>)
 80082cc:	f001 000f 	and.w	r0, r1, #15
 80082d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082d4:	ed92 7b00 	vldr	d7, [r2]
 80082d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80082dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80082e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80082e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80082ec:	486e      	ldr	r0, [pc, #440]	; (80084a8 <_dtoa_r+0x640>)
 80082ee:	1109      	asrs	r1, r1, #4
 80082f0:	2400      	movs	r4, #0
 80082f2:	2202      	movs	r2, #2
 80082f4:	b939      	cbnz	r1, 8008306 <_dtoa_r+0x49e>
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	f43f af60 	beq.w	80081bc <_dtoa_r+0x354>
 80082fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008304:	e75a      	b.n	80081bc <_dtoa_r+0x354>
 8008306:	07cf      	lsls	r7, r1, #31
 8008308:	d509      	bpl.n	800831e <_dtoa_r+0x4b6>
 800830a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800830e:	ed90 7b00 	vldr	d7, [r0]
 8008312:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008316:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800831a:	3201      	adds	r2, #1
 800831c:	2401      	movs	r4, #1
 800831e:	1049      	asrs	r1, r1, #1
 8008320:	3008      	adds	r0, #8
 8008322:	e7e7      	b.n	80082f4 <_dtoa_r+0x48c>
 8008324:	2202      	movs	r2, #2
 8008326:	e749      	b.n	80081bc <_dtoa_r+0x354>
 8008328:	465f      	mov	r7, fp
 800832a:	4648      	mov	r0, r9
 800832c:	e765      	b.n	80081fa <_dtoa_r+0x392>
 800832e:	ec42 1b17 	vmov	d7, r1, r2
 8008332:	4a5c      	ldr	r2, [pc, #368]	; (80084a4 <_dtoa_r+0x63c>)
 8008334:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008338:	ed12 4b02 	vldr	d4, [r2, #-8]
 800833c:	9a00      	ldr	r2, [sp, #0]
 800833e:	1814      	adds	r4, r2, r0
 8008340:	9a08      	ldr	r2, [sp, #32]
 8008342:	b352      	cbz	r2, 800839a <_dtoa_r+0x532>
 8008344:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008348:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800834c:	f8dd 8000 	ldr.w	r8, [sp]
 8008350:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008354:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008358:	ee35 7b47 	vsub.f64	d7, d5, d7
 800835c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008360:	ee14 2a90 	vmov	r2, s9
 8008364:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008368:	3230      	adds	r2, #48	; 0x30
 800836a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800836e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008376:	f808 2b01 	strb.w	r2, [r8], #1
 800837a:	d439      	bmi.n	80083f0 <_dtoa_r+0x588>
 800837c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008380:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008388:	d472      	bmi.n	8008470 <_dtoa_r+0x608>
 800838a:	45a0      	cmp	r8, r4
 800838c:	f43f af5d 	beq.w	800824a <_dtoa_r+0x3e2>
 8008390:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008394:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008398:	e7e0      	b.n	800835c <_dtoa_r+0x4f4>
 800839a:	f8dd 8000 	ldr.w	r8, [sp]
 800839e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80083a2:	4621      	mov	r1, r4
 80083a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80083a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80083ac:	ee14 2a90 	vmov	r2, s9
 80083b0:	3230      	adds	r2, #48	; 0x30
 80083b2:	f808 2b01 	strb.w	r2, [r8], #1
 80083b6:	45a0      	cmp	r8, r4
 80083b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80083bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80083c0:	d118      	bne.n	80083f4 <_dtoa_r+0x58c>
 80083c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80083c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80083ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	dc4d      	bgt.n	8008470 <_dtoa_r+0x608>
 80083d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80083d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	f57f af33 	bpl.w	800824a <_dtoa_r+0x3e2>
 80083e4:	4688      	mov	r8, r1
 80083e6:	3901      	subs	r1, #1
 80083e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80083ec:	2b30      	cmp	r3, #48	; 0x30
 80083ee:	d0f9      	beq.n	80083e4 <_dtoa_r+0x57c>
 80083f0:	46bb      	mov	fp, r7
 80083f2:	e02a      	b.n	800844a <_dtoa_r+0x5e2>
 80083f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80083f8:	e7d6      	b.n	80083a8 <_dtoa_r+0x540>
 80083fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008402:	f8dd 8000 	ldr.w	r8, [sp]
 8008406:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800840a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800840e:	ee15 3a10 	vmov	r3, s10
 8008412:	3330      	adds	r3, #48	; 0x30
 8008414:	f808 3b01 	strb.w	r3, [r8], #1
 8008418:	9b00      	ldr	r3, [sp, #0]
 800841a:	eba8 0303 	sub.w	r3, r8, r3
 800841e:	4599      	cmp	r9, r3
 8008420:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008424:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008428:	d133      	bne.n	8008492 <_dtoa_r+0x62a>
 800842a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800842e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008436:	dc1a      	bgt.n	800846e <_dtoa_r+0x606>
 8008438:	eeb4 7b46 	vcmp.f64	d7, d6
 800843c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008440:	d103      	bne.n	800844a <_dtoa_r+0x5e2>
 8008442:	ee15 3a10 	vmov	r3, s10
 8008446:	07d9      	lsls	r1, r3, #31
 8008448:	d411      	bmi.n	800846e <_dtoa_r+0x606>
 800844a:	4629      	mov	r1, r5
 800844c:	4630      	mov	r0, r6
 800844e:	f000 fafd 	bl	8008a4c <_Bfree>
 8008452:	2300      	movs	r3, #0
 8008454:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008456:	f888 3000 	strb.w	r3, [r8]
 800845a:	f10b 0301 	add.w	r3, fp, #1
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008462:	2b00      	cmp	r3, #0
 8008464:	f43f ad4d 	beq.w	8007f02 <_dtoa_r+0x9a>
 8008468:	f8c3 8000 	str.w	r8, [r3]
 800846c:	e549      	b.n	8007f02 <_dtoa_r+0x9a>
 800846e:	465f      	mov	r7, fp
 8008470:	4643      	mov	r3, r8
 8008472:	4698      	mov	r8, r3
 8008474:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008478:	2a39      	cmp	r2, #57	; 0x39
 800847a:	d106      	bne.n	800848a <_dtoa_r+0x622>
 800847c:	9a00      	ldr	r2, [sp, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d1f7      	bne.n	8008472 <_dtoa_r+0x60a>
 8008482:	9900      	ldr	r1, [sp, #0]
 8008484:	2230      	movs	r2, #48	; 0x30
 8008486:	3701      	adds	r7, #1
 8008488:	700a      	strb	r2, [r1, #0]
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	3201      	adds	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e7ae      	b.n	80083f0 <_dtoa_r+0x588>
 8008492:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008496:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800849a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849e:	d1b2      	bne.n	8008406 <_dtoa_r+0x59e>
 80084a0:	e7d3      	b.n	800844a <_dtoa_r+0x5e2>
 80084a2:	bf00      	nop
 80084a4:	08009d50 	.word	0x08009d50
 80084a8:	08009d28 	.word	0x08009d28
 80084ac:	9908      	ldr	r1, [sp, #32]
 80084ae:	2900      	cmp	r1, #0
 80084b0:	f000 80d1 	beq.w	8008656 <_dtoa_r+0x7ee>
 80084b4:	9907      	ldr	r1, [sp, #28]
 80084b6:	2901      	cmp	r1, #1
 80084b8:	f300 80b4 	bgt.w	8008624 <_dtoa_r+0x7bc>
 80084bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80084be:	2900      	cmp	r1, #0
 80084c0:	f000 80ac 	beq.w	800861c <_dtoa_r+0x7b4>
 80084c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80084cc:	461c      	mov	r4, r3
 80084ce:	930a      	str	r3, [sp, #40]	; 0x28
 80084d0:	9b05      	ldr	r3, [sp, #20]
 80084d2:	4413      	add	r3, r2
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	2101      	movs	r1, #1
 80084da:	4413      	add	r3, r2
 80084dc:	4630      	mov	r0, r6
 80084de:	9306      	str	r3, [sp, #24]
 80084e0:	f000 fb70 	bl	8008bc4 <__i2b>
 80084e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e6:	4607      	mov	r7, r0
 80084e8:	f1b8 0f00 	cmp.w	r8, #0
 80084ec:	dd0d      	ble.n	800850a <_dtoa_r+0x6a2>
 80084ee:	9a06      	ldr	r2, [sp, #24]
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	dd0a      	ble.n	800850a <_dtoa_r+0x6a2>
 80084f4:	4542      	cmp	r2, r8
 80084f6:	9905      	ldr	r1, [sp, #20]
 80084f8:	bfa8      	it	ge
 80084fa:	4642      	movge	r2, r8
 80084fc:	1a89      	subs	r1, r1, r2
 80084fe:	9105      	str	r1, [sp, #20]
 8008500:	9906      	ldr	r1, [sp, #24]
 8008502:	eba8 0802 	sub.w	r8, r8, r2
 8008506:	1a8a      	subs	r2, r1, r2
 8008508:	9206      	str	r2, [sp, #24]
 800850a:	b303      	cbz	r3, 800854e <_dtoa_r+0x6e6>
 800850c:	9a08      	ldr	r2, [sp, #32]
 800850e:	2a00      	cmp	r2, #0
 8008510:	f000 80a6 	beq.w	8008660 <_dtoa_r+0x7f8>
 8008514:	2c00      	cmp	r4, #0
 8008516:	dd13      	ble.n	8008540 <_dtoa_r+0x6d8>
 8008518:	4639      	mov	r1, r7
 800851a:	4622      	mov	r2, r4
 800851c:	4630      	mov	r0, r6
 800851e:	930c      	str	r3, [sp, #48]	; 0x30
 8008520:	f000 fc0c 	bl	8008d3c <__pow5mult>
 8008524:	462a      	mov	r2, r5
 8008526:	4601      	mov	r1, r0
 8008528:	4607      	mov	r7, r0
 800852a:	4630      	mov	r0, r6
 800852c:	f000 fb60 	bl	8008bf0 <__multiply>
 8008530:	4629      	mov	r1, r5
 8008532:	900a      	str	r0, [sp, #40]	; 0x28
 8008534:	4630      	mov	r0, r6
 8008536:	f000 fa89 	bl	8008a4c <_Bfree>
 800853a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800853c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800853e:	4615      	mov	r5, r2
 8008540:	1b1a      	subs	r2, r3, r4
 8008542:	d004      	beq.n	800854e <_dtoa_r+0x6e6>
 8008544:	4629      	mov	r1, r5
 8008546:	4630      	mov	r0, r6
 8008548:	f000 fbf8 	bl	8008d3c <__pow5mult>
 800854c:	4605      	mov	r5, r0
 800854e:	2101      	movs	r1, #1
 8008550:	4630      	mov	r0, r6
 8008552:	f000 fb37 	bl	8008bc4 <__i2b>
 8008556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	f340 8082 	ble.w	8008664 <_dtoa_r+0x7fc>
 8008560:	461a      	mov	r2, r3
 8008562:	4601      	mov	r1, r0
 8008564:	4630      	mov	r0, r6
 8008566:	f000 fbe9 	bl	8008d3c <__pow5mult>
 800856a:	9b07      	ldr	r3, [sp, #28]
 800856c:	2b01      	cmp	r3, #1
 800856e:	4604      	mov	r4, r0
 8008570:	dd7b      	ble.n	800866a <_dtoa_r+0x802>
 8008572:	2300      	movs	r3, #0
 8008574:	930a      	str	r3, [sp, #40]	; 0x28
 8008576:	6922      	ldr	r2, [r4, #16]
 8008578:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800857c:	6910      	ldr	r0, [r2, #16]
 800857e:	f000 fad1 	bl	8008b24 <__hi0bits>
 8008582:	f1c0 0020 	rsb	r0, r0, #32
 8008586:	9b06      	ldr	r3, [sp, #24]
 8008588:	4418      	add	r0, r3
 800858a:	f010 001f 	ands.w	r0, r0, #31
 800858e:	f000 808d 	beq.w	80086ac <_dtoa_r+0x844>
 8008592:	f1c0 0220 	rsb	r2, r0, #32
 8008596:	2a04      	cmp	r2, #4
 8008598:	f340 8086 	ble.w	80086a8 <_dtoa_r+0x840>
 800859c:	f1c0 001c 	rsb	r0, r0, #28
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	4403      	add	r3, r0
 80085a4:	9305      	str	r3, [sp, #20]
 80085a6:	9b06      	ldr	r3, [sp, #24]
 80085a8:	4403      	add	r3, r0
 80085aa:	4480      	add	r8, r0
 80085ac:	9306      	str	r3, [sp, #24]
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dd05      	ble.n	80085c0 <_dtoa_r+0x758>
 80085b4:	4629      	mov	r1, r5
 80085b6:	461a      	mov	r2, r3
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 fc19 	bl	8008df0 <__lshift>
 80085be:	4605      	mov	r5, r0
 80085c0:	9b06      	ldr	r3, [sp, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	dd05      	ble.n	80085d2 <_dtoa_r+0x76a>
 80085c6:	4621      	mov	r1, r4
 80085c8:	461a      	mov	r2, r3
 80085ca:	4630      	mov	r0, r6
 80085cc:	f000 fc10 	bl	8008df0 <__lshift>
 80085d0:	4604      	mov	r4, r0
 80085d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d06b      	beq.n	80086b0 <_dtoa_r+0x848>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 fc74 	bl	8008ec8 <__mcmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	da65      	bge.n	80086b0 <_dtoa_r+0x848>
 80085e4:	2300      	movs	r3, #0
 80085e6:	4629      	mov	r1, r5
 80085e8:	220a      	movs	r2, #10
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 fa50 	bl	8008a90 <__multadd>
 80085f0:	9b08      	ldr	r3, [sp, #32]
 80085f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085f6:	4605      	mov	r5, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8192 	beq.w	8008922 <_dtoa_r+0xaba>
 80085fe:	4639      	mov	r1, r7
 8008600:	2300      	movs	r3, #0
 8008602:	220a      	movs	r2, #10
 8008604:	4630      	mov	r0, r6
 8008606:	f000 fa43 	bl	8008a90 <__multadd>
 800860a:	f1ba 0f00 	cmp.w	sl, #0
 800860e:	4607      	mov	r7, r0
 8008610:	f300 808e 	bgt.w	8008730 <_dtoa_r+0x8c8>
 8008614:	9b07      	ldr	r3, [sp, #28]
 8008616:	2b02      	cmp	r3, #2
 8008618:	dc51      	bgt.n	80086be <_dtoa_r+0x856>
 800861a:	e089      	b.n	8008730 <_dtoa_r+0x8c8>
 800861c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800861e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008622:	e751      	b.n	80084c8 <_dtoa_r+0x660>
 8008624:	f109 34ff 	add.w	r4, r9, #4294967295
 8008628:	42a3      	cmp	r3, r4
 800862a:	bfbf      	itttt	lt
 800862c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800862e:	1ae3      	sublt	r3, r4, r3
 8008630:	18d2      	addlt	r2, r2, r3
 8008632:	4613      	movlt	r3, r2
 8008634:	bfb7      	itett	lt
 8008636:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008638:	1b1c      	subge	r4, r3, r4
 800863a:	4623      	movlt	r3, r4
 800863c:	2400      	movlt	r4, #0
 800863e:	f1b9 0f00 	cmp.w	r9, #0
 8008642:	bfb5      	itete	lt
 8008644:	9a05      	ldrlt	r2, [sp, #20]
 8008646:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800864a:	eba2 0809 	sublt.w	r8, r2, r9
 800864e:	464a      	movge	r2, r9
 8008650:	bfb8      	it	lt
 8008652:	2200      	movlt	r2, #0
 8008654:	e73b      	b.n	80084ce <_dtoa_r+0x666>
 8008656:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800865a:	9f08      	ldr	r7, [sp, #32]
 800865c:	461c      	mov	r4, r3
 800865e:	e743      	b.n	80084e8 <_dtoa_r+0x680>
 8008660:	461a      	mov	r2, r3
 8008662:	e76f      	b.n	8008544 <_dtoa_r+0x6dc>
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	2b01      	cmp	r3, #1
 8008668:	dc18      	bgt.n	800869c <_dtoa_r+0x834>
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	b9b3      	cbnz	r3, 800869c <_dtoa_r+0x834>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008674:	b9a2      	cbnz	r2, 80086a0 <_dtoa_r+0x838>
 8008676:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800867a:	0d12      	lsrs	r2, r2, #20
 800867c:	0512      	lsls	r2, r2, #20
 800867e:	b18a      	cbz	r2, 80086a4 <_dtoa_r+0x83c>
 8008680:	9b05      	ldr	r3, [sp, #20]
 8008682:	3301      	adds	r3, #1
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	9b06      	ldr	r3, [sp, #24]
 8008688:	3301      	adds	r3, #1
 800868a:	9306      	str	r3, [sp, #24]
 800868c:	2301      	movs	r3, #1
 800868e:	930a      	str	r3, [sp, #40]	; 0x28
 8008690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008692:	2b00      	cmp	r3, #0
 8008694:	f47f af6f 	bne.w	8008576 <_dtoa_r+0x70e>
 8008698:	2001      	movs	r0, #1
 800869a:	e774      	b.n	8008586 <_dtoa_r+0x71e>
 800869c:	2300      	movs	r3, #0
 800869e:	e7f6      	b.n	800868e <_dtoa_r+0x826>
 80086a0:	9b02      	ldr	r3, [sp, #8]
 80086a2:	e7f4      	b.n	800868e <_dtoa_r+0x826>
 80086a4:	920a      	str	r2, [sp, #40]	; 0x28
 80086a6:	e7f3      	b.n	8008690 <_dtoa_r+0x828>
 80086a8:	d081      	beq.n	80085ae <_dtoa_r+0x746>
 80086aa:	4610      	mov	r0, r2
 80086ac:	301c      	adds	r0, #28
 80086ae:	e777      	b.n	80085a0 <_dtoa_r+0x738>
 80086b0:	f1b9 0f00 	cmp.w	r9, #0
 80086b4:	dc37      	bgt.n	8008726 <_dtoa_r+0x8be>
 80086b6:	9b07      	ldr	r3, [sp, #28]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	dd34      	ble.n	8008726 <_dtoa_r+0x8be>
 80086bc:	46ca      	mov	sl, r9
 80086be:	f1ba 0f00 	cmp.w	sl, #0
 80086c2:	d10d      	bne.n	80086e0 <_dtoa_r+0x878>
 80086c4:	4621      	mov	r1, r4
 80086c6:	4653      	mov	r3, sl
 80086c8:	2205      	movs	r2, #5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f9e0 	bl	8008a90 <__multadd>
 80086d0:	4601      	mov	r1, r0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 fbf7 	bl	8008ec8 <__mcmp>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f73f adde 	bgt.w	800829c <_dtoa_r+0x434>
 80086e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e2:	f8dd 8000 	ldr.w	r8, [sp]
 80086e6:	ea6f 0b03 	mvn.w	fp, r3
 80086ea:	f04f 0900 	mov.w	r9, #0
 80086ee:	4621      	mov	r1, r4
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 f9ab 	bl	8008a4c <_Bfree>
 80086f6:	2f00      	cmp	r7, #0
 80086f8:	f43f aea7 	beq.w	800844a <_dtoa_r+0x5e2>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	d005      	beq.n	800870e <_dtoa_r+0x8a6>
 8008702:	45b9      	cmp	r9, r7
 8008704:	d003      	beq.n	800870e <_dtoa_r+0x8a6>
 8008706:	4649      	mov	r1, r9
 8008708:	4630      	mov	r0, r6
 800870a:	f000 f99f 	bl	8008a4c <_Bfree>
 800870e:	4639      	mov	r1, r7
 8008710:	4630      	mov	r0, r6
 8008712:	f000 f99b 	bl	8008a4c <_Bfree>
 8008716:	e698      	b.n	800844a <_dtoa_r+0x5e2>
 8008718:	2400      	movs	r4, #0
 800871a:	4627      	mov	r7, r4
 800871c:	e7e0      	b.n	80086e0 <_dtoa_r+0x878>
 800871e:	46bb      	mov	fp, r7
 8008720:	4604      	mov	r4, r0
 8008722:	4607      	mov	r7, r0
 8008724:	e5ba      	b.n	800829c <_dtoa_r+0x434>
 8008726:	9b08      	ldr	r3, [sp, #32]
 8008728:	46ca      	mov	sl, r9
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 8100 	beq.w	8008930 <_dtoa_r+0xac8>
 8008730:	f1b8 0f00 	cmp.w	r8, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x8da>
 8008736:	4639      	mov	r1, r7
 8008738:	4642      	mov	r2, r8
 800873a:	4630      	mov	r0, r6
 800873c:	f000 fb58 	bl	8008df0 <__lshift>
 8008740:	4607      	mov	r7, r0
 8008742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008744:	2b00      	cmp	r3, #0
 8008746:	d05d      	beq.n	8008804 <_dtoa_r+0x99c>
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f93e 	bl	80089cc <_Balloc>
 8008750:	4680      	mov	r8, r0
 8008752:	b928      	cbnz	r0, 8008760 <_dtoa_r+0x8f8>
 8008754:	4b82      	ldr	r3, [pc, #520]	; (8008960 <_dtoa_r+0xaf8>)
 8008756:	4602      	mov	r2, r0
 8008758:	f240 21ea 	movw	r1, #746	; 0x2ea
 800875c:	f7ff bb9a 	b.w	8007e94 <_dtoa_r+0x2c>
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	3202      	adds	r2, #2
 8008764:	0092      	lsls	r2, r2, #2
 8008766:	f107 010c 	add.w	r1, r7, #12
 800876a:	300c      	adds	r0, #12
 800876c:	f000 f914 	bl	8008998 <memcpy>
 8008770:	2201      	movs	r2, #1
 8008772:	4641      	mov	r1, r8
 8008774:	4630      	mov	r0, r6
 8008776:	f000 fb3b 	bl	8008df0 <__lshift>
 800877a:	9b00      	ldr	r3, [sp, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	9305      	str	r3, [sp, #20]
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	4453      	add	r3, sl
 8008784:	9309      	str	r3, [sp, #36]	; 0x24
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	46b9      	mov	r9, r7
 800878e:	9308      	str	r3, [sp, #32]
 8008790:	4607      	mov	r7, r0
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	4621      	mov	r1, r4
 8008796:	3b01      	subs	r3, #1
 8008798:	4628      	mov	r0, r5
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	f7ff fad8 	bl	8007d50 <quorem>
 80087a0:	4603      	mov	r3, r0
 80087a2:	3330      	adds	r3, #48	; 0x30
 80087a4:	9006      	str	r0, [sp, #24]
 80087a6:	4649      	mov	r1, r9
 80087a8:	4628      	mov	r0, r5
 80087aa:	930a      	str	r3, [sp, #40]	; 0x28
 80087ac:	f000 fb8c 	bl	8008ec8 <__mcmp>
 80087b0:	463a      	mov	r2, r7
 80087b2:	4682      	mov	sl, r0
 80087b4:	4621      	mov	r1, r4
 80087b6:	4630      	mov	r0, r6
 80087b8:	f000 fba2 	bl	8008f00 <__mdiff>
 80087bc:	68c2      	ldr	r2, [r0, #12]
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	4680      	mov	r8, r0
 80087c2:	bb0a      	cbnz	r2, 8008808 <_dtoa_r+0x9a0>
 80087c4:	4601      	mov	r1, r0
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 fb7e 	bl	8008ec8 <__mcmp>
 80087cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ce:	4602      	mov	r2, r0
 80087d0:	4641      	mov	r1, r8
 80087d2:	4630      	mov	r0, r6
 80087d4:	920e      	str	r2, [sp, #56]	; 0x38
 80087d6:	930a      	str	r3, [sp, #40]	; 0x28
 80087d8:	f000 f938 	bl	8008a4c <_Bfree>
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80087e4:	ea43 0102 	orr.w	r1, r3, r2
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	430b      	orrs	r3, r1
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	d10d      	bne.n	800880c <_dtoa_r+0x9a4>
 80087f0:	2b39      	cmp	r3, #57	; 0x39
 80087f2:	d029      	beq.n	8008848 <_dtoa_r+0x9e0>
 80087f4:	f1ba 0f00 	cmp.w	sl, #0
 80087f8:	dd01      	ble.n	80087fe <_dtoa_r+0x996>
 80087fa:	9b06      	ldr	r3, [sp, #24]
 80087fc:	3331      	adds	r3, #49	; 0x31
 80087fe:	9a02      	ldr	r2, [sp, #8]
 8008800:	7013      	strb	r3, [r2, #0]
 8008802:	e774      	b.n	80086ee <_dtoa_r+0x886>
 8008804:	4638      	mov	r0, r7
 8008806:	e7b8      	b.n	800877a <_dtoa_r+0x912>
 8008808:	2201      	movs	r2, #1
 800880a:	e7e1      	b.n	80087d0 <_dtoa_r+0x968>
 800880c:	f1ba 0f00 	cmp.w	sl, #0
 8008810:	db06      	blt.n	8008820 <_dtoa_r+0x9b8>
 8008812:	9907      	ldr	r1, [sp, #28]
 8008814:	ea41 0a0a 	orr.w	sl, r1, sl
 8008818:	9908      	ldr	r1, [sp, #32]
 800881a:	ea5a 0101 	orrs.w	r1, sl, r1
 800881e:	d120      	bne.n	8008862 <_dtoa_r+0x9fa>
 8008820:	2a00      	cmp	r2, #0
 8008822:	ddec      	ble.n	80087fe <_dtoa_r+0x996>
 8008824:	4629      	mov	r1, r5
 8008826:	2201      	movs	r2, #1
 8008828:	4630      	mov	r0, r6
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	f000 fae0 	bl	8008df0 <__lshift>
 8008830:	4621      	mov	r1, r4
 8008832:	4605      	mov	r5, r0
 8008834:	f000 fb48 	bl	8008ec8 <__mcmp>
 8008838:	2800      	cmp	r0, #0
 800883a:	9b05      	ldr	r3, [sp, #20]
 800883c:	dc02      	bgt.n	8008844 <_dtoa_r+0x9dc>
 800883e:	d1de      	bne.n	80087fe <_dtoa_r+0x996>
 8008840:	07da      	lsls	r2, r3, #31
 8008842:	d5dc      	bpl.n	80087fe <_dtoa_r+0x996>
 8008844:	2b39      	cmp	r3, #57	; 0x39
 8008846:	d1d8      	bne.n	80087fa <_dtoa_r+0x992>
 8008848:	9a02      	ldr	r2, [sp, #8]
 800884a:	2339      	movs	r3, #57	; 0x39
 800884c:	7013      	strb	r3, [r2, #0]
 800884e:	4643      	mov	r3, r8
 8008850:	4698      	mov	r8, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008858:	2a39      	cmp	r2, #57	; 0x39
 800885a:	d051      	beq.n	8008900 <_dtoa_r+0xa98>
 800885c:	3201      	adds	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	e745      	b.n	80086ee <_dtoa_r+0x886>
 8008862:	2a00      	cmp	r2, #0
 8008864:	dd03      	ble.n	800886e <_dtoa_r+0xa06>
 8008866:	2b39      	cmp	r3, #57	; 0x39
 8008868:	d0ee      	beq.n	8008848 <_dtoa_r+0x9e0>
 800886a:	3301      	adds	r3, #1
 800886c:	e7c7      	b.n	80087fe <_dtoa_r+0x996>
 800886e:	9a05      	ldr	r2, [sp, #20]
 8008870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008872:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008876:	428a      	cmp	r2, r1
 8008878:	d02b      	beq.n	80088d2 <_dtoa_r+0xa6a>
 800887a:	4629      	mov	r1, r5
 800887c:	2300      	movs	r3, #0
 800887e:	220a      	movs	r2, #10
 8008880:	4630      	mov	r0, r6
 8008882:	f000 f905 	bl	8008a90 <__multadd>
 8008886:	45b9      	cmp	r9, r7
 8008888:	4605      	mov	r5, r0
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	f04f 020a 	mov.w	r2, #10
 8008892:	4649      	mov	r1, r9
 8008894:	4630      	mov	r0, r6
 8008896:	d107      	bne.n	80088a8 <_dtoa_r+0xa40>
 8008898:	f000 f8fa 	bl	8008a90 <__multadd>
 800889c:	4681      	mov	r9, r0
 800889e:	4607      	mov	r7, r0
 80088a0:	9b05      	ldr	r3, [sp, #20]
 80088a2:	3301      	adds	r3, #1
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	e774      	b.n	8008792 <_dtoa_r+0x92a>
 80088a8:	f000 f8f2 	bl	8008a90 <__multadd>
 80088ac:	4639      	mov	r1, r7
 80088ae:	4681      	mov	r9, r0
 80088b0:	2300      	movs	r3, #0
 80088b2:	220a      	movs	r2, #10
 80088b4:	4630      	mov	r0, r6
 80088b6:	f000 f8eb 	bl	8008a90 <__multadd>
 80088ba:	4607      	mov	r7, r0
 80088bc:	e7f0      	b.n	80088a0 <_dtoa_r+0xa38>
 80088be:	f1ba 0f00 	cmp.w	sl, #0
 80088c2:	9a00      	ldr	r2, [sp, #0]
 80088c4:	bfcc      	ite	gt
 80088c6:	46d0      	movgt	r8, sl
 80088c8:	f04f 0801 	movle.w	r8, #1
 80088cc:	4490      	add	r8, r2
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	4629      	mov	r1, r5
 80088d4:	2201      	movs	r2, #1
 80088d6:	4630      	mov	r0, r6
 80088d8:	9302      	str	r3, [sp, #8]
 80088da:	f000 fa89 	bl	8008df0 <__lshift>
 80088de:	4621      	mov	r1, r4
 80088e0:	4605      	mov	r5, r0
 80088e2:	f000 faf1 	bl	8008ec8 <__mcmp>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	dcb1      	bgt.n	800884e <_dtoa_r+0x9e6>
 80088ea:	d102      	bne.n	80088f2 <_dtoa_r+0xa8a>
 80088ec:	9b02      	ldr	r3, [sp, #8]
 80088ee:	07db      	lsls	r3, r3, #31
 80088f0:	d4ad      	bmi.n	800884e <_dtoa_r+0x9e6>
 80088f2:	4643      	mov	r3, r8
 80088f4:	4698      	mov	r8, r3
 80088f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088fa:	2a30      	cmp	r2, #48	; 0x30
 80088fc:	d0fa      	beq.n	80088f4 <_dtoa_r+0xa8c>
 80088fe:	e6f6      	b.n	80086ee <_dtoa_r+0x886>
 8008900:	9a00      	ldr	r2, [sp, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d1a4      	bne.n	8008850 <_dtoa_r+0x9e8>
 8008906:	f10b 0b01 	add.w	fp, fp, #1
 800890a:	2331      	movs	r3, #49	; 0x31
 800890c:	e778      	b.n	8008800 <_dtoa_r+0x998>
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <_dtoa_r+0xafc>)
 8008910:	f7ff bb12 	b.w	8007f38 <_dtoa_r+0xd0>
 8008914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008916:	2b00      	cmp	r3, #0
 8008918:	f47f aaee 	bne.w	8007ef8 <_dtoa_r+0x90>
 800891c:	4b12      	ldr	r3, [pc, #72]	; (8008968 <_dtoa_r+0xb00>)
 800891e:	f7ff bb0b 	b.w	8007f38 <_dtoa_r+0xd0>
 8008922:	f1ba 0f00 	cmp.w	sl, #0
 8008926:	dc03      	bgt.n	8008930 <_dtoa_r+0xac8>
 8008928:	9b07      	ldr	r3, [sp, #28]
 800892a:	2b02      	cmp	r3, #2
 800892c:	f73f aec7 	bgt.w	80086be <_dtoa_r+0x856>
 8008930:	f8dd 8000 	ldr.w	r8, [sp]
 8008934:	4621      	mov	r1, r4
 8008936:	4628      	mov	r0, r5
 8008938:	f7ff fa0a 	bl	8007d50 <quorem>
 800893c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008940:	f808 3b01 	strb.w	r3, [r8], #1
 8008944:	9a00      	ldr	r2, [sp, #0]
 8008946:	eba8 0202 	sub.w	r2, r8, r2
 800894a:	4592      	cmp	sl, r2
 800894c:	ddb7      	ble.n	80088be <_dtoa_r+0xa56>
 800894e:	4629      	mov	r1, r5
 8008950:	2300      	movs	r3, #0
 8008952:	220a      	movs	r2, #10
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f89b 	bl	8008a90 <__multadd>
 800895a:	4605      	mov	r5, r0
 800895c:	e7ea      	b.n	8008934 <_dtoa_r+0xacc>
 800895e:	bf00      	nop
 8008960:	08009cb7 	.word	0x08009cb7
 8008964:	08009bd4 	.word	0x08009bd4
 8008968:	08009c34 	.word	0x08009c34

0800896c <fiprintf>:
 800896c:	b40e      	push	{r1, r2, r3}
 800896e:	b503      	push	{r0, r1, lr}
 8008970:	4601      	mov	r1, r0
 8008972:	ab03      	add	r3, sp, #12
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <fiprintf+0x20>)
 8008976:	f853 2b04 	ldr.w	r2, [r3], #4
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	f000 fbdb 	bl	8009138 <_vfiprintf_r>
 8008982:	b002      	add	sp, #8
 8008984:	f85d eb04 	ldr.w	lr, [sp], #4
 8008988:	b003      	add	sp, #12
 800898a:	4770      	bx	lr
 800898c:	20000068 	.word	0x20000068

08008990 <_localeconv_r>:
 8008990:	4800      	ldr	r0, [pc, #0]	; (8008994 <_localeconv_r+0x4>)
 8008992:	4770      	bx	lr
 8008994:	200001bc 	.word	0x200001bc

08008998 <memcpy>:
 8008998:	440a      	add	r2, r1
 800899a:	4291      	cmp	r1, r2
 800899c:	f100 33ff 	add.w	r3, r0, #4294967295
 80089a0:	d100      	bne.n	80089a4 <memcpy+0xc>
 80089a2:	4770      	bx	lr
 80089a4:	b510      	push	{r4, lr}
 80089a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ae:	4291      	cmp	r1, r2
 80089b0:	d1f9      	bne.n	80089a6 <memcpy+0xe>
 80089b2:	bd10      	pop	{r4, pc}

080089b4 <__malloc_lock>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__malloc_lock+0x8>)
 80089b6:	f000 bf6f 	b.w	8009898 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	200006b0 	.word	0x200006b0

080089c0 <__malloc_unlock>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__malloc_unlock+0x8>)
 80089c2:	f000 bf6a 	b.w	800989a <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	200006b0 	.word	0x200006b0

080089cc <_Balloc>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	b976      	cbnz	r6, 80089f4 <_Balloc+0x28>
 80089d6:	2010      	movs	r0, #16
 80089d8:	f7fe fc90 	bl	80072fc <malloc>
 80089dc:	4602      	mov	r2, r0
 80089de:	6260      	str	r0, [r4, #36]	; 0x24
 80089e0:	b920      	cbnz	r0, 80089ec <_Balloc+0x20>
 80089e2:	4b18      	ldr	r3, [pc, #96]	; (8008a44 <_Balloc+0x78>)
 80089e4:	4818      	ldr	r0, [pc, #96]	; (8008a48 <_Balloc+0x7c>)
 80089e6:	2166      	movs	r1, #102	; 0x66
 80089e8:	f7ff f994 	bl	8007d14 <__assert_func>
 80089ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089f0:	6006      	str	r6, [r0, #0]
 80089f2:	60c6      	str	r6, [r0, #12]
 80089f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089f6:	68f3      	ldr	r3, [r6, #12]
 80089f8:	b183      	cbz	r3, 8008a1c <_Balloc+0x50>
 80089fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a02:	b9b8      	cbnz	r0, 8008a34 <_Balloc+0x68>
 8008a04:	2101      	movs	r1, #1
 8008a06:	fa01 f605 	lsl.w	r6, r1, r5
 8008a0a:	1d72      	adds	r2, r6, #5
 8008a0c:	0092      	lsls	r2, r2, #2
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f000 fb5a 	bl	80090c8 <_calloc_r>
 8008a14:	b160      	cbz	r0, 8008a30 <_Balloc+0x64>
 8008a16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a1a:	e00e      	b.n	8008a3a <_Balloc+0x6e>
 8008a1c:	2221      	movs	r2, #33	; 0x21
 8008a1e:	2104      	movs	r1, #4
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 fb51 	bl	80090c8 <_calloc_r>
 8008a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a28:	60f0      	str	r0, [r6, #12]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e4      	bne.n	80089fa <_Balloc+0x2e>
 8008a30:	2000      	movs	r0, #0
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	6802      	ldr	r2, [r0, #0]
 8008a36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a40:	e7f7      	b.n	8008a32 <_Balloc+0x66>
 8008a42:	bf00      	nop
 8008a44:	08009c41 	.word	0x08009c41
 8008a48:	08009cc8 	.word	0x08009cc8

08008a4c <_Bfree>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a50:	4605      	mov	r5, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	b976      	cbnz	r6, 8008a74 <_Bfree+0x28>
 8008a56:	2010      	movs	r0, #16
 8008a58:	f7fe fc50 	bl	80072fc <malloc>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	6268      	str	r0, [r5, #36]	; 0x24
 8008a60:	b920      	cbnz	r0, 8008a6c <_Bfree+0x20>
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <_Bfree+0x3c>)
 8008a64:	4809      	ldr	r0, [pc, #36]	; (8008a8c <_Bfree+0x40>)
 8008a66:	218a      	movs	r1, #138	; 0x8a
 8008a68:	f7ff f954 	bl	8007d14 <__assert_func>
 8008a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a70:	6006      	str	r6, [r0, #0]
 8008a72:	60c6      	str	r6, [r0, #12]
 8008a74:	b13c      	cbz	r4, 8008a86 <_Bfree+0x3a>
 8008a76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a78:	6862      	ldr	r2, [r4, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a80:	6021      	str	r1, [r4, #0]
 8008a82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
 8008a88:	08009c41 	.word	0x08009c41
 8008a8c:	08009cc8 	.word	0x08009cc8

08008a90 <__multadd>:
 8008a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a94:	690e      	ldr	r6, [r1, #16]
 8008a96:	4607      	mov	r7, r0
 8008a98:	4698      	mov	r8, r3
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	f101 0014 	add.w	r0, r1, #20
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6805      	ldr	r5, [r0, #0]
 8008aa4:	b2a9      	uxth	r1, r5
 8008aa6:	fb02 8101 	mla	r1, r2, r1, r8
 8008aaa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008aae:	0c2d      	lsrs	r5, r5, #16
 8008ab0:	fb02 c505 	mla	r5, r2, r5, ip
 8008ab4:	b289      	uxth	r1, r1
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008abc:	429e      	cmp	r6, r3
 8008abe:	f840 1b04 	str.w	r1, [r0], #4
 8008ac2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ac6:	dcec      	bgt.n	8008aa2 <__multadd+0x12>
 8008ac8:	f1b8 0f00 	cmp.w	r8, #0
 8008acc:	d022      	beq.n	8008b14 <__multadd+0x84>
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	42b3      	cmp	r3, r6
 8008ad2:	dc19      	bgt.n	8008b08 <__multadd+0x78>
 8008ad4:	6861      	ldr	r1, [r4, #4]
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	3101      	adds	r1, #1
 8008ada:	f7ff ff77 	bl	80089cc <_Balloc>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b928      	cbnz	r0, 8008aee <__multadd+0x5e>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b0d      	ldr	r3, [pc, #52]	; (8008b1c <__multadd+0x8c>)
 8008ae6:	480e      	ldr	r0, [pc, #56]	; (8008b20 <__multadd+0x90>)
 8008ae8:	21b5      	movs	r1, #181	; 0xb5
 8008aea:	f7ff f913 	bl	8007d14 <__assert_func>
 8008aee:	6922      	ldr	r2, [r4, #16]
 8008af0:	3202      	adds	r2, #2
 8008af2:	f104 010c 	add.w	r1, r4, #12
 8008af6:	0092      	lsls	r2, r2, #2
 8008af8:	300c      	adds	r0, #12
 8008afa:	f7ff ff4d 	bl	8008998 <memcpy>
 8008afe:	4621      	mov	r1, r4
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff ffa3 	bl	8008a4c <_Bfree>
 8008b06:	462c      	mov	r4, r5
 8008b08:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b12:	6126      	str	r6, [r4, #16]
 8008b14:	4620      	mov	r0, r4
 8008b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1a:	bf00      	nop
 8008b1c:	08009cb7 	.word	0x08009cb7
 8008b20:	08009cc8 	.word	0x08009cc8

08008b24 <__hi0bits>:
 8008b24:	0c03      	lsrs	r3, r0, #16
 8008b26:	041b      	lsls	r3, r3, #16
 8008b28:	b9d3      	cbnz	r3, 8008b60 <__hi0bits+0x3c>
 8008b2a:	0400      	lsls	r0, r0, #16
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b32:	bf04      	itt	eq
 8008b34:	0200      	lsleq	r0, r0, #8
 8008b36:	3308      	addeq	r3, #8
 8008b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b3c:	bf04      	itt	eq
 8008b3e:	0100      	lsleq	r0, r0, #4
 8008b40:	3304      	addeq	r3, #4
 8008b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b46:	bf04      	itt	eq
 8008b48:	0080      	lsleq	r0, r0, #2
 8008b4a:	3302      	addeq	r3, #2
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	db05      	blt.n	8008b5c <__hi0bits+0x38>
 8008b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b54:	f103 0301 	add.w	r3, r3, #1
 8008b58:	bf08      	it	eq
 8008b5a:	2320      	moveq	r3, #32
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	4770      	bx	lr
 8008b60:	2300      	movs	r3, #0
 8008b62:	e7e4      	b.n	8008b2e <__hi0bits+0xa>

08008b64 <__lo0bits>:
 8008b64:	6803      	ldr	r3, [r0, #0]
 8008b66:	f013 0207 	ands.w	r2, r3, #7
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	d00b      	beq.n	8008b86 <__lo0bits+0x22>
 8008b6e:	07da      	lsls	r2, r3, #31
 8008b70:	d424      	bmi.n	8008bbc <__lo0bits+0x58>
 8008b72:	0798      	lsls	r0, r3, #30
 8008b74:	bf49      	itett	mi
 8008b76:	085b      	lsrmi	r3, r3, #1
 8008b78:	089b      	lsrpl	r3, r3, #2
 8008b7a:	2001      	movmi	r0, #1
 8008b7c:	600b      	strmi	r3, [r1, #0]
 8008b7e:	bf5c      	itt	pl
 8008b80:	600b      	strpl	r3, [r1, #0]
 8008b82:	2002      	movpl	r0, #2
 8008b84:	4770      	bx	lr
 8008b86:	b298      	uxth	r0, r3
 8008b88:	b9b0      	cbnz	r0, 8008bb8 <__lo0bits+0x54>
 8008b8a:	0c1b      	lsrs	r3, r3, #16
 8008b8c:	2010      	movs	r0, #16
 8008b8e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b92:	bf04      	itt	eq
 8008b94:	0a1b      	lsreq	r3, r3, #8
 8008b96:	3008      	addeq	r0, #8
 8008b98:	071a      	lsls	r2, r3, #28
 8008b9a:	bf04      	itt	eq
 8008b9c:	091b      	lsreq	r3, r3, #4
 8008b9e:	3004      	addeq	r0, #4
 8008ba0:	079a      	lsls	r2, r3, #30
 8008ba2:	bf04      	itt	eq
 8008ba4:	089b      	lsreq	r3, r3, #2
 8008ba6:	3002      	addeq	r0, #2
 8008ba8:	07da      	lsls	r2, r3, #31
 8008baa:	d403      	bmi.n	8008bb4 <__lo0bits+0x50>
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	d005      	beq.n	8008bc0 <__lo0bits+0x5c>
 8008bb4:	600b      	str	r3, [r1, #0]
 8008bb6:	4770      	bx	lr
 8008bb8:	4610      	mov	r0, r2
 8008bba:	e7e8      	b.n	8008b8e <__lo0bits+0x2a>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	4770      	bx	lr
 8008bc0:	2020      	movs	r0, #32
 8008bc2:	4770      	bx	lr

08008bc4 <__i2b>:
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	460c      	mov	r4, r1
 8008bc8:	2101      	movs	r1, #1
 8008bca:	f7ff feff 	bl	80089cc <_Balloc>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	b928      	cbnz	r0, 8008bde <__i2b+0x1a>
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <__i2b+0x24>)
 8008bd4:	4805      	ldr	r0, [pc, #20]	; (8008bec <__i2b+0x28>)
 8008bd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008bda:	f7ff f89b 	bl	8007d14 <__assert_func>
 8008bde:	2301      	movs	r3, #1
 8008be0:	6144      	str	r4, [r0, #20]
 8008be2:	6103      	str	r3, [r0, #16]
 8008be4:	bd10      	pop	{r4, pc}
 8008be6:	bf00      	nop
 8008be8:	08009cb7 	.word	0x08009cb7
 8008bec:	08009cc8 	.word	0x08009cc8

08008bf0 <__multiply>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	690a      	ldr	r2, [r1, #16]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	bfb8      	it	lt
 8008bfe:	460b      	movlt	r3, r1
 8008c00:	460d      	mov	r5, r1
 8008c02:	bfbc      	itt	lt
 8008c04:	4625      	movlt	r5, r4
 8008c06:	461c      	movlt	r4, r3
 8008c08:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008c0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008c10:	68ab      	ldr	r3, [r5, #8]
 8008c12:	6869      	ldr	r1, [r5, #4]
 8008c14:	eb0a 0709 	add.w	r7, sl, r9
 8008c18:	42bb      	cmp	r3, r7
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	bfb8      	it	lt
 8008c1e:	3101      	addlt	r1, #1
 8008c20:	f7ff fed4 	bl	80089cc <_Balloc>
 8008c24:	b930      	cbnz	r0, 8008c34 <__multiply+0x44>
 8008c26:	4602      	mov	r2, r0
 8008c28:	4b42      	ldr	r3, [pc, #264]	; (8008d34 <__multiply+0x144>)
 8008c2a:	4843      	ldr	r0, [pc, #268]	; (8008d38 <__multiply+0x148>)
 8008c2c:	f240 115d 	movw	r1, #349	; 0x15d
 8008c30:	f7ff f870 	bl	8007d14 <__assert_func>
 8008c34:	f100 0614 	add.w	r6, r0, #20
 8008c38:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c3c:	4633      	mov	r3, r6
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4543      	cmp	r3, r8
 8008c42:	d31e      	bcc.n	8008c82 <__multiply+0x92>
 8008c44:	f105 0c14 	add.w	ip, r5, #20
 8008c48:	f104 0314 	add.w	r3, r4, #20
 8008c4c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c50:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c54:	9202      	str	r2, [sp, #8]
 8008c56:	ebac 0205 	sub.w	r2, ip, r5
 8008c5a:	3a15      	subs	r2, #21
 8008c5c:	f022 0203 	bic.w	r2, r2, #3
 8008c60:	3204      	adds	r2, #4
 8008c62:	f105 0115 	add.w	r1, r5, #21
 8008c66:	458c      	cmp	ip, r1
 8008c68:	bf38      	it	cc
 8008c6a:	2204      	movcc	r2, #4
 8008c6c:	9201      	str	r2, [sp, #4]
 8008c6e:	9a02      	ldr	r2, [sp, #8]
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d808      	bhi.n	8008c88 <__multiply+0x98>
 8008c76:	2f00      	cmp	r7, #0
 8008c78:	dc55      	bgt.n	8008d26 <__multiply+0x136>
 8008c7a:	6107      	str	r7, [r0, #16]
 8008c7c:	b005      	add	sp, #20
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	f843 2b04 	str.w	r2, [r3], #4
 8008c86:	e7db      	b.n	8008c40 <__multiply+0x50>
 8008c88:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c8c:	f1ba 0f00 	cmp.w	sl, #0
 8008c90:	d020      	beq.n	8008cd4 <__multiply+0xe4>
 8008c92:	f105 0e14 	add.w	lr, r5, #20
 8008c96:	46b1      	mov	r9, r6
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c9e:	f8d9 b000 	ldr.w	fp, [r9]
 8008ca2:	b2a1      	uxth	r1, r4
 8008ca4:	fa1f fb8b 	uxth.w	fp, fp
 8008ca8:	fb0a b101 	mla	r1, sl, r1, fp
 8008cac:	4411      	add	r1, r2
 8008cae:	f8d9 2000 	ldr.w	r2, [r9]
 8008cb2:	0c24      	lsrs	r4, r4, #16
 8008cb4:	0c12      	lsrs	r2, r2, #16
 8008cb6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008cba:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008cbe:	b289      	uxth	r1, r1
 8008cc0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008cc4:	45f4      	cmp	ip, lr
 8008cc6:	f849 1b04 	str.w	r1, [r9], #4
 8008cca:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008cce:	d8e4      	bhi.n	8008c9a <__multiply+0xaa>
 8008cd0:	9901      	ldr	r1, [sp, #4]
 8008cd2:	5072      	str	r2, [r6, r1]
 8008cd4:	9a03      	ldr	r2, [sp, #12]
 8008cd6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	f1b9 0f00 	cmp.w	r9, #0
 8008ce0:	d01f      	beq.n	8008d22 <__multiply+0x132>
 8008ce2:	6834      	ldr	r4, [r6, #0]
 8008ce4:	f105 0114 	add.w	r1, r5, #20
 8008ce8:	46b6      	mov	lr, r6
 8008cea:	f04f 0a00 	mov.w	sl, #0
 8008cee:	880a      	ldrh	r2, [r1, #0]
 8008cf0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008cf4:	fb09 b202 	mla	r2, r9, r2, fp
 8008cf8:	4492      	add	sl, r2
 8008cfa:	b2a4      	uxth	r4, r4
 8008cfc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008d00:	f84e 4b04 	str.w	r4, [lr], #4
 8008d04:	f851 4b04 	ldr.w	r4, [r1], #4
 8008d08:	f8be 2000 	ldrh.w	r2, [lr]
 8008d0c:	0c24      	lsrs	r4, r4, #16
 8008d0e:	fb09 2404 	mla	r4, r9, r4, r2
 8008d12:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008d16:	458c      	cmp	ip, r1
 8008d18:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008d1c:	d8e7      	bhi.n	8008cee <__multiply+0xfe>
 8008d1e:	9a01      	ldr	r2, [sp, #4]
 8008d20:	50b4      	str	r4, [r6, r2]
 8008d22:	3604      	adds	r6, #4
 8008d24:	e7a3      	b.n	8008c6e <__multiply+0x7e>
 8008d26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1a5      	bne.n	8008c7a <__multiply+0x8a>
 8008d2e:	3f01      	subs	r7, #1
 8008d30:	e7a1      	b.n	8008c76 <__multiply+0x86>
 8008d32:	bf00      	nop
 8008d34:	08009cb7 	.word	0x08009cb7
 8008d38:	08009cc8 	.word	0x08009cc8

08008d3c <__pow5mult>:
 8008d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d40:	4615      	mov	r5, r2
 8008d42:	f012 0203 	ands.w	r2, r2, #3
 8008d46:	4606      	mov	r6, r0
 8008d48:	460f      	mov	r7, r1
 8008d4a:	d007      	beq.n	8008d5c <__pow5mult+0x20>
 8008d4c:	4c25      	ldr	r4, [pc, #148]	; (8008de4 <__pow5mult+0xa8>)
 8008d4e:	3a01      	subs	r2, #1
 8008d50:	2300      	movs	r3, #0
 8008d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d56:	f7ff fe9b 	bl	8008a90 <__multadd>
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	10ad      	asrs	r5, r5, #2
 8008d5e:	d03d      	beq.n	8008ddc <__pow5mult+0xa0>
 8008d60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d62:	b97c      	cbnz	r4, 8008d84 <__pow5mult+0x48>
 8008d64:	2010      	movs	r0, #16
 8008d66:	f7fe fac9 	bl	80072fc <malloc>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	6270      	str	r0, [r6, #36]	; 0x24
 8008d6e:	b928      	cbnz	r0, 8008d7c <__pow5mult+0x40>
 8008d70:	4b1d      	ldr	r3, [pc, #116]	; (8008de8 <__pow5mult+0xac>)
 8008d72:	481e      	ldr	r0, [pc, #120]	; (8008dec <__pow5mult+0xb0>)
 8008d74:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d78:	f7fe ffcc 	bl	8007d14 <__assert_func>
 8008d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d80:	6004      	str	r4, [r0, #0]
 8008d82:	60c4      	str	r4, [r0, #12]
 8008d84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d8c:	b94c      	cbnz	r4, 8008da2 <__pow5mult+0x66>
 8008d8e:	f240 2171 	movw	r1, #625	; 0x271
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7ff ff16 	bl	8008bc4 <__i2b>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d9e:	4604      	mov	r4, r0
 8008da0:	6003      	str	r3, [r0, #0]
 8008da2:	f04f 0900 	mov.w	r9, #0
 8008da6:	07eb      	lsls	r3, r5, #31
 8008da8:	d50a      	bpl.n	8008dc0 <__pow5mult+0x84>
 8008daa:	4639      	mov	r1, r7
 8008dac:	4622      	mov	r2, r4
 8008dae:	4630      	mov	r0, r6
 8008db0:	f7ff ff1e 	bl	8008bf0 <__multiply>
 8008db4:	4639      	mov	r1, r7
 8008db6:	4680      	mov	r8, r0
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7ff fe47 	bl	8008a4c <_Bfree>
 8008dbe:	4647      	mov	r7, r8
 8008dc0:	106d      	asrs	r5, r5, #1
 8008dc2:	d00b      	beq.n	8008ddc <__pow5mult+0xa0>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	b938      	cbnz	r0, 8008dd8 <__pow5mult+0x9c>
 8008dc8:	4622      	mov	r2, r4
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7ff ff0f 	bl	8008bf0 <__multiply>
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	f8c0 9000 	str.w	r9, [r0]
 8008dd8:	4604      	mov	r4, r0
 8008dda:	e7e4      	b.n	8008da6 <__pow5mult+0x6a>
 8008ddc:	4638      	mov	r0, r7
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de2:	bf00      	nop
 8008de4:	08009e18 	.word	0x08009e18
 8008de8:	08009c41 	.word	0x08009c41
 8008dec:	08009cc8 	.word	0x08009cc8

08008df0 <__lshift>:
 8008df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	460c      	mov	r4, r1
 8008df6:	6849      	ldr	r1, [r1, #4]
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	4607      	mov	r7, r0
 8008e02:	4691      	mov	r9, r2
 8008e04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e08:	f108 0601 	add.w	r6, r8, #1
 8008e0c:	42b3      	cmp	r3, r6
 8008e0e:	db0b      	blt.n	8008e28 <__lshift+0x38>
 8008e10:	4638      	mov	r0, r7
 8008e12:	f7ff fddb 	bl	80089cc <_Balloc>
 8008e16:	4605      	mov	r5, r0
 8008e18:	b948      	cbnz	r0, 8008e2e <__lshift+0x3e>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b28      	ldr	r3, [pc, #160]	; (8008ec0 <__lshift+0xd0>)
 8008e1e:	4829      	ldr	r0, [pc, #164]	; (8008ec4 <__lshift+0xd4>)
 8008e20:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e24:	f7fe ff76 	bl	8007d14 <__assert_func>
 8008e28:	3101      	adds	r1, #1
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	e7ee      	b.n	8008e0c <__lshift+0x1c>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f100 0114 	add.w	r1, r0, #20
 8008e34:	f100 0210 	add.w	r2, r0, #16
 8008e38:	4618      	mov	r0, r3
 8008e3a:	4553      	cmp	r3, sl
 8008e3c:	db33      	blt.n	8008ea6 <__lshift+0xb6>
 8008e3e:	6920      	ldr	r0, [r4, #16]
 8008e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e44:	f104 0314 	add.w	r3, r4, #20
 8008e48:	f019 091f 	ands.w	r9, r9, #31
 8008e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e54:	d02b      	beq.n	8008eae <__lshift+0xbe>
 8008e56:	f1c9 0e20 	rsb	lr, r9, #32
 8008e5a:	468a      	mov	sl, r1
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	fa00 f009 	lsl.w	r0, r0, r9
 8008e64:	4302      	orrs	r2, r0
 8008e66:	f84a 2b04 	str.w	r2, [sl], #4
 8008e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6e:	459c      	cmp	ip, r3
 8008e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e74:	d8f3      	bhi.n	8008e5e <__lshift+0x6e>
 8008e76:	ebac 0304 	sub.w	r3, ip, r4
 8008e7a:	3b15      	subs	r3, #21
 8008e7c:	f023 0303 	bic.w	r3, r3, #3
 8008e80:	3304      	adds	r3, #4
 8008e82:	f104 0015 	add.w	r0, r4, #21
 8008e86:	4584      	cmp	ip, r0
 8008e88:	bf38      	it	cc
 8008e8a:	2304      	movcc	r3, #4
 8008e8c:	50ca      	str	r2, [r1, r3]
 8008e8e:	b10a      	cbz	r2, 8008e94 <__lshift+0xa4>
 8008e90:	f108 0602 	add.w	r6, r8, #2
 8008e94:	3e01      	subs	r6, #1
 8008e96:	4638      	mov	r0, r7
 8008e98:	612e      	str	r6, [r5, #16]
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	f7ff fdd6 	bl	8008a4c <_Bfree>
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eaa:	3301      	adds	r3, #1
 8008eac:	e7c5      	b.n	8008e3a <__lshift+0x4a>
 8008eae:	3904      	subs	r1, #4
 8008eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eb8:	459c      	cmp	ip, r3
 8008eba:	d8f9      	bhi.n	8008eb0 <__lshift+0xc0>
 8008ebc:	e7ea      	b.n	8008e94 <__lshift+0xa4>
 8008ebe:	bf00      	nop
 8008ec0:	08009cb7 	.word	0x08009cb7
 8008ec4:	08009cc8 	.word	0x08009cc8

08008ec8 <__mcmp>:
 8008ec8:	b530      	push	{r4, r5, lr}
 8008eca:	6902      	ldr	r2, [r0, #16]
 8008ecc:	690c      	ldr	r4, [r1, #16]
 8008ece:	1b12      	subs	r2, r2, r4
 8008ed0:	d10e      	bne.n	8008ef0 <__mcmp+0x28>
 8008ed2:	f100 0314 	add.w	r3, r0, #20
 8008ed6:	3114      	adds	r1, #20
 8008ed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ee8:	42a5      	cmp	r5, r4
 8008eea:	d003      	beq.n	8008ef4 <__mcmp+0x2c>
 8008eec:	d305      	bcc.n	8008efa <__mcmp+0x32>
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	bd30      	pop	{r4, r5, pc}
 8008ef4:	4283      	cmp	r3, r0
 8008ef6:	d3f3      	bcc.n	8008ee0 <__mcmp+0x18>
 8008ef8:	e7fa      	b.n	8008ef0 <__mcmp+0x28>
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	e7f7      	b.n	8008ef0 <__mcmp+0x28>

08008f00 <__mdiff>:
 8008f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	460c      	mov	r4, r1
 8008f06:	4606      	mov	r6, r0
 8008f08:	4611      	mov	r1, r2
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4617      	mov	r7, r2
 8008f0e:	f7ff ffdb 	bl	8008ec8 <__mcmp>
 8008f12:	1e05      	subs	r5, r0, #0
 8008f14:	d110      	bne.n	8008f38 <__mdiff+0x38>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff fd57 	bl	80089cc <_Balloc>
 8008f1e:	b930      	cbnz	r0, 8008f2e <__mdiff+0x2e>
 8008f20:	4b39      	ldr	r3, [pc, #228]	; (8009008 <__mdiff+0x108>)
 8008f22:	4602      	mov	r2, r0
 8008f24:	f240 2132 	movw	r1, #562	; 0x232
 8008f28:	4838      	ldr	r0, [pc, #224]	; (800900c <__mdiff+0x10c>)
 8008f2a:	f7fe fef3 	bl	8007d14 <__assert_func>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f38:	bfa4      	itt	ge
 8008f3a:	463b      	movge	r3, r7
 8008f3c:	4627      	movge	r7, r4
 8008f3e:	4630      	mov	r0, r6
 8008f40:	6879      	ldr	r1, [r7, #4]
 8008f42:	bfa6      	itte	ge
 8008f44:	461c      	movge	r4, r3
 8008f46:	2500      	movge	r5, #0
 8008f48:	2501      	movlt	r5, #1
 8008f4a:	f7ff fd3f 	bl	80089cc <_Balloc>
 8008f4e:	b920      	cbnz	r0, 8008f5a <__mdiff+0x5a>
 8008f50:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <__mdiff+0x108>)
 8008f52:	4602      	mov	r2, r0
 8008f54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f58:	e7e6      	b.n	8008f28 <__mdiff+0x28>
 8008f5a:	693e      	ldr	r6, [r7, #16]
 8008f5c:	60c5      	str	r5, [r0, #12]
 8008f5e:	6925      	ldr	r5, [r4, #16]
 8008f60:	f107 0114 	add.w	r1, r7, #20
 8008f64:	f104 0914 	add.w	r9, r4, #20
 8008f68:	f100 0e14 	add.w	lr, r0, #20
 8008f6c:	f107 0210 	add.w	r2, r7, #16
 8008f70:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f74:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f78:	46f2      	mov	sl, lr
 8008f7a:	2700      	movs	r7, #0
 8008f7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f84:	fa1f f883 	uxth.w	r8, r3
 8008f88:	fa17 f78b 	uxtah	r7, r7, fp
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	eba7 0808 	sub.w	r8, r7, r8
 8008f92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f9a:	fa1f f888 	uxth.w	r8, r8
 8008f9e:	141f      	asrs	r7, r3, #16
 8008fa0:	454d      	cmp	r5, r9
 8008fa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fa6:	f84a 3b04 	str.w	r3, [sl], #4
 8008faa:	d8e7      	bhi.n	8008f7c <__mdiff+0x7c>
 8008fac:	1b2b      	subs	r3, r5, r4
 8008fae:	3b15      	subs	r3, #21
 8008fb0:	f023 0303 	bic.w	r3, r3, #3
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	3415      	adds	r4, #21
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	bf38      	it	cc
 8008fbc:	2304      	movcc	r3, #4
 8008fbe:	4419      	add	r1, r3
 8008fc0:	4473      	add	r3, lr
 8008fc2:	469e      	mov	lr, r3
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	4565      	cmp	r5, ip
 8008fc8:	d30e      	bcc.n	8008fe8 <__mdiff+0xe8>
 8008fca:	f10c 0203 	add.w	r2, ip, #3
 8008fce:	1a52      	subs	r2, r2, r1
 8008fd0:	f022 0203 	bic.w	r2, r2, #3
 8008fd4:	3903      	subs	r1, #3
 8008fd6:	458c      	cmp	ip, r1
 8008fd8:	bf38      	it	cc
 8008fda:	2200      	movcc	r2, #0
 8008fdc:	441a      	add	r2, r3
 8008fde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008fe2:	b17b      	cbz	r3, 8009004 <__mdiff+0x104>
 8008fe4:	6106      	str	r6, [r0, #16]
 8008fe6:	e7a5      	b.n	8008f34 <__mdiff+0x34>
 8008fe8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008fec:	fa17 f488 	uxtah	r4, r7, r8
 8008ff0:	1422      	asrs	r2, r4, #16
 8008ff2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ff6:	b2a4      	uxth	r4, r4
 8008ff8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008ffc:	f84e 4b04 	str.w	r4, [lr], #4
 8009000:	1417      	asrs	r7, r2, #16
 8009002:	e7e0      	b.n	8008fc6 <__mdiff+0xc6>
 8009004:	3e01      	subs	r6, #1
 8009006:	e7ea      	b.n	8008fde <__mdiff+0xde>
 8009008:	08009cb7 	.word	0x08009cb7
 800900c:	08009cc8 	.word	0x08009cc8

08009010 <__d2b>:
 8009010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009014:	4689      	mov	r9, r1
 8009016:	2101      	movs	r1, #1
 8009018:	ec57 6b10 	vmov	r6, r7, d0
 800901c:	4690      	mov	r8, r2
 800901e:	f7ff fcd5 	bl	80089cc <_Balloc>
 8009022:	4604      	mov	r4, r0
 8009024:	b930      	cbnz	r0, 8009034 <__d2b+0x24>
 8009026:	4602      	mov	r2, r0
 8009028:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <__d2b+0xb0>)
 800902a:	4826      	ldr	r0, [pc, #152]	; (80090c4 <__d2b+0xb4>)
 800902c:	f240 310a 	movw	r1, #778	; 0x30a
 8009030:	f7fe fe70 	bl	8007d14 <__assert_func>
 8009034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800903c:	bb35      	cbnz	r5, 800908c <__d2b+0x7c>
 800903e:	2e00      	cmp	r6, #0
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	d028      	beq.n	8009096 <__d2b+0x86>
 8009044:	4668      	mov	r0, sp
 8009046:	9600      	str	r6, [sp, #0]
 8009048:	f7ff fd8c 	bl	8008b64 <__lo0bits>
 800904c:	9900      	ldr	r1, [sp, #0]
 800904e:	b300      	cbz	r0, 8009092 <__d2b+0x82>
 8009050:	9a01      	ldr	r2, [sp, #4]
 8009052:	f1c0 0320 	rsb	r3, r0, #32
 8009056:	fa02 f303 	lsl.w	r3, r2, r3
 800905a:	430b      	orrs	r3, r1
 800905c:	40c2      	lsrs	r2, r0
 800905e:	6163      	str	r3, [r4, #20]
 8009060:	9201      	str	r2, [sp, #4]
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	61a3      	str	r3, [r4, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bf14      	ite	ne
 800906a:	2202      	movne	r2, #2
 800906c:	2201      	moveq	r2, #1
 800906e:	6122      	str	r2, [r4, #16]
 8009070:	b1d5      	cbz	r5, 80090a8 <__d2b+0x98>
 8009072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009076:	4405      	add	r5, r0
 8009078:	f8c9 5000 	str.w	r5, [r9]
 800907c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009080:	f8c8 0000 	str.w	r0, [r8]
 8009084:	4620      	mov	r0, r4
 8009086:	b003      	add	sp, #12
 8009088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800908c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009090:	e7d5      	b.n	800903e <__d2b+0x2e>
 8009092:	6161      	str	r1, [r4, #20]
 8009094:	e7e5      	b.n	8009062 <__d2b+0x52>
 8009096:	a801      	add	r0, sp, #4
 8009098:	f7ff fd64 	bl	8008b64 <__lo0bits>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	6163      	str	r3, [r4, #20]
 80090a0:	2201      	movs	r2, #1
 80090a2:	6122      	str	r2, [r4, #16]
 80090a4:	3020      	adds	r0, #32
 80090a6:	e7e3      	b.n	8009070 <__d2b+0x60>
 80090a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090b0:	f8c9 0000 	str.w	r0, [r9]
 80090b4:	6918      	ldr	r0, [r3, #16]
 80090b6:	f7ff fd35 	bl	8008b24 <__hi0bits>
 80090ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090be:	e7df      	b.n	8009080 <__d2b+0x70>
 80090c0:	08009cb7 	.word	0x08009cb7
 80090c4:	08009cc8 	.word	0x08009cc8

080090c8 <_calloc_r>:
 80090c8:	b513      	push	{r0, r1, r4, lr}
 80090ca:	434a      	muls	r2, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	9201      	str	r2, [sp, #4]
 80090d0:	f7fe f974 	bl	80073bc <_malloc_r>
 80090d4:	4604      	mov	r4, r0
 80090d6:	b118      	cbz	r0, 80090e0 <_calloc_r+0x18>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	2100      	movs	r1, #0
 80090dc:	f7fe f916 	bl	800730c <memset>
 80090e0:	4620      	mov	r0, r4
 80090e2:	b002      	add	sp, #8
 80090e4:	bd10      	pop	{r4, pc}

080090e6 <__sfputc_r>:
 80090e6:	6893      	ldr	r3, [r2, #8]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	b410      	push	{r4}
 80090ee:	6093      	str	r3, [r2, #8]
 80090f0:	da08      	bge.n	8009104 <__sfputc_r+0x1e>
 80090f2:	6994      	ldr	r4, [r2, #24]
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	db01      	blt.n	80090fc <__sfputc_r+0x16>
 80090f8:	290a      	cmp	r1, #10
 80090fa:	d103      	bne.n	8009104 <__sfputc_r+0x1e>
 80090fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009100:	f000 b94a 	b.w	8009398 <__swbuf_r>
 8009104:	6813      	ldr	r3, [r2, #0]
 8009106:	1c58      	adds	r0, r3, #1
 8009108:	6010      	str	r0, [r2, #0]
 800910a:	7019      	strb	r1, [r3, #0]
 800910c:	4608      	mov	r0, r1
 800910e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009112:	4770      	bx	lr

08009114 <__sfputs_r>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	4606      	mov	r6, r0
 8009118:	460f      	mov	r7, r1
 800911a:	4614      	mov	r4, r2
 800911c:	18d5      	adds	r5, r2, r3
 800911e:	42ac      	cmp	r4, r5
 8009120:	d101      	bne.n	8009126 <__sfputs_r+0x12>
 8009122:	2000      	movs	r0, #0
 8009124:	e007      	b.n	8009136 <__sfputs_r+0x22>
 8009126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912a:	463a      	mov	r2, r7
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ffda 	bl	80090e6 <__sfputc_r>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d1f3      	bne.n	800911e <__sfputs_r+0xa>
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009138 <_vfiprintf_r>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	460d      	mov	r5, r1
 800913e:	b09d      	sub	sp, #116	; 0x74
 8009140:	4614      	mov	r4, r2
 8009142:	4698      	mov	r8, r3
 8009144:	4606      	mov	r6, r0
 8009146:	b118      	cbz	r0, 8009150 <_vfiprintf_r+0x18>
 8009148:	6983      	ldr	r3, [r0, #24]
 800914a:	b90b      	cbnz	r3, 8009150 <_vfiprintf_r+0x18>
 800914c:	f000 fb06 	bl	800975c <__sinit>
 8009150:	4b89      	ldr	r3, [pc, #548]	; (8009378 <_vfiprintf_r+0x240>)
 8009152:	429d      	cmp	r5, r3
 8009154:	d11b      	bne.n	800918e <_vfiprintf_r+0x56>
 8009156:	6875      	ldr	r5, [r6, #4]
 8009158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915a:	07d9      	lsls	r1, r3, #31
 800915c:	d405      	bmi.n	800916a <_vfiprintf_r+0x32>
 800915e:	89ab      	ldrh	r3, [r5, #12]
 8009160:	059a      	lsls	r2, r3, #22
 8009162:	d402      	bmi.n	800916a <_vfiprintf_r+0x32>
 8009164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009166:	f000 fb97 	bl	8009898 <__retarget_lock_acquire_recursive>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	071b      	lsls	r3, r3, #28
 800916e:	d501      	bpl.n	8009174 <_vfiprintf_r+0x3c>
 8009170:	692b      	ldr	r3, [r5, #16]
 8009172:	b9eb      	cbnz	r3, 80091b0 <_vfiprintf_r+0x78>
 8009174:	4629      	mov	r1, r5
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f960 	bl	800943c <__swsetup_r>
 800917c:	b1c0      	cbz	r0, 80091b0 <_vfiprintf_r+0x78>
 800917e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009180:	07dc      	lsls	r4, r3, #31
 8009182:	d50e      	bpl.n	80091a2 <_vfiprintf_r+0x6a>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	b01d      	add	sp, #116	; 0x74
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	4b7b      	ldr	r3, [pc, #492]	; (800937c <_vfiprintf_r+0x244>)
 8009190:	429d      	cmp	r5, r3
 8009192:	d101      	bne.n	8009198 <_vfiprintf_r+0x60>
 8009194:	68b5      	ldr	r5, [r6, #8]
 8009196:	e7df      	b.n	8009158 <_vfiprintf_r+0x20>
 8009198:	4b79      	ldr	r3, [pc, #484]	; (8009380 <_vfiprintf_r+0x248>)
 800919a:	429d      	cmp	r5, r3
 800919c:	bf08      	it	eq
 800919e:	68f5      	ldreq	r5, [r6, #12]
 80091a0:	e7da      	b.n	8009158 <_vfiprintf_r+0x20>
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	0598      	lsls	r0, r3, #22
 80091a6:	d4ed      	bmi.n	8009184 <_vfiprintf_r+0x4c>
 80091a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091aa:	f000 fb76 	bl	800989a <__retarget_lock_release_recursive>
 80091ae:	e7e9      	b.n	8009184 <_vfiprintf_r+0x4c>
 80091b0:	2300      	movs	r3, #0
 80091b2:	9309      	str	r3, [sp, #36]	; 0x24
 80091b4:	2320      	movs	r3, #32
 80091b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80091be:	2330      	movs	r3, #48	; 0x30
 80091c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009384 <_vfiprintf_r+0x24c>
 80091c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c8:	f04f 0901 	mov.w	r9, #1
 80091cc:	4623      	mov	r3, r4
 80091ce:	469a      	mov	sl, r3
 80091d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091d4:	b10a      	cbz	r2, 80091da <_vfiprintf_r+0xa2>
 80091d6:	2a25      	cmp	r2, #37	; 0x25
 80091d8:	d1f9      	bne.n	80091ce <_vfiprintf_r+0x96>
 80091da:	ebba 0b04 	subs.w	fp, sl, r4
 80091de:	d00b      	beq.n	80091f8 <_vfiprintf_r+0xc0>
 80091e0:	465b      	mov	r3, fp
 80091e2:	4622      	mov	r2, r4
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ff94 	bl	8009114 <__sfputs_r>
 80091ec:	3001      	adds	r0, #1
 80091ee:	f000 80aa 	beq.w	8009346 <_vfiprintf_r+0x20e>
 80091f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091f4:	445a      	add	r2, fp
 80091f6:	9209      	str	r2, [sp, #36]	; 0x24
 80091f8:	f89a 3000 	ldrb.w	r3, [sl]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80a2 	beq.w	8009346 <_vfiprintf_r+0x20e>
 8009202:	2300      	movs	r3, #0
 8009204:	f04f 32ff 	mov.w	r2, #4294967295
 8009208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800920c:	f10a 0a01 	add.w	sl, sl, #1
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	9307      	str	r3, [sp, #28]
 8009214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009218:	931a      	str	r3, [sp, #104]	; 0x68
 800921a:	4654      	mov	r4, sl
 800921c:	2205      	movs	r2, #5
 800921e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009222:	4858      	ldr	r0, [pc, #352]	; (8009384 <_vfiprintf_r+0x24c>)
 8009224:	f7f7 f814 	bl	8000250 <memchr>
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	b9d8      	cbnz	r0, 8009264 <_vfiprintf_r+0x12c>
 800922c:	06d1      	lsls	r1, r2, #27
 800922e:	bf44      	itt	mi
 8009230:	2320      	movmi	r3, #32
 8009232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009236:	0713      	lsls	r3, r2, #28
 8009238:	bf44      	itt	mi
 800923a:	232b      	movmi	r3, #43	; 0x2b
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009240:	f89a 3000 	ldrb.w	r3, [sl]
 8009244:	2b2a      	cmp	r3, #42	; 0x2a
 8009246:	d015      	beq.n	8009274 <_vfiprintf_r+0x13c>
 8009248:	9a07      	ldr	r2, [sp, #28]
 800924a:	4654      	mov	r4, sl
 800924c:	2000      	movs	r0, #0
 800924e:	f04f 0c0a 	mov.w	ip, #10
 8009252:	4621      	mov	r1, r4
 8009254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009258:	3b30      	subs	r3, #48	; 0x30
 800925a:	2b09      	cmp	r3, #9
 800925c:	d94e      	bls.n	80092fc <_vfiprintf_r+0x1c4>
 800925e:	b1b0      	cbz	r0, 800928e <_vfiprintf_r+0x156>
 8009260:	9207      	str	r2, [sp, #28]
 8009262:	e014      	b.n	800928e <_vfiprintf_r+0x156>
 8009264:	eba0 0308 	sub.w	r3, r0, r8
 8009268:	fa09 f303 	lsl.w	r3, r9, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	46a2      	mov	sl, r4
 8009272:	e7d2      	b.n	800921a <_vfiprintf_r+0xe2>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	1d19      	adds	r1, r3, #4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	9103      	str	r1, [sp, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	bfbb      	ittet	lt
 8009280:	425b      	neglt	r3, r3
 8009282:	f042 0202 	orrlt.w	r2, r2, #2
 8009286:	9307      	strge	r3, [sp, #28]
 8009288:	9307      	strlt	r3, [sp, #28]
 800928a:	bfb8      	it	lt
 800928c:	9204      	strlt	r2, [sp, #16]
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b2e      	cmp	r3, #46	; 0x2e
 8009292:	d10c      	bne.n	80092ae <_vfiprintf_r+0x176>
 8009294:	7863      	ldrb	r3, [r4, #1]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d135      	bne.n	8009306 <_vfiprintf_r+0x1ce>
 800929a:	9b03      	ldr	r3, [sp, #12]
 800929c:	1d1a      	adds	r2, r3, #4
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	9203      	str	r2, [sp, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bfb8      	it	lt
 80092a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80092aa:	3402      	adds	r4, #2
 80092ac:	9305      	str	r3, [sp, #20]
 80092ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009394 <_vfiprintf_r+0x25c>
 80092b2:	7821      	ldrb	r1, [r4, #0]
 80092b4:	2203      	movs	r2, #3
 80092b6:	4650      	mov	r0, sl
 80092b8:	f7f6 ffca 	bl	8000250 <memchr>
 80092bc:	b140      	cbz	r0, 80092d0 <_vfiprintf_r+0x198>
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	eba0 000a 	sub.w	r0, r0, sl
 80092c4:	fa03 f000 	lsl.w	r0, r3, r0
 80092c8:	9b04      	ldr	r3, [sp, #16]
 80092ca:	4303      	orrs	r3, r0
 80092cc:	3401      	adds	r4, #1
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d4:	482c      	ldr	r0, [pc, #176]	; (8009388 <_vfiprintf_r+0x250>)
 80092d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092da:	2206      	movs	r2, #6
 80092dc:	f7f6 ffb8 	bl	8000250 <memchr>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d03f      	beq.n	8009364 <_vfiprintf_r+0x22c>
 80092e4:	4b29      	ldr	r3, [pc, #164]	; (800938c <_vfiprintf_r+0x254>)
 80092e6:	bb1b      	cbnz	r3, 8009330 <_vfiprintf_r+0x1f8>
 80092e8:	9b03      	ldr	r3, [sp, #12]
 80092ea:	3307      	adds	r3, #7
 80092ec:	f023 0307 	bic.w	r3, r3, #7
 80092f0:	3308      	adds	r3, #8
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f6:	443b      	add	r3, r7
 80092f8:	9309      	str	r3, [sp, #36]	; 0x24
 80092fa:	e767      	b.n	80091cc <_vfiprintf_r+0x94>
 80092fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009300:	460c      	mov	r4, r1
 8009302:	2001      	movs	r0, #1
 8009304:	e7a5      	b.n	8009252 <_vfiprintf_r+0x11a>
 8009306:	2300      	movs	r3, #0
 8009308:	3401      	adds	r4, #1
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	4619      	mov	r1, r3
 800930e:	f04f 0c0a 	mov.w	ip, #10
 8009312:	4620      	mov	r0, r4
 8009314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009318:	3a30      	subs	r2, #48	; 0x30
 800931a:	2a09      	cmp	r2, #9
 800931c:	d903      	bls.n	8009326 <_vfiprintf_r+0x1ee>
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0c5      	beq.n	80092ae <_vfiprintf_r+0x176>
 8009322:	9105      	str	r1, [sp, #20]
 8009324:	e7c3      	b.n	80092ae <_vfiprintf_r+0x176>
 8009326:	fb0c 2101 	mla	r1, ip, r1, r2
 800932a:	4604      	mov	r4, r0
 800932c:	2301      	movs	r3, #1
 800932e:	e7f0      	b.n	8009312 <_vfiprintf_r+0x1da>
 8009330:	ab03      	add	r3, sp, #12
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	462a      	mov	r2, r5
 8009336:	4b16      	ldr	r3, [pc, #88]	; (8009390 <_vfiprintf_r+0x258>)
 8009338:	a904      	add	r1, sp, #16
 800933a:	4630      	mov	r0, r6
 800933c:	f7fe f928 	bl	8007590 <_printf_float>
 8009340:	4607      	mov	r7, r0
 8009342:	1c78      	adds	r0, r7, #1
 8009344:	d1d6      	bne.n	80092f4 <_vfiprintf_r+0x1bc>
 8009346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009348:	07d9      	lsls	r1, r3, #31
 800934a:	d405      	bmi.n	8009358 <_vfiprintf_r+0x220>
 800934c:	89ab      	ldrh	r3, [r5, #12]
 800934e:	059a      	lsls	r2, r3, #22
 8009350:	d402      	bmi.n	8009358 <_vfiprintf_r+0x220>
 8009352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009354:	f000 faa1 	bl	800989a <__retarget_lock_release_recursive>
 8009358:	89ab      	ldrh	r3, [r5, #12]
 800935a:	065b      	lsls	r3, r3, #25
 800935c:	f53f af12 	bmi.w	8009184 <_vfiprintf_r+0x4c>
 8009360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009362:	e711      	b.n	8009188 <_vfiprintf_r+0x50>
 8009364:	ab03      	add	r3, sp, #12
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	462a      	mov	r2, r5
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <_vfiprintf_r+0x258>)
 800936c:	a904      	add	r1, sp, #16
 800936e:	4630      	mov	r0, r6
 8009370:	f7fe fb9a 	bl	8007aa8 <_printf_i>
 8009374:	e7e4      	b.n	8009340 <_vfiprintf_r+0x208>
 8009376:	bf00      	nop
 8009378:	08009e58 	.word	0x08009e58
 800937c:	08009e78 	.word	0x08009e78
 8009380:	08009e38 	.word	0x08009e38
 8009384:	08009e24 	.word	0x08009e24
 8009388:	08009e2e 	.word	0x08009e2e
 800938c:	08007591 	.word	0x08007591
 8009390:	08009115 	.word	0x08009115
 8009394:	08009e2a 	.word	0x08009e2a

08009398 <__swbuf_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	460e      	mov	r6, r1
 800939c:	4614      	mov	r4, r2
 800939e:	4605      	mov	r5, r0
 80093a0:	b118      	cbz	r0, 80093aa <__swbuf_r+0x12>
 80093a2:	6983      	ldr	r3, [r0, #24]
 80093a4:	b90b      	cbnz	r3, 80093aa <__swbuf_r+0x12>
 80093a6:	f000 f9d9 	bl	800975c <__sinit>
 80093aa:	4b21      	ldr	r3, [pc, #132]	; (8009430 <__swbuf_r+0x98>)
 80093ac:	429c      	cmp	r4, r3
 80093ae:	d12b      	bne.n	8009408 <__swbuf_r+0x70>
 80093b0:	686c      	ldr	r4, [r5, #4]
 80093b2:	69a3      	ldr	r3, [r4, #24]
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	071a      	lsls	r2, r3, #28
 80093ba:	d52f      	bpl.n	800941c <__swbuf_r+0x84>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	b36b      	cbz	r3, 800941c <__swbuf_r+0x84>
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	1ac0      	subs	r0, r0, r3
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	b2f6      	uxtb	r6, r6
 80093ca:	4283      	cmp	r3, r0
 80093cc:	4637      	mov	r7, r6
 80093ce:	dc04      	bgt.n	80093da <__swbuf_r+0x42>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f92e 	bl	8009634 <_fflush_r>
 80093d8:	bb30      	cbnz	r0, 8009428 <__swbuf_r+0x90>
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	3b01      	subs	r3, #1
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	701e      	strb	r6, [r3, #0]
 80093e8:	6963      	ldr	r3, [r4, #20]
 80093ea:	3001      	adds	r0, #1
 80093ec:	4283      	cmp	r3, r0
 80093ee:	d004      	beq.n	80093fa <__swbuf_r+0x62>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	07db      	lsls	r3, r3, #31
 80093f4:	d506      	bpl.n	8009404 <__swbuf_r+0x6c>
 80093f6:	2e0a      	cmp	r6, #10
 80093f8:	d104      	bne.n	8009404 <__swbuf_r+0x6c>
 80093fa:	4621      	mov	r1, r4
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 f919 	bl	8009634 <_fflush_r>
 8009402:	b988      	cbnz	r0, 8009428 <__swbuf_r+0x90>
 8009404:	4638      	mov	r0, r7
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <__swbuf_r+0x9c>)
 800940a:	429c      	cmp	r4, r3
 800940c:	d101      	bne.n	8009412 <__swbuf_r+0x7a>
 800940e:	68ac      	ldr	r4, [r5, #8]
 8009410:	e7cf      	b.n	80093b2 <__swbuf_r+0x1a>
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <__swbuf_r+0xa0>)
 8009414:	429c      	cmp	r4, r3
 8009416:	bf08      	it	eq
 8009418:	68ec      	ldreq	r4, [r5, #12]
 800941a:	e7ca      	b.n	80093b2 <__swbuf_r+0x1a>
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f80c 	bl	800943c <__swsetup_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	d0cb      	beq.n	80093c0 <__swbuf_r+0x28>
 8009428:	f04f 37ff 	mov.w	r7, #4294967295
 800942c:	e7ea      	b.n	8009404 <__swbuf_r+0x6c>
 800942e:	bf00      	nop
 8009430:	08009e58 	.word	0x08009e58
 8009434:	08009e78 	.word	0x08009e78
 8009438:	08009e38 	.word	0x08009e38

0800943c <__swsetup_r>:
 800943c:	4b32      	ldr	r3, [pc, #200]	; (8009508 <__swsetup_r+0xcc>)
 800943e:	b570      	push	{r4, r5, r6, lr}
 8009440:	681d      	ldr	r5, [r3, #0]
 8009442:	4606      	mov	r6, r0
 8009444:	460c      	mov	r4, r1
 8009446:	b125      	cbz	r5, 8009452 <__swsetup_r+0x16>
 8009448:	69ab      	ldr	r3, [r5, #24]
 800944a:	b913      	cbnz	r3, 8009452 <__swsetup_r+0x16>
 800944c:	4628      	mov	r0, r5
 800944e:	f000 f985 	bl	800975c <__sinit>
 8009452:	4b2e      	ldr	r3, [pc, #184]	; (800950c <__swsetup_r+0xd0>)
 8009454:	429c      	cmp	r4, r3
 8009456:	d10f      	bne.n	8009478 <__swsetup_r+0x3c>
 8009458:	686c      	ldr	r4, [r5, #4]
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009460:	0719      	lsls	r1, r3, #28
 8009462:	d42c      	bmi.n	80094be <__swsetup_r+0x82>
 8009464:	06dd      	lsls	r5, r3, #27
 8009466:	d411      	bmi.n	800948c <__swsetup_r+0x50>
 8009468:	2309      	movs	r3, #9
 800946a:	6033      	str	r3, [r6, #0]
 800946c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	f04f 30ff 	mov.w	r0, #4294967295
 8009476:	e03e      	b.n	80094f6 <__swsetup_r+0xba>
 8009478:	4b25      	ldr	r3, [pc, #148]	; (8009510 <__swsetup_r+0xd4>)
 800947a:	429c      	cmp	r4, r3
 800947c:	d101      	bne.n	8009482 <__swsetup_r+0x46>
 800947e:	68ac      	ldr	r4, [r5, #8]
 8009480:	e7eb      	b.n	800945a <__swsetup_r+0x1e>
 8009482:	4b24      	ldr	r3, [pc, #144]	; (8009514 <__swsetup_r+0xd8>)
 8009484:	429c      	cmp	r4, r3
 8009486:	bf08      	it	eq
 8009488:	68ec      	ldreq	r4, [r5, #12]
 800948a:	e7e6      	b.n	800945a <__swsetup_r+0x1e>
 800948c:	0758      	lsls	r0, r3, #29
 800948e:	d512      	bpl.n	80094b6 <__swsetup_r+0x7a>
 8009490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009492:	b141      	cbz	r1, 80094a6 <__swsetup_r+0x6a>
 8009494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009498:	4299      	cmp	r1, r3
 800949a:	d002      	beq.n	80094a2 <__swsetup_r+0x66>
 800949c:	4630      	mov	r0, r6
 800949e:	f7fd ff3d 	bl	800731c <_free_r>
 80094a2:	2300      	movs	r3, #0
 80094a4:	6363      	str	r3, [r4, #52]	; 0x34
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f043 0308 	orr.w	r3, r3, #8
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	b94b      	cbnz	r3, 80094d6 <__swsetup_r+0x9a>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094cc:	d003      	beq.n	80094d6 <__swsetup_r+0x9a>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4630      	mov	r0, r6
 80094d2:	f000 fa07 	bl	80098e4 <__smakebuf_r>
 80094d6:	89a0      	ldrh	r0, [r4, #12]
 80094d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094dc:	f010 0301 	ands.w	r3, r0, #1
 80094e0:	d00a      	beq.n	80094f8 <__swsetup_r+0xbc>
 80094e2:	2300      	movs	r3, #0
 80094e4:	60a3      	str	r3, [r4, #8]
 80094e6:	6963      	ldr	r3, [r4, #20]
 80094e8:	425b      	negs	r3, r3
 80094ea:	61a3      	str	r3, [r4, #24]
 80094ec:	6923      	ldr	r3, [r4, #16]
 80094ee:	b943      	cbnz	r3, 8009502 <__swsetup_r+0xc6>
 80094f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094f4:	d1ba      	bne.n	800946c <__swsetup_r+0x30>
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	0781      	lsls	r1, r0, #30
 80094fa:	bf58      	it	pl
 80094fc:	6963      	ldrpl	r3, [r4, #20]
 80094fe:	60a3      	str	r3, [r4, #8]
 8009500:	e7f4      	b.n	80094ec <__swsetup_r+0xb0>
 8009502:	2000      	movs	r0, #0
 8009504:	e7f7      	b.n	80094f6 <__swsetup_r+0xba>
 8009506:	bf00      	nop
 8009508:	20000068 	.word	0x20000068
 800950c:	08009e58 	.word	0x08009e58
 8009510:	08009e78 	.word	0x08009e78
 8009514:	08009e38 	.word	0x08009e38

08009518 <abort>:
 8009518:	b508      	push	{r3, lr}
 800951a:	2006      	movs	r0, #6
 800951c:	f000 fa5c 	bl	80099d8 <raise>
 8009520:	2001      	movs	r0, #1
 8009522:	f7f8 f905 	bl	8001730 <_exit>
	...

08009528 <__sflush_r>:
 8009528:	898a      	ldrh	r2, [r1, #12]
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	4605      	mov	r5, r0
 8009530:	0710      	lsls	r0, r2, #28
 8009532:	460c      	mov	r4, r1
 8009534:	d458      	bmi.n	80095e8 <__sflush_r+0xc0>
 8009536:	684b      	ldr	r3, [r1, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc05      	bgt.n	8009548 <__sflush_r+0x20>
 800953c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	dc02      	bgt.n	8009548 <__sflush_r+0x20>
 8009542:	2000      	movs	r0, #0
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800954a:	2e00      	cmp	r6, #0
 800954c:	d0f9      	beq.n	8009542 <__sflush_r+0x1a>
 800954e:	2300      	movs	r3, #0
 8009550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009554:	682f      	ldr	r7, [r5, #0]
 8009556:	602b      	str	r3, [r5, #0]
 8009558:	d032      	beq.n	80095c0 <__sflush_r+0x98>
 800955a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	075a      	lsls	r2, r3, #29
 8009560:	d505      	bpl.n	800956e <__sflush_r+0x46>
 8009562:	6863      	ldr	r3, [r4, #4]
 8009564:	1ac0      	subs	r0, r0, r3
 8009566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009568:	b10b      	cbz	r3, 800956e <__sflush_r+0x46>
 800956a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800956c:	1ac0      	subs	r0, r0, r3
 800956e:	2300      	movs	r3, #0
 8009570:	4602      	mov	r2, r0
 8009572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009574:	6a21      	ldr	r1, [r4, #32]
 8009576:	4628      	mov	r0, r5
 8009578:	47b0      	blx	r6
 800957a:	1c43      	adds	r3, r0, #1
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	d106      	bne.n	800958e <__sflush_r+0x66>
 8009580:	6829      	ldr	r1, [r5, #0]
 8009582:	291d      	cmp	r1, #29
 8009584:	d82c      	bhi.n	80095e0 <__sflush_r+0xb8>
 8009586:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <__sflush_r+0x108>)
 8009588:	40ca      	lsrs	r2, r1
 800958a:	07d6      	lsls	r6, r2, #31
 800958c:	d528      	bpl.n	80095e0 <__sflush_r+0xb8>
 800958e:	2200      	movs	r2, #0
 8009590:	6062      	str	r2, [r4, #4]
 8009592:	04d9      	lsls	r1, r3, #19
 8009594:	6922      	ldr	r2, [r4, #16]
 8009596:	6022      	str	r2, [r4, #0]
 8009598:	d504      	bpl.n	80095a4 <__sflush_r+0x7c>
 800959a:	1c42      	adds	r2, r0, #1
 800959c:	d101      	bne.n	80095a2 <__sflush_r+0x7a>
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	b903      	cbnz	r3, 80095a4 <__sflush_r+0x7c>
 80095a2:	6560      	str	r0, [r4, #84]	; 0x54
 80095a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a6:	602f      	str	r7, [r5, #0]
 80095a8:	2900      	cmp	r1, #0
 80095aa:	d0ca      	beq.n	8009542 <__sflush_r+0x1a>
 80095ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d002      	beq.n	80095ba <__sflush_r+0x92>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7fd feb1 	bl	800731c <_free_r>
 80095ba:	2000      	movs	r0, #0
 80095bc:	6360      	str	r0, [r4, #52]	; 0x34
 80095be:	e7c1      	b.n	8009544 <__sflush_r+0x1c>
 80095c0:	6a21      	ldr	r1, [r4, #32]
 80095c2:	2301      	movs	r3, #1
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b0      	blx	r6
 80095c8:	1c41      	adds	r1, r0, #1
 80095ca:	d1c7      	bne.n	800955c <__sflush_r+0x34>
 80095cc:	682b      	ldr	r3, [r5, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0c4      	beq.n	800955c <__sflush_r+0x34>
 80095d2:	2b1d      	cmp	r3, #29
 80095d4:	d001      	beq.n	80095da <__sflush_r+0xb2>
 80095d6:	2b16      	cmp	r3, #22
 80095d8:	d101      	bne.n	80095de <__sflush_r+0xb6>
 80095da:	602f      	str	r7, [r5, #0]
 80095dc:	e7b1      	b.n	8009542 <__sflush_r+0x1a>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e4:	81a3      	strh	r3, [r4, #12]
 80095e6:	e7ad      	b.n	8009544 <__sflush_r+0x1c>
 80095e8:	690f      	ldr	r7, [r1, #16]
 80095ea:	2f00      	cmp	r7, #0
 80095ec:	d0a9      	beq.n	8009542 <__sflush_r+0x1a>
 80095ee:	0793      	lsls	r3, r2, #30
 80095f0:	680e      	ldr	r6, [r1, #0]
 80095f2:	bf08      	it	eq
 80095f4:	694b      	ldreq	r3, [r1, #20]
 80095f6:	600f      	str	r7, [r1, #0]
 80095f8:	bf18      	it	ne
 80095fa:	2300      	movne	r3, #0
 80095fc:	eba6 0807 	sub.w	r8, r6, r7
 8009600:	608b      	str	r3, [r1, #8]
 8009602:	f1b8 0f00 	cmp.w	r8, #0
 8009606:	dd9c      	ble.n	8009542 <__sflush_r+0x1a>
 8009608:	6a21      	ldr	r1, [r4, #32]
 800960a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800960c:	4643      	mov	r3, r8
 800960e:	463a      	mov	r2, r7
 8009610:	4628      	mov	r0, r5
 8009612:	47b0      	blx	r6
 8009614:	2800      	cmp	r0, #0
 8009616:	dc06      	bgt.n	8009626 <__sflush_r+0xfe>
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e78e      	b.n	8009544 <__sflush_r+0x1c>
 8009626:	4407      	add	r7, r0
 8009628:	eba8 0800 	sub.w	r8, r8, r0
 800962c:	e7e9      	b.n	8009602 <__sflush_r+0xda>
 800962e:	bf00      	nop
 8009630:	20400001 	.word	0x20400001

08009634 <_fflush_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	690b      	ldr	r3, [r1, #16]
 8009638:	4605      	mov	r5, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b913      	cbnz	r3, 8009644 <_fflush_r+0x10>
 800963e:	2500      	movs	r5, #0
 8009640:	4628      	mov	r0, r5
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	b118      	cbz	r0, 800964e <_fflush_r+0x1a>
 8009646:	6983      	ldr	r3, [r0, #24]
 8009648:	b90b      	cbnz	r3, 800964e <_fflush_r+0x1a>
 800964a:	f000 f887 	bl	800975c <__sinit>
 800964e:	4b14      	ldr	r3, [pc, #80]	; (80096a0 <_fflush_r+0x6c>)
 8009650:	429c      	cmp	r4, r3
 8009652:	d11b      	bne.n	800968c <_fflush_r+0x58>
 8009654:	686c      	ldr	r4, [r5, #4]
 8009656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0ef      	beq.n	800963e <_fflush_r+0xa>
 800965e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009660:	07d0      	lsls	r0, r2, #31
 8009662:	d404      	bmi.n	800966e <_fflush_r+0x3a>
 8009664:	0599      	lsls	r1, r3, #22
 8009666:	d402      	bmi.n	800966e <_fflush_r+0x3a>
 8009668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800966a:	f000 f915 	bl	8009898 <__retarget_lock_acquire_recursive>
 800966e:	4628      	mov	r0, r5
 8009670:	4621      	mov	r1, r4
 8009672:	f7ff ff59 	bl	8009528 <__sflush_r>
 8009676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009678:	07da      	lsls	r2, r3, #31
 800967a:	4605      	mov	r5, r0
 800967c:	d4e0      	bmi.n	8009640 <_fflush_r+0xc>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	059b      	lsls	r3, r3, #22
 8009682:	d4dd      	bmi.n	8009640 <_fflush_r+0xc>
 8009684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009686:	f000 f908 	bl	800989a <__retarget_lock_release_recursive>
 800968a:	e7d9      	b.n	8009640 <_fflush_r+0xc>
 800968c:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <_fflush_r+0x70>)
 800968e:	429c      	cmp	r4, r3
 8009690:	d101      	bne.n	8009696 <_fflush_r+0x62>
 8009692:	68ac      	ldr	r4, [r5, #8]
 8009694:	e7df      	b.n	8009656 <_fflush_r+0x22>
 8009696:	4b04      	ldr	r3, [pc, #16]	; (80096a8 <_fflush_r+0x74>)
 8009698:	429c      	cmp	r4, r3
 800969a:	bf08      	it	eq
 800969c:	68ec      	ldreq	r4, [r5, #12]
 800969e:	e7da      	b.n	8009656 <_fflush_r+0x22>
 80096a0:	08009e58 	.word	0x08009e58
 80096a4:	08009e78 	.word	0x08009e78
 80096a8:	08009e38 	.word	0x08009e38

080096ac <std>:
 80096ac:	2300      	movs	r3, #0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
 80096b2:	e9c0 3300 	strd	r3, r3, [r0]
 80096b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ba:	6083      	str	r3, [r0, #8]
 80096bc:	8181      	strh	r1, [r0, #12]
 80096be:	6643      	str	r3, [r0, #100]	; 0x64
 80096c0:	81c2      	strh	r2, [r0, #14]
 80096c2:	6183      	str	r3, [r0, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	2208      	movs	r2, #8
 80096c8:	305c      	adds	r0, #92	; 0x5c
 80096ca:	f7fd fe1f 	bl	800730c <memset>
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <std+0x38>)
 80096d0:	6263      	str	r3, [r4, #36]	; 0x24
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <std+0x3c>)
 80096d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x40>)
 80096d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x44>)
 80096dc:	6224      	str	r4, [r4, #32]
 80096de:	6323      	str	r3, [r4, #48]	; 0x30
 80096e0:	bd10      	pop	{r4, pc}
 80096e2:	bf00      	nop
 80096e4:	08009a11 	.word	0x08009a11
 80096e8:	08009a33 	.word	0x08009a33
 80096ec:	08009a6b 	.word	0x08009a6b
 80096f0:	08009a8f 	.word	0x08009a8f

080096f4 <_cleanup_r>:
 80096f4:	4901      	ldr	r1, [pc, #4]	; (80096fc <_cleanup_r+0x8>)
 80096f6:	f000 b8af 	b.w	8009858 <_fwalk_reent>
 80096fa:	bf00      	nop
 80096fc:	08009635 	.word	0x08009635

08009700 <__sfmoreglue>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	1e4a      	subs	r2, r1, #1
 8009704:	2568      	movs	r5, #104	; 0x68
 8009706:	4355      	muls	r5, r2
 8009708:	460e      	mov	r6, r1
 800970a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800970e:	f7fd fe55 	bl	80073bc <_malloc_r>
 8009712:	4604      	mov	r4, r0
 8009714:	b140      	cbz	r0, 8009728 <__sfmoreglue+0x28>
 8009716:	2100      	movs	r1, #0
 8009718:	e9c0 1600 	strd	r1, r6, [r0]
 800971c:	300c      	adds	r0, #12
 800971e:	60a0      	str	r0, [r4, #8]
 8009720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009724:	f7fd fdf2 	bl	800730c <memset>
 8009728:	4620      	mov	r0, r4
 800972a:	bd70      	pop	{r4, r5, r6, pc}

0800972c <__sfp_lock_acquire>:
 800972c:	4801      	ldr	r0, [pc, #4]	; (8009734 <__sfp_lock_acquire+0x8>)
 800972e:	f000 b8b3 	b.w	8009898 <__retarget_lock_acquire_recursive>
 8009732:	bf00      	nop
 8009734:	200006b4 	.word	0x200006b4

08009738 <__sfp_lock_release>:
 8009738:	4801      	ldr	r0, [pc, #4]	; (8009740 <__sfp_lock_release+0x8>)
 800973a:	f000 b8ae 	b.w	800989a <__retarget_lock_release_recursive>
 800973e:	bf00      	nop
 8009740:	200006b4 	.word	0x200006b4

08009744 <__sinit_lock_acquire>:
 8009744:	4801      	ldr	r0, [pc, #4]	; (800974c <__sinit_lock_acquire+0x8>)
 8009746:	f000 b8a7 	b.w	8009898 <__retarget_lock_acquire_recursive>
 800974a:	bf00      	nop
 800974c:	200006af 	.word	0x200006af

08009750 <__sinit_lock_release>:
 8009750:	4801      	ldr	r0, [pc, #4]	; (8009758 <__sinit_lock_release+0x8>)
 8009752:	f000 b8a2 	b.w	800989a <__retarget_lock_release_recursive>
 8009756:	bf00      	nop
 8009758:	200006af 	.word	0x200006af

0800975c <__sinit>:
 800975c:	b510      	push	{r4, lr}
 800975e:	4604      	mov	r4, r0
 8009760:	f7ff fff0 	bl	8009744 <__sinit_lock_acquire>
 8009764:	69a3      	ldr	r3, [r4, #24]
 8009766:	b11b      	cbz	r3, 8009770 <__sinit+0x14>
 8009768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800976c:	f7ff bff0 	b.w	8009750 <__sinit_lock_release>
 8009770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009774:	6523      	str	r3, [r4, #80]	; 0x50
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <__sinit+0x68>)
 8009778:	4a13      	ldr	r2, [pc, #76]	; (80097c8 <__sinit+0x6c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	62a2      	str	r2, [r4, #40]	; 0x28
 800977e:	42a3      	cmp	r3, r4
 8009780:	bf04      	itt	eq
 8009782:	2301      	moveq	r3, #1
 8009784:	61a3      	streq	r3, [r4, #24]
 8009786:	4620      	mov	r0, r4
 8009788:	f000 f820 	bl	80097cc <__sfp>
 800978c:	6060      	str	r0, [r4, #4]
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f81c 	bl	80097cc <__sfp>
 8009794:	60a0      	str	r0, [r4, #8]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f818 	bl	80097cc <__sfp>
 800979c:	2200      	movs	r2, #0
 800979e:	60e0      	str	r0, [r4, #12]
 80097a0:	2104      	movs	r1, #4
 80097a2:	6860      	ldr	r0, [r4, #4]
 80097a4:	f7ff ff82 	bl	80096ac <std>
 80097a8:	68a0      	ldr	r0, [r4, #8]
 80097aa:	2201      	movs	r2, #1
 80097ac:	2109      	movs	r1, #9
 80097ae:	f7ff ff7d 	bl	80096ac <std>
 80097b2:	68e0      	ldr	r0, [r4, #12]
 80097b4:	2202      	movs	r2, #2
 80097b6:	2112      	movs	r1, #18
 80097b8:	f7ff ff78 	bl	80096ac <std>
 80097bc:	2301      	movs	r3, #1
 80097be:	61a3      	str	r3, [r4, #24]
 80097c0:	e7d2      	b.n	8009768 <__sinit+0xc>
 80097c2:	bf00      	nop
 80097c4:	08009bc0 	.word	0x08009bc0
 80097c8:	080096f5 	.word	0x080096f5

080097cc <__sfp>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	4607      	mov	r7, r0
 80097d0:	f7ff ffac 	bl	800972c <__sfp_lock_acquire>
 80097d4:	4b1e      	ldr	r3, [pc, #120]	; (8009850 <__sfp+0x84>)
 80097d6:	681e      	ldr	r6, [r3, #0]
 80097d8:	69b3      	ldr	r3, [r6, #24]
 80097da:	b913      	cbnz	r3, 80097e2 <__sfp+0x16>
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ffbd 	bl	800975c <__sinit>
 80097e2:	3648      	adds	r6, #72	; 0x48
 80097e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	d503      	bpl.n	80097f4 <__sfp+0x28>
 80097ec:	6833      	ldr	r3, [r6, #0]
 80097ee:	b30b      	cbz	r3, 8009834 <__sfp+0x68>
 80097f0:	6836      	ldr	r6, [r6, #0]
 80097f2:	e7f7      	b.n	80097e4 <__sfp+0x18>
 80097f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097f8:	b9d5      	cbnz	r5, 8009830 <__sfp+0x64>
 80097fa:	4b16      	ldr	r3, [pc, #88]	; (8009854 <__sfp+0x88>)
 80097fc:	60e3      	str	r3, [r4, #12]
 80097fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009802:	6665      	str	r5, [r4, #100]	; 0x64
 8009804:	f000 f847 	bl	8009896 <__retarget_lock_init_recursive>
 8009808:	f7ff ff96 	bl	8009738 <__sfp_lock_release>
 800980c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009810:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009814:	6025      	str	r5, [r4, #0]
 8009816:	61a5      	str	r5, [r4, #24]
 8009818:	2208      	movs	r2, #8
 800981a:	4629      	mov	r1, r5
 800981c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009820:	f7fd fd74 	bl	800730c <memset>
 8009824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800982c:	4620      	mov	r0, r4
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009830:	3468      	adds	r4, #104	; 0x68
 8009832:	e7d9      	b.n	80097e8 <__sfp+0x1c>
 8009834:	2104      	movs	r1, #4
 8009836:	4638      	mov	r0, r7
 8009838:	f7ff ff62 	bl	8009700 <__sfmoreglue>
 800983c:	4604      	mov	r4, r0
 800983e:	6030      	str	r0, [r6, #0]
 8009840:	2800      	cmp	r0, #0
 8009842:	d1d5      	bne.n	80097f0 <__sfp+0x24>
 8009844:	f7ff ff78 	bl	8009738 <__sfp_lock_release>
 8009848:	230c      	movs	r3, #12
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	e7ee      	b.n	800982c <__sfp+0x60>
 800984e:	bf00      	nop
 8009850:	08009bc0 	.word	0x08009bc0
 8009854:	ffff0001 	.word	0xffff0001

08009858 <_fwalk_reent>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	4606      	mov	r6, r0
 800985e:	4688      	mov	r8, r1
 8009860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009864:	2700      	movs	r7, #0
 8009866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800986a:	f1b9 0901 	subs.w	r9, r9, #1
 800986e:	d505      	bpl.n	800987c <_fwalk_reent+0x24>
 8009870:	6824      	ldr	r4, [r4, #0]
 8009872:	2c00      	cmp	r4, #0
 8009874:	d1f7      	bne.n	8009866 <_fwalk_reent+0xe>
 8009876:	4638      	mov	r0, r7
 8009878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987c:	89ab      	ldrh	r3, [r5, #12]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d907      	bls.n	8009892 <_fwalk_reent+0x3a>
 8009882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009886:	3301      	adds	r3, #1
 8009888:	d003      	beq.n	8009892 <_fwalk_reent+0x3a>
 800988a:	4629      	mov	r1, r5
 800988c:	4630      	mov	r0, r6
 800988e:	47c0      	blx	r8
 8009890:	4307      	orrs	r7, r0
 8009892:	3568      	adds	r5, #104	; 0x68
 8009894:	e7e9      	b.n	800986a <_fwalk_reent+0x12>

08009896 <__retarget_lock_init_recursive>:
 8009896:	4770      	bx	lr

08009898 <__retarget_lock_acquire_recursive>:
 8009898:	4770      	bx	lr

0800989a <__retarget_lock_release_recursive>:
 800989a:	4770      	bx	lr

0800989c <__swhatbuf_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	b096      	sub	sp, #88	; 0x58
 80098a8:	4614      	mov	r4, r2
 80098aa:	461d      	mov	r5, r3
 80098ac:	da07      	bge.n	80098be <__swhatbuf_r+0x22>
 80098ae:	2300      	movs	r3, #0
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	89b3      	ldrh	r3, [r6, #12]
 80098b4:	061a      	lsls	r2, r3, #24
 80098b6:	d410      	bmi.n	80098da <__swhatbuf_r+0x3e>
 80098b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098bc:	e00e      	b.n	80098dc <__swhatbuf_r+0x40>
 80098be:	466a      	mov	r2, sp
 80098c0:	f000 f918 	bl	8009af4 <_fstat_r>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	dbf2      	blt.n	80098ae <__swhatbuf_r+0x12>
 80098c8:	9a01      	ldr	r2, [sp, #4]
 80098ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098d2:	425a      	negs	r2, r3
 80098d4:	415a      	adcs	r2, r3
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	e7ee      	b.n	80098b8 <__swhatbuf_r+0x1c>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	2000      	movs	r0, #0
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	b016      	add	sp, #88	; 0x58
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <__smakebuf_r>:
 80098e4:	898b      	ldrh	r3, [r1, #12]
 80098e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098e8:	079d      	lsls	r5, r3, #30
 80098ea:	4606      	mov	r6, r0
 80098ec:	460c      	mov	r4, r1
 80098ee:	d507      	bpl.n	8009900 <__smakebuf_r+0x1c>
 80098f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	2301      	movs	r3, #1
 80098fa:	6163      	str	r3, [r4, #20]
 80098fc:	b002      	add	sp, #8
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	ab01      	add	r3, sp, #4
 8009902:	466a      	mov	r2, sp
 8009904:	f7ff ffca 	bl	800989c <__swhatbuf_r>
 8009908:	9900      	ldr	r1, [sp, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	4630      	mov	r0, r6
 800990e:	f7fd fd55 	bl	80073bc <_malloc_r>
 8009912:	b948      	cbnz	r0, 8009928 <__smakebuf_r+0x44>
 8009914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009918:	059a      	lsls	r2, r3, #22
 800991a:	d4ef      	bmi.n	80098fc <__smakebuf_r+0x18>
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	f043 0302 	orr.w	r3, r3, #2
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	e7e3      	b.n	80098f0 <__smakebuf_r+0xc>
 8009928:	4b0d      	ldr	r3, [pc, #52]	; (8009960 <__smakebuf_r+0x7c>)
 800992a:	62b3      	str	r3, [r6, #40]	; 0x28
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	6020      	str	r0, [r4, #0]
 8009930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	9b01      	ldr	r3, [sp, #4]
 800993c:	6120      	str	r0, [r4, #16]
 800993e:	b15b      	cbz	r3, 8009958 <__smakebuf_r+0x74>
 8009940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009944:	4630      	mov	r0, r6
 8009946:	f000 f8e7 	bl	8009b18 <_isatty_r>
 800994a:	b128      	cbz	r0, 8009958 <__smakebuf_r+0x74>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	89a0      	ldrh	r0, [r4, #12]
 800995a:	4305      	orrs	r5, r0
 800995c:	81a5      	strh	r5, [r4, #12]
 800995e:	e7cd      	b.n	80098fc <__smakebuf_r+0x18>
 8009960:	080096f5 	.word	0x080096f5

08009964 <__ascii_mbtowc>:
 8009964:	b082      	sub	sp, #8
 8009966:	b901      	cbnz	r1, 800996a <__ascii_mbtowc+0x6>
 8009968:	a901      	add	r1, sp, #4
 800996a:	b142      	cbz	r2, 800997e <__ascii_mbtowc+0x1a>
 800996c:	b14b      	cbz	r3, 8009982 <__ascii_mbtowc+0x1e>
 800996e:	7813      	ldrb	r3, [r2, #0]
 8009970:	600b      	str	r3, [r1, #0]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	1e10      	subs	r0, r2, #0
 8009976:	bf18      	it	ne
 8009978:	2001      	movne	r0, #1
 800997a:	b002      	add	sp, #8
 800997c:	4770      	bx	lr
 800997e:	4610      	mov	r0, r2
 8009980:	e7fb      	b.n	800997a <__ascii_mbtowc+0x16>
 8009982:	f06f 0001 	mvn.w	r0, #1
 8009986:	e7f8      	b.n	800997a <__ascii_mbtowc+0x16>

08009988 <_raise_r>:
 8009988:	291f      	cmp	r1, #31
 800998a:	b538      	push	{r3, r4, r5, lr}
 800998c:	4604      	mov	r4, r0
 800998e:	460d      	mov	r5, r1
 8009990:	d904      	bls.n	800999c <_raise_r+0x14>
 8009992:	2316      	movs	r3, #22
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	f04f 30ff 	mov.w	r0, #4294967295
 800999a:	bd38      	pop	{r3, r4, r5, pc}
 800999c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800999e:	b112      	cbz	r2, 80099a6 <_raise_r+0x1e>
 80099a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099a4:	b94b      	cbnz	r3, 80099ba <_raise_r+0x32>
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 f830 	bl	8009a0c <_getpid_r>
 80099ac:	462a      	mov	r2, r5
 80099ae:	4601      	mov	r1, r0
 80099b0:	4620      	mov	r0, r4
 80099b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b6:	f000 b817 	b.w	80099e8 <_kill_r>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d00a      	beq.n	80099d4 <_raise_r+0x4c>
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	d103      	bne.n	80099ca <_raise_r+0x42>
 80099c2:	2316      	movs	r3, #22
 80099c4:	6003      	str	r3, [r0, #0]
 80099c6:	2001      	movs	r0, #1
 80099c8:	e7e7      	b.n	800999a <_raise_r+0x12>
 80099ca:	2400      	movs	r4, #0
 80099cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099d0:	4628      	mov	r0, r5
 80099d2:	4798      	blx	r3
 80099d4:	2000      	movs	r0, #0
 80099d6:	e7e0      	b.n	800999a <_raise_r+0x12>

080099d8 <raise>:
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <raise+0xc>)
 80099da:	4601      	mov	r1, r0
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f7ff bfd3 	b.w	8009988 <_raise_r>
 80099e2:	bf00      	nop
 80099e4:	20000068 	.word	0x20000068

080099e8 <_kill_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d07      	ldr	r5, [pc, #28]	; (8009a08 <_kill_r+0x20>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	f7f7 fe8b 	bl	8001710 <_kill>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	d102      	bne.n	8009a04 <_kill_r+0x1c>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	b103      	cbz	r3, 8009a04 <_kill_r+0x1c>
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	200006a8 	.word	0x200006a8

08009a0c <_getpid_r>:
 8009a0c:	f7f7 be78 	b.w	8001700 <_getpid>

08009a10 <__sread>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	460c      	mov	r4, r1
 8009a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a18:	f000 f8a0 	bl	8009b5c <_read_r>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	bfab      	itete	ge
 8009a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a22:	89a3      	ldrhlt	r3, [r4, #12]
 8009a24:	181b      	addge	r3, r3, r0
 8009a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a2a:	bfac      	ite	ge
 8009a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a2e:	81a3      	strhlt	r3, [r4, #12]
 8009a30:	bd10      	pop	{r4, pc}

08009a32 <__swrite>:
 8009a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a36:	461f      	mov	r7, r3
 8009a38:	898b      	ldrh	r3, [r1, #12]
 8009a3a:	05db      	lsls	r3, r3, #23
 8009a3c:	4605      	mov	r5, r0
 8009a3e:	460c      	mov	r4, r1
 8009a40:	4616      	mov	r6, r2
 8009a42:	d505      	bpl.n	8009a50 <__swrite+0x1e>
 8009a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a48:	2302      	movs	r3, #2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f000 f874 	bl	8009b38 <_lseek_r>
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a5a:	81a3      	strh	r3, [r4, #12]
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	463b      	mov	r3, r7
 8009a60:	4628      	mov	r0, r5
 8009a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	f000 b823 	b.w	8009ab0 <_write_r>

08009a6a <__sseek>:
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a72:	f000 f861 	bl	8009b38 <_lseek_r>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	bf15      	itete	ne
 8009a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a86:	81a3      	strheq	r3, [r4, #12]
 8009a88:	bf18      	it	ne
 8009a8a:	81a3      	strhne	r3, [r4, #12]
 8009a8c:	bd10      	pop	{r4, pc}

08009a8e <__sclose>:
 8009a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a92:	f000 b81f 	b.w	8009ad4 <_close_r>

08009a96 <__ascii_wctomb>:
 8009a96:	b149      	cbz	r1, 8009aac <__ascii_wctomb+0x16>
 8009a98:	2aff      	cmp	r2, #255	; 0xff
 8009a9a:	bf85      	ittet	hi
 8009a9c:	238a      	movhi	r3, #138	; 0x8a
 8009a9e:	6003      	strhi	r3, [r0, #0]
 8009aa0:	700a      	strbls	r2, [r1, #0]
 8009aa2:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa6:	bf98      	it	ls
 8009aa8:	2001      	movls	r0, #1
 8009aaa:	4770      	bx	lr
 8009aac:	4608      	mov	r0, r1
 8009aae:	4770      	bx	lr

08009ab0 <_write_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_write_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f7 fe5d 	bl	800177e <_write>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_write_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_write_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200006a8 	.word	0x200006a8

08009ad4 <_close_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d06      	ldr	r5, [pc, #24]	; (8009af0 <_close_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f7 fe69 	bl	80017b6 <_close>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_close_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_close_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	200006a8 	.word	0x200006a8

08009af4 <_fstat_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d07      	ldr	r5, [pc, #28]	; (8009b14 <_fstat_r+0x20>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f7f7 fe64 	bl	80017ce <_fstat>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_fstat_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_fstat_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	200006a8 	.word	0x200006a8

08009b18 <_isatty_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	; (8009b34 <_isatty_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f7f7 fe63 	bl	80017ee <_isatty>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_isatty_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_isatty_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	200006a8 	.word	0x200006a8

08009b38 <_lseek_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d07      	ldr	r5, [pc, #28]	; (8009b58 <_lseek_r+0x20>)
 8009b3c:	4604      	mov	r4, r0
 8009b3e:	4608      	mov	r0, r1
 8009b40:	4611      	mov	r1, r2
 8009b42:	2200      	movs	r2, #0
 8009b44:	602a      	str	r2, [r5, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	f7f7 fe5c 	bl	8001804 <_lseek>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d102      	bne.n	8009b56 <_lseek_r+0x1e>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	b103      	cbz	r3, 8009b56 <_lseek_r+0x1e>
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	bd38      	pop	{r3, r4, r5, pc}
 8009b58:	200006a8 	.word	0x200006a8

08009b5c <_read_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	4d07      	ldr	r5, [pc, #28]	; (8009b7c <_read_r+0x20>)
 8009b60:	4604      	mov	r4, r0
 8009b62:	4608      	mov	r0, r1
 8009b64:	4611      	mov	r1, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	602a      	str	r2, [r5, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	f7f7 fdea 	bl	8001744 <_read>
 8009b70:	1c43      	adds	r3, r0, #1
 8009b72:	d102      	bne.n	8009b7a <_read_r+0x1e>
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	b103      	cbz	r3, 8009b7a <_read_r+0x1e>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	bd38      	pop	{r3, r4, r5, pc}
 8009b7c:	200006a8 	.word	0x200006a8

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
=======

fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000996c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009b70  08009b70  00019b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f7c  08009f7c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f84  08009f84  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f84  08009f84  00019f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000238  0800a1c4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800a1c4  000207c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b5c  00000000  00000000  00020266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000478c  00000000  00000000  00040dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00045550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  00046ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfbb  00000000  00000000  00047e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ccff  00000000  00000000  00074dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065fc  00000000  00000000  00091ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001980be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006278  00000000  00000000  00198114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000238 	.word	0x20000238
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b54 	.word	0x08009b54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000023c 	.word	0x2000023c
 800023c:	08009b54 	.word	0x08009b54

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC2_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC2_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC2_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC2_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC2_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC2_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC2_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC2_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC2_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC2_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC2_Init+0x98>)
 800063c:	2201      	movs	r2, #1
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC2_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC2_Init+0x98>)
 800064a:	f001 fd6d 	bl	8002128 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fc38 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC2_Init+0x98>)
 800066a:	f002 f85f 	bl	800272c <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fc28 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000290 	.word	0x20000290
 8000684:	40012100 	.word	0x40012100
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_ADC3_Init+0x128>)
 80006a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006a4:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b3c      	ldr	r3, [pc, #240]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ce:	4a3a      	ldr	r2, [pc, #232]	; (80007b8 <MX_ADC3_Init+0x12c>)
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006da:	2206      	movs	r2, #6
 80006dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006de:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ec:	4830      	ldr	r0, [pc, #192]	; (80007b0 <MX_ADC3_Init+0x124>)
 80006ee:	f001 fd1b 	bl	8002128 <HAL_ADC_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 fbe6 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006fc:	230a      	movs	r3, #10
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000700:	2301      	movs	r3, #1
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000704:	2307      	movs	r3, #7
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4828      	ldr	r0, [pc, #160]	; (80007b0 <MX_ADC3_Init+0x124>)
 800070e:	f002 f80d 	bl	800272c <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000718:	f000 fbd6 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800071c:	230d      	movs	r3, #13
 800071e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000720:	2302      	movs	r3, #2
 8000722:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4821      	ldr	r0, [pc, #132]	; (80007b0 <MX_ADC3_Init+0x124>)
 800072a:	f001 ffff 	bl	800272c <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000734:	f000 fbc8 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000738:	2309      	movs	r3, #9
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800073c:	2303      	movs	r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000746:	f001 fff1 	bl	800272c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000750:	f000 fbba 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000754:	230f      	movs	r3, #15
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000758:	2304      	movs	r3, #4
 800075a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4813      	ldr	r0, [pc, #76]	; (80007b0 <MX_ADC3_Init+0x124>)
 8000762:	f001 ffe3 	bl	800272c <HAL_ADC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 800076c:	f000 fbac 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000770:	2308      	movs	r3, #8
 8000772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000774:	2305      	movs	r3, #5
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_ADC3_Init+0x124>)
 800077e:	f001 ffd5 	bl	800272c <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000788:	f000 fb9e 	bl	8000ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078c:	2306      	movs	r3, #6
 800078e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000790:	2306      	movs	r3, #6
 8000792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_ADC3_Init+0x124>)
 800079a:	f001 ffc7 	bl	800272c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80007a4:	f000 fb90 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000338 	.word	0x20000338
 80007b4:	40012200 	.word	0x40012200
 80007b8:	0f000001 	.word	0x0f000001

080007bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a7c      	ldr	r2, [pc, #496]	; (80009cc <HAL_ADC_MspInit+0x210>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d15d      	bne.n	800089a <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b76      	ldr	r3, [pc, #472]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a75      	ldr	r2, [pc, #468]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b73      	ldr	r3, [pc, #460]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
 800080c:	69fb      	ldr	r3, [r7, #28]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	486c      	ldr	r0, [pc, #432]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 8000822:	f002 ff6f 	bl	8003704 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000828:	4a6c      	ldr	r2, [pc, #432]	; (80009dc <HAL_ADC_MspInit+0x220>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800082c:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800082e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b67      	ldr	r3, [pc, #412]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800084a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800085a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b5d      	ldr	r3, [pc, #372]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800086c:	485a      	ldr	r0, [pc, #360]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 800086e:	f002 fb3f 	bl	8002ef0 <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000878:	f000 fb26 	bl	8000ec8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a56      	ldr	r2, [pc, #344]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000880:	639a      	str	r2, [r3, #56]	; 0x38
 8000882:	4a55      	ldr	r2, [pc, #340]	; (80009d8 <HAL_ADC_MspInit+0x21c>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2012      	movs	r0, #18
 800088e:	f002 faf8 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000892:	2012      	movs	r0, #18
 8000894:	f002 fb11 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000898:	e093      	b.n	80009c2 <HAL_ADC_MspInit+0x206>
  else if(adcHandle->Instance==ADC3)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <HAL_ADC_MspInit+0x224>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f040 808e 	bne.w	80009c2 <HAL_ADC_MspInit+0x206>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008a6:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b47      	ldr	r3, [pc, #284]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008c4:	f043 0320 	orr.w	r3, r3, #32
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b3b      	ldr	r3, [pc, #236]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b38      	ldr	r3, [pc, #224]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a37      	ldr	r2, [pc, #220]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <HAL_ADC_MspInit+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR8_Pin|SENSOR6_Pin;
 8000906:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <HAL_ADC_MspInit+0x228>)
 800091c:	f002 fef2 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR1_Pin|SENSOR3_Pin;
 8000920:	2309      	movs	r3, #9
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <HAL_ADC_MspInit+0x22c>)
 8000934:	f002 fee6 	bl	8003704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093c:	2303      	movs	r3, #3
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4822      	ldr	r0, [pc, #136]	; (80009d4 <HAL_ADC_MspInit+0x218>)
 800094c:	f002 feda 	bl	8003704 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <HAL_ADC_MspInit+0x234>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800095c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800097c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000988:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_ADC_MspInit+0x230>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000996:	4815      	ldr	r0, [pc, #84]	; (80009ec <HAL_ADC_MspInit+0x230>)
 8000998:	f002 faaa 	bl	8002ef0 <HAL_DMA_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_ADC_MspInit+0x1ea>
      Error_Handler();
 80009a2:	f000 fa91 	bl	8000ec8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a10      	ldr	r2, [pc, #64]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_ADC_MspInit+0x230>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2012      	movs	r0, #18
 80009b8:	f002 fa63 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009bc:	2012      	movs	r0, #18
 80009be:	f002 fa7c 	bl	8002eba <HAL_NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40012100 	.word	0x40012100
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	20000380 	.word	0x20000380
 80009dc:	40026440 	.word	0x40026440
 80009e0:	40012200 	.word	0x40012200
 80009e4:	40021400 	.word	0x40021400
 80009e8:	40020800 	.word	0x40020800
 80009ec:	200002d8 	.word	0x200002d8
 80009f0:	40026428 	.word	0x40026428

080009f4 <debounce>:
@brief
@param	none
@retval	none
******************************************************************************/
static uint8_t debounce(ST_debounce *pb)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	uint8_t pin_sample;
	// sample pin - once per interrupt

	pin_sample = HAL_GPIO_ReadPin(pb->GPIOx, pb->GPIO_Pin);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	891b      	ldrh	r3, [r3, #8]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f003 f828 	bl	8003a5c <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	73fb      	strb	r3, [r7, #15]

	// refresh count1s
	// subtract window bit 7 to count1s
	pb->count1s -= (pb->window >> 7);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	785a      	ldrb	r2, [r3, #1]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b25b      	sxtb	r3, r3
 8000a1a:	11db      	asrs	r3, r3, #7
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	705a      	strb	r2, [r3, #1]
	// add pim_sample
	pb->count1s += pin_sample;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	785a      	ldrb	r2, [r3, #1]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	705a      	strb	r2, [r3, #1]

	// slide window
	pb->window <<=1;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	701a      	strb	r2, [r3, #0]
	// put pin_sample bit 0 if window
	pb->window |= pin_sample;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	701a      	strb	r2, [r3, #0]

	// verify output
	return (((4 - pb->count1s) >> 7) & 0x01);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	f1c3 0304 	rsb	r3, r3, #4
 8000a58:	11db      	asrs	r3, r3, #7
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <debounce_isr>:

//	if(htim -> Instance == TIM6){

void debounce_isr(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	// previous button state
	static uint8_t pre_state = 0;
	// current button state
	uint8_t state = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

	// debounce button
	state = debounce(&button);
 8000a76:	480e      	ldr	r0, [pc, #56]	; (8000ab0 <debounce_isr+0x44>)
 8000a78:	f7ff ffbc 	bl	80009f4 <debounce>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	71fb      	strb	r3, [r7, #7]
//	if((pre_state == 0) && (state == 1))
//		button.pin_output = 1;
//	if((pre_state == 1) && (state == 0))
//		button.pin_output = 0;

	button.pin_output = state * ((~pre_state) & 0x01);
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <debounce_isr+0x48>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf0c      	ite	eq
 8000a8c:	2301      	moveq	r3, #1
 8000a8e:	2300      	movne	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	79fa      	ldrb	r2, [r7, #7]
 8000a96:	fb12 f303 	smulbb	r3, r2, r3
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <debounce_isr+0x44>)
 8000a9e:	729a      	strb	r2, [r3, #10]

	// update previous button state
	pre_state = state;
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <debounce_isr+0x48>)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	7013      	strb	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200004a8 	.word	0x200004a8
 8000ab4:	20000254 	.word	0x20000254

08000ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <MX_DMA_Init+0x48>)
 8000ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_DMA_Init+0x48>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2039      	movs	r0, #57	; 0x39
 8000adc:	f002 f9d1 	bl	8002e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ae0:	2039      	movs	r0, #57	; 0x39
 8000ae2:	f002 f9ea 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	203a      	movs	r0, #58	; 0x3a
 8000aec:	f002 f9c9 	bl	8002e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af0:	203a      	movs	r0, #58	; 0x3a
 8000af2:	f002 f9e2 	bl	8002eba <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <MX_GPIO_Init>:

/** Configure pins
     PC0   ------> ADCx_IN10
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b1a:	4b4b      	ldr	r3, [pc, #300]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b20:	f043 0320 	orr.w	r3, r3, #32
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b48      	ldr	r3, [pc, #288]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0320 	and.w	r3, r3, #32
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a44      	ldr	r2, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b42      	ldr	r3, [pc, #264]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b39      	ldr	r3, [pc, #228]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b36      	ldr	r3, [pc, #216]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b30      	ldr	r3, [pc, #192]	; (8000c48 <MX_GPIO_Init+0x144>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2160      	movs	r1, #96	; 0x60
 8000b96:	482d      	ldr	r0, [pc, #180]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000b98:	f002 ff78 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 2181 	movw	r1, #17025	; 0x4281
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000ba4:	f002 ff72 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f244 0104 	movw	r1, #16388	; 0x4004
 8000bae:	4829      	ldr	r0, [pc, #164]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000bb0:	f002 ff6c 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4824      	ldr	r0, [pc, #144]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000bc8:	f002 fd9c 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000bcc:	2360      	movs	r3, #96	; 0x60
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <MX_GPIO_Init+0x148>)
 8000be4:	f002 fd8e 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DEBUG_LGREEN_Pin|DEBUG_LRED_Pin|DEBUG_LBLUE_Pin|IN1_RIGHT_Pin;
 8000be8:	f244 2381 	movw	r3, #17025	; 0x4281
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <MX_GPIO_Init+0x14c>)
 8000c02:	f002 fd7f 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000c06:	f244 0304 	movw	r3, #16388	; 0x4004
 8000c0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_GPIO_Init+0x150>)
 8000c20:	f002 fd70 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_GPIO_Init+0x154>)
 8000c3a:	f002 fd63 	bl	8003704 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020800 	.word	0x40020800

08000c5c <lfollower_start>:
@brief	Starts line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_start(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// line follower already enabled?
	if(lfollower_status == 1)
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <lfollower_start+0x20>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d007      	beq.n	8000c78 <lfollower_start+0x1c>
		return;

	// start storing QTR Sensor values
	qtr_init();
 8000c68:	f000 fb24 	bl	80012b4 <qtr_init>
	// start movement
	move_start();
 8000c6c:	f000 fa00 	bl	8001070 <move_start>

	// mark line follower is enabled
	lfollower_status = 1;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <lfollower_start+0x20>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e000      	b.n	8000c7a <lfollower_start+0x1e>
		return;
 8000c78:	bf00      	nop
}
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000257 	.word	0x20000257

08000c80 <lfollower_stop>:
@brief 	Stops line follower process.
@param	none
@retval	none
******************************************************************************/
void lfollower_stop(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// line follower already disabled?
	if(lfollower_status == 0)
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <lfollower_stop+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d007      	beq.n	8000c9c <lfollower_stop+0x1c>
		return;

	// stop storing QTR sensor values
	qtr_kill();
 8000c8c:	f000 fb20 	bl	80012d0 <qtr_kill>
	// stop movement
	move_stop();
 8000c90:	f000 fa02 	bl	8001098 <move_stop>

	// mark line follower is disabled
	lfollower_status = 0;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <lfollower_stop+0x20>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e000      	b.n	8000c9e <lfollower_stop+0x1e>
		return;
 8000c9c:	bf00      	nop
}
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000257 	.word	0x20000257

08000ca4 <lfollower_isr>:

/******************************************************************************
Line Follower ISR
******************************************************************************/
uint8_t lfollower_isr(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	ed2d 8b02 	vpush	{d8}
 8000caa:	af00      	add	r7, sp, #0
	if(lfollower_status == 0)
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <lfollower_isr+0x80>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <lfollower_isr+0x14>
		// line follower is disabled
		return E_LF_OFF;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e02f      	b.n	8000d18 <lfollower_isr+0x74>
//	}

	// else, robot over the line
	// use PID to obtain PWM values to use on motors
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, qtr_get_analog(LF_SENSOR_L), qtr_get_analog(LF_SENSOR_R));
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f000 fb4d 	bl	8001358 <qtr_get_analog>
 8000cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fb48 	bl	8001358 <qtr_get_analog>
 8000cc8:	eef0 7a40 	vmov.f32	s15, s0
 8000ccc:	eef0 0a67 	vmov.f32	s1, s15
 8000cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <lfollower_isr+0x84>)
 8000cd6:	f000 fa61 	bl	800119c <pid_calcule>

	// Apply PID to adjust motor PWM/velocity
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <lfollower_isr+0x84>)
 8000cdc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ce0:	eef1 7a67 	vneg.f32	s15, s15
 8000ce4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000d2c <lfollower_isr+0x88>
 8000ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000d30 <lfollower_isr+0x8c>
 8000cf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <lfollower_isr+0x84>)
 8000cf6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000cfa:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d2c <lfollower_isr+0x88>
 8000cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d02:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d30 <lfollower_isr+0x8c>
 8000d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000d0a:	eef0 0a67 	vmov.f32	s1, s15
 8000d0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d12:	f000 f9d5 	bl	80010c0 <move_control>

	return EXIT_SUCCESS;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	ecbd 8b02 	vpop	{d8}
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000257 	.word	0x20000257
 8000d28:	20000000 	.word	0x20000000
 8000d2c:	3eb33334 	.word	0x3eb33334
 8000d30:	3f266666 	.word	0x3f266666

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f001 f974 	bl	8002026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f831 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f7ff fedf 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d46:	f7ff feb7 	bl	8000ab8 <MX_DMA_Init>
  MX_SPI3_Init();
 8000d4a:	f000 fb2f 	bl	80013ac <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000d4e:	f001 f879 	bl	8001e44 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000d52:	f000 feaf 	bl	8001ab4 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000d56:	f7ff fc99 	bl	800068c <MX_ADC3_Init>
  MX_TIM4_Init();
 8000d5a:	f000 fe47 	bl	80019ec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000d5e:	f001 f841 	bl	8001de4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d62:	f000 fdf3 	bl	800194c <MX_TIM3_Init>
  MX_ADC2_Init();
 8000d66:	f7ff fc3f 	bl	80005e8 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize FSM state and next state
  state = S_STOPPED;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <main+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <main+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

  int err = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]

  while (1)
  {
	err = test_modules();
 8000d7a:	f000 fdd9 	bl	8001930 <test_modules>
 8000d7e:	6078      	str	r0, [r7, #4]

	switch(err)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <main+0x60>
		case 0:
			break;

		default:
			// signal error. Light up RED LED
			write_led(LRED, 1);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <main+0x6c>)
 8000d8e:	f002 fe7d 	bl	8003a8c <HAL_GPIO_WritePin>
			break;
 8000d92:	e000      	b.n	8000d96 <main+0x62>
			break;
 8000d94:	bf00      	nop
	}

	while(1)
 8000d96:	e7fe      	b.n	8000d96 <main+0x62>
 8000d98:	20000255 	.word	0x20000255
 8000d9c:	20000256 	.word	0x20000256
 8000da0:	40020400 	.word	0x40020400

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0b8      	sub	sp, #224	; 0xe0
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dae:	2234      	movs	r2, #52	; 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 fa8e 	bl	80072d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2290      	movs	r2, #144	; 0x90
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fa7f 	bl	80072d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	6413      	str	r3, [r2, #64]	; 0x40
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <SystemClock_Config+0x11c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <SystemClock_Config+0x120>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <SystemClock_Config+0x120>)
 8000df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b32      	ldr	r3, [pc, #200]	; (8000ec4 <SystemClock_Config+0x120>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	2310      	movs	r3, #16
 8000e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e2a:	23d8      	movs	r3, #216	; 0xd8
 8000e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fea7 	bl	8003b94 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e4c:	f000 f83c 	bl	8000ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e50:	f002 fe50 	bl	8003af4 <HAL_PWREx_EnableOverDrive>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000e5a:	f000 f835 	bl	8000ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	2302      	movs	r3, #2
 8000e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e84:	2107      	movs	r1, #7
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 f932 	bl	80040f0 <HAL_RCC_ClockConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e92:	f000 f819 	bl	8000ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000e96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e9a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea4:	f107 0308 	add.w	r3, r7, #8
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 faf7 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000eb4:	f000 f808 	bl	8000ec8 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	37e0      	adds	r7, #224	; 0xe0
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <motion_start>:

/******************************************************************************
Motion Functions
******************************************************************************/
void motion_start(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	if(motion_status == MOT_ON)
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <motion_start+0x38>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <motion_start+0x32>
		// already moving
		return;

	// enable Line Follower
	lfollower_start();
 8000ee0:	f7ff febc 	bl	8000c5c <lfollower_start>

	// start movement before beeing on Hold
	if(motion_status == MOT_HOLD)
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <motion_start+0x38>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d103      	bne.n	8000ef4 <motion_start+0x20>
	{
		// motion ON
		motion_status = MOT_ON;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <motion_start+0x38>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
		return;
 8000ef2:	e009      	b.n	8000f08 <motion_start+0x34>
	}

	// motion ON
	motion_status = MOT_ON;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <motion_start+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	// enable Stop Detectors
	stop_detector_init();
 8000efa:	f000 fb99 	bl	8001630 <stop_detector_init>

	// start sampling motion sensors
	HAL_TIM_Base_Start_IT(&TIM_MOTION);
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <motion_start+0x3c>)
 8000f00:	f004 f916 	bl	8005130 <HAL_TIM_Base_Start_IT>
 8000f04:	e000      	b.n	8000f08 <motion_start+0x34>
		return;
 8000f06:	bf00      	nop

}
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000030 	.word	0x20000030
 8000f10:	2000054c 	.word	0x2000054c

08000f14 <motion_stop>:

void motion_stop(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
//	if(motion_status == MOT_OFF)
//		// already stopped
//		return;

	// disable Line Follower
	lfollower_stop();
 8000f18:	f7ff feb2 	bl	8000c80 <lfollower_stop>

	if(motion_status == MOT_HOLD)
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <motion_stop+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d005      	beq.n	8000f30 <motion_stop+0x1c>
		// motion in hold
		// stop detectors remain enabled
		return;

	// else, stop sampling motion sensors
	HAL_TIM_Base_Stop_IT(&TIM_MOTION);
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <motion_stop+0x24>)
 8000f26:	f004 f97b 	bl	8005220 <HAL_TIM_Base_Stop_IT>

	// disable Stop Detectors
	stop_detector_deInit();
 8000f2a:	f000 fb93 	bl	8001654 <stop_detector_deInit>
 8000f2e:	e000      	b.n	8000f32 <motion_stop+0x1e>
		return;
 8000f30:	bf00      	nop
	// motion OFF
//	motion_status = MOT_OFF;
}
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000030 	.word	0x20000030
 8000f38:	2000054c 	.word	0x2000054c

08000f3c <motion_isr>:

void motion_isr(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	uint8_t err;

	// check Stop Sensors
	err = stop_detector_isr();
 8000f42:	f000 fb95 	bl	8001670 <stop_detector_isr>
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]

	if(motion_status == MOT_HOLD)
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <motion_isr+0x80>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d111      	bne.n	8000f76 <motion_isr+0x3a>
	{
		if(timeout_flag)
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <motion_isr+0x84>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d005      	beq.n	8000f66 <motion_isr+0x2a>
		{
			// motion timeout occured
			motion_status = MOT_TIMEOUT;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <motion_isr+0x80>)
 8000f5c:	2206      	movs	r2, #6
 8000f5e:	701a      	strb	r2, [r3, #0]
			// stop everything
			motion_stop();
 8000f60:	f7ff ffd8 	bl	8000f14 <motion_stop>
			// motion timeout occured
//			motion_status = MOT_TIMEOUT;
			return;
 8000f64:	e027      	b.n	8000fb6 <motion_isr+0x7a>
		}
		if(err == 0)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d123      	bne.n	8000fb4 <motion_isr+0x78>
		{
			// obstacle has been moved
			// stop timeout
			timeout_stop();
 8000f6c:	f000 ff24 	bl	8001db8 <timeout_stop>
			// restart movement
			motion_start();
 8000f70:	f7ff ffb0 	bl	8000ed4 <motion_start>
 8000f74:	e011      	b.n	8000f9a <motion_isr+0x5e>
		}
		else
			// continue in Hold
			return;
	}
	else if(err)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00e      	beq.n	8000f9a <motion_isr+0x5e>
		// update motion_status
		// Signal that Motion is stopped due to Stop Mark/Obstacle
		// err = E_CROSS_FOUND (1) -> motion_status = MOT_CROSS_FOUND (2)
		// err = E_ROOM_FOUND (2) -> motion_status = MOT_ROOM_FOUND (3)
		// err = E_OBS_FOUND (3) -> motion_status = MOT_HOLD (4)
		motion_status = err + (MOT_CROSS_FOUND - E_ST_CROSS_FOUND);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <motion_isr+0x80>)
 8000f84:	701a      	strb	r2, [r3, #0]

		// if motion is on hold, begin timeout
		if(motion_status == MOT_HOLD)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <motion_isr+0x80>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d102      	bne.n	8000f94 <motion_isr+0x58>
			timeout_start(HOLD_TIMEOUT);
 8000f8e:	201e      	movs	r0, #30
 8000f90:	f000 fee0 	bl	8001d54 <timeout_start>

		// obstacle/stop mark found
		// stop movement
		motion_stop();
 8000f94:	f7ff ffbe 	bl	8000f14 <motion_stop>
		return;
 8000f98:	e00d      	b.n	8000fb6 <motion_isr+0x7a>
	}

	// line follower ISR
	// continue to follow line
	err = lfollower_isr();
 8000f9a:	f7ff fe83 	bl	8000ca4 <lfollower_isr>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	if(err)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <motion_isr+0x7a>
	{
		// signal motion error
		motion_status = MOT_ERR;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <motion_isr+0x80>)
 8000faa:	2205      	movs	r2, #5
 8000fac:	701a      	strb	r2, [r3, #0]

		// error following line
		// stop movement
		motion_stop();
 8000fae:	f7ff ffb1 	bl	8000f14 <motion_stop>
 8000fb2:	e000      	b.n	8000fb6 <motion_isr+0x7a>
			return;
 8000fb4:	bf00      	nop
	}
}
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000030 	.word	0x20000030
 8000fc0:	20000284 	.word	0x20000284

08000fc4 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <motor_init+0x1c>)
 8000fd4:	f004 f9aa 	bl	800532c <HAL_TIM_PWM_Start>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200004b4 	.word	0x200004b4

08000fe4 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <motor_kill+0x28>)
 8000ff4:	f004 fa94 	bl	8005520 <HAL_TIM_PWM_Stop>
	// disable IN pins
	motor_control(m,  0, MOTOR_STOP);
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 f807 	bl	8001010 <motor_control>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004b4 	.word	0x200004b4

08001010 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	70fb      	strb	r3, [r7, #3]
 800101c:	4613      	mov	r3, r2
 800101e:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6858      	ldr	r0, [r3, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	8919      	ldrh	r1, [r3, #8]
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <motor_control+0x58>)
 800102c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001030:	461a      	mov	r2, r3
 8001032:	f002 fd2b 	bl	8003a8c <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68d8      	ldr	r0, [r3, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	8a19      	ldrh	r1, [r3, #16]
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	4a09      	ldr	r2, [pc, #36]	; (8001068 <motor_control+0x58>)
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	785b      	ldrb	r3, [r3, #1]
 8001048:	461a      	mov	r2, r3
 800104a:	f002 fd1f 	bl	8003a8c <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	78fa      	ldrb	r2, [r7, #3]
 8001056:	b292      	uxth	r2, r2
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <motor_control+0x5c>)
 800105c:	f000 fe20 	bl	8001ca0 <set_pwm>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08009b70 	.word	0x08009b70
 800106c:	200004b4 	.word	0x200004b4

08001070 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <move_start+0x1c>)
 8001076:	f7ff ffa5 	bl	8000fc4 <motor_init>
	motor_init(&motor_left);
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <move_start+0x20>)
 800107c:	f7ff ffa2 	bl	8000fc4 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <move_start+0x24>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000034 	.word	0x20000034
 8001090:	20000048 	.word	0x20000048
 8001094:	20000258 	.word	0x20000258

08001098 <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <move_stop+0x1c>)
 800109e:	f7ff ffa1 	bl	8000fe4 <motor_kill>
	motor_kill(&motor_left);
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <move_stop+0x20>)
 80010a4:	f7ff ff9e 	bl	8000fe4 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <move_stop+0x24>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000034 	.word	0x20000034
 80010b8:	20000048 	.word	0x20000048
 80010bc:	20000258 	.word	0x20000258

080010c0 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ca:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <move_control+0xd0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 80010d6:	f7ff ffcb 	bl	8001070 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 80010da:	edd7 7a03 	vldr	s15, [r7, #12]
 80010de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e2:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001180 <move_control+0xc0>
 80010e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80010ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80010ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80010f2:	793b      	ldrb	r3, [r7, #4]
 80010f4:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8001180 <move_control+0xc0>
 8001102:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001106:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800110a:	edc7 7a01 	vstr	s15, [r7, #4]
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 8001112:	edd7 7a02 	vldr	s15, [r7, #8]
 8001116:	eef0 7ae7 	vabs.f32	s15, s15
 800111a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111e:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8001188 <move_control+0xc8>
 8001122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800112a:	edc7 7a01 	vstr	s15, [r7, #4]
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	b2d9      	uxtb	r1, r3
 8001132:	7dbb      	ldrb	r3, [r7, #22]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <move_control+0xd4>)
 800113e:	f7ff ff67 	bl	8001010 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	eef0 7ae7 	vabs.f32	s15, s15
 800114a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8001188 <move_control+0xc8>
 8001152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001156:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800115a:	edc7 7a01 	vstr	s15, [r7, #4]
 800115e:	793b      	ldrb	r3, [r7, #4]
 8001160:	b2d9      	uxtb	r1, r3
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <move_control+0xd8>)
 800116e:	f7ff ff4f 	bl	8001010 <motor_control>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	7ae147ae 	.word	0x7ae147ae
 8001184:	3fefae14 	.word	0x3fefae14
 8001188:	00000000 	.word	0x00000000
 800118c:	40590000 	.word	0x40590000
 8001190:	20000258 	.word	0x20000258
 8001194:	20000034 	.word	0x20000034
 8001198:	20000048 	.word	0x20000048

0800119c <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011a8:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 80011ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	ed93 7a02 	vldr	s14, [r3, #8]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80011ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80011fc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80012b0 <pid_calcule+0x114>
 8001200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	edd3 7a03 	vldr	s15, [r3, #12]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	edd3 6a01 	vldr	s13, [r3, #4]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	edd3 7a07 	vldr	s15, [r3, #28]
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd08      	ble.n	800127a <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 8001278:	e013      	b.n	80012a2 <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d400      	bmi.n	8001292 <pid_calcule+0xf6>
}
 8001290:	e007      	b.n	80012a2 <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	615a      	str	r2, [r3, #20]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	3e99999a 	.word	0x3e99999a

080012b4 <qtr_init>:
@brief 	Starts storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&ADC_QTR_DMA, qtr_sens, QTR_SENS_NUM);
 80012b8:	2206      	movs	r2, #6
 80012ba:	4903      	ldr	r1, [pc, #12]	; (80012c8 <qtr_init+0x14>)
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <qtr_init+0x18>)
 80012be:	f001 f8b9 	bl	8002434 <HAL_ADC_Start_DMA>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000025c 	.word	0x2000025c
 80012cc:	20000338 	.word	0x20000338

080012d0 <qtr_kill>:
@brief 	Stops storing QTR sensor values
@param	none
@retval	none
******************************************************************************/
void qtr_kill(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&ADC_QTR_DMA);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <qtr_kill+0x10>)
 80012d6:	f001 f9a7 	bl	8002628 <HAL_ADC_Stop_DMA>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000338 	.word	0x20000338
 80012e4:	00000000 	.word	0x00000000

080012e8 <qtr_get_digital>:
@param	Sensor
@retval	Digital/analog value of the requested sensor
******************************************************************************/
// QTR get sensor digital value
uint8_t qtr_get_digital(qtr_e sensor)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]) > ANALOG_HI_VOLT);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a16      	ldr	r2, [pc, #88]	; (8001350 <qtr_get_digital+0x68>)
 80012f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001302:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001338 <qtr_get_digital+0x50>
 8001306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800130a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001340 <qtr_get_digital+0x58>
 800130e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001312:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001348 <qtr_get_digital+0x60>
 8001316:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	bfcc      	ite	gt
 8001320:	2301      	movgt	r3, #1
 8001322:	2300      	movle	r3, #0
 8001324:	b2db      	uxtb	r3, r3
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	66666666 	.word	0x66666666
 800133c:	400a6666 	.word	0x400a6666
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	66666666 	.word	0x66666666
 800134c:	40066666 	.word	0x40066666
 8001350:	2000025c 	.word	0x2000025c
 8001354:	00000000 	.word	0x00000000

08001358 <qtr_get_analog>:

// QTR get sensor analog value
float qtr_get_analog(qtr_e sensor)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	return (DIG_TO_ANALOG(qtr_sens[sensor]));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <qtr_get_analog+0x50>)
 8001366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001372:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001398 <qtr_get_analog+0x40>
 8001376:	ee27 6b06 	vmul.f64	d6, d7, d6
 800137a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80013a0 <qtr_get_analog+0x48>
 800137e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001382:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	f3af 8000 	nop.w
 8001398:	66666666 	.word	0x66666666
 800139c:	400a6666 	.word	0x400a6666
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40affe00 	.word	0x40affe00
 80013a8:	2000025c 	.word	0x2000025c

080013ac <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_SPI3_Init+0x74>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <MX_SPI3_Init+0x78>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_SPI3_Init+0x74>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_SPI3_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_SPI3_Init+0x74>)
 80013c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_SPI3_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_SPI3_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_SPI3_Init+0x74>)
 80013da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_SPI3_Init+0x74>)
 80013e2:	2218      	movs	r2, #24
 80013e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_SPI3_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <MX_SPI3_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <MX_SPI3_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <MX_SPI3_Init+0x74>)
 80013fa:	2207      	movs	r2, #7
 80013fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <MX_SPI3_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <MX_SPI3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800140a:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_SPI3_Init+0x74>)
 800140c:	f003 fc6e 	bl	8004cec <HAL_SPI_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001416:	f7ff fd57 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200003e0 	.word	0x200003e0
 8001424:	40003c00 	.word	0x40003c00

08001428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <HAL_SPI_MspInit+0x8c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d130      	bne.n	80014ac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 8001450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_SPI_MspInit+0x90>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800147a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800148c:	2306      	movs	r3, #6
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4809      	ldr	r0, [pc, #36]	; (80014bc <HAL_SPI_MspInit+0x94>)
 8001498:	f002 f934 	bl	8003704 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	2033      	movs	r0, #51	; 0x33
 80014a2:	f001 fcee 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80014a6:	2033      	movs	r0, #51	; 0x33
 80014a8:	f001 fd07 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40003c00 	.word	0x40003c00
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x44>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_MspInit+0x44>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_MspInit+0x44>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_MspInit+0x44>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_MspInit+0x44>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_MspInit+0x44>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800150c:	e7fe      	b.n	800150c <NMI_Handler+0x4>
	...

08001510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  // blink LED RED
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <HardFault_Handler+0x18>)
 800151a:	f002 fad0 	bl	8003abe <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f000 fddd 	bl	80020e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001526:	e7f5      	b.n	8001514 <HardFault_Handler+0x4>
 8001528:	40020400 	.word	0x40020400

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <MemManage_Handler+0x4>

08001532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <UsageFault_Handler+0x4>

0800153e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156c:	f000 fd98 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}

08001574 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <ADC_IRQHandler+0x14>)
 800157a:	f000 fe19 	bl	80021b0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <ADC_IRQHandler+0x18>)
 8001580:	f000 fe16 	bl	80021b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000290 	.word	0x20000290
 800158c:	20000338 	.word	0x20000338

08001590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM3_IRQHandler+0x10>)
 8001596:	f004 f843 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000500 	.word	0x20000500

080015a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM4_IRQHandler+0x10>)
 80015aa:	f004 f839 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200004b4 	.word	0x200004b4

080015b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART1_IRQHandler+0x10>)
 80015be:	f005 f805 	bl	80065cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000071c 	.word	0x2000071c

080015cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <USART3_IRQHandler+0x10>)
 80015d2:	f004 fffb 	bl	80065cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000598 	.word	0x20000598

080015e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <SPI3_IRQHandler+0x10>)
 80015e6:	f003 fc2d 	bl	8004e44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200003e0 	.word	0x200003e0

080015f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM6_DAC_IRQHandler+0x10>)
 80015fa:	f004 f811 	bl	8005620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000054c 	.word	0x2000054c

08001608 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2_Stream1_IRQHandler+0x10>)
 800160e:	f001 fe0f 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002d8 	.word	0x200002d8

0800161c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <DMA2_Stream2_IRQHandler+0x10>)
 8001622:	f001 fe05 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000380 	.word	0x20000380

08001630 <stop_detector_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_detector_init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	// start Obstacle detector ADC DMA
	HAL_ADC_Start_DMA(&OBS_DETECTOR_ADC_DMA, &obs_distance, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	4904      	ldr	r1, [pc, #16]	; (8001648 <stop_detector_init+0x18>)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <stop_detector_init+0x1c>)
 800163a:	f000 fefb 	bl	8002434 <HAL_ADC_Start_DMA>
	// stop detector enabled
	stop_detector_status = 1;
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <stop_detector_init+0x20>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000274 	.word	0x20000274
 800164c:	20000290 	.word	0x20000290
 8001650:	20000278 	.word	0x20000278

08001654 <stop_detector_deInit>:

void stop_detector_deInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	// stop Obstacle detector ADC DMA
	HAL_ADC_Stop_DMA(&OBS_DETECTOR_ADC_DMA);
 8001658:	4803      	ldr	r0, [pc, #12]	; (8001668 <stop_detector_deInit+0x14>)
 800165a:	f000 ffe5 	bl	8002628 <HAL_ADC_Stop_DMA>
	// stop detector disabled
	stop_detector_status = 0;
 800165e:	4b03      	ldr	r3, [pc, #12]	; (800166c <stop_detector_deInit+0x18>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000290 	.word	0x20000290
 800166c:	20000278 	.word	0x20000278

08001670 <stop_detector_isr>:
		 	 - R (right sensor)
@param	none
@retval	none
******************************************************************************/
uint8_t stop_detector_isr()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	// previous sensor values
	static uint8_t sens_prev = 0;
	// current sensor values
	uint8_t sens = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	71fb      	strb	r3, [r7, #7]

	// Digital value of distance
	static uint32_t old_obs_distance = 0;
	uint8_t obs_found_flag = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71bb      	strb	r3, [r7, #6]

	// is stop detector ON?
	if(stop_detector_status == 0)
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <stop_detector_isr+0x98>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <stop_detector_isr+0x1a>
		// return all ok
		return 0;
 8001686:	2300      	movs	r3, #0
 8001688:	e039      	b.n	80016fe <stop_detector_isr+0x8e>

	// ***** Check Stop Marks Detector *****
	// if SENSOR_L enabled sens = 0000 0001 (1)
	// if SENSOR_L disabled sens = 0000 0000 (0)
	sens = qtr_get_digital(ST_SENSOR_L);
 800168a:	2005      	movs	r0, #5
 800168c:	f7ff fe2c 	bl	80012e8 <qtr_get_digital>
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]

	// rotate left one bit
	// SENSOR_L enabled: sens = 0000 0010
	// SENSOR_L disabled: sens = 0000 0000
	sens = sens << 1;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	71fb      	strb	r3, [r7, #7]

	// SENSOR_L enabled:
		// if SENSOR_R enabled sens = 0000 0011 (3)
		// if SENSOR_R disabled sens = 0000 0010 (2)
	sens += qtr_get_digital(ST_SENSOR_R);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fe24 	bl	80012e8 <qtr_get_digital>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4413      	add	r3, r2
 80016a8:	71fb      	strb	r3, [r7, #7]

	// both sensors enabled
	if(sens == 3)
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d101      	bne.n	80016b4 <stop_detector_isr+0x44>
		// return cross found error
		return E_ST_CROSS_FOUND;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e024      	b.n	80016fe <stop_detector_isr+0x8e>

	// current sensors value equal to the previous sensor values
	// and only one sensor enabled
	else if((sens == sens_prev) && (sens != 0))
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <stop_detector_isr+0x9c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	79fa      	ldrb	r2, [r7, #7]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d104      	bne.n	80016c8 <stop_detector_isr+0x58>
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <stop_detector_isr+0x58>
		// return room found error
		return E_ST_ROOM_FOUND;
 80016c4:	2302      	movs	r3, #2
 80016c6:	e01a      	b.n	80016fe <stop_detector_isr+0x8e>

	// ***** Check Obstacle Detector *****
	// Obstacle found flag update
	obs_found_flag = OBS_TOO_CLOSE(obs_distance, old_obs_distance);
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <stop_detector_isr+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016d0:	d306      	bcc.n	80016e0 <stop_detector_isr+0x70>
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <stop_detector_isr+0xa4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016da:	d301      	bcc.n	80016e0 <stop_detector_isr+0x70>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <stop_detector_isr+0x72>
 80016e0:	2300      	movs	r3, #0
 80016e2:	71bb      	strb	r3, [r7, #6]
														obs_found_flag);
	UART_puts(str);
#endif // !_DEBUG_

	// update old distance variable
	old_obs_distance = obs_distance;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <stop_detector_isr+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <stop_detector_isr+0xa4>)
 80016ea:	6013      	str	r3, [r2, #0]

	if(obs_found_flag)
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <stop_detector_isr+0x86>
		// return obstacle found error
		return E_ST_OBS_FOUND;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e003      	b.n	80016fe <stop_detector_isr+0x8e>
//		return 0;

	// update sensors value
	sens_prev = sens;
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <stop_detector_isr+0x9c>)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	7013      	strb	r3, [r2, #0]

	return EXIT_SUCCESS;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000278 	.word	0x20000278
 800170c:	20000279 	.word	0x20000279
 8001710:	20000274 	.word	0x20000274
 8001714:	2000027c 	.word	0x2000027c

08001718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return 1;
 800171c:	2301      	movs	r3, #1
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <_kill>:

int _kill(int pid, int sig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001732:	f005 fd9d 	bl	8007270 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2216      	movs	r2, #22
 800173a:	601a      	str	r2, [r3, #0]
	return -1;
 800173c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_exit>:

void _exit (int status)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe7 	bl	8001728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800175a:	e7fe      	b.n	800175a <_exit+0x12>

0800175c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e00a      	b.n	8001784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176e:	f3af 8000 	nop.w
 8001772:	4601      	mov	r1, r0
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	60ba      	str	r2, [r7, #8]
 800177a:	b2ca      	uxtb	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	429a      	cmp	r2, r3
 800178a:	dbf0      	blt.n	800176e <_read+0x12>
	}

return len;
 800178c:	687b      	ldr	r3, [r7, #4]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	e009      	b.n	80017bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dbf1      	blt.n	80017a8 <_write+0x12>
	}
	return len;
 80017c4:	687b      	ldr	r3, [r7, #4]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_close>:

int _close(int file)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
	return -1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f6:	605a      	str	r2, [r3, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_isatty>:

int _isatty(int file)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
	return 1;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f005 fd02 	bl	8007270 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20080000 	.word	0x20080000
 8001898:	00000400 	.word	0x00000400
 800189c:	20000280 	.word	0x20000280
 80018a0:	200007c8 	.word	0x200007c8

080018a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <test_motion>:

/******************************************************************************
Test motion module
******************************************************************************/
void test_motion(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	// start movement
	motion_start();
 80018cc:	f7ff fb02 	bl	8000ed4 <motion_start>

	// while motion is ON
	while(motion_status == MOT_ON)
 80018d0:	bf00      	nop
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <test_motion+0x18>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0fb      	beq.n	80018d2 <test_motion+0xa>
		;
}
 80018da:	bf00      	nop
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000030 	.word	0x20000030

080018e4 <test_stop_sensor>:

/******************************************************************************
Test stop sensors module
******************************************************************************/
void test_stop_sensor(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	// use test_motion()

	// motion stopped
	if(motion_status == MOT_CROSS_FOUND)
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <test_stop_sensor+0x44>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d105      	bne.n	80018fc <test_stop_sensor+0x18>
		// Cross found. enable BLUE LED
		write_led(LBLUE, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	480d      	ldr	r0, [pc, #52]	; (800192c <test_stop_sensor+0x48>)
 80018f6:	f002 f8c9 	bl	8003a8c <HAL_GPIO_WritePin>
		// Room found. enable GREEN LED
		write_led(LGREEN, 1);
	else if(motion_status == MOT_HOLD)
		// Obstacle found. enable RED LED
		write_led(LRED, 1);
}
 80018fa:	e013      	b.n	8001924 <test_stop_sensor+0x40>
	else if(motion_status == MOT_ROOM_FOUND)
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <test_stop_sensor+0x44>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d105      	bne.n	8001910 <test_stop_sensor+0x2c>
		write_led(LGREEN, 1);
 8001904:	2201      	movs	r2, #1
 8001906:	2101      	movs	r1, #1
 8001908:	4808      	ldr	r0, [pc, #32]	; (800192c <test_stop_sensor+0x48>)
 800190a:	f002 f8bf 	bl	8003a8c <HAL_GPIO_WritePin>
}
 800190e:	e009      	b.n	8001924 <test_stop_sensor+0x40>
	else if(motion_status == MOT_HOLD)
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <test_stop_sensor+0x44>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d105      	bne.n	8001924 <test_stop_sensor+0x40>
		write_led(LRED, 1);
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <test_stop_sensor+0x48>)
 8001920:	f002 f8b4 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000030 	.word	0x20000030
 800192c:	40020400 	.word	0x40020400

08001930 <test_modules>:

/******************************************************************************
Test modules functions
******************************************************************************/
int test_modules(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
	int err = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]

//	while(1)
//		test_timeout(2);


	test_motion();
 800193a:	f7ff ffc5 	bl	80018c8 <test_motion>
	test_stop_sensor();
 800193e:	f7ff ffd1 	bl	80018e4 <test_stop_sensor>
//
//	motion_start();
//	HAL_Delay(2000);
//	motion_stop();

	return err;
 8001942:	687b      	ldr	r3, [r7, #4]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_TIM3_Init+0x98>)
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <MX_TIM3_Init+0x9c>)
 800196e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60000-1;
 8001970:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001972:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001976:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_TIM3_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1800-1;
 800197e:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001980:	f240 7207 	movw	r2, #1799	; 0x707
 8001984:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_TIM3_Init+0x98>)
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001992:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_TIM3_Init+0x98>)
 8001994:	f003 fb75 	bl	8005082 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800199e:	f7ff fa93 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_TIM3_Init+0x98>)
 80019b0:	f004 f866 	bl	8005a80 <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80019ba:	f7ff fa85 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019be:	2320      	movs	r3, #32
 80019c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_TIM3_Init+0x98>)
 80019cc:	f004 fd04 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80019d6:	f7ff fa77 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000500 	.word	0x20000500
 80019e8:	40000400 	.word	0x40000400

080019ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fe:	463b      	mov	r3, r7
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
 8001a0c:	615a      	str	r2, [r3, #20]
 8001a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a12:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <MX_TIM4_Init+0xc4>)
 8001a14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a18:	226b      	movs	r2, #107	; 0x6b
 8001a1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001a22:	4b22      	ldr	r3, [pc, #136]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a24:	2264      	movs	r2, #100	; 0x64
 8001a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a34:	481d      	ldr	r0, [pc, #116]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a36:	f003 fc22 	bl	800527e <HAL_TIM_PWM_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a40:	f7ff fa42 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4816      	ldr	r0, [pc, #88]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a54:	f004 fcc0 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001a5e:	f7ff fa33 	bl	8000ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a62:	2360      	movs	r3, #96	; 0x60
 8001a64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a72:	463b      	mov	r3, r7
 8001a74:	2208      	movs	r2, #8
 8001a76:	4619      	mov	r1, r3
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a7a:	f003 fef1 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001a84:	f7ff fa20 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a88:	463b      	mov	r3, r7
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001a90:	f003 fee6 	bl	8005860 <HAL_TIM_PWM_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a9a:	f7ff fa15 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM4_Init+0xc0>)
 8001aa0:	f000 f8a6 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200004b4 	.word	0x200004b4
 8001ab0:	40000800 	.word	0x40000800

08001ab4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001acc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001ad0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001ada:	2263      	movs	r2, #99	; 0x63
 8001adc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001ae6:	f003 facc 	bl	8005082 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001af0:	f7ff f9ea 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001af4:	2320      	movs	r3, #32
 8001af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_TIM6_Init+0x64>)
 8001b02:	f004 fc69 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b0c:	f7ff f9dc 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000054c 	.word	0x2000054c
 8001b1c:	40001000 	.word	0x40001000

08001b20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_TIM_Base_MspInit+0x78>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d114      	bne.n	8001b5c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	201d      	movs	r0, #29
 8001b50:	f001 f997 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b54:	201d      	movs	r0, #29
 8001b56:	f001 f9b0 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b5a:	e018      	b.n	8001b8e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM6)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_TIM_Base_MspInit+0x80>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d113      	bne.n	8001b8e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_TIM_Base_MspInit+0x7c>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	2036      	movs	r0, #54	; 0x36
 8001b84:	f001 f97d 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b88:	2036      	movs	r0, #54	; 0x36
 8001b8a:	f001 f996 	bl	8002eba <HAL_NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40001000 	.word	0x40001000

08001ba4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_TIM_PWM_MspInit+0x44>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d113      	bne.n	8001bde <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_TIM_PWM_MspInit+0x48>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_TIM_PWM_MspInit+0x48>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_TIM_PWM_MspInit+0x48>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	201e      	movs	r0, #30
 8001bd4:	f001 f955 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bd8:	201e      	movs	r0, #30
 8001bda:	f001 f96e 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40023800 	.word	0x40023800

08001bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <HAL_TIM_MspPostInit+0xa0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d139      	bne.n	8001c86 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_TIM_MspPostInit+0xa4>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c54:	2302      	movs	r3, #2
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480e      	ldr	r0, [pc, #56]	; (8001c98 <HAL_TIM_MspPostInit+0xa8>)
 8001c60:	f001 fd50 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c76:	2302      	movs	r3, #2
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4806      	ldr	r0, [pc, #24]	; (8001c9c <HAL_TIM_MspPostInit+0xac>)
 8001c82:	f001 fd3f 	bl	8003704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40000800 	.word	0x40000800
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40020400 	.word	0x40020400

08001ca0 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d104      	bne.n	8001cc0 <set_pwm+0x20>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	883a      	ldrh	r2, [r7, #0]
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cbe:	e023      	b.n	8001d08 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d104      	bne.n	8001cd0 <set_pwm+0x30>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	883b      	ldrh	r3, [r7, #0]
 8001ccc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001cce:	e01b      	b.n	8001d08 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d104      	bne.n	8001ce0 <set_pwm+0x40>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	883b      	ldrh	r3, [r7, #0]
 8001cdc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001cde:	e013      	b.n	8001d08 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d104      	bne.n	8001cf0 <set_pwm+0x50>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001cee:	e00b      	b.n	8001d08 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d104      	bne.n	8001d00 <set_pwm+0x60>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	883b      	ldrh	r3, [r7, #0]
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001cfe:	e003      	b.n	8001d08 <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	883b      	ldrh	r3, [r7, #0]
 8001d06:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_MOTION)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x16>
	{// enters every 10ms
		// line follower PID and stop_sensors
		motion_isr();
 8001d24:	f7ff f90a 	bl	8000f3c <motion_isr>
	}
	else if(htim == &TIM_DEBOUNCE)
	{
		debounce_isr();
	}
}
 8001d28:	e00c      	b.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_TIMEOUTS)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d102      	bne.n	8001d38 <HAL_TIM_PeriodElapsedCallback+0x24>
		timeout_isr();
 8001d32:	f000 f84b 	bl	8001dcc <timeout_isr>
}
 8001d36:	e005      	b.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x30>
	else if(htim == &TIM_DEBOUNCE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_TIM_PeriodElapsedCallback+0x30>
		debounce_isr();
 8001d40:	f7fe fe94 	bl	8000a6c <debounce_isr>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000054c 	.word	0x2000054c
 8001d50:	20000500 	.word	0x20000500

08001d54 <timeout_start>:

/******************************************************************************
Timeout Start
******************************************************************************/
void timeout_start(int time_sec)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	// update timeout timer reload
	if(time_sec > MAX_TIMEOUT)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b24      	cmp	r3, #36	; 0x24
 8001d60:	dd04      	ble.n	8001d6c <timeout_start+0x18>
	{
//		TIM_TIMEOUTS.Init.Prescaler = x - 1;
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * MAX_TIMEOUT) - 1;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <timeout_start+0x5c>)
 8001d64:	f64f 521f 	movw	r2, #64799	; 0xfd1f
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e008      	b.n	8001d7e <timeout_start+0x2a>
//		timeout_cycles = time_sec ...
	}
	else
		TIM_TIMEOUTS.Init.Period = (PERIOD_1SEC * time_sec) - 1; // >>>>>>>>>>>>> check this
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <timeout_start+0x5c>)
 8001d7c:	60da      	str	r2, [r3, #12]

	// init Timer
	if(HAL_TIM_Base_Init(&TIM_TIMEOUTS) != HAL_OK)
 8001d7e:	480c      	ldr	r0, [pc, #48]	; (8001db0 <timeout_start+0x5c>)
 8001d80:	f003 f97f 	bl	8005082 <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <timeout_start+0x3c>
		// init error
		Error_Handler();
 8001d8a:	f7ff f89d 	bl	8000ec8 <Error_Handler>
		// clear TIM_SR_UIF TIM flag
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
		// start timeout Timer
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
	}
}
 8001d8e:	e00a      	b.n	8001da6 <timeout_start+0x52>
		timeout_flag = 0;
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <timeout_start+0x60>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_CLEAR_FLAG(&TIM_TIMEOUTS, TIM_SR_UIF);
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <timeout_start+0x5c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0201 	mvn.w	r2, #1
 8001d9e:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&TIM_TIMEOUTS);
 8001da0:	4803      	ldr	r0, [pc, #12]	; (8001db0 <timeout_start+0x5c>)
 8001da2:	f003 f9c5 	bl	8005130 <HAL_TIM_Base_Start_IT>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000500 	.word	0x20000500
 8001db4:	20000284 	.word	0x20000284

08001db8 <timeout_stop>:

/******************************************************************************
Timeout Stop
******************************************************************************/
void timeout_stop(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	// stop timeout Timer
	HAL_TIM_Base_Stop_IT(&TIM_TIMEOUTS);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <timeout_stop+0x10>)
 8001dbe:	f003 fa2f 	bl	8005220 <HAL_TIM_Base_Stop_IT>
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000500 	.word	0x20000500

08001dcc <timeout_isr>:

/******************************************************************************
Timeout ISR
******************************************************************************/
void timeout_isr(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	// set timeout flag
	timeout_flag = 1;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <timeout_isr+0x14>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
	// stop generating timeouts
	timeout_stop();
 8001dd6:	f7ff ffef 	bl	8001db8 <timeout_stop>
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000284 	.word	0x20000284

08001de4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <MX_USART1_UART_Init+0x5c>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART1_UART_Init+0x58>)
 8001e28:	f004 fb82 	bl	8006530 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e32:	f7ff f849 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000071c 	.word	0x2000071c
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <MX_USART3_UART_Init+0x5c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_USART3_UART_Init+0x58>)
 8001e88:	f004 fb52 	bl	8006530 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e92:	f7ff f819 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000598 	.word	0x20000598
 8001ea0:	40004800 	.word	0x40004800

08001ea4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	; 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_UART_MspInit+0x11c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d141      	bne.n	8001f4a <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a38      	ldr	r2, [pc, #224]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	482d      	ldr	r0, [pc, #180]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f14:	f001 fbf6 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001f18:	2340      	movs	r3, #64	; 0x40
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f28:	2307      	movs	r3, #7
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4825      	ldr	r0, [pc, #148]	; (8001fc8 <HAL_UART_MspInit+0x124>)
 8001f34:	f001 fbe6 	bl	8003704 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2025      	movs	r0, #37	; 0x25
 8001f3e:	f000 ffa0 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f42:	2025      	movs	r0, #37	; 0x25
 8001f44:	f000 ffb9 	bl	8002eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f48:	e035      	b.n	8001fb6 <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_UART_MspInit+0x128>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d130      	bne.n	8001fb6 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a1a      	ldr	r2, [pc, #104]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f72:	f043 0308 	orr.w	r3, r3, #8
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_UART_MspInit+0x120>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f96:	2307      	movs	r3, #7
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <HAL_UART_MspInit+0x12c>)
 8001fa2:	f001 fbaf 	bl	8003704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2027      	movs	r0, #39	; 0x27
 8001fac:	f000 ff69 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fb0:	2027      	movs	r0, #39	; 0x27
 8001fb2:	f000 ff82 	bl	8002eba <HAL_NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40004800 	.word	0x40004800
 8001fd0:	40020c00 	.word	0x40020c00

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800200c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fda:	490e      	ldr	r1, [pc, #56]	; (8002014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe0:	e002      	b.n	8001fe8 <LoopCopyDataInit>

08001fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe6:	3304      	adds	r3, #4

08001fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fec:	d3f9      	bcc.n	8001fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fee:	4a0b      	ldr	r2, [pc, #44]	; (800201c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ff0:	4c0b      	ldr	r4, [pc, #44]	; (8002020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff4:	e001      	b.n	8001ffa <LoopFillZerobss>

08001ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff8:	3204      	adds	r2, #4

08001ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ffc:	d3fb      	bcc.n	8001ff6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ffe:	f7ff fc51 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002002:	f005 f93b 	bl	800727c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7fe fe95 	bl	8000d34 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002018:	08009f8c 	.word	0x08009f8c
  ldr r2, =_sbss
 800201c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002020:	200007c8 	.word	0x200007c8

08002024 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <CAN1_RX0_IRQHandler>

08002026 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202a:	2003      	movs	r0, #3
 800202c:	f000 ff1e 	bl	8002e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f805 	bl	8002040 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002036:	f7ff fa43 	bl	80014c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	; (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 ff39 	bl	8002ed6 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 ff01 	bl	8002e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	; (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2000005c 	.word	0x2000005c
 8002098:	20000064 	.word	0x20000064
 800209c:	20000060 	.word	0x20000060

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000064 	.word	0x20000064
 80020c4:	200007b4 	.word	0x200007b4

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200007b4 	.word	0x200007b4

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000064 	.word	0x20000064

08002128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e031      	b.n	80021a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe fb38 	bl	80007bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_ADC_Init+0x84>)
 800216c:	4013      	ands	r3, r2
 800216e:	f043 0202 	orr.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fc22 	bl	80029c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
 8002192:	e001      	b.n	8002198 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	ffffeefd 	.word	0xffffeefd

080021b0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d049      	beq.n	8002286 <HAL_ADC_IRQHandler+0xd6>
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d046      	beq.n	8002286 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12b      	bne.n	8002276 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d127      	bne.n	8002276 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800223e:	2b00      	cmp	r3, #0
 8002240:	d119      	bne.n	8002276 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0220 	bic.w	r2, r2, #32
 8002250:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d105      	bne.n	8002276 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fa30 	bl	80026dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0212 	mvn.w	r2, #18
 8002284:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b80      	cmp	r3, #128	; 0x80
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d057      	beq.n	8002368 <HAL_ADC_IRQHandler+0x1b8>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d054      	beq.n	8002368 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d105      	bne.n	80022d6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d139      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d12b      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d124      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11d      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d119      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002332:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fcad 	bl	8002cb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f06f 020c 	mvn.w	r2, #12
 8002366:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d017      	beq.n	80023ca <HAL_ADC_IRQHandler+0x21a>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d014      	beq.n	80023ca <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d10d      	bne.n	80023ca <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f9a2 	bl	8002704 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0201 	mvn.w	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d015      	beq.n	800242a <HAL_ADC_IRQHandler+0x27a>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d012      	beq.n	800242a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0220 	mvn.w	r2, #32
 8002418:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f97c 	bl	8002718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0220 	mvn.w	r2, #32
 8002428:	601a      	str	r2, [r3, #0]
  }
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_ADC_Start_DMA+0x1e>
 800244e:	2302      	movs	r3, #2
 8002450:	e0d4      	b.n	80025fc <HAL_ADC_Start_DMA+0x1c8>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d018      	beq.n	800249a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002478:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_ADC_Start_DMA+0x1d0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a62      	ldr	r2, [pc, #392]	; (8002608 <HAL_ADC_Start_DMA+0x1d4>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	0c9a      	lsrs	r2, r3, #18
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800248c:	e002      	b.n	8002494 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3b01      	subs	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	f040 809c 	bne.w	80025e2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ae:	4b57      	ldr	r3, [pc, #348]	; (800260c <HAL_ADC_Start_DMA+0x1d8>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f023 0206 	bic.w	r2, r3, #6
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
 80024f2:	e002      	b.n	80024fa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	4a42      	ldr	r2, [pc, #264]	; (8002610 <HAL_ADC_Start_DMA+0x1dc>)
 8002508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	4a41      	ldr	r2, [pc, #260]	; (8002614 <HAL_ADC_Start_DMA+0x1e0>)
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002516:	4a40      	ldr	r2, [pc, #256]	; (8002618 <HAL_ADC_Start_DMA+0x1e4>)
 8002518:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002522:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002532:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002542:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	334c      	adds	r3, #76	; 0x4c
 800254e:	4619      	mov	r1, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f000 fd7a 	bl	800304c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_ADC_Start_DMA+0x1e8>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d143      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	e03a      	b.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a25      	ldr	r2, [pc, #148]	; (8002620 <HAL_ADC_Start_DMA+0x1ec>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10e      	bne.n	80025ac <HAL_ADC_Start_DMA+0x178>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d107      	bne.n	80025ac <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025aa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <HAL_ADC_Start_DMA+0x1e8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d120      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_ADC_Start_DMA+0x1f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d11b      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d114      	bne.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e00b      	b.n	80025fa <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000005c 	.word	0x2000005c
 8002608:	431bde83 	.word	0x431bde83
 800260c:	fffff8fe 	.word	0xfffff8fe
 8002610:	08002bb5 	.word	0x08002bb5
 8002614:	08002c6f 	.word	0x08002c6f
 8002618:	08002c8b 	.word	0x08002c8b
 800261c:	40012300 	.word	0x40012300
 8002620:	40012000 	.word	0x40012000
 8002624:	40012200 	.word	0x40012200

08002628 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADC_Stop_DMA+0x1a>
 800263e:	2302      	movs	r3, #2
 8002640:	e046      	b.n	80026d0 <HAL_ADC_Stop_DMA+0xa8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d12e      	bne.n	80026c6 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002676:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d10f      	bne.n	80026a6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fd3e 	bl	800310c <HAL_DMA_Abort>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026b4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_ADC_Stop_DMA+0xb0>)
 80026bc:	4013      	ands	r3, r2
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	ffffeefe 	.word	0xffffeefe

080026dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x1c>
 8002744:	2302      	movs	r3, #2
 8002746:	e12a      	b.n	800299e <HAL_ADC_ConfigChannel+0x272>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d93a      	bls.n	80027ce <HAL_ADC_ConfigChannel+0xa2>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002760:	d035      	beq.n	80027ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68d9      	ldr	r1, [r3, #12]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	3b1e      	subs	r3, #30
 8002778:	2207      	movs	r2, #7
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a87      	ldr	r2, [pc, #540]	; (80029ac <HAL_ADC_ConfigChannel+0x280>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	061a      	lsls	r2, r3, #24
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a6:	e035      	b.n	8002814 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68d9      	ldr	r1, [r3, #12]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4403      	add	r3, r0
 80027c0:	3b1e      	subs	r3, #30
 80027c2:	409a      	lsls	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027cc:	e022      	b.n	8002814 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6919      	ldr	r1, [r3, #16]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	4613      	mov	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	4413      	add	r3, r2
 80027e2:	2207      	movs	r2, #7
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43da      	mvns	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	400a      	ands	r2, r1
 80027f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6919      	ldr	r1, [r3, #16]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	4603      	mov	r3, r0
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4403      	add	r3, r0
 800280a:	409a      	lsls	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b06      	cmp	r3, #6
 800281a:	d824      	bhi.n	8002866 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3b05      	subs	r3, #5
 800282e:	221f      	movs	r2, #31
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43da      	mvns	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	400a      	ands	r2, r1
 800283c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	3b05      	subs	r3, #5
 8002858:	fa00 f203 	lsl.w	r2, r0, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	430a      	orrs	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34
 8002864:	e04c      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d824      	bhi.n	80028b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b23      	subs	r3, #35	; 0x23
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b23      	subs	r3, #35	; 0x23
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
 80028b6:	e023      	b.n	8002900 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b41      	subs	r3, #65	; 0x41
 80028ca:	221f      	movs	r2, #31
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43da      	mvns	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	400a      	ands	r2, r1
 80028d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b41      	subs	r3, #65	; 0x41
 80028f4:	fa00 f203 	lsl.w	r2, r0, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2a      	ldr	r2, [pc, #168]	; (80029b0 <HAL_ADC_ConfigChannel+0x284>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1f4>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002912:	d105      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 800291a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800291e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <HAL_ADC_ConfigChannel+0x284>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d109      	bne.n	800293e <HAL_ADC_ConfigChannel+0x212>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b12      	cmp	r3, #18
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 8002938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800293c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_ADC_ConfigChannel+0x284>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d125      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x268>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_ADC_ConfigChannel+0x280>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <HAL_ADC_ConfigChannel+0x22e>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b11      	cmp	r3, #17
 8002958:	d11c      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <HAL_ADC_ConfigChannel+0x288>)
 8002960:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002964:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <HAL_ADC_ConfigChannel+0x280>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d111      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_ADC_ConfigChannel+0x28c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_ADC_ConfigChannel+0x290>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9a      	lsrs	r2, r3, #18
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002986:	e002      	b.n	800298e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	10000012 	.word	0x10000012
 80029b0:	40012000 	.word	0x40012000
 80029b4:	40012300 	.word	0x40012300
 80029b8:	2000005c 	.word	0x2000005c
 80029bc:	431bde83 	.word	0x431bde83

080029c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029c8:	4b78      	ldr	r3, [pc, #480]	; (8002bac <ADC_Init+0x1ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a77      	ldr	r2, [pc, #476]	; (8002bac <ADC_Init+0x1ec>)
 80029ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029d4:	4b75      	ldr	r3, [pc, #468]	; (8002bac <ADC_Init+0x1ec>)
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4973      	ldr	r1, [pc, #460]	; (8002bac <ADC_Init+0x1ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	021a      	lsls	r2, r3, #8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6899      	ldr	r1, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <ADC_Init+0x1f0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d022      	beq.n	8002a9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	e00f      	b.n	8002aba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ab8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0202 	bic.w	r2, r2, #2
 8002ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	005a      	lsls	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	3b01      	subs	r3, #1
 8002b14:	035a      	lsls	r2, r3, #13
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	e007      	b.n	8002b30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	051a      	lsls	r2, r3, #20
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b72:	025a      	lsls	r2, r3, #9
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	029a      	lsls	r2, r3, #10
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40012300 	.word	0x40012300
 8002bb0:	0f000001 	.word	0x0f000001

08002bb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d13c      	bne.n	8002c48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d12b      	bne.n	8002c40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d127      	bne.n	8002c40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d119      	bne.n	8002c40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0220 	bic.w	r2, r2, #32
 8002c1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d105      	bne.n	8002c40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fd4b 	bl	80026dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c46:	e00e      	b.n	8002c66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff fd5f 	bl	8002718 <HAL_ADC_ErrorCallback>
}
 8002c5a:	e004      	b.n	8002c66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd37 	bl	80026f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0204 	orr.w	r2, r3, #4
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f7ff fd34 	bl	8002718 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cb0:	bf00      	nop
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <__NVIC_SetPriorityGrouping+0x40>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x40>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00
 8002d10:	05fa0000 	.word	0x05fa0000

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	; (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	; (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e38:	d301      	bcc.n	8002e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00f      	b.n	8002e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <SysTick_Config+0x40>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e46:	210f      	movs	r1, #15
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f7ff ff8e 	bl	8002d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <SysTick_Config+0x40>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e56:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <SysTick_Config+0x40>)
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010

08002e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff29 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e94:	f7ff ff3e 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	6978      	ldr	r0, [r7, #20]
 8002ea0:	f7ff ff8e 	bl	8002dc0 <NVIC_EncodePriority>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff5d 	bl	8002d6c <__NVIC_SetPriority>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff31 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffa2 	bl	8002e28 <SysTick_Config>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff f8e4 	bl	80020c8 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e099      	b.n	8003040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2c:	e00f      	b.n	8002f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f2e:	f7ff f8cb 	bl	80020c8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d908      	bls.n	8002f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e078      	b.n	8003040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e8      	bne.n	8002f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_DMA_Init+0x158>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d117      	bne.n	8003012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fb09 	bl	800360c <DMA_CheckFifoParam>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800300e:	2301      	movs	r3, #1
 8003010:	e016      	b.n	8003040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fac0 	bl	80035a0 <DMA_CalcBaseAndBitshift>
 8003020:	4603      	mov	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	223f      	movs	r2, #63	; 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	e010803f 	.word	0xe010803f

0800304c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_DMA_Start_IT+0x26>
 800306e:	2302      	movs	r3, #2
 8003070:	e048      	b.n	8003104 <HAL_DMA_Start_IT+0xb8>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d137      	bne.n	80030f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa52 	bl	8003544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	223f      	movs	r2, #63	; 0x3f
 80030a6:	409a      	lsls	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0216 	orr.w	r2, r2, #22
 80030ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0208 	orr.w	r2, r2, #8
 80030e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	e005      	b.n	8003102 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
 8003100:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800311a:	f7fe ffd5 	bl	80020c8 <HAL_GetTick>
 800311e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d008      	beq.n	800313e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e052      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0216 	bic.w	r2, r2, #22
 800314c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800315c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_DMA_Abort+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0208 	bic.w	r2, r2, #8
 800317c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800318e:	e013      	b.n	80031b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003190:	f7fe ff9a 	bl	80020c8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b05      	cmp	r3, #5
 800319c:	d90c      	bls.n	80031b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2203      	movs	r2, #3
 80031b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e015      	b.n	80031e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e4      	bne.n	8003190 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	223f      	movs	r2, #63	; 0x3f
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d004      	beq.n	800320a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00c      	b.n	8003224 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_DMA_IRQHandler+0x258>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a92      	ldr	r2, [pc, #584]	; (800348c <HAL_DMA_IRQHandler+0x25c>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325a:	2208      	movs	r2, #8
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01a      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0204 	bic.w	r2, r2, #4
 8003282:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2208      	movs	r2, #8
 800328a:	409a      	lsls	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	2201      	movs	r2, #1
 80032c0:	409a      	lsls	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ca:	f043 0202 	orr.w	r2, r3, #2
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	2204      	movs	r2, #4
 80032d8:	409a      	lsls	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d012      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	2204      	movs	r2, #4
 80032f6:	409a      	lsls	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	2210      	movs	r2, #16
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d043      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03c      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2210      	movs	r2, #16
 800332c:	409a      	lsls	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d018      	beq.n	8003372 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d108      	bne.n	8003360 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d024      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
 800335e:	e01f      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e016      	b.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d107      	bne.n	8003390 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0208 	bic.w	r2, r2, #8
 800338e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2220      	movs	r2, #32
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 808e 	beq.w	80034ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8086 	beq.w	80034ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	2220      	movs	r2, #32
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d136      	bne.n	8003448 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0216 	bic.w	r2, r2, #22
 80033e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_DMA_IRQHandler+0x1da>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0208 	bic.w	r2, r2, #8
 8003418:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	223f      	movs	r2, #63	; 0x3f
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	d07d      	beq.n	800353a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
        }
        return;
 8003446:	e078      	b.n	800353a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01c      	beq.n	8003490 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	2b00      	cmp	r3, #0
 800346a:	d030      	beq.n	80034ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e02b      	b.n	80034ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d027      	beq.n	80034ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e022      	b.n	80034ce <HAL_DMA_IRQHandler+0x29e>
 8003488:	2000005c 	.word	0x2000005c
 800348c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0210 	bic.w	r2, r2, #16
 80034ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d032      	beq.n	800353c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2205      	movs	r2, #5
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	429a      	cmp	r2, r3
 8003504:	d307      	bcc.n	8003516 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f2      	bne.n	80034fa <HAL_DMA_IRQHandler+0x2ca>
 8003514:	e000      	b.n	8003518 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003516:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	4798      	blx	r3
 8003538:	e000      	b.n	800353c <HAL_DMA_IRQHandler+0x30c>
        return;
 800353a:	bf00      	nop
    }
  }
}
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d108      	bne.n	8003584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003582:	e007      	b.n	8003594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3b10      	subs	r3, #16
 80035b0:	4a13      	ldr	r2, [pc, #76]	; (8003600 <DMA_CalcBaseAndBitshift+0x60>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <DMA_CalcBaseAndBitshift+0x64>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d908      	bls.n	80035e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <DMA_CalcBaseAndBitshift+0x68>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	1d1a      	adds	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	659a      	str	r2, [r3, #88]	; 0x58
 80035de:	e006      	b.n	80035ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <DMA_CalcBaseAndBitshift+0x68>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	aaaaaaab 	.word	0xaaaaaaab
 8003604:	08009b90 	.word	0x08009b90
 8003608:	fffffc00 	.word	0xfffffc00

0800360c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11f      	bne.n	8003666 <DMA_CheckFifoParam+0x5a>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d856      	bhi.n	80036da <DMA_CheckFifoParam+0xce>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <DMA_CheckFifoParam+0x28>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003645 	.word	0x08003645
 8003638:	08003657 	.word	0x08003657
 800363c:	08003645 	.word	0x08003645
 8003640:	080036db 	.word	0x080036db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d046      	beq.n	80036de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e043      	b.n	80036de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800365e:	d140      	bne.n	80036e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e03d      	b.n	80036e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d121      	bne.n	80036b4 <DMA_CheckFifoParam+0xa8>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d837      	bhi.n	80036e6 <DMA_CheckFifoParam+0xda>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <DMA_CheckFifoParam+0x70>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003693 	.word	0x08003693
 8003684:	0800368d 	.word	0x0800368d
 8003688:	080036a5 	.word	0x080036a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e030      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d025      	beq.n	80036ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e022      	b.n	80036ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b2:	e01c      	b.n	80036ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d903      	bls.n	80036c2 <DMA_CheckFifoParam+0xb6>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d003      	beq.n	80036c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c0:	e018      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      break;
 80036c6:	e015      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e00b      	b.n	80036f2 <DMA_CheckFifoParam+0xe6>
      break;
 80036da:	bf00      	nop
 80036dc:	e00a      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e008      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e006      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e004      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
    }
  } 
  
  return status; 
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e175      	b.n	8003a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003724:	2201      	movs	r2, #1
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	f040 8164 	bne.w	8003a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d00b      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003756:	2b11      	cmp	r3, #17
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b12      	cmp	r3, #18
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x100>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b12      	cmp	r3, #18
 8003802:	d123      	bne.n	800384c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	08da      	lsrs	r2, r3, #3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3208      	adds	r2, #8
 800380c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	220f      	movs	r2, #15
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	08da      	lsrs	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3208      	adds	r2, #8
 8003846:	69b9      	ldr	r1, [r7, #24]
 8003848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0203 	and.w	r2, r3, #3
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80be 	beq.w	8003a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388e:	4b66      	ldr	r3, [pc, #408]	; (8003a28 <HAL_GPIO_Init+0x324>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_GPIO_Init+0x324>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b63      	ldr	r3, [pc, #396]	; (8003a28 <HAL_GPIO_Init+0x324>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038a6:	4a61      	ldr	r2, [pc, #388]	; (8003a2c <HAL_GPIO_Init+0x328>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_GPIO_Init+0x32c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d037      	beq.n	8003942 <HAL_GPIO_Init+0x23e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <HAL_GPIO_Init+0x330>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d031      	beq.n	800393e <HAL_GPIO_Init+0x23a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a56      	ldr	r2, [pc, #344]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x236>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a55      	ldr	r2, [pc, #340]	; (8003a3c <HAL_GPIO_Init+0x338>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x232>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a54      	ldr	r2, [pc, #336]	; (8003a40 <HAL_GPIO_Init+0x33c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x22e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a53      	ldr	r2, [pc, #332]	; (8003a44 <HAL_GPIO_Init+0x340>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x22a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a52      	ldr	r2, [pc, #328]	; (8003a48 <HAL_GPIO_Init+0x344>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x226>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a51      	ldr	r2, [pc, #324]	; (8003a4c <HAL_GPIO_Init+0x348>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a50      	ldr	r2, [pc, #320]	; (8003a50 <HAL_GPIO_Init+0x34c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4f      	ldr	r2, [pc, #316]	; (8003a54 <HAL_GPIO_Init+0x350>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x21a>
 800391a:	2309      	movs	r3, #9
 800391c:	e012      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800391e:	230a      	movs	r3, #10
 8003920:	e010      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003922:	2308      	movs	r3, #8
 8003924:	e00e      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003926:	2307      	movs	r3, #7
 8003928:	e00c      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392a:	2306      	movs	r3, #6
 800392c:	e00a      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800392e:	2305      	movs	r3, #5
 8003930:	e008      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003932:	2304      	movs	r3, #4
 8003934:	e006      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003936:	2303      	movs	r3, #3
 8003938:	e004      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393a:	2302      	movs	r3, #2
 800393c:	e002      	b.n	8003944 <HAL_GPIO_Init+0x240>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_GPIO_Init+0x240>
 8003942:	2300      	movs	r3, #0
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	f002 0203 	and.w	r2, r2, #3
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	4093      	lsls	r3, r2
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003954:	4935      	ldr	r1, [pc, #212]	; (8003a2c <HAL_GPIO_Init+0x328>)
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003962:	4b3d      	ldr	r3, [pc, #244]	; (8003a58 <HAL_GPIO_Init+0x354>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	43db      	mvns	r3, r3
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	4013      	ands	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003986:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_GPIO_Init+0x354>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800398c:	4b32      	ldr	r3, [pc, #200]	; (8003a58 <HAL_GPIO_Init+0x354>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <HAL_GPIO_Init+0x354>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_GPIO_Init+0x354>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039da:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_GPIO_Init+0x354>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_GPIO_Init+0x354>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <HAL_GPIO_Init+0x354>)
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b0f      	cmp	r3, #15
 8003a14:	f67f ae86 	bls.w	8003724 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	40020000 	.word	0x40020000
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40020c00 	.word	0x40020c00
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40021400 	.word	0x40021400
 8003a48:	40021800 	.word	0x40021800
 8003a4c:	40021c00 	.word	0x40021c00
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022400 	.word	0x40022400
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e001      	b.n	8003a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b22:	f7fe fad1 	bl	80020c8 <HAL_GetTick>
 8003b26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b28:	e009      	b.n	8003b3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b2a:	f7fe facd 	bl	80020c8 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b38:	d901      	bls.n	8003b3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e022      	b.n	8003b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b58:	f7fe fab6 	bl	80020c8 <HAL_GetTick>
 8003b5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b5e:	e009      	b.n	8003b74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b60:	f7fe fab2 	bl	80020c8 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b6e:	d901      	bls.n	8003b74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e007      	b.n	8003b84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b80:	d1ee      	bne.n	8003b60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	40007000 	.word	0x40007000

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e29b      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8087 	beq.w	8003cc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb8:	4b96      	ldr	r3, [pc, #600]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d00c      	beq.n	8003bde <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc4:	4b93      	ldr	r3, [pc, #588]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d112      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x62>
 8003bd0:	4b90      	ldr	r3, [pc, #576]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bde:	4b8d      	ldr	r3, [pc, #564]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d06c      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x130>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d168      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e275      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x7a>
 8003c00:	4b84      	ldr	r3, [pc, #528]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a83      	ldr	r2, [pc, #524]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e02e      	b.n	8003c6c <HAL_RCC_OscConfig+0xd8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x9c>
 8003c16:	4b7f      	ldr	r3, [pc, #508]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7e      	ldr	r2, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b7c      	ldr	r3, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7b      	ldr	r2, [pc, #492]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xd8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c3a:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a75      	ldr	r2, [pc, #468]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a72      	ldr	r2, [pc, #456]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xd8>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a6e      	ldr	r2, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b6c      	ldr	r3, [pc, #432]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a6b      	ldr	r2, [pc, #428]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fa28 	bl	80020c8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fa24 	bl	80020c8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e229      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fe fa14 	bl	80020c8 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe fa10 	bl	80020c8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e215      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x110>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d069      	beq.n	8003da6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cd2:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d11c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x190>
 8003cea:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e1e9      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	493d      	ldr	r1, [pc, #244]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	e040      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fe f9c6 	bl	80020c8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fe f9c2 	bl	80020c8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e1c7      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4929      	ldr	r1, [pc, #164]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	e018      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe f9a2 	bl	80020c8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe f99e 	bl	80020c8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e1a3      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d038      	beq.n	8003e24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d019      	beq.n	8003dee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc6:	f7fe f97f 	bl	80020c8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dce:	f7fe f97b 	bl	80020c8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e180      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x23a>
 8003dec:	e01a      	b.n	8003e24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fe f965 	bl	80020c8 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fe f961 	bl	80020c8 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d903      	bls.n	8003e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e166      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
 8003e14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	4b92      	ldr	r3, [pc, #584]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ee      	bne.n	8003e02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a4 	beq.w	8003f7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10d      	bne.n	8003e5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	4b89      	ldr	r3, [pc, #548]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a88      	ldr	r2, [pc, #544]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b86      	ldr	r3, [pc, #536]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e56:	2301      	movs	r3, #1
 8003e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	4b83      	ldr	r3, [pc, #524]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e66:	4b80      	ldr	r3, [pc, #512]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7f      	ldr	r2, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f7fe f929 	bl	80020c8 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f7fe f925 	bl	80020c8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e12a      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e8c:	4b76      	ldr	r3, [pc, #472]	; (8004068 <HAL_RCC_OscConfig+0x4d4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x31a>
 8003ea0:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a6f      	ldr	r2, [pc, #444]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	e02d      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x33c>
 8003eb6:	4b6b      	ldr	r3, [pc, #428]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a6a      	ldr	r2, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	4b68      	ldr	r3, [pc, #416]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a67      	ldr	r2, [pc, #412]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ece:	e01c      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b05      	cmp	r3, #5
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x35e>
 8003ed8:	4b62      	ldr	r3, [pc, #392]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	4a61      	ldr	r2, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee4:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
 8003ef2:	4b5c      	ldr	r3, [pc, #368]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	4a5b      	ldr	r2, [pc, #364]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ef8:	f023 0301 	bic.w	r3, r3, #1
 8003efc:	6713      	str	r3, [r2, #112]	; 0x70
 8003efe:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f02:	4a58      	ldr	r2, [pc, #352]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d015      	beq.n	8003f3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fe f8d9 	bl	80020c8 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fe f8d5 	bl	80020c8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0d8      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCC_OscConfig+0x386>
 8003f3c:	e014      	b.n	8003f68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f8c3 	bl	80020c8 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f44:	e00a      	b.n	8003f5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe f8bf 	bl	80020c8 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0c2      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ee      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b3d      	ldr	r3, [pc, #244]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a3c      	ldr	r2, [pc, #240]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80ae 	beq.w	80040e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f84:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d06d      	beq.n	800406c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d14b      	bne.n	8004030 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f98:	4b32      	ldr	r3, [pc, #200]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a31      	ldr	r2, [pc, #196]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe f890 	bl	80020c8 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fac:	f7fe f88c 	bl	80020c8 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e091      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69da      	ldr	r2, [r3, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	061b      	lsls	r3, r3, #24
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	071b      	lsls	r3, r3, #28
 8003ff6:	491b      	ldr	r1, [pc, #108]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8004002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe f85e 	bl	80020c8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe f85a 	bl	80020c8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e05f      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x47c>
 800402e:	e057      	b.n	80040e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8004036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800403a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe f844 	bl	80020c8 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe f840 	bl	80020c8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e045      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x4d0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x4b0>
 8004062:	e03d      	b.n	80040e0 <HAL_RCC_OscConfig+0x54c>
 8004064:	40023800 	.word	0x40023800
 8004068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_RCC_OscConfig+0x558>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d030      	beq.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d129      	bne.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d122      	bne.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d119      	bne.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	3b01      	subs	r3, #1
 80040b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d10f      	bne.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d107      	bne.n	80040dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40023800 	.word	0x40023800

080040f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0d0      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b6a      	ldr	r3, [pc, #424]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d910      	bls.n	8004138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b67      	ldr	r3, [pc, #412]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 020f 	bic.w	r2, r3, #15
 800411e:	4965      	ldr	r1, [pc, #404]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a58      	ldr	r2, [pc, #352]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800415a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800416e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d040      	beq.n	8004214 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b2:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e073      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e06b      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4936      	ldr	r1, [pc, #216]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fd ff70 	bl	80020c8 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fd ff6c 	bl	80020c8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e053      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d210      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 020f 	bic.w	r2, r3, #15
 800422a:	4922      	ldr	r1, [pc, #136]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4313      	orrs	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800426e:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	490a      	ldr	r1, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x1cc>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <HAL_RCC_ClockConfig+0x1d0>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <HAL_RCC_ClockConfig+0x1d4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd fecc 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08009b78 	.word	0x08009b78
 80042c0:	2000005c 	.word	0x2000005c
 80042c4:	20000060 	.word	0x20000060

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b5b0      	push	{r4, r5, r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042ce:	2100      	movs	r1, #0
 80042d0:	6079      	str	r1, [r7, #4]
 80042d2:	2100      	movs	r1, #0
 80042d4:	60f9      	str	r1, [r7, #12]
 80042d6:	2100      	movs	r1, #0
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042da:	2100      	movs	r1, #0
 80042dc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042de:	4952      	ldr	r1, [pc, #328]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 80042e0:	6889      	ldr	r1, [r1, #8]
 80042e2:	f001 010c 	and.w	r1, r1, #12
 80042e6:	2908      	cmp	r1, #8
 80042e8:	d00d      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x3e>
 80042ea:	2908      	cmp	r1, #8
 80042ec:	f200 8094 	bhi.w	8004418 <HAL_RCC_GetSysClockFreq+0x150>
 80042f0:	2900      	cmp	r1, #0
 80042f2:	d002      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x32>
 80042f4:	2904      	cmp	r1, #4
 80042f6:	d003      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x38>
 80042f8:	e08e      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042fa:	4b4c      	ldr	r3, [pc, #304]	; (800442c <HAL_RCC_GetSysClockFreq+0x164>)
 80042fc:	60bb      	str	r3, [r7, #8]
      break;
 80042fe:	e08e      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004300:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <HAL_RCC_GetSysClockFreq+0x168>)
 8004302:	60bb      	str	r3, [r7, #8]
      break;
 8004304:	e08b      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004306:	4948      	ldr	r1, [pc, #288]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 8004308:	6849      	ldr	r1, [r1, #4]
 800430a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800430e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004310:	4945      	ldr	r1, [pc, #276]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 8004312:	6849      	ldr	r1, [r1, #4]
 8004314:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004318:	2900      	cmp	r1, #0
 800431a:	d024      	beq.n	8004366 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431c:	4942      	ldr	r1, [pc, #264]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 800431e:	6849      	ldr	r1, [r1, #4]
 8004320:	0989      	lsrs	r1, r1, #6
 8004322:	4608      	mov	r0, r1
 8004324:	f04f 0100 	mov.w	r1, #0
 8004328:	f240 14ff 	movw	r4, #511	; 0x1ff
 800432c:	f04f 0500 	mov.w	r5, #0
 8004330:	ea00 0204 	and.w	r2, r0, r4
 8004334:	ea01 0305 	and.w	r3, r1, r5
 8004338:	493d      	ldr	r1, [pc, #244]	; (8004430 <HAL_RCC_GetSysClockFreq+0x168>)
 800433a:	fb01 f003 	mul.w	r0, r1, r3
 800433e:	2100      	movs	r1, #0
 8004340:	fb01 f102 	mul.w	r1, r1, r2
 8004344:	1844      	adds	r4, r0, r1
 8004346:	493a      	ldr	r1, [pc, #232]	; (8004430 <HAL_RCC_GetSysClockFreq+0x168>)
 8004348:	fba2 0101 	umull	r0, r1, r2, r1
 800434c:	1863      	adds	r3, r4, r1
 800434e:	4619      	mov	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	461a      	mov	r2, r3
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	f7fb ffca 	bl	80002f0 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e04a      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004366:	4b30      	ldr	r3, [pc, #192]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	ea02 0400 	and.w	r4, r2, r0
 800437e:	ea03 0501 	and.w	r5, r3, r1
 8004382:	4620      	mov	r0, r4
 8004384:	4629      	mov	r1, r5
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	014b      	lsls	r3, r1, #5
 8004390:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004394:	0142      	lsls	r2, r0, #5
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	1b00      	subs	r0, r0, r4
 800439c:	eb61 0105 	sbc.w	r1, r1, r5
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	018b      	lsls	r3, r1, #6
 80043aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ae:	0182      	lsls	r2, r0, #6
 80043b0:	1a12      	subs	r2, r2, r0
 80043b2:	eb63 0301 	sbc.w	r3, r3, r1
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	00d9      	lsls	r1, r3, #3
 80043c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c4:	00d0      	lsls	r0, r2, #3
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	1912      	adds	r2, r2, r4
 80043cc:	eb45 0303 	adc.w	r3, r5, r3
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0299      	lsls	r1, r3, #10
 80043da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043de:	0290      	lsls	r0, r2, #10
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	f7fb ff7e 	bl	80002f0 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <HAL_RCC_GetSysClockFreq+0x160>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	3301      	adds	r3, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	fbb2 f3f3 	udiv	r3, r2, r3
 8004414:	60bb      	str	r3, [r7, #8]
      break;
 8004416:	e002      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_RCC_GetSysClockFreq+0x164>)
 800441a:	60bb      	str	r3, [r7, #8]
      break;
 800441c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441e:	68bb      	ldr	r3, [r7, #8]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bdb0      	pop	{r4, r5, r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400
 8004430:	017d7840 	.word	0x017d7840

08004434 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000005c 	.word	0x2000005c

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a9b      	lsrs	r3, r3, #10
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08009b88 	.word	0x08009b88

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004478:	f7ff ffdc 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08009b88 	.word	0x08009b88

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d012      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044c4:	4b69      	ldr	r3, [pc, #420]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a68      	ldr	r2, [pc, #416]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4b66      	ldr	r3, [pc, #408]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	4964      	ldr	r1, [pc, #400]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f6:	4b5d      	ldr	r3, [pc, #372]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	4959      	ldr	r1, [pc, #356]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004532:	4b4e      	ldr	r3, [pc, #312]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	494a      	ldr	r1, [pc, #296]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 808b 	beq.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	4a39      	ldr	r2, [pc, #228]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6413      	str	r3, [r2, #64]	; 0x40
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a34      	ldr	r2, [pc, #208]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a4:	f7fd fd90 	bl	80020c8 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fd fd8c 	bl	80020c8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e38f      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d035      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d02e      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fe:	4b1b      	ldr	r3, [pc, #108]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004608:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004610:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d114      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd fd54 	bl	80020c8 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fd fd50 	bl	80020c8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e351      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ee      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004652:	d111      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004662:	400b      	ands	r3, r1
 8004664:	4901      	ldr	r1, [pc, #4]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
 800466a:	e00b      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
 8004674:	0ffffcff 	.word	0x0ffffcff
 8004678:	4bb3      	ldr	r3, [pc, #716]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4ab2      	ldr	r2, [pc, #712]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800467e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004682:	6093      	str	r3, [r2, #8]
 8004684:	4bb0      	ldr	r3, [pc, #704]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	49ad      	ldr	r1, [pc, #692]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004692:	4313      	orrs	r3, r2
 8004694:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046a2:	4ba9      	ldr	r3, [pc, #676]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	4aa7      	ldr	r2, [pc, #668]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046b2:	4ba5      	ldr	r3, [pc, #660]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	49a2      	ldr	r1, [pc, #648]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d0:	4b9d      	ldr	r3, [pc, #628]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046de:	499a      	ldr	r1, [pc, #616]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f2:	4b95      	ldr	r3, [pc, #596]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004700:	4991      	ldr	r1, [pc, #580]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004714:	4b8c      	ldr	r3, [pc, #560]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	4989      	ldr	r1, [pc, #548]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004736:	4b84      	ldr	r3, [pc, #528]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	4980      	ldr	r1, [pc, #512]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004758:	4b7b      	ldr	r3, [pc, #492]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	4978      	ldr	r1, [pc, #480]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477a:	4b73      	ldr	r3, [pc, #460]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f023 020c 	bic.w	r2, r3, #12
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004788:	496f      	ldr	r1, [pc, #444]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	4967      	ldr	r1, [pc, #412]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047be:	4b62      	ldr	r3, [pc, #392]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	495e      	ldr	r1, [pc, #376]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	4956      	ldr	r1, [pc, #344]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004802:	4b51      	ldr	r3, [pc, #324]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	494d      	ldr	r1, [pc, #308]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004824:	4b48      	ldr	r3, [pc, #288]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	4945      	ldr	r1, [pc, #276]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004846:	4b40      	ldr	r3, [pc, #256]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004854:	493c      	ldr	r1, [pc, #240]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004876:	4934      	ldr	r1, [pc, #208]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800488a:	4b2f      	ldr	r3, [pc, #188]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004898:	492b      	ldr	r1, [pc, #172]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048a8:	d101      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ca:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d8:	491b      	ldr	r1, [pc, #108]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fc:	4912      	ldr	r1, [pc, #72]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	4909      	ldr	r1, [pc, #36]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004934:	4b04      	ldr	r3, [pc, #16]	; (8004948 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800493a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	e002      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	4986      	ldr	r1, [pc, #536]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004960:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004966:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	497d      	ldr	r1, [pc, #500]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d006      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80d6 	beq.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800498c:	4b76      	ldr	r3, [pc, #472]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a75      	ldr	r2, [pc, #468]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004998:	f7fd fb96 	bl	80020c8 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049a0:	f7fd fb92 	bl	80020c8 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e195      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b2:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d021      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11d      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d2:	4b65      	ldr	r3, [pc, #404]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049e0:	4b61      	ldr	r3, [pc, #388]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0e1b      	lsrs	r3, r3, #24
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	019a      	lsls	r2, r3, #6
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	041b      	lsls	r3, r3, #16
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4958      	ldr	r1, [pc, #352]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02e      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a38:	d129      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a3a:	4b4b      	ldr	r3, [pc, #300]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a48:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a4e:	0f1b      	lsrs	r3, r3, #28
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	019a      	lsls	r2, r3, #6
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	061b      	lsls	r3, r3, #24
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	071b      	lsls	r3, r3, #28
 8004a6e:	493e      	ldr	r1, [pc, #248]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a76:	4b3c      	ldr	r3, [pc, #240]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7c:	f023 021f 	bic.w	r2, r3, #31
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4938      	ldr	r1, [pc, #224]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01d      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	0e1b      	lsrs	r3, r3, #24
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aa8:	4b2f      	ldr	r3, [pc, #188]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aae:	0f1b      	lsrs	r3, r3, #28
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	019a      	lsls	r2, r3, #6
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	4926      	ldr	r1, [pc, #152]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d011      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	019a      	lsls	r2, r3, #6
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	061b      	lsls	r3, r3, #24
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	491a      	ldr	r1, [pc, #104]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b06:	4b18      	ldr	r3, [pc, #96]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b12:	f7fd fad9 	bl	80020c8 <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b1a:	f7fd fad5 	bl	80020c8 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b64      	cmp	r3, #100	; 0x64
 8004b26:	d901      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0d8      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	f040 80ce 	bne.w	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fabc 	bl	80020c8 <HAL_GetTick>
 8004b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b52:	e00b      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b54:	f7fd fab8 	bl	80020c8 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d904      	bls.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0bb      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b66:	bf00      	nop
 8004b68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b6c:	4b5e      	ldr	r3, [pc, #376]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b78:	d0ec      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d02e      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d12a      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba2:	4b51      	ldr	r3, [pc, #324]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bb0:	4b4d      	ldr	r3, [pc, #308]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	0f1b      	lsrs	r3, r3, #28
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	019a      	lsls	r2, r3, #6
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bde:	4b42      	ldr	r3, [pc, #264]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	3b01      	subs	r3, #1
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	493d      	ldr	r1, [pc, #244]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0c:	d11d      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c0e:	4b36      	ldr	r3, [pc, #216]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	0e1b      	lsrs	r3, r3, #24
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	0f1b      	lsrs	r3, r3, #28
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	019a      	lsls	r2, r3, #6
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	061b      	lsls	r3, r3, #24
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	071b      	lsls	r3, r3, #28
 8004c42:	4929      	ldr	r1, [pc, #164]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	0e1b      	lsrs	r3, r3, #24
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c64:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	019a      	lsls	r2, r3, #6
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	071b      	lsls	r3, r3, #28
 8004c8a:	4917      	ldr	r1, [pc, #92]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c92:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	4911      	ldr	r1, [pc, #68]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd fa08 	bl	80020c8 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cbc:	f7fd fa04 	bl	80020c8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e007      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cda:	d1ef      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800

08004cec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e09d      	b.n	8004e3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d108      	bne.n	8004d18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d009      	beq.n	8004d24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
 8004d16:	e005      	b.n	8004d24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc fb72 	bl	8001428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d64:	d902      	bls.n	8004d6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e002      	b.n	8004d72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d7a:	d007      	beq.n	8004d8c <HAL_SPI_Init+0xa0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	ea42 0103 	orr.w	r1, r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	0c1b      	lsrs	r3, r3, #16
 8004de8:	f003 0204 	and.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	099b      	lsrs	r3, r3, #6
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	099b      	lsrs	r3, r3, #6
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d004      	beq.n	8004e88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	4798      	blx	r3
    return;
 8004e86:	e0d7      	b.n	8005038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_SPI_IRQHandler+0x66>
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d004      	beq.n	8004eaa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
    return;
 8004ea8:	e0c6      	b.n	8005038 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_SPI_IRQHandler+0x8c>
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80b4 	beq.w	8005038 <HAL_SPI_IRQHandler+0x1f4>
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80ad 	beq.w	8005038 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d023      	beq.n	8004f32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d011      	beq.n	8004f1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efa:	f043 0204 	orr.w	r2, r3, #4
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f02:	2300      	movs	r3, #0
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	e00b      	b.n	8004f32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	693b      	ldr	r3, [r7, #16]
        return;
 8004f30:	e082      	b.n	8005038 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d014      	beq.n	8004f68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00c      	beq.n	8004f8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f78:	f043 0208 	orr.w	r2, r3, #8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d04f      	beq.n	8005036 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fa4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <HAL_SPI_IRQHandler+0x17e>
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d034      	beq.n	800502c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0203 	bic.w	r2, r2, #3
 8004fd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d011      	beq.n	8004ffe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	4a18      	ldr	r2, [pc, #96]	; (8005040 <HAL_SPI_IRQHandler+0x1fc>)
 8004fe0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe f900 	bl	80031ec <HAL_DMA_Abort_IT>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <HAL_SPI_IRQHandler+0x1fc>)
 800500c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe f8ea 	bl	80031ec <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800502a:	e003      	b.n	8005034 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f809 	bl	8005044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005032:	e000      	b.n	8005036 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005034:	bf00      	nop
    return;
 8005036:	bf00      	nop
  }
}
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	08005059 	.word	0x08005059

08005044 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ffe5 	bl	8005044 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e049      	b.n	8005128 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fc fd39 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f000 fdcb 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e054      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a26      	ldr	r2, [pc, #152]	; (8005200 <HAL_TIM_Base_Start_IT+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_TIM_Base_Start_IT+0xd4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	; (8005208 <HAL_TIM_Base_Start_IT+0xd8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	; (800520c <HAL_TIM_Base_Start_IT+0xdc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_TIM_Base_Start_IT+0xe0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <HAL_TIM_Base_Start_IT+0xe4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_TIM_Base_Start_IT+0xe8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d115      	bne.n	80051dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	4b19      	ldr	r3, [pc, #100]	; (800521c <HAL_TIM_Base_Start_IT+0xec>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d015      	beq.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d011      	beq.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f042 0201 	orr.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	e008      	b.n	80051ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e000      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40010400 	.word	0x40010400
 8005214:	40014000 	.word	0x40014000
 8005218:	40001800 	.word	0x40001800
 800521c:	00010007 	.word	0x00010007

08005220 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10f      	bne.n	8005268 <HAL_TIM_Base_Stop_IT+0x48>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	f240 4344 	movw	r3, #1092	; 0x444
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_TIM_Base_Stop_IT+0x48>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e049      	b.n	8005324 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fc fc7d 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	4619      	mov	r1, r3
 80052bc:	4610      	mov	r0, r2
 80052be:	f000 fccd 	bl	8005c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x24>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e03c      	b.n	80053ca <HAL_TIM_PWM_Start+0x9e>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d109      	bne.n	800536a <HAL_TIM_PWM_Start+0x3e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e02f      	b.n	80053ca <HAL_TIM_PWM_Start+0x9e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x58>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e022      	b.n	80053ca <HAL_TIM_PWM_Start+0x9e>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b0c      	cmp	r3, #12
 8005388:	d109      	bne.n	800539e <HAL_TIM_PWM_Start+0x72>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	bf14      	ite	ne
 8005396:	2301      	movne	r3, #1
 8005398:	2300      	moveq	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e015      	b.n	80053ca <HAL_TIM_PWM_Start+0x9e>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d109      	bne.n	80053b8 <HAL_TIM_PWM_Start+0x8c>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	bf14      	ite	ne
 80053b0:	2301      	movne	r3, #1
 80053b2:	2300      	moveq	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	e008      	b.n	80053ca <HAL_TIM_PWM_Start+0x9e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	bf14      	ite	ne
 80053c4:	2301      	movne	r3, #1
 80053c6:	2300      	moveq	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e092      	b.n	80054f8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0xb6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e0:	e023      	b.n	800542a <HAL_TIM_PWM_Start+0xfe>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0xc6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f0:	e01b      	b.n	800542a <HAL_TIM_PWM_Start+0xfe>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xd6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005400:	e013      	b.n	800542a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b0c      	cmp	r3, #12
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xe6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005410:	e00b      	b.n	800542a <HAL_TIM_PWM_Start+0xfe>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b10      	cmp	r3, #16
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0xf6>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005420:	e003      	b.n	800542a <HAL_TIM_PWM_Start+0xfe>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2201      	movs	r2, #1
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ffaa 	bl	800638c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a30      	ldr	r2, [pc, #192]	; (8005500 <HAL_TIM_PWM_Start+0x1d4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIM_PWM_Start+0x120>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2f      	ldr	r2, [pc, #188]	; (8005504 <HAL_TIM_PWM_Start+0x1d8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_TIM_PWM_Start+0x124>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_TIM_PWM_Start+0x126>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005464:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a25      	ldr	r2, [pc, #148]	; (8005500 <HAL_TIM_PWM_Start+0x1d4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d022      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005478:	d01d      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a22      	ldr	r2, [pc, #136]	; (8005508 <HAL_TIM_PWM_Start+0x1dc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <HAL_TIM_PWM_Start+0x1e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d013      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <HAL_TIM_PWM_Start+0x1e4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00e      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a19      	ldr	r2, [pc, #100]	; (8005504 <HAL_TIM_PWM_Start+0x1d8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d009      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <HAL_TIM_PWM_Start+0x1e8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d004      	beq.n	80054b6 <HAL_TIM_PWM_Start+0x18a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <HAL_TIM_PWM_Start+0x1ec>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d115      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	4b17      	ldr	r3, [pc, #92]	; (800551c <HAL_TIM_PWM_Start+0x1f0>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d015      	beq.n	80054f4 <HAL_TIM_PWM_Start+0x1c8>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ce:	d011      	beq.n	80054f4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e0:	e008      	b.n	80054f4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0201 	orr.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e000      	b.n	80054f6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40010000 	.word	0x40010000
 8005504:	40010400 	.word	0x40010400
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000
 8005518:	40001800 	.word	0x40001800
 800551c:	00010007 	.word	0x00010007

08005520 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2200      	movs	r2, #0
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 ff2a 	bl	800638c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_TIM_PWM_Stop+0xf8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_PWM_Stop+0x2c>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a35      	ldr	r2, [pc, #212]	; (800561c <HAL_TIM_PWM_Stop+0xfc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d101      	bne.n	8005550 <HAL_TIM_PWM_Stop+0x30>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_TIM_PWM_Stop+0x32>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d017      	beq.n	8005586 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <HAL_TIM_PWM_Stop+0x66>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	f240 4344 	movw	r3, #1092	; 0x444
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d107      	bne.n	8005586 <HAL_TIM_PWM_Stop+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_TIM_PWM_Stop+0x96>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f240 4344 	movw	r3, #1092	; 0x444
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_PWM_Stop+0x96>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Stop+0xa6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c4:	e023      	b.n	800560e <HAL_TIM_PWM_Stop+0xee>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0xb6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d4:	e01b      	b.n	800560e <HAL_TIM_PWM_Stop+0xee>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Stop+0xc6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e4:	e013      	b.n	800560e <HAL_TIM_PWM_Stop+0xee>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b0c      	cmp	r3, #12
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Stop+0xd6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f4:	e00b      	b.n	800560e <HAL_TIM_PWM_Stop+0xee>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_PWM_Stop+0xe6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	e003      	b.n	800560e <HAL_TIM_PWM_Stop+0xee>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40010000 	.word	0x40010000
 800561c:	40010400 	.word	0x40010400

08005620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b02      	cmp	r3, #2
 8005634:	d122      	bne.n	800567c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d11b      	bne.n	800567c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0202 	mvn.w	r2, #2
 800564c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fadc 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 face 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fadf 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d122      	bne.n	80056d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d11b      	bne.n	80056d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0204 	mvn.w	r2, #4
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fab2 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 faa4 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 fab5 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b08      	cmp	r3, #8
 80056dc:	d122      	bne.n	8005724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d11b      	bne.n	8005724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0208 	mvn.w	r2, #8
 80056f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2204      	movs	r2, #4
 80056fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa88 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005710:	e005      	b.n	800571e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa7a 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fa8b 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	2b10      	cmp	r3, #16
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b10      	cmp	r3, #16
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0210 	mvn.w	r2, #16
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2208      	movs	r2, #8
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa5e 	bl	8005c20 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 fa50 	bl	8005c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa61 	bl	8005c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d10e      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0201 	mvn.w	r2, #1
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fc fab8 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ae:	2b80      	cmp	r3, #128	; 0x80
 80057b0:	d10e      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057bc:	2b80      	cmp	r3, #128	; 0x80
 80057be:	d107      	bne.n	80057d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fe9c 	bl	8006508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	d10e      	bne.n	80057fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b80      	cmp	r3, #128	; 0x80
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fe8f 	bl	800651c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d10e      	bne.n	800582a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d107      	bne.n	800582a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fa0f 	bl	8005c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b20      	cmp	r3, #32
 8005836:	d10e      	bne.n	8005856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b20      	cmp	r3, #32
 8005844:	d107      	bne.n	8005856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f06f 0220 	mvn.w	r2, #32
 800584e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fe4f 	bl	80064f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005856:	bf00      	nop
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005876:	2302      	movs	r3, #2
 8005878:	e0fd      	b.n	8005a76 <HAL_TIM_PWM_ConfigChannel+0x216>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b14      	cmp	r3, #20
 8005886:	f200 80f0 	bhi.w	8005a6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005a6b 	.word	0x08005a6b
 8005898:	08005a6b 	.word	0x08005a6b
 800589c:	08005a6b 	.word	0x08005a6b
 80058a0:	08005925 	.word	0x08005925
 80058a4:	08005a6b 	.word	0x08005a6b
 80058a8:	08005a6b 	.word	0x08005a6b
 80058ac:	08005a6b 	.word	0x08005a6b
 80058b0:	08005967 	.word	0x08005967
 80058b4:	08005a6b 	.word	0x08005a6b
 80058b8:	08005a6b 	.word	0x08005a6b
 80058bc:	08005a6b 	.word	0x08005a6b
 80058c0:	080059a7 	.word	0x080059a7
 80058c4:	08005a6b 	.word	0x08005a6b
 80058c8:	08005a6b 	.word	0x08005a6b
 80058cc:	08005a6b 	.word	0x08005a6b
 80058d0:	080059e9 	.word	0x080059e9
 80058d4:	08005a6b 	.word	0x08005a6b
 80058d8:	08005a6b 	.word	0x08005a6b
 80058dc:	08005a6b 	.word	0x08005a6b
 80058e0:	08005a29 	.word	0x08005a29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fa56 	bl	8005d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0208 	orr.w	r2, r2, #8
 80058fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0204 	bic.w	r2, r2, #4
 800590e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6999      	ldr	r1, [r3, #24]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	619a      	str	r2, [r3, #24]
      break;
 8005922:	e0a3      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 faa8 	bl	8005e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800593e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800594e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6999      	ldr	r1, [r3, #24]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	021a      	lsls	r2, r3, #8
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	619a      	str	r2, [r3, #24]
      break;
 8005964:	e082      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 faff 	bl	8005f70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0208 	orr.w	r2, r2, #8
 8005980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0204 	bic.w	r2, r2, #4
 8005990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	61da      	str	r2, [r3, #28]
      break;
 80059a4:	e062      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f000 fb55 	bl	800605c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69d9      	ldr	r1, [r3, #28]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	021a      	lsls	r2, r3, #8
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	61da      	str	r2, [r3, #28]
      break;
 80059e6:	e041      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68b9      	ldr	r1, [r7, #8]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fb8c 	bl	800610c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0208 	orr.w	r2, r2, #8
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0204 	bic.w	r2, r2, #4
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	691a      	ldr	r2, [r3, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a26:	e021      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fbbe 	bl	80061b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	021a      	lsls	r2, r3, #8
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005a6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop

08005a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b3      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x180>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <HAL_TIM_ConfigClockSource+0x188>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d03e      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0xd0>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	f200 8087 	bhi.w	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	f000 8085 	beq.w	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d87f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xa2>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d87b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d050      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x116>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d877      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d03c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xf6>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d873      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d058      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x136>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d86f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d064      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d86b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d060      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d867      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05c      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f000 fc0b 	bl	800634c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
      break;
 8005b4e:	e04e      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f000 fbf4 	bl	800634c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b72:	609a      	str	r2, [r3, #8]
      break;
 8005b74:	e03b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 fb68 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2150      	movs	r1, #80	; 0x50
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fbc1 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005b94:	e02b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 fb87 	bl	80062b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2160      	movs	r1, #96	; 0x60
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fbb1 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e01b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fb48 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fba1 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e00b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 fb98 	bl	8006316 <TIM_ITRx_SetConfig>
        break;
 8005be6:	e002      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	fffeff88 	.word	0xfffeff88

08005c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d013      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d00f      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a3c      	ldr	r2, [pc, #240]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d007      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3a      	ldr	r2, [pc, #232]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d108      	bne.n	8005cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d02b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cbc:	d027      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <TIM_Base_SetConfig+0x118>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d023      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <TIM_Base_SetConfig+0x11c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <TIM_Base_SetConfig+0x120>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a29      	ldr	r2, [pc, #164]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d017      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a28      	ldr	r2, [pc, #160]	; (8005d84 <TIM_Base_SetConfig+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a27      	ldr	r2, [pc, #156]	; (8005d88 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00f      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a26      	ldr	r2, [pc, #152]	; (8005d8c <TIM_Base_SetConfig+0x130>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d00b      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a25      	ldr	r2, [pc, #148]	; (8005d90 <TIM_Base_SetConfig+0x134>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d007      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <TIM_Base_SetConfig+0x138>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a23      	ldr	r2, [pc, #140]	; (8005d98 <TIM_Base_SetConfig+0x13c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d108      	bne.n	8005d20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <TIM_Base_SetConfig+0x114>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_Base_SetConfig+0xf8>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_Base_SetConfig+0x124>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d103      	bne.n	8005d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	615a      	str	r2, [r3, #20]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40010400 	.word	0x40010400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001800 	.word	0x40001800
 8005d94:	40001c00 	.word	0x40001c00
 8005d98:	40002000 	.word	0x40002000

08005d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	; (8005e74 <TIM_OC1_SetConfig+0xd8>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f023 0302 	bic.w	r3, r3, #2
 8005de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <TIM_OC1_SetConfig+0xdc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_OC1_SetConfig+0x64>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a20      	ldr	r2, [pc, #128]	; (8005e7c <TIM_OC1_SetConfig+0xe0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d10c      	bne.n	8005e1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f023 0308 	bic.w	r3, r3, #8
 8005e06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f023 0304 	bic.w	r3, r3, #4
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <TIM_OC1_SetConfig+0xdc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC1_SetConfig+0x8e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <TIM_OC1_SetConfig+0xe0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	621a      	str	r2, [r3, #32]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr
 8005e74:	fffeff8f 	.word	0xfffeff8f
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40010400 	.word	0x40010400

08005e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0210 	bic.w	r2, r3, #16
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4b2e      	ldr	r3, [pc, #184]	; (8005f64 <TIM_OC2_SetConfig+0xe4>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0320 	bic.w	r3, r3, #32
 8005eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <TIM_OC2_SetConfig+0xe8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC2_SetConfig+0x68>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <TIM_OC2_SetConfig+0xec>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10d      	bne.n	8005f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a18      	ldr	r2, [pc, #96]	; (8005f68 <TIM_OC2_SetConfig+0xe8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC2_SetConfig+0x94>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <TIM_OC2_SetConfig+0xec>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d113      	bne.n	8005f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	feff8fff 	.word	0xfeff8fff
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40010400 	.word	0x40010400

08005f70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4b2d      	ldr	r3, [pc, #180]	; (8006050 <TIM_OC3_SetConfig+0xe0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a22      	ldr	r2, [pc, #136]	; (8006054 <TIM_OC3_SetConfig+0xe4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC3_SetConfig+0x66>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a21      	ldr	r2, [pc, #132]	; (8006058 <TIM_OC3_SetConfig+0xe8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d10d      	bne.n	8005ff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a17      	ldr	r2, [pc, #92]	; (8006054 <TIM_OC3_SetConfig+0xe4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC3_SetConfig+0x92>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <TIM_OC3_SetConfig+0xe8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d113      	bne.n	800602a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	fffeff8f 	.word	0xfffeff8f
 8006054:	40010000 	.word	0x40010000
 8006058:	40010400 	.word	0x40010400

0800605c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <TIM_OC4_SetConfig+0xa4>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <TIM_OC4_SetConfig+0xa8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC4_SetConfig+0x68>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a12      	ldr	r2, [pc, #72]	; (8006108 <TIM_OC4_SetConfig+0xac>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	feff8fff 	.word	0xfeff8fff
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400

0800610c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4b1b      	ldr	r3, [pc, #108]	; (80061a4 <TIM_OC5_SetConfig+0x98>)
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800614c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a12      	ldr	r2, [pc, #72]	; (80061a8 <TIM_OC5_SetConfig+0x9c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC5_SetConfig+0x5e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a11      	ldr	r2, [pc, #68]	; (80061ac <TIM_OC5_SetConfig+0xa0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d109      	bne.n	800617e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	621a      	str	r2, [r3, #32]
}
 8006198:	bf00      	nop
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	fffeff8f 	.word	0xfffeff8f
 80061a8:	40010000 	.word	0x40010000
 80061ac:	40010400 	.word	0x40010400

080061b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4b1c      	ldr	r3, [pc, #112]	; (800624c <TIM_OC6_SetConfig+0x9c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	051b      	lsls	r3, r3, #20
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a13      	ldr	r2, [pc, #76]	; (8006250 <TIM_OC6_SetConfig+0xa0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d003      	beq.n	8006210 <TIM_OC6_SetConfig+0x60>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a12      	ldr	r2, [pc, #72]	; (8006254 <TIM_OC6_SetConfig+0xa4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d109      	bne.n	8006224 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	029b      	lsls	r3, r3, #10
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	feff8fff 	.word	0xfeff8fff
 8006250:	40010000 	.word	0x40010000
 8006254:	40010400 	.word	0x40010400

08006258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 030a 	bic.w	r3, r3, #10
 8006294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0210 	bic.w	r2, r3, #16
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	f043 0307 	orr.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a1a      	ldr	r2, [r3, #32]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	fa01 f303 	lsl.w	r3, r1, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e06d      	b.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a2f      	ldr	r2, [pc, #188]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d108      	bne.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800642a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d022      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006462:	d01d      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00e      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a16      	ldr	r2, [pc, #88]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10c      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40010400 	.word	0x40010400
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40001800 	.word	0x40001800

080064f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e040      	b.n	80065c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fb fca6 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	; 0x24
 800655c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fa56 	bl	8006a20 <UART_SetConfig>
 8006574:	4603      	mov	r3, r0
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e022      	b.n	80065c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fcac 	bl	8006ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800659a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fd33 	bl	8007028 <UART_CheckIdleState>
 80065c2:	4603      	mov	r3, r0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80065f2:	4013      	ands	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d113      	bne.n	8006624 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00e      	beq.n	8006624 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d009      	beq.n	8006624 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 81cc 	beq.w	80069b2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	4798      	blx	r3
      }
      return;
 8006622:	e1c6      	b.n	80069b2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80e3 	beq.w	80067f2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d105      	bne.n	8006642 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4ba5      	ldr	r3, [pc, #660]	; (80068d0 <HAL_UART_IRQHandler+0x304>)
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80d8 	beq.w	80067f2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d010      	beq.n	800666e <HAL_UART_IRQHandler+0xa2>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2201      	movs	r2, #1
 800665c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006664:	f043 0201 	orr.w	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_UART_IRQHandler+0xce>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2202      	movs	r2, #2
 8006688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006690:	f043 0204 	orr.w	r2, r3, #4
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d010      	beq.n	80066c6 <HAL_UART_IRQHandler+0xfa>
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066bc:	f043 0202 	orr.w	r2, r3, #2
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <HAL_UART_IRQHandler+0x15e>
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00c      	beq.n	800672a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 8140 	beq.w	80069b6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006760:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d004      	beq.n	800677a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006776:	2b00      	cmp	r3, #0
 8006778:	d031      	beq.n	80067de <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fd19 	bl	80071b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d123      	bne.n	80067d6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067aa:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <HAL_UART_IRQHandler+0x308>)
 80067ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fc fd1a 	bl	80031ec <HAL_DMA_Abort_IT>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d017      	beq.n	80067ee <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067c8:	4610      	mov	r0, r2
 80067ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067cc:	e00f      	b.n	80067ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f906 	bl	80069e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	e00b      	b.n	80067ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f902 	bl	80069e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	e007      	b.n	80067ee <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f8fe 	bl	80069e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067ec:	e0e3      	b.n	80069b6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	bf00      	nop
    return;
 80067f0:	e0e1      	b.n	80069b6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	f040 80a7 	bne.w	800694a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 80a1 	beq.w	800694a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 809b 	beq.w	800694a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2210      	movs	r2, #16
 800681a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d156      	bne.n	80068d8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 80bf 	beq.w	80069ba <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006842:	893a      	ldrh	r2, [r7, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	f080 80b8 	bcs.w	80069ba <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	893a      	ldrh	r2, [r7, #8]
 800684e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	69db      	ldr	r3, [r3, #28]
 8006858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685c:	d02a      	beq.n	80068b4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800686c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	689a      	ldr	r2, [r3, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0210 	bic.w	r2, r2, #16
 80068a8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc fc2c 	bl	800310c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f893 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ce:	e074      	b.n	80069ba <HAL_UART_IRQHandler+0x3ee>
 80068d0:	04000120 	.word	0x04000120
 80068d4:	08007211 	.word	0x08007211
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d063      	beq.n	80069be <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80068f6:	897b      	ldrh	r3, [r7, #10]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d060      	beq.n	80069be <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800690a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0210 	bic.w	r2, r2, #16
 800693c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800693e:	897b      	ldrh	r3, [r7, #10]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f856 	bl	80069f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006948:	e039      	b.n	80069be <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00d      	beq.n	8006970 <HAL_UART_IRQHandler+0x3a4>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d008      	beq.n	8006970 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006966:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f84f 	bl	8006a0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800696e:	e029      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01a      	beq.n	80069c2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
    }
    return;
 8006994:	e015      	b.n	80069c2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d011      	beq.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00c      	beq.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc46 	bl	800723c <UART_EndTransmit_IT>
    return;
 80069b0:	e008      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80069b2:	bf00      	nop
 80069b4:	e006      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80069b6:	bf00      	nop
 80069b8:	e004      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80069c2:	bf00      	nop
  }

}
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop

080069cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4ba7      	ldr	r3, [pc, #668]	; (8006ce8 <UART_SetConfig+0x2c8>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	6979      	ldr	r1, [r7, #20]
 8006a54:	430b      	orrs	r3, r1
 8006a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a1b      	ldr	r3, [r3, #32]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a95      	ldr	r2, [pc, #596]	; (8006cec <UART_SetConfig+0x2cc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d120      	bne.n	8006ade <UART_SetConfig+0xbe>
 8006a9c:	4b94      	ldr	r3, [pc, #592]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d816      	bhi.n	8006ad8 <UART_SetConfig+0xb8>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x90>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ac1 	.word	0x08006ac1
 8006ab4:	08006acd 	.word	0x08006acd
 8006ab8:	08006ac7 	.word	0x08006ac7
 8006abc:	08006ad3 	.word	0x08006ad3
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e14f      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e14c      	b.n	8006d66 <UART_SetConfig+0x346>
 8006acc:	2304      	movs	r3, #4
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e149      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	77fb      	strb	r3, [r7, #31]
 8006ad6:	e146      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	77fb      	strb	r3, [r7, #31]
 8006adc:	e143      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a84      	ldr	r2, [pc, #528]	; (8006cf4 <UART_SetConfig+0x2d4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d132      	bne.n	8006b4e <UART_SetConfig+0x12e>
 8006ae8:	4b81      	ldr	r3, [pc, #516]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d828      	bhi.n	8006b48 <UART_SetConfig+0x128>
 8006af6:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <UART_SetConfig+0xdc>)
 8006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b49 	.word	0x08006b49
 8006b04:	08006b49 	.word	0x08006b49
 8006b08:	08006b49 	.word	0x08006b49
 8006b0c:	08006b3d 	.word	0x08006b3d
 8006b10:	08006b49 	.word	0x08006b49
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b37 	.word	0x08006b37
 8006b20:	08006b49 	.word	0x08006b49
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b49 	.word	0x08006b49
 8006b2c:	08006b43 	.word	0x08006b43
 8006b30:	2300      	movs	r3, #0
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e117      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b36:	2302      	movs	r3, #2
 8006b38:	77fb      	strb	r3, [r7, #31]
 8006b3a:	e114      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e111      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b42:	2308      	movs	r3, #8
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e10e      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e10b      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a69      	ldr	r2, [pc, #420]	; (8006cf8 <UART_SetConfig+0x2d8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d120      	bne.n	8006b9a <UART_SetConfig+0x17a>
 8006b58:	4b65      	ldr	r3, [pc, #404]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b62:	2b30      	cmp	r3, #48	; 0x30
 8006b64:	d013      	beq.n	8006b8e <UART_SetConfig+0x16e>
 8006b66:	2b30      	cmp	r3, #48	; 0x30
 8006b68:	d814      	bhi.n	8006b94 <UART_SetConfig+0x174>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x162>
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d810      	bhi.n	8006b94 <UART_SetConfig+0x174>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <UART_SetConfig+0x15c>
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d006      	beq.n	8006b88 <UART_SetConfig+0x168>
 8006b7a:	e00b      	b.n	8006b94 <UART_SetConfig+0x174>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e0f1      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b82:	2302      	movs	r3, #2
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e0ee      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	77fb      	strb	r3, [r7, #31]
 8006b8c:	e0eb      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b8e:	2308      	movs	r3, #8
 8006b90:	77fb      	strb	r3, [r7, #31]
 8006b92:	e0e8      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b94:	2310      	movs	r3, #16
 8006b96:	77fb      	strb	r3, [r7, #31]
 8006b98:	e0e5      	b.n	8006d66 <UART_SetConfig+0x346>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a57      	ldr	r2, [pc, #348]	; (8006cfc <UART_SetConfig+0x2dc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d120      	bne.n	8006be6 <UART_SetConfig+0x1c6>
 8006ba4:	4b52      	ldr	r3, [pc, #328]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bae:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb0:	d013      	beq.n	8006bda <UART_SetConfig+0x1ba>
 8006bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006bb4:	d814      	bhi.n	8006be0 <UART_SetConfig+0x1c0>
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d009      	beq.n	8006bce <UART_SetConfig+0x1ae>
 8006bba:	2b80      	cmp	r3, #128	; 0x80
 8006bbc:	d810      	bhi.n	8006be0 <UART_SetConfig+0x1c0>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <UART_SetConfig+0x1a8>
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	d006      	beq.n	8006bd4 <UART_SetConfig+0x1b4>
 8006bc6:	e00b      	b.n	8006be0 <UART_SetConfig+0x1c0>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e0cb      	b.n	8006d66 <UART_SetConfig+0x346>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	77fb      	strb	r3, [r7, #31]
 8006bd2:	e0c8      	b.n	8006d66 <UART_SetConfig+0x346>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e0c5      	b.n	8006d66 <UART_SetConfig+0x346>
 8006bda:	2308      	movs	r3, #8
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e0c2      	b.n	8006d66 <UART_SetConfig+0x346>
 8006be0:	2310      	movs	r3, #16
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e0bf      	b.n	8006d66 <UART_SetConfig+0x346>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a45      	ldr	r2, [pc, #276]	; (8006d00 <UART_SetConfig+0x2e0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d125      	bne.n	8006c3c <UART_SetConfig+0x21c>
 8006bf0:	4b3f      	ldr	r3, [pc, #252]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bfe:	d017      	beq.n	8006c30 <UART_SetConfig+0x210>
 8006c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c04:	d817      	bhi.n	8006c36 <UART_SetConfig+0x216>
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0a:	d00b      	beq.n	8006c24 <UART_SetConfig+0x204>
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c10:	d811      	bhi.n	8006c36 <UART_SetConfig+0x216>
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <UART_SetConfig+0x1fe>
 8006c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1a:	d006      	beq.n	8006c2a <UART_SetConfig+0x20a>
 8006c1c:	e00b      	b.n	8006c36 <UART_SetConfig+0x216>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e0a0      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c24:	2302      	movs	r3, #2
 8006c26:	77fb      	strb	r3, [r7, #31]
 8006c28:	e09d      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	77fb      	strb	r3, [r7, #31]
 8006c2e:	e09a      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c30:	2308      	movs	r3, #8
 8006c32:	77fb      	strb	r3, [r7, #31]
 8006c34:	e097      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c36:	2310      	movs	r3, #16
 8006c38:	77fb      	strb	r3, [r7, #31]
 8006c3a:	e094      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <UART_SetConfig+0x2e4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d125      	bne.n	8006c92 <UART_SetConfig+0x272>
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c54:	d017      	beq.n	8006c86 <UART_SetConfig+0x266>
 8006c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c5a:	d817      	bhi.n	8006c8c <UART_SetConfig+0x26c>
 8006c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c60:	d00b      	beq.n	8006c7a <UART_SetConfig+0x25a>
 8006c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c66:	d811      	bhi.n	8006c8c <UART_SetConfig+0x26c>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <UART_SetConfig+0x254>
 8006c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c70:	d006      	beq.n	8006c80 <UART_SetConfig+0x260>
 8006c72:	e00b      	b.n	8006c8c <UART_SetConfig+0x26c>
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e075      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	77fb      	strb	r3, [r7, #31]
 8006c7e:	e072      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c80:	2304      	movs	r3, #4
 8006c82:	77fb      	strb	r3, [r7, #31]
 8006c84:	e06f      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c86:	2308      	movs	r3, #8
 8006c88:	77fb      	strb	r3, [r7, #31]
 8006c8a:	e06c      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c8c:	2310      	movs	r3, #16
 8006c8e:	77fb      	strb	r3, [r7, #31]
 8006c90:	e069      	b.n	8006d66 <UART_SetConfig+0x346>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	; (8006d08 <UART_SetConfig+0x2e8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d137      	bne.n	8006d0c <UART_SetConfig+0x2ec>
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <UART_SetConfig+0x2d0>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ca6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006caa:	d017      	beq.n	8006cdc <UART_SetConfig+0x2bc>
 8006cac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cb0:	d817      	bhi.n	8006ce2 <UART_SetConfig+0x2c2>
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d00b      	beq.n	8006cd0 <UART_SetConfig+0x2b0>
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	d811      	bhi.n	8006ce2 <UART_SetConfig+0x2c2>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <UART_SetConfig+0x2aa>
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d006      	beq.n	8006cd6 <UART_SetConfig+0x2b6>
 8006cc8:	e00b      	b.n	8006ce2 <UART_SetConfig+0x2c2>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e04a      	b.n	8006d66 <UART_SetConfig+0x346>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	77fb      	strb	r3, [r7, #31]
 8006cd4:	e047      	b.n	8006d66 <UART_SetConfig+0x346>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	77fb      	strb	r3, [r7, #31]
 8006cda:	e044      	b.n	8006d66 <UART_SetConfig+0x346>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e041      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e03e      	b.n	8006d66 <UART_SetConfig+0x346>
 8006ce8:	efff69f3 	.word	0xefff69f3
 8006cec:	40011000 	.word	0x40011000
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40004400 	.word	0x40004400
 8006cf8:	40004800 	.word	0x40004800
 8006cfc:	40004c00 	.word	0x40004c00
 8006d00:	40005000 	.word	0x40005000
 8006d04:	40011400 	.word	0x40011400
 8006d08:	40007800 	.word	0x40007800
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a71      	ldr	r2, [pc, #452]	; (8006ed8 <UART_SetConfig+0x4b8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d125      	bne.n	8006d62 <UART_SetConfig+0x342>
 8006d16:	4b71      	ldr	r3, [pc, #452]	; (8006edc <UART_SetConfig+0x4bc>)
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d24:	d017      	beq.n	8006d56 <UART_SetConfig+0x336>
 8006d26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d2a:	d817      	bhi.n	8006d5c <UART_SetConfig+0x33c>
 8006d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d30:	d00b      	beq.n	8006d4a <UART_SetConfig+0x32a>
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	d811      	bhi.n	8006d5c <UART_SetConfig+0x33c>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <UART_SetConfig+0x324>
 8006d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d40:	d006      	beq.n	8006d50 <UART_SetConfig+0x330>
 8006d42:	e00b      	b.n	8006d5c <UART_SetConfig+0x33c>
 8006d44:	2300      	movs	r3, #0
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e00d      	b.n	8006d66 <UART_SetConfig+0x346>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e00a      	b.n	8006d66 <UART_SetConfig+0x346>
 8006d50:	2304      	movs	r3, #4
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e007      	b.n	8006d66 <UART_SetConfig+0x346>
 8006d56:	2308      	movs	r3, #8
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e004      	b.n	8006d66 <UART_SetConfig+0x346>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e001      	b.n	8006d66 <UART_SetConfig+0x346>
 8006d62:	2310      	movs	r3, #16
 8006d64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6e:	d15b      	bne.n	8006e28 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006d70:	7ffb      	ldrb	r3, [r7, #31]
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d827      	bhi.n	8006dc6 <UART_SetConfig+0x3a6>
 8006d76:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x35c>)
 8006d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006dc7 	.word	0x08006dc7
 8006d8c:	08006db7 	.word	0x08006db7
 8006d90:	08006dc7 	.word	0x08006dc7
 8006d94:	08006dc7 	.word	0x08006dc7
 8006d98:	08006dc7 	.word	0x08006dc7
 8006d9c:	08006dbf 	.word	0x08006dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fd fb54 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8006da4:	61b8      	str	r0, [r7, #24]
        break;
 8006da6:	e013      	b.n	8006dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da8:	f7fd fb64 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006dac:	61b8      	str	r0, [r7, #24]
        break;
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <UART_SetConfig+0x4c0>)
 8006db2:	61bb      	str	r3, [r7, #24]
        break;
 8006db4:	e00c      	b.n	8006dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db6:	f7fd fa87 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006dba:	61b8      	str	r0, [r7, #24]
        break;
 8006dbc:	e008      	b.n	8006dd0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc2:	61bb      	str	r3, [r7, #24]
        break;
 8006dc4:	e004      	b.n	8006dd0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8006dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d074      	beq.n	8006ec0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	005a      	lsls	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b0f      	cmp	r3, #15
 8006df2:	d916      	bls.n	8006e22 <UART_SetConfig+0x402>
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfa:	d212      	bcs.n	8006e22 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f023 030f 	bic.w	r3, r3, #15
 8006e04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	085b      	lsrs	r3, r3, #1
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	89fb      	ldrh	r3, [r7, #14]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	89fa      	ldrh	r2, [r7, #14]
 8006e1e:	60da      	str	r2, [r3, #12]
 8006e20:	e04e      	b.n	8006ec0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	77bb      	strb	r3, [r7, #30]
 8006e26:	e04b      	b.n	8006ec0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d827      	bhi.n	8006e7e <UART_SetConfig+0x45e>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x414>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fd faf8 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8006e5c:	61b8      	str	r0, [r7, #24]
        break;
 8006e5e:	e013      	b.n	8006e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fd fb08 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006e64:	61b8      	str	r0, [r7, #24]
        break;
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <UART_SetConfig+0x4c0>)
 8006e6a:	61bb      	str	r3, [r7, #24]
        break;
 8006e6c:	e00c      	b.n	8006e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fd fa2b 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006e72:	61b8      	str	r0, [r7, #24]
        break;
 8006e74:	e008      	b.n	8006e88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	61bb      	str	r3, [r7, #24]
        break;
 8006e7c:	e004      	b.n	8006e88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	77bb      	strb	r3, [r7, #30]
        break;
 8006e86:	bf00      	nop
    }

    if (pclk != 0U)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	085a      	lsrs	r2, r3, #1
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	441a      	add	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d908      	bls.n	8006ebc <UART_SetConfig+0x49c>
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb0:	d204      	bcs.n	8006ebc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	e001      	b.n	8006ec0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40007c00 	.word	0x40007c00
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	00f42400 	.word	0x00f42400

08006ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f003 0308 	and.w	r3, r3, #8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	f003 0310 	and.w	r3, r3, #16
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fe2:	d10a      	bne.n	8006ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af02      	add	r7, sp, #8
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007038:	f7fb f846 	bl	80020c8 <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0308 	and.w	r3, r3, #8
 8007048:	2b08      	cmp	r3, #8
 800704a:	d10e      	bne.n	800706a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800704c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f82d 	bl	80070ba <UART_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e023      	b.n	80070b2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b04      	cmp	r3, #4
 8007076:	d10e      	bne.n	8007096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f817 	bl	80070ba <UART_WaitOnFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e00d      	b.n	80070b2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	4613      	mov	r3, r2
 80070c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ca:	e05e      	b.n	800718a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d05a      	beq.n	800718a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d4:	f7fa fff8 	bl	80020c8 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <UART_WaitOnFlagUntilTimeout+0x30>
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d11b      	bne.n	8007122 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e043      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02c      	beq.n	800718a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800713a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713e:	d124      	bne.n	800718a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007148:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007158:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0201 	bic.w	r2, r2, #1
 8007168:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e00f      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	4013      	ands	r3, r2
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	429a      	cmp	r2, r3
 8007198:	bf0c      	ite	eq
 800719a:	2301      	moveq	r3, #1
 800719c:	2300      	movne	r3, #0
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d091      	beq.n	80070cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80071c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0210 	bic.w	r2, r2, #16
 80071f0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2220      	movs	r2, #32
 80071f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff fbd6 	bl	80069e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007234:	bf00      	nop
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007252:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7ff fbb3 	bl	80069cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <__errno>:
 8007270:	4b01      	ldr	r3, [pc, #4]	; (8007278 <__errno+0x8>)
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000068 	.word	0x20000068

0800727c <__libc_init_array>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4d0d      	ldr	r5, [pc, #52]	; (80072b4 <__libc_init_array+0x38>)
 8007280:	4c0d      	ldr	r4, [pc, #52]	; (80072b8 <__libc_init_array+0x3c>)
 8007282:	1b64      	subs	r4, r4, r5
 8007284:	10a4      	asrs	r4, r4, #2
 8007286:	2600      	movs	r6, #0
 8007288:	42a6      	cmp	r6, r4
 800728a:	d109      	bne.n	80072a0 <__libc_init_array+0x24>
 800728c:	4d0b      	ldr	r5, [pc, #44]	; (80072bc <__libc_init_array+0x40>)
 800728e:	4c0c      	ldr	r4, [pc, #48]	; (80072c0 <__libc_init_array+0x44>)
 8007290:	f002 fc60 	bl	8009b54 <_init>
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	2600      	movs	r6, #0
 800729a:	42a6      	cmp	r6, r4
 800729c:	d105      	bne.n	80072aa <__libc_init_array+0x2e>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a4:	4798      	blx	r3
 80072a6:	3601      	adds	r6, #1
 80072a8:	e7ee      	b.n	8007288 <__libc_init_array+0xc>
 80072aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ae:	4798      	blx	r3
 80072b0:	3601      	adds	r6, #1
 80072b2:	e7f2      	b.n	800729a <__libc_init_array+0x1e>
 80072b4:	08009f84 	.word	0x08009f84
 80072b8:	08009f84 	.word	0x08009f84
 80072bc:	08009f84 	.word	0x08009f84
 80072c0:	08009f88 	.word	0x08009f88

080072c4 <malloc>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <malloc+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f000 b85b 	b.w	8007384 <_malloc_r>
 80072ce:	bf00      	nop
 80072d0:	20000068 	.word	0x20000068

080072d4 <memset>:
 80072d4:	4402      	add	r2, r0
 80072d6:	4603      	mov	r3, r0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <memset+0xa>
 80072dc:	4770      	bx	lr
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <memset+0x4>

080072e4 <_free_r>:
 80072e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072e6:	2900      	cmp	r1, #0
 80072e8:	d048      	beq.n	800737c <_free_r+0x98>
 80072ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ee:	9001      	str	r0, [sp, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f1a1 0404 	sub.w	r4, r1, #4
 80072f6:	bfb8      	it	lt
 80072f8:	18e4      	addlt	r4, r4, r3
 80072fa:	f001 fb11 	bl	8008920 <__malloc_lock>
 80072fe:	4a20      	ldr	r2, [pc, #128]	; (8007380 <_free_r+0x9c>)
 8007300:	9801      	ldr	r0, [sp, #4]
 8007302:	6813      	ldr	r3, [r2, #0]
 8007304:	4615      	mov	r5, r2
 8007306:	b933      	cbnz	r3, 8007316 <_free_r+0x32>
 8007308:	6063      	str	r3, [r4, #4]
 800730a:	6014      	str	r4, [r2, #0]
 800730c:	b003      	add	sp, #12
 800730e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007312:	f001 bb0b 	b.w	800892c <__malloc_unlock>
 8007316:	42a3      	cmp	r3, r4
 8007318:	d90b      	bls.n	8007332 <_free_r+0x4e>
 800731a:	6821      	ldr	r1, [r4, #0]
 800731c:	1862      	adds	r2, r4, r1
 800731e:	4293      	cmp	r3, r2
 8007320:	bf04      	itt	eq
 8007322:	681a      	ldreq	r2, [r3, #0]
 8007324:	685b      	ldreq	r3, [r3, #4]
 8007326:	6063      	str	r3, [r4, #4]
 8007328:	bf04      	itt	eq
 800732a:	1852      	addeq	r2, r2, r1
 800732c:	6022      	streq	r2, [r4, #0]
 800732e:	602c      	str	r4, [r5, #0]
 8007330:	e7ec      	b.n	800730c <_free_r+0x28>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x58>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x4e>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1855      	adds	r5, r2, r1
 8007340:	42a5      	cmp	r5, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x78>
 8007344:	6824      	ldr	r4, [r4, #0]
 8007346:	4421      	add	r1, r4
 8007348:	1854      	adds	r4, r2, r1
 800734a:	42a3      	cmp	r3, r4
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1dd      	bne.n	800730c <_free_r+0x28>
 8007350:	681c      	ldr	r4, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4421      	add	r1, r4
 8007358:	6011      	str	r1, [r2, #0]
 800735a:	e7d7      	b.n	800730c <_free_r+0x28>
 800735c:	d902      	bls.n	8007364 <_free_r+0x80>
 800735e:	230c      	movs	r3, #12
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	e7d3      	b.n	800730c <_free_r+0x28>
 8007364:	6825      	ldr	r5, [r4, #0]
 8007366:	1961      	adds	r1, r4, r5
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1949      	addeq	r1, r1, r5
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7c7      	b.n	800730c <_free_r+0x28>
 800737c:	b003      	add	sp, #12
 800737e:	bd30      	pop	{r4, r5, pc}
 8007380:	20000288 	.word	0x20000288

08007384 <_malloc_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	1ccd      	adds	r5, r1, #3
 8007388:	f025 0503 	bic.w	r5, r5, #3
 800738c:	3508      	adds	r5, #8
 800738e:	2d0c      	cmp	r5, #12
 8007390:	bf38      	it	cc
 8007392:	250c      	movcc	r5, #12
 8007394:	2d00      	cmp	r5, #0
 8007396:	4606      	mov	r6, r0
 8007398:	db01      	blt.n	800739e <_malloc_r+0x1a>
 800739a:	42a9      	cmp	r1, r5
 800739c:	d903      	bls.n	80073a6 <_malloc_r+0x22>
 800739e:	230c      	movs	r3, #12
 80073a0:	6033      	str	r3, [r6, #0]
 80073a2:	2000      	movs	r0, #0
 80073a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a6:	f001 fabb 	bl	8008920 <__malloc_lock>
 80073aa:	4921      	ldr	r1, [pc, #132]	; (8007430 <_malloc_r+0xac>)
 80073ac:	680a      	ldr	r2, [r1, #0]
 80073ae:	4614      	mov	r4, r2
 80073b0:	b99c      	cbnz	r4, 80073da <_malloc_r+0x56>
 80073b2:	4f20      	ldr	r7, [pc, #128]	; (8007434 <_malloc_r+0xb0>)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	b923      	cbnz	r3, 80073c2 <_malloc_r+0x3e>
 80073b8:	4621      	mov	r1, r4
 80073ba:	4630      	mov	r0, r6
 80073bc:	f000 fc7e 	bl	8007cbc <_sbrk_r>
 80073c0:	6038      	str	r0, [r7, #0]
 80073c2:	4629      	mov	r1, r5
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 fc79 	bl	8007cbc <_sbrk_r>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d123      	bne.n	8007416 <_malloc_r+0x92>
 80073ce:	230c      	movs	r3, #12
 80073d0:	6033      	str	r3, [r6, #0]
 80073d2:	4630      	mov	r0, r6
 80073d4:	f001 faaa 	bl	800892c <__malloc_unlock>
 80073d8:	e7e3      	b.n	80073a2 <_malloc_r+0x1e>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	1b5b      	subs	r3, r3, r5
 80073de:	d417      	bmi.n	8007410 <_malloc_r+0x8c>
 80073e0:	2b0b      	cmp	r3, #11
 80073e2:	d903      	bls.n	80073ec <_malloc_r+0x68>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	441c      	add	r4, r3
 80073e8:	6025      	str	r5, [r4, #0]
 80073ea:	e004      	b.n	80073f6 <_malloc_r+0x72>
 80073ec:	6863      	ldr	r3, [r4, #4]
 80073ee:	42a2      	cmp	r2, r4
 80073f0:	bf0c      	ite	eq
 80073f2:	600b      	streq	r3, [r1, #0]
 80073f4:	6053      	strne	r3, [r2, #4]
 80073f6:	4630      	mov	r0, r6
 80073f8:	f001 fa98 	bl	800892c <__malloc_unlock>
 80073fc:	f104 000b 	add.w	r0, r4, #11
 8007400:	1d23      	adds	r3, r4, #4
 8007402:	f020 0007 	bic.w	r0, r0, #7
 8007406:	1ac2      	subs	r2, r0, r3
 8007408:	d0cc      	beq.n	80073a4 <_malloc_r+0x20>
 800740a:	1a1b      	subs	r3, r3, r0
 800740c:	50a3      	str	r3, [r4, r2]
 800740e:	e7c9      	b.n	80073a4 <_malloc_r+0x20>
 8007410:	4622      	mov	r2, r4
 8007412:	6864      	ldr	r4, [r4, #4]
 8007414:	e7cc      	b.n	80073b0 <_malloc_r+0x2c>
 8007416:	1cc4      	adds	r4, r0, #3
 8007418:	f024 0403 	bic.w	r4, r4, #3
 800741c:	42a0      	cmp	r0, r4
 800741e:	d0e3      	beq.n	80073e8 <_malloc_r+0x64>
 8007420:	1a21      	subs	r1, r4, r0
 8007422:	4630      	mov	r0, r6
 8007424:	f000 fc4a 	bl	8007cbc <_sbrk_r>
 8007428:	3001      	adds	r0, #1
 800742a:	d1dd      	bne.n	80073e8 <_malloc_r+0x64>
 800742c:	e7cf      	b.n	80073ce <_malloc_r+0x4a>
 800742e:	bf00      	nop
 8007430:	20000288 	.word	0x20000288
 8007434:	2000028c 	.word	0x2000028c

08007438 <__cvt>:
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743a:	ed2d 8b02 	vpush	{d8}
 800743e:	eeb0 8b40 	vmov.f64	d8, d0
 8007442:	b085      	sub	sp, #20
 8007444:	4617      	mov	r7, r2
 8007446:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007448:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800744a:	ee18 2a90 	vmov	r2, s17
 800744e:	f025 0520 	bic.w	r5, r5, #32
 8007452:	2a00      	cmp	r2, #0
 8007454:	bfb6      	itet	lt
 8007456:	222d      	movlt	r2, #45	; 0x2d
 8007458:	2200      	movge	r2, #0
 800745a:	eeb1 8b40 	vneglt.f64	d8, d0
 800745e:	2d46      	cmp	r5, #70	; 0x46
 8007460:	460c      	mov	r4, r1
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	d004      	beq.n	8007470 <__cvt+0x38>
 8007466:	2d45      	cmp	r5, #69	; 0x45
 8007468:	d100      	bne.n	800746c <__cvt+0x34>
 800746a:	3401      	adds	r4, #1
 800746c:	2102      	movs	r1, #2
 800746e:	e000      	b.n	8007472 <__cvt+0x3a>
 8007470:	2103      	movs	r1, #3
 8007472:	ab03      	add	r3, sp, #12
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	ab02      	add	r3, sp, #8
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4622      	mov	r2, r4
 800747c:	4633      	mov	r3, r6
 800747e:	eeb0 0b48 	vmov.f64	d0, d8
 8007482:	f000 fcb9 	bl	8007df8 <_dtoa_r>
 8007486:	2d47      	cmp	r5, #71	; 0x47
 8007488:	d109      	bne.n	800749e <__cvt+0x66>
 800748a:	07fb      	lsls	r3, r7, #31
 800748c:	d407      	bmi.n	800749e <__cvt+0x66>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007492:	1a1b      	subs	r3, r3, r0
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	b005      	add	sp, #20
 8007498:	ecbd 8b02 	vpop	{d8}
 800749c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800749e:	2d46      	cmp	r5, #70	; 0x46
 80074a0:	eb00 0204 	add.w	r2, r0, r4
 80074a4:	d10c      	bne.n	80074c0 <__cvt+0x88>
 80074a6:	7803      	ldrb	r3, [r0, #0]
 80074a8:	2b30      	cmp	r3, #48	; 0x30
 80074aa:	d107      	bne.n	80074bc <__cvt+0x84>
 80074ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	bf1c      	itt	ne
 80074b6:	f1c4 0401 	rsbne	r4, r4, #1
 80074ba:	6034      	strne	r4, [r6, #0]
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	441a      	add	r2, r3
 80074c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	bf08      	it	eq
 80074ca:	9203      	streq	r2, [sp, #12]
 80074cc:	2130      	movs	r1, #48	; 0x30
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d2dc      	bcs.n	800748e <__cvt+0x56>
 80074d4:	1c5c      	adds	r4, r3, #1
 80074d6:	9403      	str	r4, [sp, #12]
 80074d8:	7019      	strb	r1, [r3, #0]
 80074da:	e7f8      	b.n	80074ce <__cvt+0x96>

080074dc <__exponent>:
 80074dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074de:	4603      	mov	r3, r0
 80074e0:	2900      	cmp	r1, #0
 80074e2:	bfb8      	it	lt
 80074e4:	4249      	neglt	r1, r1
 80074e6:	f803 2b02 	strb.w	r2, [r3], #2
 80074ea:	bfb4      	ite	lt
 80074ec:	222d      	movlt	r2, #45	; 0x2d
 80074ee:	222b      	movge	r2, #43	; 0x2b
 80074f0:	2909      	cmp	r1, #9
 80074f2:	7042      	strb	r2, [r0, #1]
 80074f4:	dd2a      	ble.n	800754c <__exponent+0x70>
 80074f6:	f10d 0407 	add.w	r4, sp, #7
 80074fa:	46a4      	mov	ip, r4
 80074fc:	270a      	movs	r7, #10
 80074fe:	46a6      	mov	lr, r4
 8007500:	460a      	mov	r2, r1
 8007502:	fb91 f6f7 	sdiv	r6, r1, r7
 8007506:	fb07 1516 	mls	r5, r7, r6, r1
 800750a:	3530      	adds	r5, #48	; 0x30
 800750c:	2a63      	cmp	r2, #99	; 0x63
 800750e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007516:	4631      	mov	r1, r6
 8007518:	dcf1      	bgt.n	80074fe <__exponent+0x22>
 800751a:	3130      	adds	r1, #48	; 0x30
 800751c:	f1ae 0502 	sub.w	r5, lr, #2
 8007520:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007524:	1c44      	adds	r4, r0, #1
 8007526:	4629      	mov	r1, r5
 8007528:	4561      	cmp	r1, ip
 800752a:	d30a      	bcc.n	8007542 <__exponent+0x66>
 800752c:	f10d 0209 	add.w	r2, sp, #9
 8007530:	eba2 020e 	sub.w	r2, r2, lr
 8007534:	4565      	cmp	r5, ip
 8007536:	bf88      	it	hi
 8007538:	2200      	movhi	r2, #0
 800753a:	4413      	add	r3, r2
 800753c:	1a18      	subs	r0, r3, r0
 800753e:	b003      	add	sp, #12
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007546:	f804 2f01 	strb.w	r2, [r4, #1]!
 800754a:	e7ed      	b.n	8007528 <__exponent+0x4c>
 800754c:	2330      	movs	r3, #48	; 0x30
 800754e:	3130      	adds	r1, #48	; 0x30
 8007550:	7083      	strb	r3, [r0, #2]
 8007552:	70c1      	strb	r1, [r0, #3]
 8007554:	1d03      	adds	r3, r0, #4
 8007556:	e7f1      	b.n	800753c <__exponent+0x60>

08007558 <_printf_float>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	b08b      	sub	sp, #44	; 0x2c
 800755e:	460c      	mov	r4, r1
 8007560:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007564:	4616      	mov	r6, r2
 8007566:	461f      	mov	r7, r3
 8007568:	4605      	mov	r5, r0
 800756a:	f001 f9c7 	bl	80088fc <_localeconv_r>
 800756e:	f8d0 b000 	ldr.w	fp, [r0]
 8007572:	4658      	mov	r0, fp
 8007574:	f7f8 fe64 	bl	8000240 <strlen>
 8007578:	2300      	movs	r3, #0
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	f8d8 3000 	ldr.w	r3, [r8]
 8007580:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	3307      	adds	r3, #7
 8007588:	f023 0307 	bic.w	r3, r3, #7
 800758c:	f103 0108 	add.w	r1, r3, #8
 8007590:	f8c8 1000 	str.w	r1, [r8]
 8007594:	4682      	mov	sl, r0
 8007596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800759a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800759e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007800 <_printf_float+0x2a8>
 80075a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80075a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80075aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	dd24      	ble.n	80075fe <_printf_float+0xa6>
 80075b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075bc:	d502      	bpl.n	80075c4 <_printf_float+0x6c>
 80075be:	232d      	movs	r3, #45	; 0x2d
 80075c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c4:	4b90      	ldr	r3, [pc, #576]	; (8007808 <_printf_float+0x2b0>)
 80075c6:	4891      	ldr	r0, [pc, #580]	; (800780c <_printf_float+0x2b4>)
 80075c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075cc:	bf94      	ite	ls
 80075ce:	4698      	movls	r8, r3
 80075d0:	4680      	movhi	r8, r0
 80075d2:	2303      	movs	r3, #3
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	f022 0204 	bic.w	r2, r2, #4
 80075da:	2300      	movs	r3, #0
 80075dc:	6022      	str	r2, [r4, #0]
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	9700      	str	r7, [sp, #0]
 80075e2:	4633      	mov	r3, r6
 80075e4:	aa09      	add	r2, sp, #36	; 0x24
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 f9d3 	bl	8007994 <_printf_common>
 80075ee:	3001      	adds	r0, #1
 80075f0:	f040 808a 	bne.w	8007708 <_printf_float+0x1b0>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295
 80075f8:	b00b      	add	sp, #44	; 0x2c
 80075fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8007602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007606:	d709      	bvc.n	800761c <_printf_float+0xc4>
 8007608:	ee10 3a90 	vmov	r3, s1
 800760c:	2b00      	cmp	r3, #0
 800760e:	bfbc      	itt	lt
 8007610:	232d      	movlt	r3, #45	; 0x2d
 8007612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007616:	487e      	ldr	r0, [pc, #504]	; (8007810 <_printf_float+0x2b8>)
 8007618:	4b7e      	ldr	r3, [pc, #504]	; (8007814 <_printf_float+0x2bc>)
 800761a:	e7d5      	b.n	80075c8 <_printf_float+0x70>
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007622:	9104      	str	r1, [sp, #16]
 8007624:	1c59      	adds	r1, r3, #1
 8007626:	d13c      	bne.n	80076a2 <_printf_float+0x14a>
 8007628:	2306      	movs	r3, #6
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	2300      	movs	r3, #0
 800762e:	9303      	str	r3, [sp, #12]
 8007630:	ab08      	add	r3, sp, #32
 8007632:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800763a:	ab07      	add	r3, sp, #28
 800763c:	6861      	ldr	r1, [r4, #4]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	6022      	str	r2, [r4, #0]
 8007642:	f10d 031b 	add.w	r3, sp, #27
 8007646:	4628      	mov	r0, r5
 8007648:	f7ff fef6 	bl	8007438 <__cvt>
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	9907      	ldr	r1, [sp, #28]
 8007650:	2b47      	cmp	r3, #71	; 0x47
 8007652:	4680      	mov	r8, r0
 8007654:	d108      	bne.n	8007668 <_printf_float+0x110>
 8007656:	1cc8      	adds	r0, r1, #3
 8007658:	db02      	blt.n	8007660 <_printf_float+0x108>
 800765a:	6863      	ldr	r3, [r4, #4]
 800765c:	4299      	cmp	r1, r3
 800765e:	dd41      	ble.n	80076e4 <_printf_float+0x18c>
 8007660:	f1a9 0902 	sub.w	r9, r9, #2
 8007664:	fa5f f989 	uxtb.w	r9, r9
 8007668:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800766c:	d820      	bhi.n	80076b0 <_printf_float+0x158>
 800766e:	3901      	subs	r1, #1
 8007670:	464a      	mov	r2, r9
 8007672:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007676:	9107      	str	r1, [sp, #28]
 8007678:	f7ff ff30 	bl	80074dc <__exponent>
 800767c:	9a08      	ldr	r2, [sp, #32]
 800767e:	9004      	str	r0, [sp, #16]
 8007680:	1813      	adds	r3, r2, r0
 8007682:	2a01      	cmp	r2, #1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	dc02      	bgt.n	800768e <_printf_float+0x136>
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	07d2      	lsls	r2, r2, #31
 800768c:	d501      	bpl.n	8007692 <_printf_float+0x13a>
 800768e:	3301      	adds	r3, #1
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0a2      	beq.n	80075e0 <_printf_float+0x88>
 800769a:	232d      	movs	r3, #45	; 0x2d
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a0:	e79e      	b.n	80075e0 <_printf_float+0x88>
 80076a2:	9904      	ldr	r1, [sp, #16]
 80076a4:	2947      	cmp	r1, #71	; 0x47
 80076a6:	d1c1      	bne.n	800762c <_printf_float+0xd4>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1bf      	bne.n	800762c <_printf_float+0xd4>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e7bc      	b.n	800762a <_printf_float+0xd2>
 80076b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80076b4:	d118      	bne.n	80076e8 <_printf_float+0x190>
 80076b6:	2900      	cmp	r1, #0
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	dd0b      	ble.n	80076d4 <_printf_float+0x17c>
 80076bc:	6121      	str	r1, [r4, #16]
 80076be:	b913      	cbnz	r3, 80076c6 <_printf_float+0x16e>
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	07d0      	lsls	r0, r2, #31
 80076c4:	d502      	bpl.n	80076cc <_printf_float+0x174>
 80076c6:	3301      	adds	r3, #1
 80076c8:	440b      	add	r3, r1
 80076ca:	6123      	str	r3, [r4, #16]
 80076cc:	2300      	movs	r3, #0
 80076ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	e7de      	b.n	8007692 <_printf_float+0x13a>
 80076d4:	b913      	cbnz	r3, 80076dc <_printf_float+0x184>
 80076d6:	6822      	ldr	r2, [r4, #0]
 80076d8:	07d2      	lsls	r2, r2, #31
 80076da:	d501      	bpl.n	80076e0 <_printf_float+0x188>
 80076dc:	3302      	adds	r3, #2
 80076de:	e7f4      	b.n	80076ca <_printf_float+0x172>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e7f2      	b.n	80076ca <_printf_float+0x172>
 80076e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	4299      	cmp	r1, r3
 80076ec:	db05      	blt.n	80076fa <_printf_float+0x1a2>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	6121      	str	r1, [r4, #16]
 80076f2:	07d8      	lsls	r0, r3, #31
 80076f4:	d5ea      	bpl.n	80076cc <_printf_float+0x174>
 80076f6:	1c4b      	adds	r3, r1, #1
 80076f8:	e7e7      	b.n	80076ca <_printf_float+0x172>
 80076fa:	2900      	cmp	r1, #0
 80076fc:	bfd4      	ite	le
 80076fe:	f1c1 0202 	rsble	r2, r1, #2
 8007702:	2201      	movgt	r2, #1
 8007704:	4413      	add	r3, r2
 8007706:	e7e0      	b.n	80076ca <_printf_float+0x172>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	055a      	lsls	r2, r3, #21
 800770c:	d407      	bmi.n	800771e <_printf_float+0x1c6>
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	4642      	mov	r2, r8
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	d12a      	bne.n	8007772 <_printf_float+0x21a>
 800771c:	e76a      	b.n	80075f4 <_printf_float+0x9c>
 800771e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007722:	f240 80e2 	bls.w	80078ea <_printf_float+0x392>
 8007726:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800772a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	d133      	bne.n	800779c <_printf_float+0x244>
 8007734:	4a38      	ldr	r2, [pc, #224]	; (8007818 <_printf_float+0x2c0>)
 8007736:	2301      	movs	r3, #1
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f af58 	beq.w	80075f4 <_printf_float+0x9c>
 8007744:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007748:	429a      	cmp	r2, r3
 800774a:	db02      	blt.n	8007752 <_printf_float+0x1fa>
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	07d8      	lsls	r0, r3, #31
 8007750:	d50f      	bpl.n	8007772 <_printf_float+0x21a>
 8007752:	4653      	mov	r3, sl
 8007754:	465a      	mov	r2, fp
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f af49 	beq.w	80075f4 <_printf_float+0x9c>
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	f104 091a 	add.w	r9, r4, #26
 800776a:	9b08      	ldr	r3, [sp, #32]
 800776c:	3b01      	subs	r3, #1
 800776e:	4543      	cmp	r3, r8
 8007770:	dc09      	bgt.n	8007786 <_printf_float+0x22e>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	079b      	lsls	r3, r3, #30
 8007776:	f100 8108 	bmi.w	800798a <_printf_float+0x432>
 800777a:	68e0      	ldr	r0, [r4, #12]
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	4298      	cmp	r0, r3
 8007780:	bfb8      	it	lt
 8007782:	4618      	movlt	r0, r3
 8007784:	e738      	b.n	80075f8 <_printf_float+0xa0>
 8007786:	2301      	movs	r3, #1
 8007788:	464a      	mov	r2, r9
 800778a:	4631      	mov	r1, r6
 800778c:	4628      	mov	r0, r5
 800778e:	47b8      	blx	r7
 8007790:	3001      	adds	r0, #1
 8007792:	f43f af2f 	beq.w	80075f4 <_printf_float+0x9c>
 8007796:	f108 0801 	add.w	r8, r8, #1
 800779a:	e7e6      	b.n	800776a <_printf_float+0x212>
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dc3c      	bgt.n	800781c <_printf_float+0x2c4>
 80077a2:	4a1d      	ldr	r2, [pc, #116]	; (8007818 <_printf_float+0x2c0>)
 80077a4:	2301      	movs	r3, #1
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f af21 	beq.w	80075f4 <_printf_float+0x9c>
 80077b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d102      	bne.n	80077c0 <_printf_float+0x268>
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	07d9      	lsls	r1, r3, #31
 80077be:	d5d8      	bpl.n	8007772 <_printf_float+0x21a>
 80077c0:	4653      	mov	r3, sl
 80077c2:	465a      	mov	r2, fp
 80077c4:	4631      	mov	r1, r6
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b8      	blx	r7
 80077ca:	3001      	adds	r0, #1
 80077cc:	f43f af12 	beq.w	80075f4 <_printf_float+0x9c>
 80077d0:	f04f 0900 	mov.w	r9, #0
 80077d4:	f104 0a1a 	add.w	sl, r4, #26
 80077d8:	9b07      	ldr	r3, [sp, #28]
 80077da:	425b      	negs	r3, r3
 80077dc:	454b      	cmp	r3, r9
 80077de:	dc01      	bgt.n	80077e4 <_printf_float+0x28c>
 80077e0:	9b08      	ldr	r3, [sp, #32]
 80077e2:	e795      	b.n	8007710 <_printf_float+0x1b8>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4652      	mov	r2, sl
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af00 	beq.w	80075f4 <_printf_float+0x9c>
 80077f4:	f109 0901 	add.w	r9, r9, #1
 80077f8:	e7ee      	b.n	80077d8 <_printf_float+0x280>
 80077fa:	bf00      	nop
 80077fc:	f3af 8000 	nop.w
 8007800:	ffffffff 	.word	0xffffffff
 8007804:	7fefffff 	.word	0x7fefffff
 8007808:	08009b9c 	.word	0x08009b9c
 800780c:	08009ba0 	.word	0x08009ba0
 8007810:	08009ba8 	.word	0x08009ba8
 8007814:	08009ba4 	.word	0x08009ba4
 8007818:	08009bac 	.word	0x08009bac
 800781c:	9a08      	ldr	r2, [sp, #32]
 800781e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007820:	429a      	cmp	r2, r3
 8007822:	bfa8      	it	ge
 8007824:	461a      	movge	r2, r3
 8007826:	2a00      	cmp	r2, #0
 8007828:	4691      	mov	r9, r2
 800782a:	dc38      	bgt.n	800789e <_printf_float+0x346>
 800782c:	2300      	movs	r3, #0
 800782e:	9305      	str	r3, [sp, #20]
 8007830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007834:	f104 021a 	add.w	r2, r4, #26
 8007838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800783a:	9905      	ldr	r1, [sp, #20]
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	eba3 0309 	sub.w	r3, r3, r9
 8007842:	428b      	cmp	r3, r1
 8007844:	dc33      	bgt.n	80078ae <_printf_float+0x356>
 8007846:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800784a:	429a      	cmp	r2, r3
 800784c:	db3c      	blt.n	80078c8 <_printf_float+0x370>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	07da      	lsls	r2, r3, #31
 8007852:	d439      	bmi.n	80078c8 <_printf_float+0x370>
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	9907      	ldr	r1, [sp, #28]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	eba2 0901 	sub.w	r9, r2, r1
 8007860:	4599      	cmp	r9, r3
 8007862:	bfa8      	it	ge
 8007864:	4699      	movge	r9, r3
 8007866:	f1b9 0f00 	cmp.w	r9, #0
 800786a:	dc35      	bgt.n	80078d8 <_printf_float+0x380>
 800786c:	f04f 0800 	mov.w	r8, #0
 8007870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007874:	f104 0a1a 	add.w	sl, r4, #26
 8007878:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	eba3 0309 	sub.w	r3, r3, r9
 8007882:	4543      	cmp	r3, r8
 8007884:	f77f af75 	ble.w	8007772 <_printf_float+0x21a>
 8007888:	2301      	movs	r3, #1
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f aeae 	beq.w	80075f4 <_printf_float+0x9c>
 8007898:	f108 0801 	add.w	r8, r8, #1
 800789c:	e7ec      	b.n	8007878 <_printf_float+0x320>
 800789e:	4613      	mov	r3, r2
 80078a0:	4631      	mov	r1, r6
 80078a2:	4642      	mov	r2, r8
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	d1bf      	bne.n	800782c <_printf_float+0x2d4>
 80078ac:	e6a2      	b.n	80075f4 <_printf_float+0x9c>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	9204      	str	r2, [sp, #16]
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae9b 	beq.w	80075f4 <_printf_float+0x9c>
 80078be:	9b05      	ldr	r3, [sp, #20]
 80078c0:	9a04      	ldr	r2, [sp, #16]
 80078c2:	3301      	adds	r3, #1
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	e7b7      	b.n	8007838 <_printf_float+0x2e0>
 80078c8:	4653      	mov	r3, sl
 80078ca:	465a      	mov	r2, fp
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	d1be      	bne.n	8007854 <_printf_float+0x2fc>
 80078d6:	e68d      	b.n	80075f4 <_printf_float+0x9c>
 80078d8:	9a04      	ldr	r2, [sp, #16]
 80078da:	464b      	mov	r3, r9
 80078dc:	4442      	add	r2, r8
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	d1c1      	bne.n	800786c <_printf_float+0x314>
 80078e8:	e684      	b.n	80075f4 <_printf_float+0x9c>
 80078ea:	9a08      	ldr	r2, [sp, #32]
 80078ec:	2a01      	cmp	r2, #1
 80078ee:	dc01      	bgt.n	80078f4 <_printf_float+0x39c>
 80078f0:	07db      	lsls	r3, r3, #31
 80078f2:	d537      	bpl.n	8007964 <_printf_float+0x40c>
 80078f4:	2301      	movs	r3, #1
 80078f6:	4642      	mov	r2, r8
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f ae78 	beq.w	80075f4 <_printf_float+0x9c>
 8007904:	4653      	mov	r3, sl
 8007906:	465a      	mov	r2, fp
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f ae70 	beq.w	80075f4 <_printf_float+0x9c>
 8007914:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007918:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	d01b      	beq.n	800795a <_printf_float+0x402>
 8007922:	9b08      	ldr	r3, [sp, #32]
 8007924:	f108 0201 	add.w	r2, r8, #1
 8007928:	3b01      	subs	r3, #1
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	d10e      	bne.n	8007952 <_printf_float+0x3fa>
 8007934:	e65e      	b.n	80075f4 <_printf_float+0x9c>
 8007936:	2301      	movs	r3, #1
 8007938:	464a      	mov	r2, r9
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	f43f ae57 	beq.w	80075f4 <_printf_float+0x9c>
 8007946:	f108 0801 	add.w	r8, r8, #1
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	3b01      	subs	r3, #1
 800794e:	4543      	cmp	r3, r8
 8007950:	dcf1      	bgt.n	8007936 <_printf_float+0x3de>
 8007952:	9b04      	ldr	r3, [sp, #16]
 8007954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007958:	e6db      	b.n	8007712 <_printf_float+0x1ba>
 800795a:	f04f 0800 	mov.w	r8, #0
 800795e:	f104 091a 	add.w	r9, r4, #26
 8007962:	e7f2      	b.n	800794a <_printf_float+0x3f2>
 8007964:	2301      	movs	r3, #1
 8007966:	4642      	mov	r2, r8
 8007968:	e7df      	b.n	800792a <_printf_float+0x3d2>
 800796a:	2301      	movs	r3, #1
 800796c:	464a      	mov	r2, r9
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	f43f ae3d 	beq.w	80075f4 <_printf_float+0x9c>
 800797a:	f108 0801 	add.w	r8, r8, #1
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	4543      	cmp	r3, r8
 8007986:	dcf0      	bgt.n	800796a <_printf_float+0x412>
 8007988:	e6f7      	b.n	800777a <_printf_float+0x222>
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	f104 0919 	add.w	r9, r4, #25
 8007992:	e7f4      	b.n	800797e <_printf_float+0x426>

08007994 <_printf_common>:
 8007994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	4616      	mov	r6, r2
 800799a:	4699      	mov	r9, r3
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	690b      	ldr	r3, [r1, #16]
 80079a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a4:	4293      	cmp	r3, r2
 80079a6:	bfb8      	it	lt
 80079a8:	4613      	movlt	r3, r2
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b0:	4607      	mov	r7, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	b10a      	cbz	r2, 80079ba <_printf_common+0x26>
 80079b6:	3301      	adds	r3, #1
 80079b8:	6033      	str	r3, [r6, #0]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	0699      	lsls	r1, r3, #26
 80079be:	bf42      	ittt	mi
 80079c0:	6833      	ldrmi	r3, [r6, #0]
 80079c2:	3302      	addmi	r3, #2
 80079c4:	6033      	strmi	r3, [r6, #0]
 80079c6:	6825      	ldr	r5, [r4, #0]
 80079c8:	f015 0506 	ands.w	r5, r5, #6
 80079cc:	d106      	bne.n	80079dc <_printf_common+0x48>
 80079ce:	f104 0a19 	add.w	sl, r4, #25
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	6832      	ldr	r2, [r6, #0]
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	42ab      	cmp	r3, r5
 80079da:	dc26      	bgt.n	8007a2a <_printf_common+0x96>
 80079dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e0:	1e13      	subs	r3, r2, #0
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	bf18      	it	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	0692      	lsls	r2, r2, #26
 80079ea:	d42b      	bmi.n	8007a44 <_printf_common+0xb0>
 80079ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f0:	4649      	mov	r1, r9
 80079f2:	4638      	mov	r0, r7
 80079f4:	47c0      	blx	r8
 80079f6:	3001      	adds	r0, #1
 80079f8:	d01e      	beq.n	8007a38 <_printf_common+0xa4>
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	68e5      	ldr	r5, [r4, #12]
 80079fe:	6832      	ldr	r2, [r6, #0]
 8007a00:	f003 0306 	and.w	r3, r3, #6
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	bf08      	it	eq
 8007a08:	1aad      	subeq	r5, r5, r2
 8007a0a:	68a3      	ldr	r3, [r4, #8]
 8007a0c:	6922      	ldr	r2, [r4, #16]
 8007a0e:	bf0c      	ite	eq
 8007a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a14:	2500      	movne	r5, #0
 8007a16:	4293      	cmp	r3, r2
 8007a18:	bfc4      	itt	gt
 8007a1a:	1a9b      	subgt	r3, r3, r2
 8007a1c:	18ed      	addgt	r5, r5, r3
 8007a1e:	2600      	movs	r6, #0
 8007a20:	341a      	adds	r4, #26
 8007a22:	42b5      	cmp	r5, r6
 8007a24:	d11a      	bne.n	8007a5c <_printf_common+0xc8>
 8007a26:	2000      	movs	r0, #0
 8007a28:	e008      	b.n	8007a3c <_printf_common+0xa8>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4652      	mov	r2, sl
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4638      	mov	r0, r7
 8007a32:	47c0      	blx	r8
 8007a34:	3001      	adds	r0, #1
 8007a36:	d103      	bne.n	8007a40 <_printf_common+0xac>
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	e7c6      	b.n	80079d2 <_printf_common+0x3e>
 8007a44:	18e1      	adds	r1, r4, r3
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	2030      	movs	r0, #48	; 0x30
 8007a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a4e:	4422      	add	r2, r4
 8007a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a58:	3302      	adds	r3, #2
 8007a5a:	e7c7      	b.n	80079ec <_printf_common+0x58>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4622      	mov	r2, r4
 8007a60:	4649      	mov	r1, r9
 8007a62:	4638      	mov	r0, r7
 8007a64:	47c0      	blx	r8
 8007a66:	3001      	adds	r0, #1
 8007a68:	d0e6      	beq.n	8007a38 <_printf_common+0xa4>
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7d9      	b.n	8007a22 <_printf_common+0x8e>
	...

08007a70 <_printf_i>:
 8007a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	460c      	mov	r4, r1
 8007a76:	4691      	mov	r9, r2
 8007a78:	7e27      	ldrb	r7, [r4, #24]
 8007a7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a7c:	2f78      	cmp	r7, #120	; 0x78
 8007a7e:	4680      	mov	r8, r0
 8007a80:	469a      	mov	sl, r3
 8007a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a86:	d807      	bhi.n	8007a98 <_printf_i+0x28>
 8007a88:	2f62      	cmp	r7, #98	; 0x62
 8007a8a:	d80a      	bhi.n	8007aa2 <_printf_i+0x32>
 8007a8c:	2f00      	cmp	r7, #0
 8007a8e:	f000 80d8 	beq.w	8007c42 <_printf_i+0x1d2>
 8007a92:	2f58      	cmp	r7, #88	; 0x58
 8007a94:	f000 80a3 	beq.w	8007bde <_printf_i+0x16e>
 8007a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa0:	e03a      	b.n	8007b18 <_printf_i+0xa8>
 8007aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aa6:	2b15      	cmp	r3, #21
 8007aa8:	d8f6      	bhi.n	8007a98 <_printf_i+0x28>
 8007aaa:	a001      	add	r0, pc, #4	; (adr r0, 8007ab0 <_printf_i+0x40>)
 8007aac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ab0:	08007b09 	.word	0x08007b09
 8007ab4:	08007b1d 	.word	0x08007b1d
 8007ab8:	08007a99 	.word	0x08007a99
 8007abc:	08007a99 	.word	0x08007a99
 8007ac0:	08007a99 	.word	0x08007a99
 8007ac4:	08007a99 	.word	0x08007a99
 8007ac8:	08007b1d 	.word	0x08007b1d
 8007acc:	08007a99 	.word	0x08007a99
 8007ad0:	08007a99 	.word	0x08007a99
 8007ad4:	08007a99 	.word	0x08007a99
 8007ad8:	08007a99 	.word	0x08007a99
 8007adc:	08007c29 	.word	0x08007c29
 8007ae0:	08007b4d 	.word	0x08007b4d
 8007ae4:	08007c0b 	.word	0x08007c0b
 8007ae8:	08007a99 	.word	0x08007a99
 8007aec:	08007a99 	.word	0x08007a99
 8007af0:	08007c4b 	.word	0x08007c4b
 8007af4:	08007a99 	.word	0x08007a99
 8007af8:	08007b4d 	.word	0x08007b4d
 8007afc:	08007a99 	.word	0x08007a99
 8007b00:	08007a99 	.word	0x08007a99
 8007b04:	08007c13 	.word	0x08007c13
 8007b08:	680b      	ldr	r3, [r1, #0]
 8007b0a:	1d1a      	adds	r2, r3, #4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	600a      	str	r2, [r1, #0]
 8007b10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0a3      	b.n	8007c64 <_printf_i+0x1f4>
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	6808      	ldr	r0, [r1, #0]
 8007b20:	062e      	lsls	r6, r5, #24
 8007b22:	f100 0304 	add.w	r3, r0, #4
 8007b26:	d50a      	bpl.n	8007b3e <_printf_i+0xce>
 8007b28:	6805      	ldr	r5, [r0, #0]
 8007b2a:	600b      	str	r3, [r1, #0]
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	da03      	bge.n	8007b38 <_printf_i+0xc8>
 8007b30:	232d      	movs	r3, #45	; 0x2d
 8007b32:	426d      	negs	r5, r5
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	485e      	ldr	r0, [pc, #376]	; (8007cb4 <_printf_i+0x244>)
 8007b3a:	230a      	movs	r3, #10
 8007b3c:	e019      	b.n	8007b72 <_printf_i+0x102>
 8007b3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b42:	6805      	ldr	r5, [r0, #0]
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	bf18      	it	ne
 8007b48:	b22d      	sxthne	r5, r5
 8007b4a:	e7ef      	b.n	8007b2c <_printf_i+0xbc>
 8007b4c:	680b      	ldr	r3, [r1, #0]
 8007b4e:	6825      	ldr	r5, [r4, #0]
 8007b50:	1d18      	adds	r0, r3, #4
 8007b52:	6008      	str	r0, [r1, #0]
 8007b54:	0628      	lsls	r0, r5, #24
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0xec>
 8007b58:	681d      	ldr	r5, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <_printf_i+0xf2>
 8007b5c:	0669      	lsls	r1, r5, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0xe8>
 8007b60:	881d      	ldrh	r5, [r3, #0]
 8007b62:	4854      	ldr	r0, [pc, #336]	; (8007cb4 <_printf_i+0x244>)
 8007b64:	2f6f      	cmp	r7, #111	; 0x6f
 8007b66:	bf0c      	ite	eq
 8007b68:	2308      	moveq	r3, #8
 8007b6a:	230a      	movne	r3, #10
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b72:	6866      	ldr	r6, [r4, #4]
 8007b74:	60a6      	str	r6, [r4, #8]
 8007b76:	2e00      	cmp	r6, #0
 8007b78:	bfa2      	ittt	ge
 8007b7a:	6821      	ldrge	r1, [r4, #0]
 8007b7c:	f021 0104 	bicge.w	r1, r1, #4
 8007b80:	6021      	strge	r1, [r4, #0]
 8007b82:	b90d      	cbnz	r5, 8007b88 <_printf_i+0x118>
 8007b84:	2e00      	cmp	r6, #0
 8007b86:	d04d      	beq.n	8007c24 <_printf_i+0x1b4>
 8007b88:	4616      	mov	r6, r2
 8007b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007b92:	5dc7      	ldrb	r7, [r0, r7]
 8007b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b98:	462f      	mov	r7, r5
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	d9f4      	bls.n	8007b8a <_printf_i+0x11a>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d10b      	bne.n	8007bbc <_printf_i+0x14c>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07df      	lsls	r7, r3, #31
 8007ba8:	d508      	bpl.n	8007bbc <_printf_i+0x14c>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	bfde      	ittt	le
 8007bb2:	2330      	movle	r3, #48	; 0x30
 8007bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bbc:	1b92      	subs	r2, r2, r6
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	aa03      	add	r2, sp, #12
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fee2 	bl	8007994 <_printf_common>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d14c      	bne.n	8007c6e <_printf_i+0x1fe>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b004      	add	sp, #16
 8007bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bde:	4835      	ldr	r0, [pc, #212]	; (8007cb4 <_printf_i+0x244>)
 8007be0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	680e      	ldr	r6, [r1, #0]
 8007be8:	061f      	lsls	r7, r3, #24
 8007bea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007bee:	600e      	str	r6, [r1, #0]
 8007bf0:	d514      	bpl.n	8007c1c <_printf_i+0x1ac>
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	bf44      	itt	mi
 8007bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfa:	6023      	strmi	r3, [r4, #0]
 8007bfc:	b91d      	cbnz	r5, 8007c06 <_printf_i+0x196>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	f023 0320 	bic.w	r3, r3, #32
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	2310      	movs	r3, #16
 8007c08:	e7b0      	b.n	8007b6c <_printf_i+0xfc>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f043 0320 	orr.w	r3, r3, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2378      	movs	r3, #120	; 0x78
 8007c14:	4828      	ldr	r0, [pc, #160]	; (8007cb8 <_printf_i+0x248>)
 8007c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1a:	e7e3      	b.n	8007be4 <_printf_i+0x174>
 8007c1c:	065e      	lsls	r6, r3, #25
 8007c1e:	bf48      	it	mi
 8007c20:	b2ad      	uxthmi	r5, r5
 8007c22:	e7e6      	b.n	8007bf2 <_printf_i+0x182>
 8007c24:	4616      	mov	r6, r2
 8007c26:	e7bb      	b.n	8007ba0 <_printf_i+0x130>
 8007c28:	680b      	ldr	r3, [r1, #0]
 8007c2a:	6826      	ldr	r6, [r4, #0]
 8007c2c:	6960      	ldr	r0, [r4, #20]
 8007c2e:	1d1d      	adds	r5, r3, #4
 8007c30:	600d      	str	r5, [r1, #0]
 8007c32:	0635      	lsls	r5, r6, #24
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	d501      	bpl.n	8007c3c <_printf_i+0x1cc>
 8007c38:	6018      	str	r0, [r3, #0]
 8007c3a:	e002      	b.n	8007c42 <_printf_i+0x1d2>
 8007c3c:	0671      	lsls	r1, r6, #25
 8007c3e:	d5fb      	bpl.n	8007c38 <_printf_i+0x1c8>
 8007c40:	8018      	strh	r0, [r3, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	4616      	mov	r6, r2
 8007c48:	e7ba      	b.n	8007bc0 <_printf_i+0x150>
 8007c4a:	680b      	ldr	r3, [r1, #0]
 8007c4c:	1d1a      	adds	r2, r3, #4
 8007c4e:	600a      	str	r2, [r1, #0]
 8007c50:	681e      	ldr	r6, [r3, #0]
 8007c52:	6862      	ldr	r2, [r4, #4]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7f8 fafa 	bl	8000250 <memchr>
 8007c5c:	b108      	cbz	r0, 8007c62 <_printf_i+0x1f2>
 8007c5e:	1b80      	subs	r0, r0, r6
 8007c60:	6060      	str	r0, [r4, #4]
 8007c62:	6863      	ldr	r3, [r4, #4]
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	2300      	movs	r3, #0
 8007c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c6c:	e7a8      	b.n	8007bc0 <_printf_i+0x150>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	4632      	mov	r2, r6
 8007c72:	4649      	mov	r1, r9
 8007c74:	4640      	mov	r0, r8
 8007c76:	47d0      	blx	sl
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d0ab      	beq.n	8007bd4 <_printf_i+0x164>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	079b      	lsls	r3, r3, #30
 8007c80:	d413      	bmi.n	8007caa <_printf_i+0x23a>
 8007c82:	68e0      	ldr	r0, [r4, #12]
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	4298      	cmp	r0, r3
 8007c88:	bfb8      	it	lt
 8007c8a:	4618      	movlt	r0, r3
 8007c8c:	e7a4      	b.n	8007bd8 <_printf_i+0x168>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d09b      	beq.n	8007bd4 <_printf_i+0x164>
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	9903      	ldr	r1, [sp, #12]
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	42ab      	cmp	r3, r5
 8007ca6:	dcf2      	bgt.n	8007c8e <_printf_i+0x21e>
 8007ca8:	e7eb      	b.n	8007c82 <_printf_i+0x212>
 8007caa:	2500      	movs	r5, #0
 8007cac:	f104 0619 	add.w	r6, r4, #25
 8007cb0:	e7f5      	b.n	8007c9e <_printf_i+0x22e>
 8007cb2:	bf00      	nop
 8007cb4:	08009bae 	.word	0x08009bae
 8007cb8:	08009bbf 	.word	0x08009bbf

08007cbc <_sbrk_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4d06      	ldr	r5, [pc, #24]	; (8007cd8 <_sbrk_r+0x1c>)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7f9 fdb6 	bl	8001838 <_sbrk>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_sbrk_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_sbrk_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	200007b8 	.word	0x200007b8

08007cdc <quorem>:
 8007cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	6903      	ldr	r3, [r0, #16]
 8007ce2:	690c      	ldr	r4, [r1, #16]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	f2c0 8081 	blt.w	8007dee <quorem+0x112>
 8007cec:	3c01      	subs	r4, #1
 8007cee:	f101 0814 	add.w	r8, r1, #20
 8007cf2:	f100 0514 	add.w	r5, r0, #20
 8007cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d04:	3301      	adds	r3, #1
 8007d06:	429a      	cmp	r2, r3
 8007d08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d14:	d331      	bcc.n	8007d7a <quorem+0x9e>
 8007d16:	f04f 0e00 	mov.w	lr, #0
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	46ac      	mov	ip, r5
 8007d1e:	46f2      	mov	sl, lr
 8007d20:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d24:	b293      	uxth	r3, r2
 8007d26:	fb06 e303 	mla	r3, r6, r3, lr
 8007d2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	ebaa 0303 	sub.w	r3, sl, r3
 8007d34:	0c12      	lsrs	r2, r2, #16
 8007d36:	f8dc a000 	ldr.w	sl, [ip]
 8007d3a:	fb06 e202 	mla	r2, r6, r2, lr
 8007d3e:	fa13 f38a 	uxtah	r3, r3, sl
 8007d42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d46:	fa1f fa82 	uxth.w	sl, r2
 8007d4a:	f8dc 2000 	ldr.w	r2, [ip]
 8007d4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d5c:	4581      	cmp	r9, r0
 8007d5e:	f84c 3b04 	str.w	r3, [ip], #4
 8007d62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d66:	d2db      	bcs.n	8007d20 <quorem+0x44>
 8007d68:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d6c:	b92b      	cbnz	r3, 8007d7a <quorem+0x9e>
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	3b04      	subs	r3, #4
 8007d72:	429d      	cmp	r5, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	d32e      	bcc.n	8007dd6 <quorem+0xfa>
 8007d78:	613c      	str	r4, [r7, #16]
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f001 f85a 	bl	8008e34 <__mcmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	db24      	blt.n	8007dce <quorem+0xf2>
 8007d84:	3601      	adds	r6, #1
 8007d86:	4628      	mov	r0, r5
 8007d88:	f04f 0c00 	mov.w	ip, #0
 8007d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d90:	f8d0 e000 	ldr.w	lr, [r0]
 8007d94:	b293      	uxth	r3, r2
 8007d96:	ebac 0303 	sub.w	r3, ip, r3
 8007d9a:	0c12      	lsrs	r2, r2, #16
 8007d9c:	fa13 f38e 	uxtah	r3, r3, lr
 8007da0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dae:	45c1      	cmp	r9, r8
 8007db0:	f840 3b04 	str.w	r3, [r0], #4
 8007db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007db8:	d2e8      	bcs.n	8007d8c <quorem+0xb0>
 8007dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc2:	b922      	cbnz	r2, 8007dce <quorem+0xf2>
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	d30a      	bcc.n	8007de2 <quorem+0x106>
 8007dcc:	613c      	str	r4, [r7, #16]
 8007dce:	4630      	mov	r0, r6
 8007dd0:	b003      	add	sp, #12
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d1cc      	bne.n	8007d78 <quorem+0x9c>
 8007dde:	3c01      	subs	r4, #1
 8007de0:	e7c7      	b.n	8007d72 <quorem+0x96>
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	3b04      	subs	r3, #4
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d1f0      	bne.n	8007dcc <quorem+0xf0>
 8007dea:	3c01      	subs	r4, #1
 8007dec:	e7eb      	b.n	8007dc6 <quorem+0xea>
 8007dee:	2000      	movs	r0, #0
 8007df0:	e7ee      	b.n	8007dd0 <quorem+0xf4>
 8007df2:	0000      	movs	r0, r0
 8007df4:	0000      	movs	r0, r0
	...

08007df8 <_dtoa_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	ec59 8b10 	vmov	r8, r9, d0
 8007e00:	b095      	sub	sp, #84	; 0x54
 8007e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007e06:	9107      	str	r1, [sp, #28]
 8007e08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e10:	9310      	str	r3, [sp, #64]	; 0x40
 8007e12:	b975      	cbnz	r5, 8007e32 <_dtoa_r+0x3a>
 8007e14:	2010      	movs	r0, #16
 8007e16:	f7ff fa55 	bl	80072c4 <malloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e1e:	b920      	cbnz	r0, 8007e2a <_dtoa_r+0x32>
 8007e20:	4bab      	ldr	r3, [pc, #684]	; (80080d0 <_dtoa_r+0x2d8>)
 8007e22:	21ea      	movs	r1, #234	; 0xea
 8007e24:	48ab      	ldr	r0, [pc, #684]	; (80080d4 <_dtoa_r+0x2dc>)
 8007e26:	f001 f915 	bl	8009054 <__assert_func>
 8007e2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e2e:	6005      	str	r5, [r0, #0]
 8007e30:	60c5      	str	r5, [r0, #12]
 8007e32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e34:	6819      	ldr	r1, [r3, #0]
 8007e36:	b151      	cbz	r1, 8007e4e <_dtoa_r+0x56>
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	604a      	str	r2, [r1, #4]
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4093      	lsls	r3, r2
 8007e40:	608b      	str	r3, [r1, #8]
 8007e42:	4630      	mov	r0, r6
 8007e44:	f000 fdb8 	bl	80089b8 <_Bfree>
 8007e48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f1b9 0300 	subs.w	r3, r9, #0
 8007e52:	bfbb      	ittet	lt
 8007e54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e58:	9303      	strlt	r3, [sp, #12]
 8007e5a:	2300      	movge	r3, #0
 8007e5c:	2201      	movlt	r2, #1
 8007e5e:	bfac      	ite	ge
 8007e60:	6023      	strge	r3, [r4, #0]
 8007e62:	6022      	strlt	r2, [r4, #0]
 8007e64:	4b9c      	ldr	r3, [pc, #624]	; (80080d8 <_dtoa_r+0x2e0>)
 8007e66:	9c03      	ldr	r4, [sp, #12]
 8007e68:	43a3      	bics	r3, r4
 8007e6a:	d11a      	bne.n	8007ea2 <_dtoa_r+0xaa>
 8007e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e78:	ea53 0308 	orrs.w	r3, r3, r8
 8007e7c:	f000 8512 	beq.w	80088a4 <_dtoa_r+0xaac>
 8007e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e82:	b953      	cbnz	r3, 8007e9a <_dtoa_r+0xa2>
 8007e84:	4b95      	ldr	r3, [pc, #596]	; (80080dc <_dtoa_r+0x2e4>)
 8007e86:	e01f      	b.n	8007ec8 <_dtoa_r+0xd0>
 8007e88:	4b95      	ldr	r3, [pc, #596]	; (80080e0 <_dtoa_r+0x2e8>)
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	9800      	ldr	r0, [sp, #0]
 8007e94:	b015      	add	sp, #84	; 0x54
 8007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9a:	4b90      	ldr	r3, [pc, #576]	; (80080dc <_dtoa_r+0x2e4>)
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	3303      	adds	r3, #3
 8007ea0:	e7f5      	b.n	8007e8e <_dtoa_r+0x96>
 8007ea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007eb2:	d10b      	bne.n	8007ecc <_dtoa_r+0xd4>
 8007eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 84ee 	beq.w	800889e <_dtoa_r+0xaa6>
 8007ec2:	4888      	ldr	r0, [pc, #544]	; (80080e4 <_dtoa_r+0x2ec>)
 8007ec4:	6018      	str	r0, [r3, #0]
 8007ec6:	1e43      	subs	r3, r0, #1
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	e7e2      	b.n	8007e92 <_dtoa_r+0x9a>
 8007ecc:	a913      	add	r1, sp, #76	; 0x4c
 8007ece:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ed2:	aa12      	add	r2, sp, #72	; 0x48
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f001 f851 	bl	8008f7c <__d2b>
 8007eda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007ede:	4605      	mov	r5, r0
 8007ee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	d047      	beq.n	8007f76 <_dtoa_r+0x17e>
 8007ee6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007ee8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ef0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007ef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ef8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007efc:	2400      	movs	r4, #0
 8007efe:	ec43 2b16 	vmov	d6, r2, r3
 8007f02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007f06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80080b8 <_dtoa_r+0x2c0>
 8007f0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007f0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80080c0 <_dtoa_r+0x2c8>
 8007f12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007f16:	eeb0 7b46 	vmov.f64	d7, d6
 8007f1a:	ee06 1a90 	vmov	s13, r1
 8007f1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007f22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80080c8 <_dtoa_r+0x2d0>
 8007f26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007f2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007f2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	ee16 ba90 	vmov	fp, s13
 8007f3a:	9411      	str	r4, [sp, #68]	; 0x44
 8007f3c:	d508      	bpl.n	8007f50 <_dtoa_r+0x158>
 8007f3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007f42:	eeb4 6b47 	vcmp.f64	d6, d7
 8007f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4a:	bf18      	it	ne
 8007f4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007f50:	f1bb 0f16 	cmp.w	fp, #22
 8007f54:	d832      	bhi.n	8007fbc <_dtoa_r+0x1c4>
 8007f56:	4b64      	ldr	r3, [pc, #400]	; (80080e8 <_dtoa_r+0x2f0>)
 8007f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f5c:	ed93 7b00 	vldr	d7, [r3]
 8007f60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6c:	d501      	bpl.n	8007f72 <_dtoa_r+0x17a>
 8007f6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f72:	2300      	movs	r3, #0
 8007f74:	e023      	b.n	8007fbe <_dtoa_r+0x1c6>
 8007f76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007f78:	4401      	add	r1, r0
 8007f7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	bfc3      	ittte	gt
 8007f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f86:	fa04 f303 	lslgt.w	r3, r4, r3
 8007f8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007f8e:	f1c3 0320 	rsble	r3, r3, #32
 8007f92:	bfc6      	itte	gt
 8007f94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007f98:	ea43 0308 	orrgt.w	r3, r3, r8
 8007f9c:	fa08 f303 	lslle.w	r3, r8, r3
 8007fa0:	ee07 3a90 	vmov	s15, r3
 8007fa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007fa8:	3901      	subs	r1, #1
 8007faa:	ed8d 7b00 	vstr	d7, [sp]
 8007fae:	9c01      	ldr	r4, [sp, #4]
 8007fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007fb8:	2401      	movs	r4, #1
 8007fba:	e7a0      	b.n	8007efe <_dtoa_r+0x106>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fc0:	1a43      	subs	r3, r0, r1
 8007fc2:	1e5a      	subs	r2, r3, #1
 8007fc4:	bf45      	ittet	mi
 8007fc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fca:	9305      	strmi	r3, [sp, #20]
 8007fcc:	2300      	movpl	r3, #0
 8007fce:	2300      	movmi	r3, #0
 8007fd0:	9206      	str	r2, [sp, #24]
 8007fd2:	bf54      	ite	pl
 8007fd4:	9305      	strpl	r3, [sp, #20]
 8007fd6:	9306      	strmi	r3, [sp, #24]
 8007fd8:	f1bb 0f00 	cmp.w	fp, #0
 8007fdc:	db18      	blt.n	8008010 <_dtoa_r+0x218>
 8007fde:	9b06      	ldr	r3, [sp, #24]
 8007fe0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007fe4:	445b      	add	r3, fp
 8007fe6:	9306      	str	r3, [sp, #24]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9a07      	ldr	r2, [sp, #28]
 8007fec:	2a09      	cmp	r2, #9
 8007fee:	d849      	bhi.n	8008084 <_dtoa_r+0x28c>
 8007ff0:	2a05      	cmp	r2, #5
 8007ff2:	bfc4      	itt	gt
 8007ff4:	3a04      	subgt	r2, #4
 8007ff6:	9207      	strgt	r2, [sp, #28]
 8007ff8:	9a07      	ldr	r2, [sp, #28]
 8007ffa:	f1a2 0202 	sub.w	r2, r2, #2
 8007ffe:	bfcc      	ite	gt
 8008000:	2400      	movgt	r4, #0
 8008002:	2401      	movle	r4, #1
 8008004:	2a03      	cmp	r2, #3
 8008006:	d848      	bhi.n	800809a <_dtoa_r+0x2a2>
 8008008:	e8df f002 	tbb	[pc, r2]
 800800c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008010:	9b05      	ldr	r3, [sp, #20]
 8008012:	2200      	movs	r2, #0
 8008014:	eba3 030b 	sub.w	r3, r3, fp
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	920e      	str	r2, [sp, #56]	; 0x38
 800801c:	f1cb 0300 	rsb	r3, fp, #0
 8008020:	e7e3      	b.n	8007fea <_dtoa_r+0x1f2>
 8008022:	2200      	movs	r2, #0
 8008024:	9208      	str	r2, [sp, #32]
 8008026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008028:	2a00      	cmp	r2, #0
 800802a:	dc39      	bgt.n	80080a0 <_dtoa_r+0x2a8>
 800802c:	f04f 0a01 	mov.w	sl, #1
 8008030:	46d1      	mov	r9, sl
 8008032:	4652      	mov	r2, sl
 8008034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008038:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800803a:	2100      	movs	r1, #0
 800803c:	6079      	str	r1, [r7, #4]
 800803e:	2004      	movs	r0, #4
 8008040:	f100 0c14 	add.w	ip, r0, #20
 8008044:	4594      	cmp	ip, r2
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	d92f      	bls.n	80080aa <_dtoa_r+0x2b2>
 800804a:	4630      	mov	r0, r6
 800804c:	930c      	str	r3, [sp, #48]	; 0x30
 800804e:	f000 fc73 	bl	8008938 <_Balloc>
 8008052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008054:	9000      	str	r0, [sp, #0]
 8008056:	4602      	mov	r2, r0
 8008058:	2800      	cmp	r0, #0
 800805a:	d149      	bne.n	80080f0 <_dtoa_r+0x2f8>
 800805c:	4b23      	ldr	r3, [pc, #140]	; (80080ec <_dtoa_r+0x2f4>)
 800805e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008062:	e6df      	b.n	8007e24 <_dtoa_r+0x2c>
 8008064:	2201      	movs	r2, #1
 8008066:	e7dd      	b.n	8008024 <_dtoa_r+0x22c>
 8008068:	2200      	movs	r2, #0
 800806a:	9208      	str	r2, [sp, #32]
 800806c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800806e:	eb0b 0a02 	add.w	sl, fp, r2
 8008072:	f10a 0901 	add.w	r9, sl, #1
 8008076:	464a      	mov	r2, r9
 8008078:	2a01      	cmp	r2, #1
 800807a:	bfb8      	it	lt
 800807c:	2201      	movlt	r2, #1
 800807e:	e7db      	b.n	8008038 <_dtoa_r+0x240>
 8008080:	2201      	movs	r2, #1
 8008082:	e7f2      	b.n	800806a <_dtoa_r+0x272>
 8008084:	2401      	movs	r4, #1
 8008086:	2200      	movs	r2, #0
 8008088:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800808c:	f04f 3aff 	mov.w	sl, #4294967295
 8008090:	2100      	movs	r1, #0
 8008092:	46d1      	mov	r9, sl
 8008094:	2212      	movs	r2, #18
 8008096:	9109      	str	r1, [sp, #36]	; 0x24
 8008098:	e7ce      	b.n	8008038 <_dtoa_r+0x240>
 800809a:	2201      	movs	r2, #1
 800809c:	9208      	str	r2, [sp, #32]
 800809e:	e7f5      	b.n	800808c <_dtoa_r+0x294>
 80080a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80080a4:	46d1      	mov	r9, sl
 80080a6:	4652      	mov	r2, sl
 80080a8:	e7c6      	b.n	8008038 <_dtoa_r+0x240>
 80080aa:	3101      	adds	r1, #1
 80080ac:	6079      	str	r1, [r7, #4]
 80080ae:	0040      	lsls	r0, r0, #1
 80080b0:	e7c6      	b.n	8008040 <_dtoa_r+0x248>
 80080b2:	bf00      	nop
 80080b4:	f3af 8000 	nop.w
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	08009bdd 	.word	0x08009bdd
 80080d4:	08009bf4 	.word	0x08009bf4
 80080d8:	7ff00000 	.word	0x7ff00000
 80080dc:	08009bd9 	.word	0x08009bd9
 80080e0:	08009bd0 	.word	0x08009bd0
 80080e4:	08009bad 	.word	0x08009bad
 80080e8:	08009cf0 	.word	0x08009cf0
 80080ec:	08009c53 	.word	0x08009c53
 80080f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80080f2:	9900      	ldr	r1, [sp, #0]
 80080f4:	6011      	str	r1, [r2, #0]
 80080f6:	f1b9 0f0e 	cmp.w	r9, #14
 80080fa:	d872      	bhi.n	80081e2 <_dtoa_r+0x3ea>
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	d070      	beq.n	80081e2 <_dtoa_r+0x3ea>
 8008100:	f1bb 0f00 	cmp.w	fp, #0
 8008104:	f340 80a6 	ble.w	8008254 <_dtoa_r+0x45c>
 8008108:	49ca      	ldr	r1, [pc, #808]	; (8008434 <_dtoa_r+0x63c>)
 800810a:	f00b 020f 	and.w	r2, fp, #15
 800810e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008112:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008116:	ed92 7b00 	vldr	d7, [r2]
 800811a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800811e:	f000 808d 	beq.w	800823c <_dtoa_r+0x444>
 8008122:	4ac5      	ldr	r2, [pc, #788]	; (8008438 <_dtoa_r+0x640>)
 8008124:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008128:	ed92 6b08 	vldr	d6, [r2, #32]
 800812c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008130:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008134:	f001 010f 	and.w	r1, r1, #15
 8008138:	2203      	movs	r2, #3
 800813a:	48bf      	ldr	r0, [pc, #764]	; (8008438 <_dtoa_r+0x640>)
 800813c:	2900      	cmp	r1, #0
 800813e:	d17f      	bne.n	8008240 <_dtoa_r+0x448>
 8008140:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008144:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008148:	ed8d 7b02 	vstr	d7, [sp, #8]
 800814c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800814e:	2900      	cmp	r1, #0
 8008150:	f000 80b2 	beq.w	80082b8 <_dtoa_r+0x4c0>
 8008154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800815c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	f140 80a8 	bpl.w	80082b8 <_dtoa_r+0x4c0>
 8008168:	f1b9 0f00 	cmp.w	r9, #0
 800816c:	f000 80a4 	beq.w	80082b8 <_dtoa_r+0x4c0>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	dd31      	ble.n	80081da <_dtoa_r+0x3e2>
 8008176:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800817a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800817e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008182:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008186:	3201      	adds	r2, #1
 8008188:	4650      	mov	r0, sl
 800818a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800818e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008192:	ee07 2a90 	vmov	s15, r2
 8008196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800819a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800819e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80081a2:	9c03      	ldr	r4, [sp, #12]
 80081a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80081a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f040 8086 	bne.w	80082be <_dtoa_r+0x4c6>
 80081b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80081b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081ba:	ec42 1b17 	vmov	d7, r1, r2
 80081be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c6:	f300 8272 	bgt.w	80086ae <_dtoa_r+0x8b6>
 80081ca:	eeb1 7b47 	vneg.f64	d7, d7
 80081ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d6:	f100 8267 	bmi.w	80086a8 <_dtoa_r+0x8b0>
 80081da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80081de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80081e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	f2c0 8129 	blt.w	800843c <_dtoa_r+0x644>
 80081ea:	f1bb 0f0e 	cmp.w	fp, #14
 80081ee:	f300 8125 	bgt.w	800843c <_dtoa_r+0x644>
 80081f2:	4b90      	ldr	r3, [pc, #576]	; (8008434 <_dtoa_r+0x63c>)
 80081f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80081f8:	ed93 6b00 	vldr	d6, [r3]
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f280 80c3 	bge.w	800838a <_dtoa_r+0x592>
 8008204:	f1b9 0f00 	cmp.w	r9, #0
 8008208:	f300 80bf 	bgt.w	800838a <_dtoa_r+0x592>
 800820c:	f040 824c 	bne.w	80086a8 <_dtoa_r+0x8b0>
 8008210:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008214:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008218:	ed9d 7b02 	vldr	d7, [sp, #8]
 800821c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008224:	464c      	mov	r4, r9
 8008226:	464f      	mov	r7, r9
 8008228:	f280 8222 	bge.w	8008670 <_dtoa_r+0x878>
 800822c:	f8dd 8000 	ldr.w	r8, [sp]
 8008230:	2331      	movs	r3, #49	; 0x31
 8008232:	f808 3b01 	strb.w	r3, [r8], #1
 8008236:	f10b 0b01 	add.w	fp, fp, #1
 800823a:	e21e      	b.n	800867a <_dtoa_r+0x882>
 800823c:	2202      	movs	r2, #2
 800823e:	e77c      	b.n	800813a <_dtoa_r+0x342>
 8008240:	07cc      	lsls	r4, r1, #31
 8008242:	d504      	bpl.n	800824e <_dtoa_r+0x456>
 8008244:	ed90 6b00 	vldr	d6, [r0]
 8008248:	3201      	adds	r2, #1
 800824a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800824e:	1049      	asrs	r1, r1, #1
 8008250:	3008      	adds	r0, #8
 8008252:	e773      	b.n	800813c <_dtoa_r+0x344>
 8008254:	d02e      	beq.n	80082b4 <_dtoa_r+0x4bc>
 8008256:	f1cb 0100 	rsb	r1, fp, #0
 800825a:	4a76      	ldr	r2, [pc, #472]	; (8008434 <_dtoa_r+0x63c>)
 800825c:	f001 000f 	and.w	r0, r1, #15
 8008260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008264:	ed92 7b00 	vldr	d7, [r2]
 8008268:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800826c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008270:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008274:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008278:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800827c:	486e      	ldr	r0, [pc, #440]	; (8008438 <_dtoa_r+0x640>)
 800827e:	1109      	asrs	r1, r1, #4
 8008280:	2400      	movs	r4, #0
 8008282:	2202      	movs	r2, #2
 8008284:	b939      	cbnz	r1, 8008296 <_dtoa_r+0x49e>
 8008286:	2c00      	cmp	r4, #0
 8008288:	f43f af60 	beq.w	800814c <_dtoa_r+0x354>
 800828c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008294:	e75a      	b.n	800814c <_dtoa_r+0x354>
 8008296:	07cf      	lsls	r7, r1, #31
 8008298:	d509      	bpl.n	80082ae <_dtoa_r+0x4b6>
 800829a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800829e:	ed90 7b00 	vldr	d7, [r0]
 80082a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80082aa:	3201      	adds	r2, #1
 80082ac:	2401      	movs	r4, #1
 80082ae:	1049      	asrs	r1, r1, #1
 80082b0:	3008      	adds	r0, #8
 80082b2:	e7e7      	b.n	8008284 <_dtoa_r+0x48c>
 80082b4:	2202      	movs	r2, #2
 80082b6:	e749      	b.n	800814c <_dtoa_r+0x354>
 80082b8:	465f      	mov	r7, fp
 80082ba:	4648      	mov	r0, r9
 80082bc:	e765      	b.n	800818a <_dtoa_r+0x392>
 80082be:	ec42 1b17 	vmov	d7, r1, r2
 80082c2:	4a5c      	ldr	r2, [pc, #368]	; (8008434 <_dtoa_r+0x63c>)
 80082c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80082c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80082cc:	9a00      	ldr	r2, [sp, #0]
 80082ce:	1814      	adds	r4, r2, r0
 80082d0:	9a08      	ldr	r2, [sp, #32]
 80082d2:	b352      	cbz	r2, 800832a <_dtoa_r+0x532>
 80082d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80082d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80082dc:	f8dd 8000 	ldr.w	r8, [sp]
 80082e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80082e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80082e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80082f0:	ee14 2a90 	vmov	r2, s9
 80082f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80082f8:	3230      	adds	r2, #48	; 0x30
 80082fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80082fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008306:	f808 2b01 	strb.w	r2, [r8], #1
 800830a:	d439      	bmi.n	8008380 <_dtoa_r+0x588>
 800830c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008310:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008318:	d472      	bmi.n	8008400 <_dtoa_r+0x608>
 800831a:	45a0      	cmp	r8, r4
 800831c:	f43f af5d 	beq.w	80081da <_dtoa_r+0x3e2>
 8008320:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008324:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008328:	e7e0      	b.n	80082ec <_dtoa_r+0x4f4>
 800832a:	f8dd 8000 	ldr.w	r8, [sp]
 800832e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008332:	4621      	mov	r1, r4
 8008334:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800833c:	ee14 2a90 	vmov	r2, s9
 8008340:	3230      	adds	r2, #48	; 0x30
 8008342:	f808 2b01 	strb.w	r2, [r8], #1
 8008346:	45a0      	cmp	r8, r4
 8008348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800834c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008350:	d118      	bne.n	8008384 <_dtoa_r+0x58c>
 8008352:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008356:	ee37 4b05 	vadd.f64	d4, d7, d5
 800835a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800835e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008362:	dc4d      	bgt.n	8008400 <_dtoa_r+0x608>
 8008364:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008368:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008370:	f57f af33 	bpl.w	80081da <_dtoa_r+0x3e2>
 8008374:	4688      	mov	r8, r1
 8008376:	3901      	subs	r1, #1
 8008378:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d0f9      	beq.n	8008374 <_dtoa_r+0x57c>
 8008380:	46bb      	mov	fp, r7
 8008382:	e02a      	b.n	80083da <_dtoa_r+0x5e2>
 8008384:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008388:	e7d6      	b.n	8008338 <_dtoa_r+0x540>
 800838a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800838e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008392:	f8dd 8000 	ldr.w	r8, [sp]
 8008396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800839a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800839e:	ee15 3a10 	vmov	r3, s10
 80083a2:	3330      	adds	r3, #48	; 0x30
 80083a4:	f808 3b01 	strb.w	r3, [r8], #1
 80083a8:	9b00      	ldr	r3, [sp, #0]
 80083aa:	eba8 0303 	sub.w	r3, r8, r3
 80083ae:	4599      	cmp	r9, r3
 80083b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80083b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80083b8:	d133      	bne.n	8008422 <_dtoa_r+0x62a>
 80083ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80083be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80083c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c6:	dc1a      	bgt.n	80083fe <_dtoa_r+0x606>
 80083c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80083cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d0:	d103      	bne.n	80083da <_dtoa_r+0x5e2>
 80083d2:	ee15 3a10 	vmov	r3, s10
 80083d6:	07d9      	lsls	r1, r3, #31
 80083d8:	d411      	bmi.n	80083fe <_dtoa_r+0x606>
 80083da:	4629      	mov	r1, r5
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 faeb 	bl	80089b8 <_Bfree>
 80083e2:	2300      	movs	r3, #0
 80083e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083e6:	f888 3000 	strb.w	r3, [r8]
 80083ea:	f10b 0301 	add.w	r3, fp, #1
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f43f ad4d 	beq.w	8007e92 <_dtoa_r+0x9a>
 80083f8:	f8c3 8000 	str.w	r8, [r3]
 80083fc:	e549      	b.n	8007e92 <_dtoa_r+0x9a>
 80083fe:	465f      	mov	r7, fp
 8008400:	4643      	mov	r3, r8
 8008402:	4698      	mov	r8, r3
 8008404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008408:	2a39      	cmp	r2, #57	; 0x39
 800840a:	d106      	bne.n	800841a <_dtoa_r+0x622>
 800840c:	9a00      	ldr	r2, [sp, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d1f7      	bne.n	8008402 <_dtoa_r+0x60a>
 8008412:	9900      	ldr	r1, [sp, #0]
 8008414:	2230      	movs	r2, #48	; 0x30
 8008416:	3701      	adds	r7, #1
 8008418:	700a      	strb	r2, [r1, #0]
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	3201      	adds	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
 8008420:	e7ae      	b.n	8008380 <_dtoa_r+0x588>
 8008422:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008426:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800842e:	d1b2      	bne.n	8008396 <_dtoa_r+0x59e>
 8008430:	e7d3      	b.n	80083da <_dtoa_r+0x5e2>
 8008432:	bf00      	nop
 8008434:	08009cf0 	.word	0x08009cf0
 8008438:	08009cc8 	.word	0x08009cc8
 800843c:	9908      	ldr	r1, [sp, #32]
 800843e:	2900      	cmp	r1, #0
 8008440:	f000 80d1 	beq.w	80085e6 <_dtoa_r+0x7ee>
 8008444:	9907      	ldr	r1, [sp, #28]
 8008446:	2901      	cmp	r1, #1
 8008448:	f300 80b4 	bgt.w	80085b4 <_dtoa_r+0x7bc>
 800844c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800844e:	2900      	cmp	r1, #0
 8008450:	f000 80ac 	beq.w	80085ac <_dtoa_r+0x7b4>
 8008454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008458:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800845c:	461c      	mov	r4, r3
 800845e:	930a      	str	r3, [sp, #40]	; 0x28
 8008460:	9b05      	ldr	r3, [sp, #20]
 8008462:	4413      	add	r3, r2
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	2101      	movs	r1, #1
 800846a:	4413      	add	r3, r2
 800846c:	4630      	mov	r0, r6
 800846e:	9306      	str	r3, [sp, #24]
 8008470:	f000 fb5e 	bl	8008b30 <__i2b>
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	4607      	mov	r7, r0
 8008478:	f1b8 0f00 	cmp.w	r8, #0
 800847c:	dd0d      	ble.n	800849a <_dtoa_r+0x6a2>
 800847e:	9a06      	ldr	r2, [sp, #24]
 8008480:	2a00      	cmp	r2, #0
 8008482:	dd0a      	ble.n	800849a <_dtoa_r+0x6a2>
 8008484:	4542      	cmp	r2, r8
 8008486:	9905      	ldr	r1, [sp, #20]
 8008488:	bfa8      	it	ge
 800848a:	4642      	movge	r2, r8
 800848c:	1a89      	subs	r1, r1, r2
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	9906      	ldr	r1, [sp, #24]
 8008492:	eba8 0802 	sub.w	r8, r8, r2
 8008496:	1a8a      	subs	r2, r1, r2
 8008498:	9206      	str	r2, [sp, #24]
 800849a:	b303      	cbz	r3, 80084de <_dtoa_r+0x6e6>
 800849c:	9a08      	ldr	r2, [sp, #32]
 800849e:	2a00      	cmp	r2, #0
 80084a0:	f000 80a6 	beq.w	80085f0 <_dtoa_r+0x7f8>
 80084a4:	2c00      	cmp	r4, #0
 80084a6:	dd13      	ble.n	80084d0 <_dtoa_r+0x6d8>
 80084a8:	4639      	mov	r1, r7
 80084aa:	4622      	mov	r2, r4
 80084ac:	4630      	mov	r0, r6
 80084ae:	930c      	str	r3, [sp, #48]	; 0x30
 80084b0:	f000 fbfa 	bl	8008ca8 <__pow5mult>
 80084b4:	462a      	mov	r2, r5
 80084b6:	4601      	mov	r1, r0
 80084b8:	4607      	mov	r7, r0
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 fb4e 	bl	8008b5c <__multiply>
 80084c0:	4629      	mov	r1, r5
 80084c2:	900a      	str	r0, [sp, #40]	; 0x28
 80084c4:	4630      	mov	r0, r6
 80084c6:	f000 fa77 	bl	80089b8 <_Bfree>
 80084ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ce:	4615      	mov	r5, r2
 80084d0:	1b1a      	subs	r2, r3, r4
 80084d2:	d004      	beq.n	80084de <_dtoa_r+0x6e6>
 80084d4:	4629      	mov	r1, r5
 80084d6:	4630      	mov	r0, r6
 80084d8:	f000 fbe6 	bl	8008ca8 <__pow5mult>
 80084dc:	4605      	mov	r5, r0
 80084de:	2101      	movs	r1, #1
 80084e0:	4630      	mov	r0, r6
 80084e2:	f000 fb25 	bl	8008b30 <__i2b>
 80084e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	f340 8082 	ble.w	80085f4 <_dtoa_r+0x7fc>
 80084f0:	461a      	mov	r2, r3
 80084f2:	4601      	mov	r1, r0
 80084f4:	4630      	mov	r0, r6
 80084f6:	f000 fbd7 	bl	8008ca8 <__pow5mult>
 80084fa:	9b07      	ldr	r3, [sp, #28]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	4604      	mov	r4, r0
 8008500:	dd7b      	ble.n	80085fa <_dtoa_r+0x802>
 8008502:	2300      	movs	r3, #0
 8008504:	930a      	str	r3, [sp, #40]	; 0x28
 8008506:	6922      	ldr	r2, [r4, #16]
 8008508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800850c:	6910      	ldr	r0, [r2, #16]
 800850e:	f000 fabf 	bl	8008a90 <__hi0bits>
 8008512:	f1c0 0020 	rsb	r0, r0, #32
 8008516:	9b06      	ldr	r3, [sp, #24]
 8008518:	4418      	add	r0, r3
 800851a:	f010 001f 	ands.w	r0, r0, #31
 800851e:	f000 808d 	beq.w	800863c <_dtoa_r+0x844>
 8008522:	f1c0 0220 	rsb	r2, r0, #32
 8008526:	2a04      	cmp	r2, #4
 8008528:	f340 8086 	ble.w	8008638 <_dtoa_r+0x840>
 800852c:	f1c0 001c 	rsb	r0, r0, #28
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	4403      	add	r3, r0
 8008534:	9305      	str	r3, [sp, #20]
 8008536:	9b06      	ldr	r3, [sp, #24]
 8008538:	4403      	add	r3, r0
 800853a:	4480      	add	r8, r0
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	9b05      	ldr	r3, [sp, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	dd05      	ble.n	8008550 <_dtoa_r+0x758>
 8008544:	4629      	mov	r1, r5
 8008546:	461a      	mov	r2, r3
 8008548:	4630      	mov	r0, r6
 800854a:	f000 fc07 	bl	8008d5c <__lshift>
 800854e:	4605      	mov	r5, r0
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	2b00      	cmp	r3, #0
 8008554:	dd05      	ble.n	8008562 <_dtoa_r+0x76a>
 8008556:	4621      	mov	r1, r4
 8008558:	461a      	mov	r2, r3
 800855a:	4630      	mov	r0, r6
 800855c:	f000 fbfe 	bl	8008d5c <__lshift>
 8008560:	4604      	mov	r4, r0
 8008562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d06b      	beq.n	8008640 <_dtoa_r+0x848>
 8008568:	4621      	mov	r1, r4
 800856a:	4628      	mov	r0, r5
 800856c:	f000 fc62 	bl	8008e34 <__mcmp>
 8008570:	2800      	cmp	r0, #0
 8008572:	da65      	bge.n	8008640 <_dtoa_r+0x848>
 8008574:	2300      	movs	r3, #0
 8008576:	4629      	mov	r1, r5
 8008578:	220a      	movs	r2, #10
 800857a:	4630      	mov	r0, r6
 800857c:	f000 fa3e 	bl	80089fc <__multadd>
 8008580:	9b08      	ldr	r3, [sp, #32]
 8008582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008586:	4605      	mov	r5, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8192 	beq.w	80088b2 <_dtoa_r+0xaba>
 800858e:	4639      	mov	r1, r7
 8008590:	2300      	movs	r3, #0
 8008592:	220a      	movs	r2, #10
 8008594:	4630      	mov	r0, r6
 8008596:	f000 fa31 	bl	80089fc <__multadd>
 800859a:	f1ba 0f00 	cmp.w	sl, #0
 800859e:	4607      	mov	r7, r0
 80085a0:	f300 808e 	bgt.w	80086c0 <_dtoa_r+0x8c8>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	2b02      	cmp	r3, #2
 80085a8:	dc51      	bgt.n	800864e <_dtoa_r+0x856>
 80085aa:	e089      	b.n	80086c0 <_dtoa_r+0x8c8>
 80085ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80085b2:	e751      	b.n	8008458 <_dtoa_r+0x660>
 80085b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	bfbf      	itttt	lt
 80085bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80085be:	1ae3      	sublt	r3, r4, r3
 80085c0:	18d2      	addlt	r2, r2, r3
 80085c2:	4613      	movlt	r3, r2
 80085c4:	bfb7      	itett	lt
 80085c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085c8:	1b1c      	subge	r4, r3, r4
 80085ca:	4623      	movlt	r3, r4
 80085cc:	2400      	movlt	r4, #0
 80085ce:	f1b9 0f00 	cmp.w	r9, #0
 80085d2:	bfb5      	itete	lt
 80085d4:	9a05      	ldrlt	r2, [sp, #20]
 80085d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80085da:	eba2 0809 	sublt.w	r8, r2, r9
 80085de:	464a      	movge	r2, r9
 80085e0:	bfb8      	it	lt
 80085e2:	2200      	movlt	r2, #0
 80085e4:	e73b      	b.n	800845e <_dtoa_r+0x666>
 80085e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80085ea:	9f08      	ldr	r7, [sp, #32]
 80085ec:	461c      	mov	r4, r3
 80085ee:	e743      	b.n	8008478 <_dtoa_r+0x680>
 80085f0:	461a      	mov	r2, r3
 80085f2:	e76f      	b.n	80084d4 <_dtoa_r+0x6dc>
 80085f4:	9b07      	ldr	r3, [sp, #28]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	dc18      	bgt.n	800862c <_dtoa_r+0x834>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	b9b3      	cbnz	r3, 800862c <_dtoa_r+0x834>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008604:	b9a2      	cbnz	r2, 8008630 <_dtoa_r+0x838>
 8008606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800860a:	0d12      	lsrs	r2, r2, #20
 800860c:	0512      	lsls	r2, r2, #20
 800860e:	b18a      	cbz	r2, 8008634 <_dtoa_r+0x83c>
 8008610:	9b05      	ldr	r3, [sp, #20]
 8008612:	3301      	adds	r3, #1
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	3301      	adds	r3, #1
 800861a:	9306      	str	r3, [sp, #24]
 800861c:	2301      	movs	r3, #1
 800861e:	930a      	str	r3, [sp, #40]	; 0x28
 8008620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008622:	2b00      	cmp	r3, #0
 8008624:	f47f af6f 	bne.w	8008506 <_dtoa_r+0x70e>
 8008628:	2001      	movs	r0, #1
 800862a:	e774      	b.n	8008516 <_dtoa_r+0x71e>
 800862c:	2300      	movs	r3, #0
 800862e:	e7f6      	b.n	800861e <_dtoa_r+0x826>
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	e7f4      	b.n	800861e <_dtoa_r+0x826>
 8008634:	920a      	str	r2, [sp, #40]	; 0x28
 8008636:	e7f3      	b.n	8008620 <_dtoa_r+0x828>
 8008638:	d081      	beq.n	800853e <_dtoa_r+0x746>
 800863a:	4610      	mov	r0, r2
 800863c:	301c      	adds	r0, #28
 800863e:	e777      	b.n	8008530 <_dtoa_r+0x738>
 8008640:	f1b9 0f00 	cmp.w	r9, #0
 8008644:	dc37      	bgt.n	80086b6 <_dtoa_r+0x8be>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	2b02      	cmp	r3, #2
 800864a:	dd34      	ble.n	80086b6 <_dtoa_r+0x8be>
 800864c:	46ca      	mov	sl, r9
 800864e:	f1ba 0f00 	cmp.w	sl, #0
 8008652:	d10d      	bne.n	8008670 <_dtoa_r+0x878>
 8008654:	4621      	mov	r1, r4
 8008656:	4653      	mov	r3, sl
 8008658:	2205      	movs	r2, #5
 800865a:	4630      	mov	r0, r6
 800865c:	f000 f9ce 	bl	80089fc <__multadd>
 8008660:	4601      	mov	r1, r0
 8008662:	4604      	mov	r4, r0
 8008664:	4628      	mov	r0, r5
 8008666:	f000 fbe5 	bl	8008e34 <__mcmp>
 800866a:	2800      	cmp	r0, #0
 800866c:	f73f adde 	bgt.w	800822c <_dtoa_r+0x434>
 8008670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008672:	f8dd 8000 	ldr.w	r8, [sp]
 8008676:	ea6f 0b03 	mvn.w	fp, r3
 800867a:	f04f 0900 	mov.w	r9, #0
 800867e:	4621      	mov	r1, r4
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f999 	bl	80089b8 <_Bfree>
 8008686:	2f00      	cmp	r7, #0
 8008688:	f43f aea7 	beq.w	80083da <_dtoa_r+0x5e2>
 800868c:	f1b9 0f00 	cmp.w	r9, #0
 8008690:	d005      	beq.n	800869e <_dtoa_r+0x8a6>
 8008692:	45b9      	cmp	r9, r7
 8008694:	d003      	beq.n	800869e <_dtoa_r+0x8a6>
 8008696:	4649      	mov	r1, r9
 8008698:	4630      	mov	r0, r6
 800869a:	f000 f98d 	bl	80089b8 <_Bfree>
 800869e:	4639      	mov	r1, r7
 80086a0:	4630      	mov	r0, r6
 80086a2:	f000 f989 	bl	80089b8 <_Bfree>
 80086a6:	e698      	b.n	80083da <_dtoa_r+0x5e2>
 80086a8:	2400      	movs	r4, #0
 80086aa:	4627      	mov	r7, r4
 80086ac:	e7e0      	b.n	8008670 <_dtoa_r+0x878>
 80086ae:	46bb      	mov	fp, r7
 80086b0:	4604      	mov	r4, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	e5ba      	b.n	800822c <_dtoa_r+0x434>
 80086b6:	9b08      	ldr	r3, [sp, #32]
 80086b8:	46ca      	mov	sl, r9
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 8100 	beq.w	80088c0 <_dtoa_r+0xac8>
 80086c0:	f1b8 0f00 	cmp.w	r8, #0
 80086c4:	dd05      	ble.n	80086d2 <_dtoa_r+0x8da>
 80086c6:	4639      	mov	r1, r7
 80086c8:	4642      	mov	r2, r8
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 fb46 	bl	8008d5c <__lshift>
 80086d0:	4607      	mov	r7, r0
 80086d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d05d      	beq.n	8008794 <_dtoa_r+0x99c>
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 f92c 	bl	8008938 <_Balloc>
 80086e0:	4680      	mov	r8, r0
 80086e2:	b928      	cbnz	r0, 80086f0 <_dtoa_r+0x8f8>
 80086e4:	4b82      	ldr	r3, [pc, #520]	; (80088f0 <_dtoa_r+0xaf8>)
 80086e6:	4602      	mov	r2, r0
 80086e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086ec:	f7ff bb9a 	b.w	8007e24 <_dtoa_r+0x2c>
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	3202      	adds	r2, #2
 80086f4:	0092      	lsls	r2, r2, #2
 80086f6:	f107 010c 	add.w	r1, r7, #12
 80086fa:	300c      	adds	r0, #12
 80086fc:	f000 f902 	bl	8008904 <memcpy>
 8008700:	2201      	movs	r2, #1
 8008702:	4641      	mov	r1, r8
 8008704:	4630      	mov	r0, r6
 8008706:	f000 fb29 	bl	8008d5c <__lshift>
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	9305      	str	r3, [sp, #20]
 8008710:	9b00      	ldr	r3, [sp, #0]
 8008712:	4453      	add	r3, sl
 8008714:	9309      	str	r3, [sp, #36]	; 0x24
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	46b9      	mov	r9, r7
 800871e:	9308      	str	r3, [sp, #32]
 8008720:	4607      	mov	r7, r0
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	4621      	mov	r1, r4
 8008726:	3b01      	subs	r3, #1
 8008728:	4628      	mov	r0, r5
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	f7ff fad6 	bl	8007cdc <quorem>
 8008730:	4603      	mov	r3, r0
 8008732:	3330      	adds	r3, #48	; 0x30
 8008734:	9006      	str	r0, [sp, #24]
 8008736:	4649      	mov	r1, r9
 8008738:	4628      	mov	r0, r5
 800873a:	930a      	str	r3, [sp, #40]	; 0x28
 800873c:	f000 fb7a 	bl	8008e34 <__mcmp>
 8008740:	463a      	mov	r2, r7
 8008742:	4682      	mov	sl, r0
 8008744:	4621      	mov	r1, r4
 8008746:	4630      	mov	r0, r6
 8008748:	f000 fb90 	bl	8008e6c <__mdiff>
 800874c:	68c2      	ldr	r2, [r0, #12]
 800874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008750:	4680      	mov	r8, r0
 8008752:	bb0a      	cbnz	r2, 8008798 <_dtoa_r+0x9a0>
 8008754:	4601      	mov	r1, r0
 8008756:	4628      	mov	r0, r5
 8008758:	f000 fb6c 	bl	8008e34 <__mcmp>
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	4602      	mov	r2, r0
 8008760:	4641      	mov	r1, r8
 8008762:	4630      	mov	r0, r6
 8008764:	920e      	str	r2, [sp, #56]	; 0x38
 8008766:	930a      	str	r3, [sp, #40]	; 0x28
 8008768:	f000 f926 	bl	80089b8 <_Bfree>
 800876c:	9b07      	ldr	r3, [sp, #28]
 800876e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008774:	ea43 0102 	orr.w	r1, r3, r2
 8008778:	9b08      	ldr	r3, [sp, #32]
 800877a:	430b      	orrs	r3, r1
 800877c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877e:	d10d      	bne.n	800879c <_dtoa_r+0x9a4>
 8008780:	2b39      	cmp	r3, #57	; 0x39
 8008782:	d029      	beq.n	80087d8 <_dtoa_r+0x9e0>
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	dd01      	ble.n	800878e <_dtoa_r+0x996>
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	3331      	adds	r3, #49	; 0x31
 800878e:	9a02      	ldr	r2, [sp, #8]
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	e774      	b.n	800867e <_dtoa_r+0x886>
 8008794:	4638      	mov	r0, r7
 8008796:	e7b8      	b.n	800870a <_dtoa_r+0x912>
 8008798:	2201      	movs	r2, #1
 800879a:	e7e1      	b.n	8008760 <_dtoa_r+0x968>
 800879c:	f1ba 0f00 	cmp.w	sl, #0
 80087a0:	db06      	blt.n	80087b0 <_dtoa_r+0x9b8>
 80087a2:	9907      	ldr	r1, [sp, #28]
 80087a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80087a8:	9908      	ldr	r1, [sp, #32]
 80087aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80087ae:	d120      	bne.n	80087f2 <_dtoa_r+0x9fa>
 80087b0:	2a00      	cmp	r2, #0
 80087b2:	ddec      	ble.n	800878e <_dtoa_r+0x996>
 80087b4:	4629      	mov	r1, r5
 80087b6:	2201      	movs	r2, #1
 80087b8:	4630      	mov	r0, r6
 80087ba:	9305      	str	r3, [sp, #20]
 80087bc:	f000 face 	bl	8008d5c <__lshift>
 80087c0:	4621      	mov	r1, r4
 80087c2:	4605      	mov	r5, r0
 80087c4:	f000 fb36 	bl	8008e34 <__mcmp>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	9b05      	ldr	r3, [sp, #20]
 80087cc:	dc02      	bgt.n	80087d4 <_dtoa_r+0x9dc>
 80087ce:	d1de      	bne.n	800878e <_dtoa_r+0x996>
 80087d0:	07da      	lsls	r2, r3, #31
 80087d2:	d5dc      	bpl.n	800878e <_dtoa_r+0x996>
 80087d4:	2b39      	cmp	r3, #57	; 0x39
 80087d6:	d1d8      	bne.n	800878a <_dtoa_r+0x992>
 80087d8:	9a02      	ldr	r2, [sp, #8]
 80087da:	2339      	movs	r3, #57	; 0x39
 80087dc:	7013      	strb	r3, [r2, #0]
 80087de:	4643      	mov	r3, r8
 80087e0:	4698      	mov	r8, r3
 80087e2:	3b01      	subs	r3, #1
 80087e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80087e8:	2a39      	cmp	r2, #57	; 0x39
 80087ea:	d051      	beq.n	8008890 <_dtoa_r+0xa98>
 80087ec:	3201      	adds	r2, #1
 80087ee:	701a      	strb	r2, [r3, #0]
 80087f0:	e745      	b.n	800867e <_dtoa_r+0x886>
 80087f2:	2a00      	cmp	r2, #0
 80087f4:	dd03      	ble.n	80087fe <_dtoa_r+0xa06>
 80087f6:	2b39      	cmp	r3, #57	; 0x39
 80087f8:	d0ee      	beq.n	80087d8 <_dtoa_r+0x9e0>
 80087fa:	3301      	adds	r3, #1
 80087fc:	e7c7      	b.n	800878e <_dtoa_r+0x996>
 80087fe:	9a05      	ldr	r2, [sp, #20]
 8008800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008802:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008806:	428a      	cmp	r2, r1
 8008808:	d02b      	beq.n	8008862 <_dtoa_r+0xa6a>
 800880a:	4629      	mov	r1, r5
 800880c:	2300      	movs	r3, #0
 800880e:	220a      	movs	r2, #10
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f8f3 	bl	80089fc <__multadd>
 8008816:	45b9      	cmp	r9, r7
 8008818:	4605      	mov	r5, r0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	f04f 020a 	mov.w	r2, #10
 8008822:	4649      	mov	r1, r9
 8008824:	4630      	mov	r0, r6
 8008826:	d107      	bne.n	8008838 <_dtoa_r+0xa40>
 8008828:	f000 f8e8 	bl	80089fc <__multadd>
 800882c:	4681      	mov	r9, r0
 800882e:	4607      	mov	r7, r0
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	3301      	adds	r3, #1
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	e774      	b.n	8008722 <_dtoa_r+0x92a>
 8008838:	f000 f8e0 	bl	80089fc <__multadd>
 800883c:	4639      	mov	r1, r7
 800883e:	4681      	mov	r9, r0
 8008840:	2300      	movs	r3, #0
 8008842:	220a      	movs	r2, #10
 8008844:	4630      	mov	r0, r6
 8008846:	f000 f8d9 	bl	80089fc <__multadd>
 800884a:	4607      	mov	r7, r0
 800884c:	e7f0      	b.n	8008830 <_dtoa_r+0xa38>
 800884e:	f1ba 0f00 	cmp.w	sl, #0
 8008852:	9a00      	ldr	r2, [sp, #0]
 8008854:	bfcc      	ite	gt
 8008856:	46d0      	movgt	r8, sl
 8008858:	f04f 0801 	movle.w	r8, #1
 800885c:	4490      	add	r8, r2
 800885e:	f04f 0900 	mov.w	r9, #0
 8008862:	4629      	mov	r1, r5
 8008864:	2201      	movs	r2, #1
 8008866:	4630      	mov	r0, r6
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	f000 fa77 	bl	8008d5c <__lshift>
 800886e:	4621      	mov	r1, r4
 8008870:	4605      	mov	r5, r0
 8008872:	f000 fadf 	bl	8008e34 <__mcmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	dcb1      	bgt.n	80087de <_dtoa_r+0x9e6>
 800887a:	d102      	bne.n	8008882 <_dtoa_r+0xa8a>
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	07db      	lsls	r3, r3, #31
 8008880:	d4ad      	bmi.n	80087de <_dtoa_r+0x9e6>
 8008882:	4643      	mov	r3, r8
 8008884:	4698      	mov	r8, r3
 8008886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888a:	2a30      	cmp	r2, #48	; 0x30
 800888c:	d0fa      	beq.n	8008884 <_dtoa_r+0xa8c>
 800888e:	e6f6      	b.n	800867e <_dtoa_r+0x886>
 8008890:	9a00      	ldr	r2, [sp, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d1a4      	bne.n	80087e0 <_dtoa_r+0x9e8>
 8008896:	f10b 0b01 	add.w	fp, fp, #1
 800889a:	2331      	movs	r3, #49	; 0x31
 800889c:	e778      	b.n	8008790 <_dtoa_r+0x998>
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <_dtoa_r+0xafc>)
 80088a0:	f7ff bb12 	b.w	8007ec8 <_dtoa_r+0xd0>
 80088a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f47f aaee 	bne.w	8007e88 <_dtoa_r+0x90>
 80088ac:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <_dtoa_r+0xb00>)
 80088ae:	f7ff bb0b 	b.w	8007ec8 <_dtoa_r+0xd0>
 80088b2:	f1ba 0f00 	cmp.w	sl, #0
 80088b6:	dc03      	bgt.n	80088c0 <_dtoa_r+0xac8>
 80088b8:	9b07      	ldr	r3, [sp, #28]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	f73f aec7 	bgt.w	800864e <_dtoa_r+0x856>
 80088c0:	f8dd 8000 	ldr.w	r8, [sp]
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff fa08 	bl	8007cdc <quorem>
 80088cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088d0:	f808 3b01 	strb.w	r3, [r8], #1
 80088d4:	9a00      	ldr	r2, [sp, #0]
 80088d6:	eba8 0202 	sub.w	r2, r8, r2
 80088da:	4592      	cmp	sl, r2
 80088dc:	ddb7      	ble.n	800884e <_dtoa_r+0xa56>
 80088de:	4629      	mov	r1, r5
 80088e0:	2300      	movs	r3, #0
 80088e2:	220a      	movs	r2, #10
 80088e4:	4630      	mov	r0, r6
 80088e6:	f000 f889 	bl	80089fc <__multadd>
 80088ea:	4605      	mov	r5, r0
 80088ec:	e7ea      	b.n	80088c4 <_dtoa_r+0xacc>
 80088ee:	bf00      	nop
 80088f0:	08009c53 	.word	0x08009c53
 80088f4:	08009bac 	.word	0x08009bac
 80088f8:	08009bd0 	.word	0x08009bd0

080088fc <_localeconv_r>:
 80088fc:	4800      	ldr	r0, [pc, #0]	; (8008900 <_localeconv_r+0x4>)
 80088fe:	4770      	bx	lr
 8008900:	200001bc 	.word	0x200001bc

08008904 <memcpy>:
 8008904:	440a      	add	r2, r1
 8008906:	4291      	cmp	r1, r2
 8008908:	f100 33ff 	add.w	r3, r0, #4294967295
 800890c:	d100      	bne.n	8008910 <memcpy+0xc>
 800890e:	4770      	bx	lr
 8008910:	b510      	push	{r4, lr}
 8008912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800891a:	4291      	cmp	r1, r2
 800891c:	d1f9      	bne.n	8008912 <memcpy+0xe>
 800891e:	bd10      	pop	{r4, pc}

08008920 <__malloc_lock>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__malloc_lock+0x8>)
 8008922:	f000 bbc8 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	200007c0 	.word	0x200007c0

0800892c <__malloc_unlock>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__malloc_unlock+0x8>)
 800892e:	f000 bbc3 	b.w	80090b8 <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	200007c0 	.word	0x200007c0

08008938 <_Balloc>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	b976      	cbnz	r6, 8008960 <_Balloc+0x28>
 8008942:	2010      	movs	r0, #16
 8008944:	f7fe fcbe 	bl	80072c4 <malloc>
 8008948:	4602      	mov	r2, r0
 800894a:	6260      	str	r0, [r4, #36]	; 0x24
 800894c:	b920      	cbnz	r0, 8008958 <_Balloc+0x20>
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <_Balloc+0x78>)
 8008950:	4818      	ldr	r0, [pc, #96]	; (80089b4 <_Balloc+0x7c>)
 8008952:	2166      	movs	r1, #102	; 0x66
 8008954:	f000 fb7e 	bl	8009054 <__assert_func>
 8008958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800895c:	6006      	str	r6, [r0, #0]
 800895e:	60c6      	str	r6, [r0, #12]
 8008960:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008962:	68f3      	ldr	r3, [r6, #12]
 8008964:	b183      	cbz	r3, 8008988 <_Balloc+0x50>
 8008966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896e:	b9b8      	cbnz	r0, 80089a0 <_Balloc+0x68>
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f605 	lsl.w	r6, r1, r5
 8008976:	1d72      	adds	r2, r6, #5
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fb5a 	bl	8009034 <_calloc_r>
 8008980:	b160      	cbz	r0, 800899c <_Balloc+0x64>
 8008982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008986:	e00e      	b.n	80089a6 <_Balloc+0x6e>
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	2104      	movs	r1, #4
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fb51 	bl	8009034 <_calloc_r>
 8008992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008994:	60f0      	str	r0, [r6, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <_Balloc+0x2e>
 800899c:	2000      	movs	r0, #0
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a6:	2300      	movs	r3, #0
 80089a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ac:	e7f7      	b.n	800899e <_Balloc+0x66>
 80089ae:	bf00      	nop
 80089b0:	08009bdd 	.word	0x08009bdd
 80089b4:	08009c64 	.word	0x08009c64

080089b8 <_Bfree>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b976      	cbnz	r6, 80089e0 <_Bfree+0x28>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7fe fc7e 	bl	80072c4 <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	6268      	str	r0, [r5, #36]	; 0x24
 80089cc:	b920      	cbnz	r0, 80089d8 <_Bfree+0x20>
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <_Bfree+0x3c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <_Bfree+0x40>)
 80089d2:	218a      	movs	r1, #138	; 0x8a
 80089d4:	f000 fb3e 	bl	8009054 <__assert_func>
 80089d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089dc:	6006      	str	r6, [r0, #0]
 80089de:	60c6      	str	r6, [r0, #12]
 80089e0:	b13c      	cbz	r4, 80089f2 <_Bfree+0x3a>
 80089e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	08009bdd 	.word	0x08009bdd
 80089f8:	08009c64 	.word	0x08009c64

080089fc <__multadd>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	690e      	ldr	r6, [r1, #16]
 8008a02:	4607      	mov	r7, r0
 8008a04:	4698      	mov	r8, r3
 8008a06:	460c      	mov	r4, r1
 8008a08:	f101 0014 	add.w	r0, r1, #20
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6805      	ldr	r5, [r0, #0]
 8008a10:	b2a9      	uxth	r1, r5
 8008a12:	fb02 8101 	mla	r1, r2, r1, r8
 8008a16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a1a:	0c2d      	lsrs	r5, r5, #16
 8008a1c:	fb02 c505 	mla	r5, r2, r5, ip
 8008a20:	b289      	uxth	r1, r1
 8008a22:	3301      	adds	r3, #1
 8008a24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a28:	429e      	cmp	r6, r3
 8008a2a:	f840 1b04 	str.w	r1, [r0], #4
 8008a2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a32:	dcec      	bgt.n	8008a0e <__multadd+0x12>
 8008a34:	f1b8 0f00 	cmp.w	r8, #0
 8008a38:	d022      	beq.n	8008a80 <__multadd+0x84>
 8008a3a:	68a3      	ldr	r3, [r4, #8]
 8008a3c:	42b3      	cmp	r3, r6
 8008a3e:	dc19      	bgt.n	8008a74 <__multadd+0x78>
 8008a40:	6861      	ldr	r1, [r4, #4]
 8008a42:	4638      	mov	r0, r7
 8008a44:	3101      	adds	r1, #1
 8008a46:	f7ff ff77 	bl	8008938 <_Balloc>
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	b928      	cbnz	r0, 8008a5a <__multadd+0x5e>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	4b0d      	ldr	r3, [pc, #52]	; (8008a88 <__multadd+0x8c>)
 8008a52:	480e      	ldr	r0, [pc, #56]	; (8008a8c <__multadd+0x90>)
 8008a54:	21b5      	movs	r1, #181	; 0xb5
 8008a56:	f000 fafd 	bl	8009054 <__assert_func>
 8008a5a:	6922      	ldr	r2, [r4, #16]
 8008a5c:	3202      	adds	r2, #2
 8008a5e:	f104 010c 	add.w	r1, r4, #12
 8008a62:	0092      	lsls	r2, r2, #2
 8008a64:	300c      	adds	r0, #12
 8008a66:	f7ff ff4d 	bl	8008904 <memcpy>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7ff ffa3 	bl	80089b8 <_Bfree>
 8008a72:	462c      	mov	r4, r5
 8008a74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a78:	3601      	adds	r6, #1
 8008a7a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a7e:	6126      	str	r6, [r4, #16]
 8008a80:	4620      	mov	r0, r4
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a86:	bf00      	nop
 8008a88:	08009c53 	.word	0x08009c53
 8008a8c:	08009c64 	.word	0x08009c64

08008a90 <__hi0bits>:
 8008a90:	0c03      	lsrs	r3, r0, #16
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	b9d3      	cbnz	r3, 8008acc <__hi0bits+0x3c>
 8008a96:	0400      	lsls	r0, r0, #16
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a9e:	bf04      	itt	eq
 8008aa0:	0200      	lsleq	r0, r0, #8
 8008aa2:	3308      	addeq	r3, #8
 8008aa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008aa8:	bf04      	itt	eq
 8008aaa:	0100      	lsleq	r0, r0, #4
 8008aac:	3304      	addeq	r3, #4
 8008aae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ab2:	bf04      	itt	eq
 8008ab4:	0080      	lsleq	r0, r0, #2
 8008ab6:	3302      	addeq	r3, #2
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	db05      	blt.n	8008ac8 <__hi0bits+0x38>
 8008abc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ac0:	f103 0301 	add.w	r3, r3, #1
 8008ac4:	bf08      	it	eq
 8008ac6:	2320      	moveq	r3, #32
 8008ac8:	4618      	mov	r0, r3
 8008aca:	4770      	bx	lr
 8008acc:	2300      	movs	r3, #0
 8008ace:	e7e4      	b.n	8008a9a <__hi0bits+0xa>

08008ad0 <__lo0bits>:
 8008ad0:	6803      	ldr	r3, [r0, #0]
 8008ad2:	f013 0207 	ands.w	r2, r3, #7
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	d00b      	beq.n	8008af2 <__lo0bits+0x22>
 8008ada:	07da      	lsls	r2, r3, #31
 8008adc:	d424      	bmi.n	8008b28 <__lo0bits+0x58>
 8008ade:	0798      	lsls	r0, r3, #30
 8008ae0:	bf49      	itett	mi
 8008ae2:	085b      	lsrmi	r3, r3, #1
 8008ae4:	089b      	lsrpl	r3, r3, #2
 8008ae6:	2001      	movmi	r0, #1
 8008ae8:	600b      	strmi	r3, [r1, #0]
 8008aea:	bf5c      	itt	pl
 8008aec:	600b      	strpl	r3, [r1, #0]
 8008aee:	2002      	movpl	r0, #2
 8008af0:	4770      	bx	lr
 8008af2:	b298      	uxth	r0, r3
 8008af4:	b9b0      	cbnz	r0, 8008b24 <__lo0bits+0x54>
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	2010      	movs	r0, #16
 8008afa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008afe:	bf04      	itt	eq
 8008b00:	0a1b      	lsreq	r3, r3, #8
 8008b02:	3008      	addeq	r0, #8
 8008b04:	071a      	lsls	r2, r3, #28
 8008b06:	bf04      	itt	eq
 8008b08:	091b      	lsreq	r3, r3, #4
 8008b0a:	3004      	addeq	r0, #4
 8008b0c:	079a      	lsls	r2, r3, #30
 8008b0e:	bf04      	itt	eq
 8008b10:	089b      	lsreq	r3, r3, #2
 8008b12:	3002      	addeq	r0, #2
 8008b14:	07da      	lsls	r2, r3, #31
 8008b16:	d403      	bmi.n	8008b20 <__lo0bits+0x50>
 8008b18:	085b      	lsrs	r3, r3, #1
 8008b1a:	f100 0001 	add.w	r0, r0, #1
 8008b1e:	d005      	beq.n	8008b2c <__lo0bits+0x5c>
 8008b20:	600b      	str	r3, [r1, #0]
 8008b22:	4770      	bx	lr
 8008b24:	4610      	mov	r0, r2
 8008b26:	e7e8      	b.n	8008afa <__lo0bits+0x2a>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4770      	bx	lr
 8008b2c:	2020      	movs	r0, #32
 8008b2e:	4770      	bx	lr

08008b30 <__i2b>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	460c      	mov	r4, r1
 8008b34:	2101      	movs	r1, #1
 8008b36:	f7ff feff 	bl	8008938 <_Balloc>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	b928      	cbnz	r0, 8008b4a <__i2b+0x1a>
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <__i2b+0x24>)
 8008b40:	4805      	ldr	r0, [pc, #20]	; (8008b58 <__i2b+0x28>)
 8008b42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b46:	f000 fa85 	bl	8009054 <__assert_func>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	6144      	str	r4, [r0, #20]
 8008b4e:	6103      	str	r3, [r0, #16]
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	bf00      	nop
 8008b54:	08009c53 	.word	0x08009c53
 8008b58:	08009c64 	.word	0x08009c64

08008b5c <__multiply>:
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b60:	4614      	mov	r4, r2
 8008b62:	690a      	ldr	r2, [r1, #16]
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	bfb8      	it	lt
 8008b6a:	460b      	movlt	r3, r1
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	bfbc      	itt	lt
 8008b70:	4625      	movlt	r5, r4
 8008b72:	461c      	movlt	r4, r3
 8008b74:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008b78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008b7c:	68ab      	ldr	r3, [r5, #8]
 8008b7e:	6869      	ldr	r1, [r5, #4]
 8008b80:	eb0a 0709 	add.w	r7, sl, r9
 8008b84:	42bb      	cmp	r3, r7
 8008b86:	b085      	sub	sp, #20
 8008b88:	bfb8      	it	lt
 8008b8a:	3101      	addlt	r1, #1
 8008b8c:	f7ff fed4 	bl	8008938 <_Balloc>
 8008b90:	b930      	cbnz	r0, 8008ba0 <__multiply+0x44>
 8008b92:	4602      	mov	r2, r0
 8008b94:	4b42      	ldr	r3, [pc, #264]	; (8008ca0 <__multiply+0x144>)
 8008b96:	4843      	ldr	r0, [pc, #268]	; (8008ca4 <__multiply+0x148>)
 8008b98:	f240 115d 	movw	r1, #349	; 0x15d
 8008b9c:	f000 fa5a 	bl	8009054 <__assert_func>
 8008ba0:	f100 0614 	add.w	r6, r0, #20
 8008ba4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ba8:	4633      	mov	r3, r6
 8008baa:	2200      	movs	r2, #0
 8008bac:	4543      	cmp	r3, r8
 8008bae:	d31e      	bcc.n	8008bee <__multiply+0x92>
 8008bb0:	f105 0c14 	add.w	ip, r5, #20
 8008bb4:	f104 0314 	add.w	r3, r4, #20
 8008bb8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008bbc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008bc0:	9202      	str	r2, [sp, #8]
 8008bc2:	ebac 0205 	sub.w	r2, ip, r5
 8008bc6:	3a15      	subs	r2, #21
 8008bc8:	f022 0203 	bic.w	r2, r2, #3
 8008bcc:	3204      	adds	r2, #4
 8008bce:	f105 0115 	add.w	r1, r5, #21
 8008bd2:	458c      	cmp	ip, r1
 8008bd4:	bf38      	it	cc
 8008bd6:	2204      	movcc	r2, #4
 8008bd8:	9201      	str	r2, [sp, #4]
 8008bda:	9a02      	ldr	r2, [sp, #8]
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d808      	bhi.n	8008bf4 <__multiply+0x98>
 8008be2:	2f00      	cmp	r7, #0
 8008be4:	dc55      	bgt.n	8008c92 <__multiply+0x136>
 8008be6:	6107      	str	r7, [r0, #16]
 8008be8:	b005      	add	sp, #20
 8008bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bee:	f843 2b04 	str.w	r2, [r3], #4
 8008bf2:	e7db      	b.n	8008bac <__multiply+0x50>
 8008bf4:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	d020      	beq.n	8008c40 <__multiply+0xe4>
 8008bfe:	f105 0e14 	add.w	lr, r5, #20
 8008c02:	46b1      	mov	r9, r6
 8008c04:	2200      	movs	r2, #0
 8008c06:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c0a:	f8d9 b000 	ldr.w	fp, [r9]
 8008c0e:	b2a1      	uxth	r1, r4
 8008c10:	fa1f fb8b 	uxth.w	fp, fp
 8008c14:	fb0a b101 	mla	r1, sl, r1, fp
 8008c18:	4411      	add	r1, r2
 8008c1a:	f8d9 2000 	ldr.w	r2, [r9]
 8008c1e:	0c24      	lsrs	r4, r4, #16
 8008c20:	0c12      	lsrs	r2, r2, #16
 8008c22:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c26:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c2a:	b289      	uxth	r1, r1
 8008c2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c30:	45f4      	cmp	ip, lr
 8008c32:	f849 1b04 	str.w	r1, [r9], #4
 8008c36:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c3a:	d8e4      	bhi.n	8008c06 <__multiply+0xaa>
 8008c3c:	9901      	ldr	r1, [sp, #4]
 8008c3e:	5072      	str	r2, [r6, r1]
 8008c40:	9a03      	ldr	r2, [sp, #12]
 8008c42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c46:	3304      	adds	r3, #4
 8008c48:	f1b9 0f00 	cmp.w	r9, #0
 8008c4c:	d01f      	beq.n	8008c8e <__multiply+0x132>
 8008c4e:	6834      	ldr	r4, [r6, #0]
 8008c50:	f105 0114 	add.w	r1, r5, #20
 8008c54:	46b6      	mov	lr, r6
 8008c56:	f04f 0a00 	mov.w	sl, #0
 8008c5a:	880a      	ldrh	r2, [r1, #0]
 8008c5c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008c60:	fb09 b202 	mla	r2, r9, r2, fp
 8008c64:	4492      	add	sl, r2
 8008c66:	b2a4      	uxth	r4, r4
 8008c68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008c6c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c70:	f851 4b04 	ldr.w	r4, [r1], #4
 8008c74:	f8be 2000 	ldrh.w	r2, [lr]
 8008c78:	0c24      	lsrs	r4, r4, #16
 8008c7a:	fb09 2404 	mla	r4, r9, r4, r2
 8008c7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008c82:	458c      	cmp	ip, r1
 8008c84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008c88:	d8e7      	bhi.n	8008c5a <__multiply+0xfe>
 8008c8a:	9a01      	ldr	r2, [sp, #4]
 8008c8c:	50b4      	str	r4, [r6, r2]
 8008c8e:	3604      	adds	r6, #4
 8008c90:	e7a3      	b.n	8008bda <__multiply+0x7e>
 8008c92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1a5      	bne.n	8008be6 <__multiply+0x8a>
 8008c9a:	3f01      	subs	r7, #1
 8008c9c:	e7a1      	b.n	8008be2 <__multiply+0x86>
 8008c9e:	bf00      	nop
 8008ca0:	08009c53 	.word	0x08009c53
 8008ca4:	08009c64 	.word	0x08009c64

08008ca8 <__pow5mult>:
 8008ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cac:	4615      	mov	r5, r2
 8008cae:	f012 0203 	ands.w	r2, r2, #3
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	460f      	mov	r7, r1
 8008cb6:	d007      	beq.n	8008cc8 <__pow5mult+0x20>
 8008cb8:	4c25      	ldr	r4, [pc, #148]	; (8008d50 <__pow5mult+0xa8>)
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cc2:	f7ff fe9b 	bl	80089fc <__multadd>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	10ad      	asrs	r5, r5, #2
 8008cca:	d03d      	beq.n	8008d48 <__pow5mult+0xa0>
 8008ccc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cce:	b97c      	cbnz	r4, 8008cf0 <__pow5mult+0x48>
 8008cd0:	2010      	movs	r0, #16
 8008cd2:	f7fe faf7 	bl	80072c4 <malloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8008cda:	b928      	cbnz	r0, 8008ce8 <__pow5mult+0x40>
 8008cdc:	4b1d      	ldr	r3, [pc, #116]	; (8008d54 <__pow5mult+0xac>)
 8008cde:	481e      	ldr	r0, [pc, #120]	; (8008d58 <__pow5mult+0xb0>)
 8008ce0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ce4:	f000 f9b6 	bl	8009054 <__assert_func>
 8008ce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cec:	6004      	str	r4, [r0, #0]
 8008cee:	60c4      	str	r4, [r0, #12]
 8008cf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008cf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf8:	b94c      	cbnz	r4, 8008d0e <__pow5mult+0x66>
 8008cfa:	f240 2171 	movw	r1, #625	; 0x271
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ff16 	bl	8008b30 <__i2b>
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	f04f 0900 	mov.w	r9, #0
 8008d12:	07eb      	lsls	r3, r5, #31
 8008d14:	d50a      	bpl.n	8008d2c <__pow5mult+0x84>
 8008d16:	4639      	mov	r1, r7
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f7ff ff1e 	bl	8008b5c <__multiply>
 8008d20:	4639      	mov	r1, r7
 8008d22:	4680      	mov	r8, r0
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff fe47 	bl	80089b8 <_Bfree>
 8008d2a:	4647      	mov	r7, r8
 8008d2c:	106d      	asrs	r5, r5, #1
 8008d2e:	d00b      	beq.n	8008d48 <__pow5mult+0xa0>
 8008d30:	6820      	ldr	r0, [r4, #0]
 8008d32:	b938      	cbnz	r0, 8008d44 <__pow5mult+0x9c>
 8008d34:	4622      	mov	r2, r4
 8008d36:	4621      	mov	r1, r4
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ff0f 	bl	8008b5c <__multiply>
 8008d3e:	6020      	str	r0, [r4, #0]
 8008d40:	f8c0 9000 	str.w	r9, [r0]
 8008d44:	4604      	mov	r4, r0
 8008d46:	e7e4      	b.n	8008d12 <__pow5mult+0x6a>
 8008d48:	4638      	mov	r0, r7
 8008d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4e:	bf00      	nop
 8008d50:	08009db8 	.word	0x08009db8
 8008d54:	08009bdd 	.word	0x08009bdd
 8008d58:	08009c64 	.word	0x08009c64

08008d5c <__lshift>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	460c      	mov	r4, r1
 8008d62:	6849      	ldr	r1, [r1, #4]
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4691      	mov	r9, r2
 8008d70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d74:	f108 0601 	add.w	r6, r8, #1
 8008d78:	42b3      	cmp	r3, r6
 8008d7a:	db0b      	blt.n	8008d94 <__lshift+0x38>
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f7ff fddb 	bl	8008938 <_Balloc>
 8008d82:	4605      	mov	r5, r0
 8008d84:	b948      	cbnz	r0, 8008d9a <__lshift+0x3e>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b28      	ldr	r3, [pc, #160]	; (8008e2c <__lshift+0xd0>)
 8008d8a:	4829      	ldr	r0, [pc, #164]	; (8008e30 <__lshift+0xd4>)
 8008d8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008d90:	f000 f960 	bl	8009054 <__assert_func>
 8008d94:	3101      	adds	r1, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	e7ee      	b.n	8008d78 <__lshift+0x1c>
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f100 0114 	add.w	r1, r0, #20
 8008da0:	f100 0210 	add.w	r2, r0, #16
 8008da4:	4618      	mov	r0, r3
 8008da6:	4553      	cmp	r3, sl
 8008da8:	db33      	blt.n	8008e12 <__lshift+0xb6>
 8008daa:	6920      	ldr	r0, [r4, #16]
 8008dac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008db0:	f104 0314 	add.w	r3, r4, #20
 8008db4:	f019 091f 	ands.w	r9, r9, #31
 8008db8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008dbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dc0:	d02b      	beq.n	8008e1a <__lshift+0xbe>
 8008dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008dc6:	468a      	mov	sl, r1
 8008dc8:	2200      	movs	r2, #0
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008dd0:	4302      	orrs	r2, r0
 8008dd2:	f84a 2b04 	str.w	r2, [sl], #4
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	459c      	cmp	ip, r3
 8008ddc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008de0:	d8f3      	bhi.n	8008dca <__lshift+0x6e>
 8008de2:	ebac 0304 	sub.w	r3, ip, r4
 8008de6:	3b15      	subs	r3, #21
 8008de8:	f023 0303 	bic.w	r3, r3, #3
 8008dec:	3304      	adds	r3, #4
 8008dee:	f104 0015 	add.w	r0, r4, #21
 8008df2:	4584      	cmp	ip, r0
 8008df4:	bf38      	it	cc
 8008df6:	2304      	movcc	r3, #4
 8008df8:	50ca      	str	r2, [r1, r3]
 8008dfa:	b10a      	cbz	r2, 8008e00 <__lshift+0xa4>
 8008dfc:	f108 0602 	add.w	r6, r8, #2
 8008e00:	3e01      	subs	r6, #1
 8008e02:	4638      	mov	r0, r7
 8008e04:	612e      	str	r6, [r5, #16]
 8008e06:	4621      	mov	r1, r4
 8008e08:	f7ff fdd6 	bl	80089b8 <_Bfree>
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e16:	3301      	adds	r3, #1
 8008e18:	e7c5      	b.n	8008da6 <__lshift+0x4a>
 8008e1a:	3904      	subs	r1, #4
 8008e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e24:	459c      	cmp	ip, r3
 8008e26:	d8f9      	bhi.n	8008e1c <__lshift+0xc0>
 8008e28:	e7ea      	b.n	8008e00 <__lshift+0xa4>
 8008e2a:	bf00      	nop
 8008e2c:	08009c53 	.word	0x08009c53
 8008e30:	08009c64 	.word	0x08009c64

08008e34 <__mcmp>:
 8008e34:	b530      	push	{r4, r5, lr}
 8008e36:	6902      	ldr	r2, [r0, #16]
 8008e38:	690c      	ldr	r4, [r1, #16]
 8008e3a:	1b12      	subs	r2, r2, r4
 8008e3c:	d10e      	bne.n	8008e5c <__mcmp+0x28>
 8008e3e:	f100 0314 	add.w	r3, r0, #20
 8008e42:	3114      	adds	r1, #20
 8008e44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e54:	42a5      	cmp	r5, r4
 8008e56:	d003      	beq.n	8008e60 <__mcmp+0x2c>
 8008e58:	d305      	bcc.n	8008e66 <__mcmp+0x32>
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	bd30      	pop	{r4, r5, pc}
 8008e60:	4283      	cmp	r3, r0
 8008e62:	d3f3      	bcc.n	8008e4c <__mcmp+0x18>
 8008e64:	e7fa      	b.n	8008e5c <__mcmp+0x28>
 8008e66:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6a:	e7f7      	b.n	8008e5c <__mcmp+0x28>

08008e6c <__mdiff>:
 8008e6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	460c      	mov	r4, r1
 8008e72:	4606      	mov	r6, r0
 8008e74:	4611      	mov	r1, r2
 8008e76:	4620      	mov	r0, r4
 8008e78:	4617      	mov	r7, r2
 8008e7a:	f7ff ffdb 	bl	8008e34 <__mcmp>
 8008e7e:	1e05      	subs	r5, r0, #0
 8008e80:	d110      	bne.n	8008ea4 <__mdiff+0x38>
 8008e82:	4629      	mov	r1, r5
 8008e84:	4630      	mov	r0, r6
 8008e86:	f7ff fd57 	bl	8008938 <_Balloc>
 8008e8a:	b930      	cbnz	r0, 8008e9a <__mdiff+0x2e>
 8008e8c:	4b39      	ldr	r3, [pc, #228]	; (8008f74 <__mdiff+0x108>)
 8008e8e:	4602      	mov	r2, r0
 8008e90:	f240 2132 	movw	r1, #562	; 0x232
 8008e94:	4838      	ldr	r0, [pc, #224]	; (8008f78 <__mdiff+0x10c>)
 8008e96:	f000 f8dd 	bl	8009054 <__assert_func>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	bfa4      	itt	ge
 8008ea6:	463b      	movge	r3, r7
 8008ea8:	4627      	movge	r7, r4
 8008eaa:	4630      	mov	r0, r6
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	bfa6      	itte	ge
 8008eb0:	461c      	movge	r4, r3
 8008eb2:	2500      	movge	r5, #0
 8008eb4:	2501      	movlt	r5, #1
 8008eb6:	f7ff fd3f 	bl	8008938 <_Balloc>
 8008eba:	b920      	cbnz	r0, 8008ec6 <__mdiff+0x5a>
 8008ebc:	4b2d      	ldr	r3, [pc, #180]	; (8008f74 <__mdiff+0x108>)
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ec4:	e7e6      	b.n	8008e94 <__mdiff+0x28>
 8008ec6:	693e      	ldr	r6, [r7, #16]
 8008ec8:	60c5      	str	r5, [r0, #12]
 8008eca:	6925      	ldr	r5, [r4, #16]
 8008ecc:	f107 0114 	add.w	r1, r7, #20
 8008ed0:	f104 0914 	add.w	r9, r4, #20
 8008ed4:	f100 0e14 	add.w	lr, r0, #20
 8008ed8:	f107 0210 	add.w	r2, r7, #16
 8008edc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008ee0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008ee4:	46f2      	mov	sl, lr
 8008ee6:	2700      	movs	r7, #0
 8008ee8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008eec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ef0:	fa1f f883 	uxth.w	r8, r3
 8008ef4:	fa17 f78b 	uxtah	r7, r7, fp
 8008ef8:	0c1b      	lsrs	r3, r3, #16
 8008efa:	eba7 0808 	sub.w	r8, r7, r8
 8008efe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f06:	fa1f f888 	uxth.w	r8, r8
 8008f0a:	141f      	asrs	r7, r3, #16
 8008f0c:	454d      	cmp	r5, r9
 8008f0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f12:	f84a 3b04 	str.w	r3, [sl], #4
 8008f16:	d8e7      	bhi.n	8008ee8 <__mdiff+0x7c>
 8008f18:	1b2b      	subs	r3, r5, r4
 8008f1a:	3b15      	subs	r3, #21
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	3304      	adds	r3, #4
 8008f22:	3415      	adds	r4, #21
 8008f24:	42a5      	cmp	r5, r4
 8008f26:	bf38      	it	cc
 8008f28:	2304      	movcc	r3, #4
 8008f2a:	4419      	add	r1, r3
 8008f2c:	4473      	add	r3, lr
 8008f2e:	469e      	mov	lr, r3
 8008f30:	460d      	mov	r5, r1
 8008f32:	4565      	cmp	r5, ip
 8008f34:	d30e      	bcc.n	8008f54 <__mdiff+0xe8>
 8008f36:	f10c 0203 	add.w	r2, ip, #3
 8008f3a:	1a52      	subs	r2, r2, r1
 8008f3c:	f022 0203 	bic.w	r2, r2, #3
 8008f40:	3903      	subs	r1, #3
 8008f42:	458c      	cmp	ip, r1
 8008f44:	bf38      	it	cc
 8008f46:	2200      	movcc	r2, #0
 8008f48:	441a      	add	r2, r3
 8008f4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f4e:	b17b      	cbz	r3, 8008f70 <__mdiff+0x104>
 8008f50:	6106      	str	r6, [r0, #16]
 8008f52:	e7a5      	b.n	8008ea0 <__mdiff+0x34>
 8008f54:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f58:	fa17 f488 	uxtah	r4, r7, r8
 8008f5c:	1422      	asrs	r2, r4, #16
 8008f5e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f62:	b2a4      	uxth	r4, r4
 8008f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f68:	f84e 4b04 	str.w	r4, [lr], #4
 8008f6c:	1417      	asrs	r7, r2, #16
 8008f6e:	e7e0      	b.n	8008f32 <__mdiff+0xc6>
 8008f70:	3e01      	subs	r6, #1
 8008f72:	e7ea      	b.n	8008f4a <__mdiff+0xde>
 8008f74:	08009c53 	.word	0x08009c53
 8008f78:	08009c64 	.word	0x08009c64

08008f7c <__d2b>:
 8008f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f80:	4689      	mov	r9, r1
 8008f82:	2101      	movs	r1, #1
 8008f84:	ec57 6b10 	vmov	r6, r7, d0
 8008f88:	4690      	mov	r8, r2
 8008f8a:	f7ff fcd5 	bl	8008938 <_Balloc>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	b930      	cbnz	r0, 8008fa0 <__d2b+0x24>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b25      	ldr	r3, [pc, #148]	; (800902c <__d2b+0xb0>)
 8008f96:	4826      	ldr	r0, [pc, #152]	; (8009030 <__d2b+0xb4>)
 8008f98:	f240 310a 	movw	r1, #778	; 0x30a
 8008f9c:	f000 f85a 	bl	8009054 <__assert_func>
 8008fa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fa8:	bb35      	cbnz	r5, 8008ff8 <__d2b+0x7c>
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	d028      	beq.n	8009002 <__d2b+0x86>
 8008fb0:	4668      	mov	r0, sp
 8008fb2:	9600      	str	r6, [sp, #0]
 8008fb4:	f7ff fd8c 	bl	8008ad0 <__lo0bits>
 8008fb8:	9900      	ldr	r1, [sp, #0]
 8008fba:	b300      	cbz	r0, 8008ffe <__d2b+0x82>
 8008fbc:	9a01      	ldr	r2, [sp, #4]
 8008fbe:	f1c0 0320 	rsb	r3, r0, #32
 8008fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	40c2      	lsrs	r2, r0
 8008fca:	6163      	str	r3, [r4, #20]
 8008fcc:	9201      	str	r2, [sp, #4]
 8008fce:	9b01      	ldr	r3, [sp, #4]
 8008fd0:	61a3      	str	r3, [r4, #24]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	bf14      	ite	ne
 8008fd6:	2202      	movne	r2, #2
 8008fd8:	2201      	moveq	r2, #1
 8008fda:	6122      	str	r2, [r4, #16]
 8008fdc:	b1d5      	cbz	r5, 8009014 <__d2b+0x98>
 8008fde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fe2:	4405      	add	r5, r0
 8008fe4:	f8c9 5000 	str.w	r5, [r9]
 8008fe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fec:	f8c8 0000 	str.w	r0, [r8]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	b003      	add	sp, #12
 8008ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ffc:	e7d5      	b.n	8008faa <__d2b+0x2e>
 8008ffe:	6161      	str	r1, [r4, #20]
 8009000:	e7e5      	b.n	8008fce <__d2b+0x52>
 8009002:	a801      	add	r0, sp, #4
 8009004:	f7ff fd64 	bl	8008ad0 <__lo0bits>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	6163      	str	r3, [r4, #20]
 800900c:	2201      	movs	r2, #1
 800900e:	6122      	str	r2, [r4, #16]
 8009010:	3020      	adds	r0, #32
 8009012:	e7e3      	b.n	8008fdc <__d2b+0x60>
 8009014:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800901c:	f8c9 0000 	str.w	r0, [r9]
 8009020:	6918      	ldr	r0, [r3, #16]
 8009022:	f7ff fd35 	bl	8008a90 <__hi0bits>
 8009026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800902a:	e7df      	b.n	8008fec <__d2b+0x70>
 800902c:	08009c53 	.word	0x08009c53
 8009030:	08009c64 	.word	0x08009c64

08009034 <_calloc_r>:
 8009034:	b513      	push	{r0, r1, r4, lr}
 8009036:	434a      	muls	r2, r1
 8009038:	4611      	mov	r1, r2
 800903a:	9201      	str	r2, [sp, #4]
 800903c:	f7fe f9a2 	bl	8007384 <_malloc_r>
 8009040:	4604      	mov	r4, r0
 8009042:	b118      	cbz	r0, 800904c <_calloc_r+0x18>
 8009044:	9a01      	ldr	r2, [sp, #4]
 8009046:	2100      	movs	r1, #0
 8009048:	f7fe f944 	bl	80072d4 <memset>
 800904c:	4620      	mov	r0, r4
 800904e:	b002      	add	sp, #8
 8009050:	bd10      	pop	{r4, pc}
	...

08009054 <__assert_func>:
 8009054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009056:	4614      	mov	r4, r2
 8009058:	461a      	mov	r2, r3
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <__assert_func+0x2c>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4605      	mov	r5, r0
 8009060:	68d8      	ldr	r0, [r3, #12]
 8009062:	b14c      	cbz	r4, 8009078 <__assert_func+0x24>
 8009064:	4b07      	ldr	r3, [pc, #28]	; (8009084 <__assert_func+0x30>)
 8009066:	9100      	str	r1, [sp, #0]
 8009068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800906c:	4906      	ldr	r1, [pc, #24]	; (8009088 <__assert_func+0x34>)
 800906e:	462b      	mov	r3, r5
 8009070:	f000 f80e 	bl	8009090 <fiprintf>
 8009074:	f000 fa5a 	bl	800952c <abort>
 8009078:	4b04      	ldr	r3, [pc, #16]	; (800908c <__assert_func+0x38>)
 800907a:	461c      	mov	r4, r3
 800907c:	e7f3      	b.n	8009066 <__assert_func+0x12>
 800907e:	bf00      	nop
 8009080:	20000068 	.word	0x20000068
 8009084:	08009dc4 	.word	0x08009dc4
 8009088:	08009dd1 	.word	0x08009dd1
 800908c:	08009dff 	.word	0x08009dff

08009090 <fiprintf>:
 8009090:	b40e      	push	{r1, r2, r3}
 8009092:	b503      	push	{r0, r1, lr}
 8009094:	4601      	mov	r1, r0
 8009096:	ab03      	add	r3, sp, #12
 8009098:	4805      	ldr	r0, [pc, #20]	; (80090b0 <fiprintf+0x20>)
 800909a:	f853 2b04 	ldr.w	r2, [r3], #4
 800909e:	6800      	ldr	r0, [r0, #0]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	f000 f845 	bl	8009130 <_vfiprintf_r>
 80090a6:	b002      	add	sp, #8
 80090a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090ac:	b003      	add	sp, #12
 80090ae:	4770      	bx	lr
 80090b0:	20000068 	.word	0x20000068

080090b4 <__retarget_lock_init_recursive>:
 80090b4:	4770      	bx	lr

080090b6 <__retarget_lock_acquire_recursive>:
 80090b6:	4770      	bx	lr

080090b8 <__retarget_lock_release_recursive>:
 80090b8:	4770      	bx	lr

080090ba <__ascii_mbtowc>:
 80090ba:	b082      	sub	sp, #8
 80090bc:	b901      	cbnz	r1, 80090c0 <__ascii_mbtowc+0x6>
 80090be:	a901      	add	r1, sp, #4
 80090c0:	b142      	cbz	r2, 80090d4 <__ascii_mbtowc+0x1a>
 80090c2:	b14b      	cbz	r3, 80090d8 <__ascii_mbtowc+0x1e>
 80090c4:	7813      	ldrb	r3, [r2, #0]
 80090c6:	600b      	str	r3, [r1, #0]
 80090c8:	7812      	ldrb	r2, [r2, #0]
 80090ca:	1e10      	subs	r0, r2, #0
 80090cc:	bf18      	it	ne
 80090ce:	2001      	movne	r0, #1
 80090d0:	b002      	add	sp, #8
 80090d2:	4770      	bx	lr
 80090d4:	4610      	mov	r0, r2
 80090d6:	e7fb      	b.n	80090d0 <__ascii_mbtowc+0x16>
 80090d8:	f06f 0001 	mvn.w	r0, #1
 80090dc:	e7f8      	b.n	80090d0 <__ascii_mbtowc+0x16>

080090de <__sfputc_r>:
 80090de:	6893      	ldr	r3, [r2, #8]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	b410      	push	{r4}
 80090e6:	6093      	str	r3, [r2, #8]
 80090e8:	da08      	bge.n	80090fc <__sfputc_r+0x1e>
 80090ea:	6994      	ldr	r4, [r2, #24]
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	db01      	blt.n	80090f4 <__sfputc_r+0x16>
 80090f0:	290a      	cmp	r1, #10
 80090f2:	d103      	bne.n	80090fc <__sfputc_r+0x1e>
 80090f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f8:	f000 b94a 	b.w	8009390 <__swbuf_r>
 80090fc:	6813      	ldr	r3, [r2, #0]
 80090fe:	1c58      	adds	r0, r3, #1
 8009100:	6010      	str	r0, [r2, #0]
 8009102:	7019      	strb	r1, [r3, #0]
 8009104:	4608      	mov	r0, r1
 8009106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910a:	4770      	bx	lr

0800910c <__sfputs_r>:
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	4606      	mov	r6, r0
 8009110:	460f      	mov	r7, r1
 8009112:	4614      	mov	r4, r2
 8009114:	18d5      	adds	r5, r2, r3
 8009116:	42ac      	cmp	r4, r5
 8009118:	d101      	bne.n	800911e <__sfputs_r+0x12>
 800911a:	2000      	movs	r0, #0
 800911c:	e007      	b.n	800912e <__sfputs_r+0x22>
 800911e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009122:	463a      	mov	r2, r7
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ffda 	bl	80090de <__sfputc_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d1f3      	bne.n	8009116 <__sfputs_r+0xa>
 800912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009130 <_vfiprintf_r>:
 8009130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009134:	460d      	mov	r5, r1
 8009136:	b09d      	sub	sp, #116	; 0x74
 8009138:	4614      	mov	r4, r2
 800913a:	4698      	mov	r8, r3
 800913c:	4606      	mov	r6, r0
 800913e:	b118      	cbz	r0, 8009148 <_vfiprintf_r+0x18>
 8009140:	6983      	ldr	r3, [r0, #24]
 8009142:	b90b      	cbnz	r3, 8009148 <_vfiprintf_r+0x18>
 8009144:	f000 fb14 	bl	8009770 <__sinit>
 8009148:	4b89      	ldr	r3, [pc, #548]	; (8009370 <_vfiprintf_r+0x240>)
 800914a:	429d      	cmp	r5, r3
 800914c:	d11b      	bne.n	8009186 <_vfiprintf_r+0x56>
 800914e:	6875      	ldr	r5, [r6, #4]
 8009150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d405      	bmi.n	8009162 <_vfiprintf_r+0x32>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d402      	bmi.n	8009162 <_vfiprintf_r+0x32>
 800915c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800915e:	f7ff ffaa 	bl	80090b6 <__retarget_lock_acquire_recursive>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	071b      	lsls	r3, r3, #28
 8009166:	d501      	bpl.n	800916c <_vfiprintf_r+0x3c>
 8009168:	692b      	ldr	r3, [r5, #16]
 800916a:	b9eb      	cbnz	r3, 80091a8 <_vfiprintf_r+0x78>
 800916c:	4629      	mov	r1, r5
 800916e:	4630      	mov	r0, r6
 8009170:	f000 f96e 	bl	8009450 <__swsetup_r>
 8009174:	b1c0      	cbz	r0, 80091a8 <_vfiprintf_r+0x78>
 8009176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009178:	07dc      	lsls	r4, r3, #31
 800917a:	d50e      	bpl.n	800919a <_vfiprintf_r+0x6a>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	b01d      	add	sp, #116	; 0x74
 8009182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009186:	4b7b      	ldr	r3, [pc, #492]	; (8009374 <_vfiprintf_r+0x244>)
 8009188:	429d      	cmp	r5, r3
 800918a:	d101      	bne.n	8009190 <_vfiprintf_r+0x60>
 800918c:	68b5      	ldr	r5, [r6, #8]
 800918e:	e7df      	b.n	8009150 <_vfiprintf_r+0x20>
 8009190:	4b79      	ldr	r3, [pc, #484]	; (8009378 <_vfiprintf_r+0x248>)
 8009192:	429d      	cmp	r5, r3
 8009194:	bf08      	it	eq
 8009196:	68f5      	ldreq	r5, [r6, #12]
 8009198:	e7da      	b.n	8009150 <_vfiprintf_r+0x20>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	0598      	lsls	r0, r3, #22
 800919e:	d4ed      	bmi.n	800917c <_vfiprintf_r+0x4c>
 80091a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091a2:	f7ff ff89 	bl	80090b8 <__retarget_lock_release_recursive>
 80091a6:	e7e9      	b.n	800917c <_vfiprintf_r+0x4c>
 80091a8:	2300      	movs	r3, #0
 80091aa:	9309      	str	r3, [sp, #36]	; 0x24
 80091ac:	2320      	movs	r3, #32
 80091ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800937c <_vfiprintf_r+0x24c>
 80091bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091c0:	f04f 0901 	mov.w	r9, #1
 80091c4:	4623      	mov	r3, r4
 80091c6:	469a      	mov	sl, r3
 80091c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091cc:	b10a      	cbz	r2, 80091d2 <_vfiprintf_r+0xa2>
 80091ce:	2a25      	cmp	r2, #37	; 0x25
 80091d0:	d1f9      	bne.n	80091c6 <_vfiprintf_r+0x96>
 80091d2:	ebba 0b04 	subs.w	fp, sl, r4
 80091d6:	d00b      	beq.n	80091f0 <_vfiprintf_r+0xc0>
 80091d8:	465b      	mov	r3, fp
 80091da:	4622      	mov	r2, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	4630      	mov	r0, r6
 80091e0:	f7ff ff94 	bl	800910c <__sfputs_r>
 80091e4:	3001      	adds	r0, #1
 80091e6:	f000 80aa 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ec:	445a      	add	r2, fp
 80091ee:	9209      	str	r2, [sp, #36]	; 0x24
 80091f0:	f89a 3000 	ldrb.w	r3, [sl]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80a2 	beq.w	800933e <_vfiprintf_r+0x20e>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009204:	f10a 0a01 	add.w	sl, sl, #1
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9307      	str	r3, [sp, #28]
 800920c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009210:	931a      	str	r3, [sp, #104]	; 0x68
 8009212:	4654      	mov	r4, sl
 8009214:	2205      	movs	r2, #5
 8009216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921a:	4858      	ldr	r0, [pc, #352]	; (800937c <_vfiprintf_r+0x24c>)
 800921c:	f7f7 f818 	bl	8000250 <memchr>
 8009220:	9a04      	ldr	r2, [sp, #16]
 8009222:	b9d8      	cbnz	r0, 800925c <_vfiprintf_r+0x12c>
 8009224:	06d1      	lsls	r1, r2, #27
 8009226:	bf44      	itt	mi
 8009228:	2320      	movmi	r3, #32
 800922a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922e:	0713      	lsls	r3, r2, #28
 8009230:	bf44      	itt	mi
 8009232:	232b      	movmi	r3, #43	; 0x2b
 8009234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009238:	f89a 3000 	ldrb.w	r3, [sl]
 800923c:	2b2a      	cmp	r3, #42	; 0x2a
 800923e:	d015      	beq.n	800926c <_vfiprintf_r+0x13c>
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	4654      	mov	r4, sl
 8009244:	2000      	movs	r0, #0
 8009246:	f04f 0c0a 	mov.w	ip, #10
 800924a:	4621      	mov	r1, r4
 800924c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009250:	3b30      	subs	r3, #48	; 0x30
 8009252:	2b09      	cmp	r3, #9
 8009254:	d94e      	bls.n	80092f4 <_vfiprintf_r+0x1c4>
 8009256:	b1b0      	cbz	r0, 8009286 <_vfiprintf_r+0x156>
 8009258:	9207      	str	r2, [sp, #28]
 800925a:	e014      	b.n	8009286 <_vfiprintf_r+0x156>
 800925c:	eba0 0308 	sub.w	r3, r0, r8
 8009260:	fa09 f303 	lsl.w	r3, r9, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	46a2      	mov	sl, r4
 800926a:	e7d2      	b.n	8009212 <_vfiprintf_r+0xe2>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	1d19      	adds	r1, r3, #4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	9103      	str	r1, [sp, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	bfbb      	ittet	lt
 8009278:	425b      	neglt	r3, r3
 800927a:	f042 0202 	orrlt.w	r2, r2, #2
 800927e:	9307      	strge	r3, [sp, #28]
 8009280:	9307      	strlt	r3, [sp, #28]
 8009282:	bfb8      	it	lt
 8009284:	9204      	strlt	r2, [sp, #16]
 8009286:	7823      	ldrb	r3, [r4, #0]
 8009288:	2b2e      	cmp	r3, #46	; 0x2e
 800928a:	d10c      	bne.n	80092a6 <_vfiprintf_r+0x176>
 800928c:	7863      	ldrb	r3, [r4, #1]
 800928e:	2b2a      	cmp	r3, #42	; 0x2a
 8009290:	d135      	bne.n	80092fe <_vfiprintf_r+0x1ce>
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	1d1a      	adds	r2, r3, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	9203      	str	r2, [sp, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	bfb8      	it	lt
 800929e:	f04f 33ff 	movlt.w	r3, #4294967295
 80092a2:	3402      	adds	r4, #2
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800938c <_vfiprintf_r+0x25c>
 80092aa:	7821      	ldrb	r1, [r4, #0]
 80092ac:	2203      	movs	r2, #3
 80092ae:	4650      	mov	r0, sl
 80092b0:	f7f6 ffce 	bl	8000250 <memchr>
 80092b4:	b140      	cbz	r0, 80092c8 <_vfiprintf_r+0x198>
 80092b6:	2340      	movs	r3, #64	; 0x40
 80092b8:	eba0 000a 	sub.w	r0, r0, sl
 80092bc:	fa03 f000 	lsl.w	r0, r3, r0
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	4303      	orrs	r3, r0
 80092c4:	3401      	adds	r4, #1
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092cc:	482c      	ldr	r0, [pc, #176]	; (8009380 <_vfiprintf_r+0x250>)
 80092ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092d2:	2206      	movs	r2, #6
 80092d4:	f7f6 ffbc 	bl	8000250 <memchr>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d03f      	beq.n	800935c <_vfiprintf_r+0x22c>
 80092dc:	4b29      	ldr	r3, [pc, #164]	; (8009384 <_vfiprintf_r+0x254>)
 80092de:	bb1b      	cbnz	r3, 8009328 <_vfiprintf_r+0x1f8>
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	3307      	adds	r3, #7
 80092e4:	f023 0307 	bic.w	r3, r3, #7
 80092e8:	3308      	adds	r3, #8
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ee:	443b      	add	r3, r7
 80092f0:	9309      	str	r3, [sp, #36]	; 0x24
 80092f2:	e767      	b.n	80091c4 <_vfiprintf_r+0x94>
 80092f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f8:	460c      	mov	r4, r1
 80092fa:	2001      	movs	r0, #1
 80092fc:	e7a5      	b.n	800924a <_vfiprintf_r+0x11a>
 80092fe:	2300      	movs	r3, #0
 8009300:	3401      	adds	r4, #1
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	4619      	mov	r1, r3
 8009306:	f04f 0c0a 	mov.w	ip, #10
 800930a:	4620      	mov	r0, r4
 800930c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009310:	3a30      	subs	r2, #48	; 0x30
 8009312:	2a09      	cmp	r2, #9
 8009314:	d903      	bls.n	800931e <_vfiprintf_r+0x1ee>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0c5      	beq.n	80092a6 <_vfiprintf_r+0x176>
 800931a:	9105      	str	r1, [sp, #20]
 800931c:	e7c3      	b.n	80092a6 <_vfiprintf_r+0x176>
 800931e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009322:	4604      	mov	r4, r0
 8009324:	2301      	movs	r3, #1
 8009326:	e7f0      	b.n	800930a <_vfiprintf_r+0x1da>
 8009328:	ab03      	add	r3, sp, #12
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	462a      	mov	r2, r5
 800932e:	4b16      	ldr	r3, [pc, #88]	; (8009388 <_vfiprintf_r+0x258>)
 8009330:	a904      	add	r1, sp, #16
 8009332:	4630      	mov	r0, r6
 8009334:	f7fe f910 	bl	8007558 <_printf_float>
 8009338:	4607      	mov	r7, r0
 800933a:	1c78      	adds	r0, r7, #1
 800933c:	d1d6      	bne.n	80092ec <_vfiprintf_r+0x1bc>
 800933e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	d405      	bmi.n	8009350 <_vfiprintf_r+0x220>
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	059a      	lsls	r2, r3, #22
 8009348:	d402      	bmi.n	8009350 <_vfiprintf_r+0x220>
 800934a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934c:	f7ff feb4 	bl	80090b8 <__retarget_lock_release_recursive>
 8009350:	89ab      	ldrh	r3, [r5, #12]
 8009352:	065b      	lsls	r3, r3, #25
 8009354:	f53f af12 	bmi.w	800917c <_vfiprintf_r+0x4c>
 8009358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935a:	e711      	b.n	8009180 <_vfiprintf_r+0x50>
 800935c:	ab03      	add	r3, sp, #12
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	462a      	mov	r2, r5
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <_vfiprintf_r+0x258>)
 8009364:	a904      	add	r1, sp, #16
 8009366:	4630      	mov	r0, r6
 8009368:	f7fe fb82 	bl	8007a70 <_printf_i>
 800936c:	e7e4      	b.n	8009338 <_vfiprintf_r+0x208>
 800936e:	bf00      	nop
 8009370:	08009f3c 	.word	0x08009f3c
 8009374:	08009f5c 	.word	0x08009f5c
 8009378:	08009f1c 	.word	0x08009f1c
 800937c:	08009e0a 	.word	0x08009e0a
 8009380:	08009e14 	.word	0x08009e14
 8009384:	08007559 	.word	0x08007559
 8009388:	0800910d 	.word	0x0800910d
 800938c:	08009e10 	.word	0x08009e10

08009390 <__swbuf_r>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	460e      	mov	r6, r1
 8009394:	4614      	mov	r4, r2
 8009396:	4605      	mov	r5, r0
 8009398:	b118      	cbz	r0, 80093a2 <__swbuf_r+0x12>
 800939a:	6983      	ldr	r3, [r0, #24]
 800939c:	b90b      	cbnz	r3, 80093a2 <__swbuf_r+0x12>
 800939e:	f000 f9e7 	bl	8009770 <__sinit>
 80093a2:	4b21      	ldr	r3, [pc, #132]	; (8009428 <__swbuf_r+0x98>)
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d12b      	bne.n	8009400 <__swbuf_r+0x70>
 80093a8:	686c      	ldr	r4, [r5, #4]
 80093aa:	69a3      	ldr	r3, [r4, #24]
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	071a      	lsls	r2, r3, #28
 80093b2:	d52f      	bpl.n	8009414 <__swbuf_r+0x84>
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b36b      	cbz	r3, 8009414 <__swbuf_r+0x84>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	1ac0      	subs	r0, r0, r3
 80093be:	6963      	ldr	r3, [r4, #20]
 80093c0:	b2f6      	uxtb	r6, r6
 80093c2:	4283      	cmp	r3, r0
 80093c4:	4637      	mov	r7, r6
 80093c6:	dc04      	bgt.n	80093d2 <__swbuf_r+0x42>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f93c 	bl	8009648 <_fflush_r>
 80093d0:	bb30      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	60a3      	str	r3, [r4, #8]
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	6022      	str	r2, [r4, #0]
 80093de:	701e      	strb	r6, [r3, #0]
 80093e0:	6963      	ldr	r3, [r4, #20]
 80093e2:	3001      	adds	r0, #1
 80093e4:	4283      	cmp	r3, r0
 80093e6:	d004      	beq.n	80093f2 <__swbuf_r+0x62>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	07db      	lsls	r3, r3, #31
 80093ec:	d506      	bpl.n	80093fc <__swbuf_r+0x6c>
 80093ee:	2e0a      	cmp	r6, #10
 80093f0:	d104      	bne.n	80093fc <__swbuf_r+0x6c>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	f000 f927 	bl	8009648 <_fflush_r>
 80093fa:	b988      	cbnz	r0, 8009420 <__swbuf_r+0x90>
 80093fc:	4638      	mov	r0, r7
 80093fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <__swbuf_r+0x9c>)
 8009402:	429c      	cmp	r4, r3
 8009404:	d101      	bne.n	800940a <__swbuf_r+0x7a>
 8009406:	68ac      	ldr	r4, [r5, #8]
 8009408:	e7cf      	b.n	80093aa <__swbuf_r+0x1a>
 800940a:	4b09      	ldr	r3, [pc, #36]	; (8009430 <__swbuf_r+0xa0>)
 800940c:	429c      	cmp	r4, r3
 800940e:	bf08      	it	eq
 8009410:	68ec      	ldreq	r4, [r5, #12]
 8009412:	e7ca      	b.n	80093aa <__swbuf_r+0x1a>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f81a 	bl	8009450 <__swsetup_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	d0cb      	beq.n	80093b8 <__swbuf_r+0x28>
 8009420:	f04f 37ff 	mov.w	r7, #4294967295
 8009424:	e7ea      	b.n	80093fc <__swbuf_r+0x6c>
 8009426:	bf00      	nop
 8009428:	08009f3c 	.word	0x08009f3c
 800942c:	08009f5c 	.word	0x08009f5c
 8009430:	08009f1c 	.word	0x08009f1c

08009434 <__ascii_wctomb>:
 8009434:	b149      	cbz	r1, 800944a <__ascii_wctomb+0x16>
 8009436:	2aff      	cmp	r2, #255	; 0xff
 8009438:	bf85      	ittet	hi
 800943a:	238a      	movhi	r3, #138	; 0x8a
 800943c:	6003      	strhi	r3, [r0, #0]
 800943e:	700a      	strbls	r2, [r1, #0]
 8009440:	f04f 30ff 	movhi.w	r0, #4294967295
 8009444:	bf98      	it	ls
 8009446:	2001      	movls	r0, #1
 8009448:	4770      	bx	lr
 800944a:	4608      	mov	r0, r1
 800944c:	4770      	bx	lr
	...

08009450 <__swsetup_r>:
 8009450:	4b32      	ldr	r3, [pc, #200]	; (800951c <__swsetup_r+0xcc>)
 8009452:	b570      	push	{r4, r5, r6, lr}
 8009454:	681d      	ldr	r5, [r3, #0]
 8009456:	4606      	mov	r6, r0
 8009458:	460c      	mov	r4, r1
 800945a:	b125      	cbz	r5, 8009466 <__swsetup_r+0x16>
 800945c:	69ab      	ldr	r3, [r5, #24]
 800945e:	b913      	cbnz	r3, 8009466 <__swsetup_r+0x16>
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f985 	bl	8009770 <__sinit>
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <__swsetup_r+0xd0>)
 8009468:	429c      	cmp	r4, r3
 800946a:	d10f      	bne.n	800948c <__swsetup_r+0x3c>
 800946c:	686c      	ldr	r4, [r5, #4]
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009474:	0719      	lsls	r1, r3, #28
 8009476:	d42c      	bmi.n	80094d2 <__swsetup_r+0x82>
 8009478:	06dd      	lsls	r5, r3, #27
 800947a:	d411      	bmi.n	80094a0 <__swsetup_r+0x50>
 800947c:	2309      	movs	r3, #9
 800947e:	6033      	str	r3, [r6, #0]
 8009480:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295
 800948a:	e03e      	b.n	800950a <__swsetup_r+0xba>
 800948c:	4b25      	ldr	r3, [pc, #148]	; (8009524 <__swsetup_r+0xd4>)
 800948e:	429c      	cmp	r4, r3
 8009490:	d101      	bne.n	8009496 <__swsetup_r+0x46>
 8009492:	68ac      	ldr	r4, [r5, #8]
 8009494:	e7eb      	b.n	800946e <__swsetup_r+0x1e>
 8009496:	4b24      	ldr	r3, [pc, #144]	; (8009528 <__swsetup_r+0xd8>)
 8009498:	429c      	cmp	r4, r3
 800949a:	bf08      	it	eq
 800949c:	68ec      	ldreq	r4, [r5, #12]
 800949e:	e7e6      	b.n	800946e <__swsetup_r+0x1e>
 80094a0:	0758      	lsls	r0, r3, #29
 80094a2:	d512      	bpl.n	80094ca <__swsetup_r+0x7a>
 80094a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094a6:	b141      	cbz	r1, 80094ba <__swsetup_r+0x6a>
 80094a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094ac:	4299      	cmp	r1, r3
 80094ae:	d002      	beq.n	80094b6 <__swsetup_r+0x66>
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7fd ff17 	bl	80072e4 <_free_r>
 80094b6:	2300      	movs	r3, #0
 80094b8:	6363      	str	r3, [r4, #52]	; 0x34
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0308 	orr.w	r3, r3, #8
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	b94b      	cbnz	r3, 80094ea <__swsetup_r+0x9a>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094e0:	d003      	beq.n	80094ea <__swsetup_r+0x9a>
 80094e2:	4621      	mov	r1, r4
 80094e4:	4630      	mov	r0, r6
 80094e6:	f000 fa05 	bl	80098f4 <__smakebuf_r>
 80094ea:	89a0      	ldrh	r0, [r4, #12]
 80094ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094f0:	f010 0301 	ands.w	r3, r0, #1
 80094f4:	d00a      	beq.n	800950c <__swsetup_r+0xbc>
 80094f6:	2300      	movs	r3, #0
 80094f8:	60a3      	str	r3, [r4, #8]
 80094fa:	6963      	ldr	r3, [r4, #20]
 80094fc:	425b      	negs	r3, r3
 80094fe:	61a3      	str	r3, [r4, #24]
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	b943      	cbnz	r3, 8009516 <__swsetup_r+0xc6>
 8009504:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009508:	d1ba      	bne.n	8009480 <__swsetup_r+0x30>
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	0781      	lsls	r1, r0, #30
 800950e:	bf58      	it	pl
 8009510:	6963      	ldrpl	r3, [r4, #20]
 8009512:	60a3      	str	r3, [r4, #8]
 8009514:	e7f4      	b.n	8009500 <__swsetup_r+0xb0>
 8009516:	2000      	movs	r0, #0
 8009518:	e7f7      	b.n	800950a <__swsetup_r+0xba>
 800951a:	bf00      	nop
 800951c:	20000068 	.word	0x20000068
 8009520:	08009f3c 	.word	0x08009f3c
 8009524:	08009f5c 	.word	0x08009f5c
 8009528:	08009f1c 	.word	0x08009f1c

0800952c <abort>:
 800952c:	b508      	push	{r3, lr}
 800952e:	2006      	movs	r0, #6
 8009530:	f000 fa48 	bl	80099c4 <raise>
 8009534:	2001      	movs	r0, #1
 8009536:	f7f8 f907 	bl	8001748 <_exit>
	...

0800953c <__sflush_r>:
 800953c:	898a      	ldrh	r2, [r1, #12]
 800953e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	0710      	lsls	r0, r2, #28
 8009546:	460c      	mov	r4, r1
 8009548:	d458      	bmi.n	80095fc <__sflush_r+0xc0>
 800954a:	684b      	ldr	r3, [r1, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc05      	bgt.n	800955c <__sflush_r+0x20>
 8009550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc02      	bgt.n	800955c <__sflush_r+0x20>
 8009556:	2000      	movs	r0, #0
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800955e:	2e00      	cmp	r6, #0
 8009560:	d0f9      	beq.n	8009556 <__sflush_r+0x1a>
 8009562:	2300      	movs	r3, #0
 8009564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009568:	682f      	ldr	r7, [r5, #0]
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	d032      	beq.n	80095d4 <__sflush_r+0x98>
 800956e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	075a      	lsls	r2, r3, #29
 8009574:	d505      	bpl.n	8009582 <__sflush_r+0x46>
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	1ac0      	subs	r0, r0, r3
 800957a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800957c:	b10b      	cbz	r3, 8009582 <__sflush_r+0x46>
 800957e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009580:	1ac0      	subs	r0, r0, r3
 8009582:	2300      	movs	r3, #0
 8009584:	4602      	mov	r2, r0
 8009586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009588:	6a21      	ldr	r1, [r4, #32]
 800958a:	4628      	mov	r0, r5
 800958c:	47b0      	blx	r6
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	d106      	bne.n	80095a2 <__sflush_r+0x66>
 8009594:	6829      	ldr	r1, [r5, #0]
 8009596:	291d      	cmp	r1, #29
 8009598:	d82c      	bhi.n	80095f4 <__sflush_r+0xb8>
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <__sflush_r+0x108>)
 800959c:	40ca      	lsrs	r2, r1
 800959e:	07d6      	lsls	r6, r2, #31
 80095a0:	d528      	bpl.n	80095f4 <__sflush_r+0xb8>
 80095a2:	2200      	movs	r2, #0
 80095a4:	6062      	str	r2, [r4, #4]
 80095a6:	04d9      	lsls	r1, r3, #19
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	6022      	str	r2, [r4, #0]
 80095ac:	d504      	bpl.n	80095b8 <__sflush_r+0x7c>
 80095ae:	1c42      	adds	r2, r0, #1
 80095b0:	d101      	bne.n	80095b6 <__sflush_r+0x7a>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b903      	cbnz	r3, 80095b8 <__sflush_r+0x7c>
 80095b6:	6560      	str	r0, [r4, #84]	; 0x54
 80095b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ba:	602f      	str	r7, [r5, #0]
 80095bc:	2900      	cmp	r1, #0
 80095be:	d0ca      	beq.n	8009556 <__sflush_r+0x1a>
 80095c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d002      	beq.n	80095ce <__sflush_r+0x92>
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7fd fe8b 	bl	80072e4 <_free_r>
 80095ce:	2000      	movs	r0, #0
 80095d0:	6360      	str	r0, [r4, #52]	; 0x34
 80095d2:	e7c1      	b.n	8009558 <__sflush_r+0x1c>
 80095d4:	6a21      	ldr	r1, [r4, #32]
 80095d6:	2301      	movs	r3, #1
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	1c41      	adds	r1, r0, #1
 80095de:	d1c7      	bne.n	8009570 <__sflush_r+0x34>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0c4      	beq.n	8009570 <__sflush_r+0x34>
 80095e6:	2b1d      	cmp	r3, #29
 80095e8:	d001      	beq.n	80095ee <__sflush_r+0xb2>
 80095ea:	2b16      	cmp	r3, #22
 80095ec:	d101      	bne.n	80095f2 <__sflush_r+0xb6>
 80095ee:	602f      	str	r7, [r5, #0]
 80095f0:	e7b1      	b.n	8009556 <__sflush_r+0x1a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	e7ad      	b.n	8009558 <__sflush_r+0x1c>
 80095fc:	690f      	ldr	r7, [r1, #16]
 80095fe:	2f00      	cmp	r7, #0
 8009600:	d0a9      	beq.n	8009556 <__sflush_r+0x1a>
 8009602:	0793      	lsls	r3, r2, #30
 8009604:	680e      	ldr	r6, [r1, #0]
 8009606:	bf08      	it	eq
 8009608:	694b      	ldreq	r3, [r1, #20]
 800960a:	600f      	str	r7, [r1, #0]
 800960c:	bf18      	it	ne
 800960e:	2300      	movne	r3, #0
 8009610:	eba6 0807 	sub.w	r8, r6, r7
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	dd9c      	ble.n	8009556 <__sflush_r+0x1a>
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009620:	4643      	mov	r3, r8
 8009622:	463a      	mov	r2, r7
 8009624:	4628      	mov	r0, r5
 8009626:	47b0      	blx	r6
 8009628:	2800      	cmp	r0, #0
 800962a:	dc06      	bgt.n	800963a <__sflush_r+0xfe>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e78e      	b.n	8009558 <__sflush_r+0x1c>
 800963a:	4407      	add	r7, r0
 800963c:	eba8 0800 	sub.w	r8, r8, r0
 8009640:	e7e9      	b.n	8009616 <__sflush_r+0xda>
 8009642:	bf00      	nop
 8009644:	20400001 	.word	0x20400001

08009648 <_fflush_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b913      	cbnz	r3, 8009658 <_fflush_r+0x10>
 8009652:	2500      	movs	r5, #0
 8009654:	4628      	mov	r0, r5
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	b118      	cbz	r0, 8009662 <_fflush_r+0x1a>
 800965a:	6983      	ldr	r3, [r0, #24]
 800965c:	b90b      	cbnz	r3, 8009662 <_fflush_r+0x1a>
 800965e:	f000 f887 	bl	8009770 <__sinit>
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <_fflush_r+0x6c>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d11b      	bne.n	80096a0 <_fflush_r+0x58>
 8009668:	686c      	ldr	r4, [r5, #4]
 800966a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0ef      	beq.n	8009652 <_fflush_r+0xa>
 8009672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009674:	07d0      	lsls	r0, r2, #31
 8009676:	d404      	bmi.n	8009682 <_fflush_r+0x3a>
 8009678:	0599      	lsls	r1, r3, #22
 800967a:	d402      	bmi.n	8009682 <_fflush_r+0x3a>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f7ff fd1a 	bl	80090b6 <__retarget_lock_acquire_recursive>
 8009682:	4628      	mov	r0, r5
 8009684:	4621      	mov	r1, r4
 8009686:	f7ff ff59 	bl	800953c <__sflush_r>
 800968a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800968c:	07da      	lsls	r2, r3, #31
 800968e:	4605      	mov	r5, r0
 8009690:	d4e0      	bmi.n	8009654 <_fflush_r+0xc>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	059b      	lsls	r3, r3, #22
 8009696:	d4dd      	bmi.n	8009654 <_fflush_r+0xc>
 8009698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969a:	f7ff fd0d 	bl	80090b8 <__retarget_lock_release_recursive>
 800969e:	e7d9      	b.n	8009654 <_fflush_r+0xc>
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <_fflush_r+0x70>)
 80096a2:	429c      	cmp	r4, r3
 80096a4:	d101      	bne.n	80096aa <_fflush_r+0x62>
 80096a6:	68ac      	ldr	r4, [r5, #8]
 80096a8:	e7df      	b.n	800966a <_fflush_r+0x22>
 80096aa:	4b04      	ldr	r3, [pc, #16]	; (80096bc <_fflush_r+0x74>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	bf08      	it	eq
 80096b0:	68ec      	ldreq	r4, [r5, #12]
 80096b2:	e7da      	b.n	800966a <_fflush_r+0x22>
 80096b4:	08009f3c 	.word	0x08009f3c
 80096b8:	08009f5c 	.word	0x08009f5c
 80096bc:	08009f1c 	.word	0x08009f1c

080096c0 <std>:
 80096c0:	2300      	movs	r3, #0
 80096c2:	b510      	push	{r4, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	e9c0 3300 	strd	r3, r3, [r0]
 80096ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ce:	6083      	str	r3, [r0, #8]
 80096d0:	8181      	strh	r1, [r0, #12]
 80096d2:	6643      	str	r3, [r0, #100]	; 0x64
 80096d4:	81c2      	strh	r2, [r0, #14]
 80096d6:	6183      	str	r3, [r0, #24]
 80096d8:	4619      	mov	r1, r3
 80096da:	2208      	movs	r2, #8
 80096dc:	305c      	adds	r0, #92	; 0x5c
 80096de:	f7fd fdf9 	bl	80072d4 <memset>
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x38>)
 80096e4:	6263      	str	r3, [r4, #36]	; 0x24
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x3c>)
 80096e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x40>)
 80096ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <std+0x44>)
 80096f0:	6224      	str	r4, [r4, #32]
 80096f2:	6323      	str	r3, [r4, #48]	; 0x30
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	080099fd 	.word	0x080099fd
 80096fc:	08009a1f 	.word	0x08009a1f
 8009700:	08009a57 	.word	0x08009a57
 8009704:	08009a7b 	.word	0x08009a7b

08009708 <_cleanup_r>:
 8009708:	4901      	ldr	r1, [pc, #4]	; (8009710 <_cleanup_r+0x8>)
 800970a:	f000 b8af 	b.w	800986c <_fwalk_reent>
 800970e:	bf00      	nop
 8009710:	08009649 	.word	0x08009649

08009714 <__sfmoreglue>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	1e4a      	subs	r2, r1, #1
 8009718:	2568      	movs	r5, #104	; 0x68
 800971a:	4355      	muls	r5, r2
 800971c:	460e      	mov	r6, r1
 800971e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009722:	f7fd fe2f 	bl	8007384 <_malloc_r>
 8009726:	4604      	mov	r4, r0
 8009728:	b140      	cbz	r0, 800973c <__sfmoreglue+0x28>
 800972a:	2100      	movs	r1, #0
 800972c:	e9c0 1600 	strd	r1, r6, [r0]
 8009730:	300c      	adds	r0, #12
 8009732:	60a0      	str	r0, [r4, #8]
 8009734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009738:	f7fd fdcc 	bl	80072d4 <memset>
 800973c:	4620      	mov	r0, r4
 800973e:	bd70      	pop	{r4, r5, r6, pc}

08009740 <__sfp_lock_acquire>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sfp_lock_acquire+0x8>)
 8009742:	f7ff bcb8 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	200007c4 	.word	0x200007c4

0800974c <__sfp_lock_release>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sfp_lock_release+0x8>)
 800974e:	f7ff bcb3 	b.w	80090b8 <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	200007c4 	.word	0x200007c4

08009758 <__sinit_lock_acquire>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__sinit_lock_acquire+0x8>)
 800975a:	f7ff bcac 	b.w	80090b6 <__retarget_lock_acquire_recursive>
 800975e:	bf00      	nop
 8009760:	200007bf 	.word	0x200007bf

08009764 <__sinit_lock_release>:
 8009764:	4801      	ldr	r0, [pc, #4]	; (800976c <__sinit_lock_release+0x8>)
 8009766:	f7ff bca7 	b.w	80090b8 <__retarget_lock_release_recursive>
 800976a:	bf00      	nop
 800976c:	200007bf 	.word	0x200007bf

08009770 <__sinit>:
 8009770:	b510      	push	{r4, lr}
 8009772:	4604      	mov	r4, r0
 8009774:	f7ff fff0 	bl	8009758 <__sinit_lock_acquire>
 8009778:	69a3      	ldr	r3, [r4, #24]
 800977a:	b11b      	cbz	r3, 8009784 <__sinit+0x14>
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	f7ff bff0 	b.w	8009764 <__sinit_lock_release>
 8009784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009788:	6523      	str	r3, [r4, #80]	; 0x50
 800978a:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <__sinit+0x68>)
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <__sinit+0x6c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	62a2      	str	r2, [r4, #40]	; 0x28
 8009792:	42a3      	cmp	r3, r4
 8009794:	bf04      	itt	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	61a3      	streq	r3, [r4, #24]
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f820 	bl	80097e0 <__sfp>
 80097a0:	6060      	str	r0, [r4, #4]
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f81c 	bl	80097e0 <__sfp>
 80097a8:	60a0      	str	r0, [r4, #8]
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 f818 	bl	80097e0 <__sfp>
 80097b0:	2200      	movs	r2, #0
 80097b2:	60e0      	str	r0, [r4, #12]
 80097b4:	2104      	movs	r1, #4
 80097b6:	6860      	ldr	r0, [r4, #4]
 80097b8:	f7ff ff82 	bl	80096c0 <std>
 80097bc:	68a0      	ldr	r0, [r4, #8]
 80097be:	2201      	movs	r2, #1
 80097c0:	2109      	movs	r1, #9
 80097c2:	f7ff ff7d 	bl	80096c0 <std>
 80097c6:	68e0      	ldr	r0, [r4, #12]
 80097c8:	2202      	movs	r2, #2
 80097ca:	2112      	movs	r1, #18
 80097cc:	f7ff ff78 	bl	80096c0 <std>
 80097d0:	2301      	movs	r3, #1
 80097d2:	61a3      	str	r3, [r4, #24]
 80097d4:	e7d2      	b.n	800977c <__sinit+0xc>
 80097d6:	bf00      	nop
 80097d8:	08009b98 	.word	0x08009b98
 80097dc:	08009709 	.word	0x08009709

080097e0 <__sfp>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	4607      	mov	r7, r0
 80097e4:	f7ff ffac 	bl	8009740 <__sfp_lock_acquire>
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <__sfp+0x84>)
 80097ea:	681e      	ldr	r6, [r3, #0]
 80097ec:	69b3      	ldr	r3, [r6, #24]
 80097ee:	b913      	cbnz	r3, 80097f6 <__sfp+0x16>
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff ffbd 	bl	8009770 <__sinit>
 80097f6:	3648      	adds	r6, #72	; 0x48
 80097f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	d503      	bpl.n	8009808 <__sfp+0x28>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	b30b      	cbz	r3, 8009848 <__sfp+0x68>
 8009804:	6836      	ldr	r6, [r6, #0]
 8009806:	e7f7      	b.n	80097f8 <__sfp+0x18>
 8009808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800980c:	b9d5      	cbnz	r5, 8009844 <__sfp+0x64>
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <__sfp+0x88>)
 8009810:	60e3      	str	r3, [r4, #12]
 8009812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009816:	6665      	str	r5, [r4, #100]	; 0x64
 8009818:	f7ff fc4c 	bl	80090b4 <__retarget_lock_init_recursive>
 800981c:	f7ff ff96 	bl	800974c <__sfp_lock_release>
 8009820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009828:	6025      	str	r5, [r4, #0]
 800982a:	61a5      	str	r5, [r4, #24]
 800982c:	2208      	movs	r2, #8
 800982e:	4629      	mov	r1, r5
 8009830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009834:	f7fd fd4e 	bl	80072d4 <memset>
 8009838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800983c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009840:	4620      	mov	r0, r4
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	3468      	adds	r4, #104	; 0x68
 8009846:	e7d9      	b.n	80097fc <__sfp+0x1c>
 8009848:	2104      	movs	r1, #4
 800984a:	4638      	mov	r0, r7
 800984c:	f7ff ff62 	bl	8009714 <__sfmoreglue>
 8009850:	4604      	mov	r4, r0
 8009852:	6030      	str	r0, [r6, #0]
 8009854:	2800      	cmp	r0, #0
 8009856:	d1d5      	bne.n	8009804 <__sfp+0x24>
 8009858:	f7ff ff78 	bl	800974c <__sfp_lock_release>
 800985c:	230c      	movs	r3, #12
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	e7ee      	b.n	8009840 <__sfp+0x60>
 8009862:	bf00      	nop
 8009864:	08009b98 	.word	0x08009b98
 8009868:	ffff0001 	.word	0xffff0001

0800986c <_fwalk_reent>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	4606      	mov	r6, r0
 8009872:	4688      	mov	r8, r1
 8009874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009878:	2700      	movs	r7, #0
 800987a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800987e:	f1b9 0901 	subs.w	r9, r9, #1
 8009882:	d505      	bpl.n	8009890 <_fwalk_reent+0x24>
 8009884:	6824      	ldr	r4, [r4, #0]
 8009886:	2c00      	cmp	r4, #0
 8009888:	d1f7      	bne.n	800987a <_fwalk_reent+0xe>
 800988a:	4638      	mov	r0, r7
 800988c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009890:	89ab      	ldrh	r3, [r5, #12]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d907      	bls.n	80098a6 <_fwalk_reent+0x3a>
 8009896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800989a:	3301      	adds	r3, #1
 800989c:	d003      	beq.n	80098a6 <_fwalk_reent+0x3a>
 800989e:	4629      	mov	r1, r5
 80098a0:	4630      	mov	r0, r6
 80098a2:	47c0      	blx	r8
 80098a4:	4307      	orrs	r7, r0
 80098a6:	3568      	adds	r5, #104	; 0x68
 80098a8:	e7e9      	b.n	800987e <_fwalk_reent+0x12>

080098aa <__swhatbuf_r>:
 80098aa:	b570      	push	{r4, r5, r6, lr}
 80098ac:	460e      	mov	r6, r1
 80098ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b2:	2900      	cmp	r1, #0
 80098b4:	b096      	sub	sp, #88	; 0x58
 80098b6:	4614      	mov	r4, r2
 80098b8:	461d      	mov	r5, r3
 80098ba:	da07      	bge.n	80098cc <__swhatbuf_r+0x22>
 80098bc:	2300      	movs	r3, #0
 80098be:	602b      	str	r3, [r5, #0]
 80098c0:	89b3      	ldrh	r3, [r6, #12]
 80098c2:	061a      	lsls	r2, r3, #24
 80098c4:	d410      	bmi.n	80098e8 <__swhatbuf_r+0x3e>
 80098c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ca:	e00e      	b.n	80098ea <__swhatbuf_r+0x40>
 80098cc:	466a      	mov	r2, sp
 80098ce:	f000 f8fb 	bl	8009ac8 <_fstat_r>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	dbf2      	blt.n	80098bc <__swhatbuf_r+0x12>
 80098d6:	9a01      	ldr	r2, [sp, #4]
 80098d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098e0:	425a      	negs	r2, r3
 80098e2:	415a      	adcs	r2, r3
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	e7ee      	b.n	80098c6 <__swhatbuf_r+0x1c>
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	2000      	movs	r0, #0
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	b016      	add	sp, #88	; 0x58
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080098f4 <__smakebuf_r>:
 80098f4:	898b      	ldrh	r3, [r1, #12]
 80098f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f8:	079d      	lsls	r5, r3, #30
 80098fa:	4606      	mov	r6, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	d507      	bpl.n	8009910 <__smakebuf_r+0x1c>
 8009900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	6123      	str	r3, [r4, #16]
 8009908:	2301      	movs	r3, #1
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	b002      	add	sp, #8
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	ab01      	add	r3, sp, #4
 8009912:	466a      	mov	r2, sp
 8009914:	f7ff ffc9 	bl	80098aa <__swhatbuf_r>
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	4605      	mov	r5, r0
 800991c:	4630      	mov	r0, r6
 800991e:	f7fd fd31 	bl	8007384 <_malloc_r>
 8009922:	b948      	cbnz	r0, 8009938 <__smakebuf_r+0x44>
 8009924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009928:	059a      	lsls	r2, r3, #22
 800992a:	d4ef      	bmi.n	800990c <__smakebuf_r+0x18>
 800992c:	f023 0303 	bic.w	r3, r3, #3
 8009930:	f043 0302 	orr.w	r3, r3, #2
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	e7e3      	b.n	8009900 <__smakebuf_r+0xc>
 8009938:	4b0d      	ldr	r3, [pc, #52]	; (8009970 <__smakebuf_r+0x7c>)
 800993a:	62b3      	str	r3, [r6, #40]	; 0x28
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	6020      	str	r0, [r4, #0]
 8009940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	9b00      	ldr	r3, [sp, #0]
 8009948:	6163      	str	r3, [r4, #20]
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	6120      	str	r0, [r4, #16]
 800994e:	b15b      	cbz	r3, 8009968 <__smakebuf_r+0x74>
 8009950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009954:	4630      	mov	r0, r6
 8009956:	f000 f8c9 	bl	8009aec <_isatty_r>
 800995a:	b128      	cbz	r0, 8009968 <__smakebuf_r+0x74>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	89a0      	ldrh	r0, [r4, #12]
 800996a:	4305      	orrs	r5, r0
 800996c:	81a5      	strh	r5, [r4, #12]
 800996e:	e7cd      	b.n	800990c <__smakebuf_r+0x18>
 8009970:	08009709 	.word	0x08009709

08009974 <_raise_r>:
 8009974:	291f      	cmp	r1, #31
 8009976:	b538      	push	{r3, r4, r5, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	d904      	bls.n	8009988 <_raise_r+0x14>
 800997e:	2316      	movs	r3, #22
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	f04f 30ff 	mov.w	r0, #4294967295
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800998a:	b112      	cbz	r2, 8009992 <_raise_r+0x1e>
 800998c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009990:	b94b      	cbnz	r3, 80099a6 <_raise_r+0x32>
 8009992:	4620      	mov	r0, r4
 8009994:	f000 f830 	bl	80099f8 <_getpid_r>
 8009998:	462a      	mov	r2, r5
 800999a:	4601      	mov	r1, r0
 800999c:	4620      	mov	r0, r4
 800999e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a2:	f000 b817 	b.w	80099d4 <_kill_r>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d00a      	beq.n	80099c0 <_raise_r+0x4c>
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	d103      	bne.n	80099b6 <_raise_r+0x42>
 80099ae:	2316      	movs	r3, #22
 80099b0:	6003      	str	r3, [r0, #0]
 80099b2:	2001      	movs	r0, #1
 80099b4:	e7e7      	b.n	8009986 <_raise_r+0x12>
 80099b6:	2400      	movs	r4, #0
 80099b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099bc:	4628      	mov	r0, r5
 80099be:	4798      	blx	r3
 80099c0:	2000      	movs	r0, #0
 80099c2:	e7e0      	b.n	8009986 <_raise_r+0x12>

080099c4 <raise>:
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <raise+0xc>)
 80099c6:	4601      	mov	r1, r0
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	f7ff bfd3 	b.w	8009974 <_raise_r>
 80099ce:	bf00      	nop
 80099d0:	20000068 	.word	0x20000068

080099d4 <_kill_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_kill_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f7f7 fea1 	bl	8001728 <_kill>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_kill_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_kill_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	200007b8 	.word	0x200007b8

080099f8 <_getpid_r>:
 80099f8:	f7f7 be8e 	b.w	8001718 <_getpid>

080099fc <__sread>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	460c      	mov	r4, r1
 8009a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a04:	f000 f894 	bl	8009b30 <_read_r>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	bfab      	itete	ge
 8009a0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a10:	181b      	addge	r3, r3, r0
 8009a12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a16:	bfac      	ite	ge
 8009a18:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a1a:	81a3      	strhlt	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__swrite>:
 8009a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a22:	461f      	mov	r7, r3
 8009a24:	898b      	ldrh	r3, [r1, #12]
 8009a26:	05db      	lsls	r3, r3, #23
 8009a28:	4605      	mov	r5, r0
 8009a2a:	460c      	mov	r4, r1
 8009a2c:	4616      	mov	r6, r2
 8009a2e:	d505      	bpl.n	8009a3c <__swrite+0x1e>
 8009a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a34:	2302      	movs	r3, #2
 8009a36:	2200      	movs	r2, #0
 8009a38:	f000 f868 	bl	8009b0c <_lseek_r>
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a46:	81a3      	strh	r3, [r4, #12]
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a52:	f000 b817 	b.w	8009a84 <_write_r>

08009a56 <__sseek>:
 8009a56:	b510      	push	{r4, lr}
 8009a58:	460c      	mov	r4, r1
 8009a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5e:	f000 f855 	bl	8009b0c <_lseek_r>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	89a3      	ldrh	r3, [r4, #12]
 8009a66:	bf15      	itete	ne
 8009a68:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a72:	81a3      	strheq	r3, [r4, #12]
 8009a74:	bf18      	it	ne
 8009a76:	81a3      	strhne	r3, [r4, #12]
 8009a78:	bd10      	pop	{r4, pc}

08009a7a <__sclose>:
 8009a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7e:	f000 b813 	b.w	8009aa8 <_close_r>
	...

08009a84 <_write_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	; (8009aa4 <_write_r+0x20>)
 8009a88:	4604      	mov	r4, r0
 8009a8a:	4608      	mov	r0, r1
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	2200      	movs	r2, #0
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f7f7 fe7f 	bl	8001796 <_write>
 8009a98:	1c43      	adds	r3, r0, #1
 8009a9a:	d102      	bne.n	8009aa2 <_write_r+0x1e>
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	b103      	cbz	r3, 8009aa2 <_write_r+0x1e>
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	bd38      	pop	{r3, r4, r5, pc}
 8009aa4:	200007b8 	.word	0x200007b8

08009aa8 <_close_r>:
 8009aa8:	b538      	push	{r3, r4, r5, lr}
 8009aaa:	4d06      	ldr	r5, [pc, #24]	; (8009ac4 <_close_r+0x1c>)
 8009aac:	2300      	movs	r3, #0
 8009aae:	4604      	mov	r4, r0
 8009ab0:	4608      	mov	r0, r1
 8009ab2:	602b      	str	r3, [r5, #0]
 8009ab4:	f7f7 fe8b 	bl	80017ce <_close>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_close_r+0x1a>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_close_r+0x1a>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	200007b8 	.word	0x200007b8

08009ac8 <_fstat_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d07      	ldr	r5, [pc, #28]	; (8009ae8 <_fstat_r+0x20>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	602b      	str	r3, [r5, #0]
 8009ad6:	f7f7 fe86 	bl	80017e6 <_fstat>
 8009ada:	1c43      	adds	r3, r0, #1
 8009adc:	d102      	bne.n	8009ae4 <_fstat_r+0x1c>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	b103      	cbz	r3, 8009ae4 <_fstat_r+0x1c>
 8009ae2:	6023      	str	r3, [r4, #0]
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200007b8 	.word	0x200007b8

08009aec <_isatty_r>:
 8009aec:	b538      	push	{r3, r4, r5, lr}
 8009aee:	4d06      	ldr	r5, [pc, #24]	; (8009b08 <_isatty_r+0x1c>)
 8009af0:	2300      	movs	r3, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	4608      	mov	r0, r1
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7f7 fe85 	bl	8001806 <_isatty>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d102      	bne.n	8009b06 <_isatty_r+0x1a>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	b103      	cbz	r3, 8009b06 <_isatty_r+0x1a>
 8009b04:	6023      	str	r3, [r4, #0]
 8009b06:	bd38      	pop	{r3, r4, r5, pc}
 8009b08:	200007b8 	.word	0x200007b8

08009b0c <_lseek_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4d07      	ldr	r5, [pc, #28]	; (8009b2c <_lseek_r+0x20>)
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	4611      	mov	r1, r2
 8009b16:	2200      	movs	r2, #0
 8009b18:	602a      	str	r2, [r5, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f7f7 fe7e 	bl	800181c <_lseek>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_lseek_r+0x1e>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_lseek_r+0x1e>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	200007b8 	.word	0x200007b8

08009b30 <_read_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d07      	ldr	r5, [pc, #28]	; (8009b50 <_read_r+0x20>)
 8009b34:	4604      	mov	r4, r0
 8009b36:	4608      	mov	r0, r1
 8009b38:	4611      	mov	r1, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7f7 fe0c 	bl	800175c <_read>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_read_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_read_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	200007b8 	.word	0x200007b8

08009b54 <_init>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr

08009b60 <_fini>:
 8009b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b62:	bf00      	nop
 8009b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b66:	bc08      	pop	{r3}
 8009b68:	469e      	mov	lr, r3
 8009b6a:	4770      	bx	lr
>>>>>>> 748d7b90684c3622ffff9a5ada4d19d21dc6c12b
