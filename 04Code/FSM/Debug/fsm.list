
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006980  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ba0  08006ba0  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba8  08006ba8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bac  08006bac  00016bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000064  08006c14  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006c14  00020534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c03b  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ade  00000000  00000000  0003c0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00040f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abc4  00000000  00000000  000420d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019905  00000000  00000000  0006cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103a87  00000000  00000000  000865a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018a028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dec  00000000  00000000  0018a07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000064 	.word	0x20000064
 8000214:	00000000 	.word	0x00000000
 8000218:	08006b60 	.word	0x08006b60

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000068 	.word	0x20000068
 8000234:	08006b60 	.word	0x08006b60

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000544:	4a28      	ldr	r2, [pc, #160]	; (80005e8 <MX_ADC1_Init+0xb8>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <MX_ADC1_Init+0xb4>)
 800054a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000558:	2201      	movs	r2, #1
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_ADC1_Init+0xb4>)
 800055e:	2201      	movs	r2, #1
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_ADC1_Init+0xb4>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000572:	4a1e      	ldr	r2, [pc, #120]	; (80005ec <MX_ADC1_Init+0xbc>)
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <MX_ADC1_Init+0xb4>)
 800057e:	2202      	movs	r2, #2
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000584:	2201      	movs	r2, #1
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_ADC1_Init+0xb4>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4814      	ldr	r0, [pc, #80]	; (80005e4 <MX_ADC1_Init+0xb4>)
 8000592:	f001 fb47 	bl	8001c24 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fc44 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005a0:	230a      	movs	r3, #10
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005a8:	2307      	movs	r3, #7
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <MX_ADC1_Init+0xb4>)
 80005b2:	f001 fda9 	bl	8002108 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 fc34 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <MX_ADC1_Init+0xb4>)
 80005ce:	f001 fd9b 	bl	8002108 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005d8:	f000 fc26 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000140 	.word	0x20000140
 80005e8:	40012000 	.word	0x40012000
 80005ec:	0f000001 	.word	0x0f000001

080005f0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <MX_ADC2_Init+0x9c>)
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <MX_ADC2_Init+0xa0>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <MX_ADC2_Init+0x9c>)
 800060a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_ADC2_Init+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC2_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_ADC2_Init+0x9c>)
 800061e:	2201      	movs	r2, #1
 8000620:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ADC2_Init+0x9c>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_ADC2_Init+0x9c>)
 800062c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_CC4;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_ADC2_Init+0x9c>)
 8000634:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC2_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_ADC2_Init+0x9c>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC2_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC2_Init+0x9c>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC2_Init+0x9c>)
 8000656:	f001 fae5 	bl	8001c24 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000660:	f000 fbe2 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000664:	2303      	movs	r3, #3
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC2_Init+0x9c>)
 8000676:	f001 fd47 	bl	8002108 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000680:	f000 fbd2 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000098 	.word	0x20000098
 8000690:	40012100 	.word	0x40012100

08000694 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <MX_ADC3_Init+0xec>)
 80006a8:	4a36      	ldr	r2, [pc, #216]	; (8000784 <MX_ADC3_Init+0xf0>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ac:	4b34      	ldr	r3, [pc, #208]	; (8000780 <MX_ADC3_Init+0xec>)
 80006ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <MX_ADC3_Init+0xec>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_ADC3_Init+0xec>)
 80006bc:	2201      	movs	r2, #1
 80006be:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <MX_ADC3_Init+0xec>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <MX_ADC3_Init+0xec>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <MX_ADC3_Init+0xec>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <MX_ADC3_Init+0xec>)
 80006d6:	4a2c      	ldr	r2, [pc, #176]	; (8000788 <MX_ADC3_Init+0xf4>)
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_ADC3_Init+0xec>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 80006e0:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_ADC3_Init+0xec>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_ADC3_Init+0xec>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_ADC3_Init+0xec>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006f4:	4822      	ldr	r0, [pc, #136]	; (8000780 <MX_ADC3_Init+0xec>)
 80006f6:	f001 fa95 	bl	8001c24 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fb92 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000704:	230d      	movs	r3, #13
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800070c:	2307      	movs	r3, #7
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	; (8000780 <MX_ADC3_Init+0xec>)
 8000716:	f001 fcf7 	bl	8002108 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000720:	f000 fb82 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000724:	2309      	movs	r3, #9
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000728:	2302      	movs	r3, #2
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_ADC3_Init+0xec>)
 8000732:	f001 fce9 	bl	8002108 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800073c:	f000 fb74 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000740:	230f      	movs	r3, #15
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000744:	2303      	movs	r3, #3
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_ADC3_Init+0xec>)
 800074e:	f001 fcdb 	bl	8002108 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000758:	f000 fb66 	bl	8000e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800075c:	2308      	movs	r3, #8
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000760:	2304      	movs	r3, #4
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_ADC3_Init+0xec>)
 800076a:	f001 fccd 	bl	8002108 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000774:	f000 fb58 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000188 	.word	0x20000188
 8000784:	40012200 	.word	0x40012200
 8000788:	0f000001 	.word	0x0f000001

0800078c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b090      	sub	sp, #64	; 0x40
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a93      	ldr	r2, [pc, #588]	; (80009f8 <HAL_ADC_MspInit+0x26c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d174      	bne.n	8000898 <HAL_ADC_MspInit+0x10c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ae:	4b93      	ldr	r3, [pc, #588]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a92      	ldr	r2, [pc, #584]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b90      	ldr	r3, [pc, #576]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	4b8d      	ldr	r3, [pc, #564]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a8c      	ldr	r2, [pc, #560]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b8a      	ldr	r3, [pc, #552]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b87      	ldr	r3, [pc, #540]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a86      	ldr	r2, [pc, #536]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b84      	ldr	r3, [pc, #528]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
 80007f4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = SENSOR1_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000806:	4619      	mov	r1, r3
 8000808:	487d      	ldr	r0, [pc, #500]	; (8000a00 <HAL_ADC_MspInit+0x274>)
 800080a:	f002 fb59 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR8_Pin;
 800080e:	2380      	movs	r3, #128	; 0x80
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SENSOR8_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081e:	4619      	mov	r1, r3
 8000820:	4878      	ldr	r0, [pc, #480]	; (8000a04 <HAL_ADC_MspInit+0x278>)
 8000822:	f002 fb4d 	bl	8002ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000826:	4b78      	ldr	r3, [pc, #480]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000828:	4a78      	ldr	r2, [pc, #480]	; (8000a0c <HAL_ADC_MspInit+0x280>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800082c:	4b76      	ldr	r3, [pc, #472]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	4b75      	ldr	r3, [pc, #468]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b73      	ldr	r3, [pc, #460]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b72      	ldr	r3, [pc, #456]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000844:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000846:	4b70      	ldr	r3, [pc, #448]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084e:	4b6e      	ldr	r3, [pc, #440]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000850:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000854:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000856:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000858:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800085e:	4b6a      	ldr	r3, [pc, #424]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000864:	4b68      	ldr	r3, [pc, #416]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800086a:	4867      	ldr	r0, [pc, #412]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 800086c:	f001 ffac 	bl	80027c8 <HAL_DMA_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8000876:	f000 fad7 	bl	8000e28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a62      	ldr	r2, [pc, #392]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 800087e:	639a      	str	r2, [r3, #56]	; 0x38
 8000880:	4a61      	ldr	r2, [pc, #388]	; (8000a08 <HAL_ADC_MspInit+0x27c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2012      	movs	r0, #18
 800088c:	f001 ff65 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000890:	2012      	movs	r0, #18
 8000892:	f001 ff7e 	bl	8002792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000896:	e0ab      	b.n	80009f0 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <HAL_ADC_MspInit+0x284>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d12c      	bne.n	80008fc <HAL_ADC_MspInit+0x170>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80008a2:	4b56      	ldr	r3, [pc, #344]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a55      	ldr	r2, [pc, #340]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b53      	ldr	r3, [pc, #332]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b50      	ldr	r3, [pc, #320]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a4f      	ldr	r2, [pc, #316]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b4d      	ldr	r3, [pc, #308]	; (80009fc <HAL_ADC_MspInit+0x270>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = OBS_DETECTOR_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d6:	2303      	movs	r3, #3
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(OBS_DETECTOR_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e2:	4619      	mov	r1, r3
 80008e4:	4847      	ldr	r0, [pc, #284]	; (8000a04 <HAL_ADC_MspInit+0x278>)
 80008e6:	f002 faeb 	bl	8002ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2012      	movs	r0, #18
 80008f0:	f001 ff33 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008f4:	2012      	movs	r0, #18
 80008f6:	f001 ff4c 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 80008fa:	e079      	b.n	80009f0 <HAL_ADC_MspInit+0x264>
  else if(adcHandle->Instance==ADC3)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a44      	ldr	r2, [pc, #272]	; (8000a14 <HAL_ADC_MspInit+0x288>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d174      	bne.n	80009f0 <HAL_ADC_MspInit+0x264>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000906:	4b3d      	ldr	r3, [pc, #244]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a3c      	ldr	r2, [pc, #240]	; (80009fc <HAL_ADC_MspInit+0x270>)
 800090c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <HAL_ADC_MspInit+0x270>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <HAL_ADC_MspInit+0x270>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_ADC_MspInit+0x270>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR4_Pin|SENSOR5_Pin|SENSOR6_Pin;
 800094e:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000954:	2303      	movs	r3, #3
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800095c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000960:	4619      	mov	r1, r3
 8000962:	482d      	ldr	r0, [pc, #180]	; (8000a18 <HAL_ADC_MspInit+0x28c>)
 8000964:	f002 faac 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR3_Pin;
 8000968:	2308      	movs	r3, #8
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096c:	2303      	movs	r3, #3
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SENSOR3_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	4821      	ldr	r0, [pc, #132]	; (8000a00 <HAL_ADC_MspInit+0x274>)
 800097c:	f002 faa0 	bl	8002ec0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 8000982:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <HAL_ADC_MspInit+0x294>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 8000988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800098c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 800099c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009c4:	4815      	ldr	r0, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009c6:	f001 feff 	bl	80027c8 <HAL_DMA_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_ADC_MspInit+0x248>
      Error_Handler();
 80009d0:	f000 fa2a 	bl	8000e28 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a11      	ldr	r2, [pc, #68]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009d8:	639a      	str	r2, [r3, #56]	; 0x38
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_ADC_MspInit+0x290>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2012      	movs	r0, #18
 80009e6:	f001 feb8 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009ea:	2012      	movs	r0, #18
 80009ec:	f001 fed1 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 80009f0:	bf00      	nop
 80009f2:	3740      	adds	r7, #64	; 0x40
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40012000 	.word	0x40012000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020000 	.word	0x40020000
 8000a08:	200001d0 	.word	0x200001d0
 8000a0c:	40026410 	.word	0x40026410
 8000a10:	40012100 	.word	0x40012100
 8000a14:	40012200 	.word	0x40012200
 8000a18:	40021400 	.word	0x40021400
 8000a1c:	200000e0 	.word	0x200000e0
 8000a20:	40026428 	.word	0x40026428

08000a24 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
//	if(hadc == &OBS_DETECTOR_ADC)
//		// obstacle detector ISR
//		isr_obs_detector();
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2038      	movs	r0, #56	; 0x38
 8000a5c:	f001 fe7d 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a60:	2038      	movs	r0, #56	; 0x38
 8000a62:	f001 fe96 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2039      	movs	r0, #57	; 0x39
 8000a6c:	f001 fe75 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a70:	2039      	movs	r0, #57	; 0x39
 8000a72:	f001 fe8e 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a42      	ldr	r2, [pc, #264]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x154>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN2_RIGHT_Pin|IN1_LEFT_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2160      	movs	r1, #96	; 0x60
 8000b16:	4831      	ldr	r0, [pc, #196]	; (8000bdc <MX_GPIO_Init+0x158>)
 8000b18:	f002 fb7e 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|IN1_RIGHT_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f240 2101 	movw	r1, #513	; 0x201
 8000b22:	482f      	ldr	r0, [pc, #188]	; (8000be0 <MX_GPIO_Init+0x15c>)
 8000b24:	f002 fb78 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN2_LEFT_Pin|SPI3_SDA_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f244 0104 	movw	r1, #16388	; 0x4004
 8000b2e:	482d      	ldr	r0, [pc, #180]	; (8000be4 <MX_GPIO_Init+0x160>)
 8000b30:	f002 fb72 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_RSET_GPIO_Port, SPI3_RSET_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3a:	482b      	ldr	r0, [pc, #172]	; (8000be8 <MX_GPIO_Init+0x164>)
 8000b3c:	f002 fb6c 	bl	8003218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN2_RIGHT_Pin|IN1_LEFT_Pin;
 8000b40:	2360      	movs	r3, #96	; 0x60
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MX_GPIO_Init+0x158>)
 8000b58:	f002 f9b2 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|IN1_RIGHT_Pin;
 8000b5c:	f240 2301 	movw	r3, #513	; 0x201
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MX_GPIO_Init+0x15c>)
 8000b76:	f002 f9a3 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IN2_LEFT_Pin|SPI3_SDA_Pin;
 8000b7a:	f244 0304 	movw	r3, #16388	; 0x4004
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_GPIO_Init+0x160>)
 8000b94:	f002 f994 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <MX_GPIO_Init+0x164>)
 8000bae:	f002 f987 	bl	8002ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_RSET_Pin;
 8000bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_RSET_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_GPIO_Init+0x164>)
 8000bcc:	f002 f978 	bl	8002ec0 <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40020c00 	.word	0x40020c00
 8000be8:	40020800 	.word	0x40020800
 8000bec:	00000000 	.word	0x00000000

08000bf0 <lfollower_pid>:
		line.
@param	none
@retval	none
******************************************************************************/
void lfollower_pid(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

	// Apply PID to adjust motor PWM/velocity
	// error = S_LEFT_VAL - S_RIGHT_VAL
	pid_calcule(&pid, 	DIG_TO_ANALOG(lf_sens[SENSOR6]),
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <lfollower_pid+0xa8>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c00:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000c88 <lfollower_pid+0x98>
 8000c04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c08:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000c90 <lfollower_pid+0xa0>
 8000c0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c10:	eef7 4bc7 	vcvt.f32.f64	s9, d7
						DIG_TO_ANALOG(lf_sens[SENSOR3]));
 8000c14:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <lfollower_pid+0xa8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	ee07 3a90 	vmov	s15, r3
 8000c1c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c20:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000c88 <lfollower_pid+0x98>
 8000c24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c28:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c90 <lfollower_pid+0xa0>
 8000c2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
	pid_calcule(&pid, 	DIG_TO_ANALOG(lf_sens[SENSOR6]),
 8000c30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c34:	eef0 0a67 	vmov.f32	s1, s15
 8000c38:	eeb0 0a64 	vmov.f32	s0, s9
 8000c3c:	4817      	ldr	r0, [pc, #92]	; (8000c9c <lfollower_pid+0xac>)
 8000c3e:	f000 f9e1 	bl	8001004 <pid_calcule>

	// according to calculated error = S_LEFT_VAL - S_RIGHT_VAL:
	// command var. LEFT is equal to (+pid.u)
	// command var. RIGHT is equal to (-pid.u)
#ifdef _CALC_SPEED1_
	move_control(GET_SPEED(-pid.u), GET_SPEED(+pid.u));
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <lfollower_pid+0xac>)
 8000c44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c48:	eef1 7a67 	vneg.f32	s15, s15
 8000c4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ca0 <lfollower_pid+0xb0>
 8000c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ca4 <lfollower_pid+0xb4>
 8000c58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <lfollower_pid+0xac>)
 8000c5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000c62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8000ca0 <lfollower_pid+0xb0>
 8000c66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c6a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000ca4 <lfollower_pid+0xb4>
 8000c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000c72:	eef0 0a67 	vmov.f32	s1, s15
 8000c76:	eeb0 0a47 	vmov.f32	s0, s14
 8000c7a:	f000 f955 	bl	8000f28 <move_control>

	// calculates mean of the last PID errors
	mean_err = mean_window(pid.error, last_errors, LAST_ERRORS_SIZE);
	move_control(GET_SPEED_P(-pid.u, mean_err), GET_SPEED_P(+pid.u, mean_err));
#endif // !_CALC_SPEED2_
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	f3af 8000 	nop.w
 8000c88:	66666666 	.word	0x66666666
 8000c8c:	400a6666 	.word	0x400a6666
 8000c90:	00000000 	.word	0x00000000
 8000c94:	40affe00 	.word	0x40affe00
 8000c98:	20000084 	.word	0x20000084
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	3eb33334 	.word	0x3eb33334
 8000ca4:	3f266666 	.word	0x3f266666

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 ff5d 	bl	8001b6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f828 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f7ff fee6 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cb8:	f7ff febe 	bl	8000a38 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cbc:	f7ff fc38 	bl	8000530 <MX_ADC1_Init>
  MX_SPI3_Init();
 8000cc0:	f000 fa2c 	bl	800111c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000cc4:	f000 fe60 	bl	8001988 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000cc8:	f000 fc7e 	bl	80015c8 <MX_TIM6_Init>
  MX_ADC3_Init();
 8000ccc:	f7ff fce2 	bl	8000694 <MX_ADC3_Init>
  MX_ADC2_Init();
 8000cd0:	f7ff fc8e 	bl	80005f0 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000cd4:	f000 fc14 	bl	8001500 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000cd8:	f000 fe26 	bl	8001928 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000cdc:	f000 fb98 	bl	8001410 <MX_TIM3_Init>
  MX_TIM7_Init();
 8000ce0:	f000 fca8 	bl	8001634 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state = S_STOPPED;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <main+0x54>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
  nstate = S_STOPPED;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <main+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  test_stop_sensor();
 8000cf0:	f000 fb70 	bl	80013d4 <test_stop_sensor>
	  break;
 8000cf4:	bf00      	nop
 8000cf6:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000080 	.word	0x20000080
 8000d00:	20000081 	.word	0x20000081

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0b8      	sub	sp, #224	; 0xe0
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d0e:	2234      	movs	r2, #52	; 0x34
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 ff1c 	bl	8006b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2290      	movs	r2, #144	; 0x90
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 ff0d 	bl	8006b50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a39      	ldr	r2, [pc, #228]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <SystemClock_Config+0x11c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <SystemClock_Config+0x120>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a34      	ldr	r2, [pc, #208]	; (8000e24 <SystemClock_Config+0x120>)
 8000d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <SystemClock_Config+0x120>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d72:	2310      	movs	r3, #16
 8000d74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d8a:	23d8      	movs	r3, #216	; 0xd8
 8000d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 faa3 	bl	80032ec <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000dac:	f000 f83c 	bl	8000e28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db0:	f002 fa4c 	bl	800324c <HAL_PWREx_EnableOverDrive>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000dba:	f000 f835 	bl	8000e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000de0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000de4:	2107      	movs	r1, #7
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fd2e 	bl	8003848 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000df2:	f000 f819 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3;
 8000df6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dfa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fef3 	bl	8003bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000e14:	f000 f808 	bl	8000e28 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	37e0      	adds	r7, #224	; 0xe0
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <motor_init>:
@brief	Start PWM generation to a given motor
@param	Motor to be initialized
@retval none
******************************************************************************/
void motor_init(motor_st *m)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <motor_init+0x1c>)
 8000e44:	f003 fe48 	bl	8004ad8 <HAL_TIM_PWM_Start>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200002f8 	.word	0x200002f8

08000e54 <motor_kill>:
@brief	Stops PWM generation to a given motor
@param	Motor to be killed
@retval none
******************************************************************************/
void motor_kill(motor_st *m)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(&PWM_TIM_INSTANCE, m->pwm_channel);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4803      	ldr	r0, [pc, #12]	; (8000e70 <motor_kill+0x1c>)
 8000e64:	f003 ff32 	bl	8004ccc <HAL_TIM_PWM_Stop>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200002f8 	.word	0x200002f8

08000e74 <motor_control>:
		New PWM duty cycle
		Direction of motor rotation
@retval none
******************************************************************************/
void motor_control(motor_st *m,  uint8_t dc, motor_dir_e dir)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
 8000e80:	4613      	mov	r3, r2
 8000e82:	70bb      	strb	r3, [r7, #2]
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN1, m->GPIO_pin_IN1, motor_pin_config[dir][0]);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6858      	ldr	r0, [r3, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	8919      	ldrh	r1, [r3, #8]
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <motor_control+0x58>)
 8000e90:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e94:	461a      	mov	r2, r3
 8000e96:	f002 f9bf 	bl	8003218 <HAL_GPIO_WritePin>
	// Write motor GPIO Pin1
	HAL_GPIO_WritePin(m->GPIO_port_IN2, m->GPIO_pin_IN2, motor_pin_config[dir][1]);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68d8      	ldr	r0, [r3, #12]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	8a19      	ldrh	r1, [r3, #16]
 8000ea2:	78bb      	ldrb	r3, [r7, #2]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <motor_control+0x58>)
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	4413      	add	r3, r2
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	461a      	mov	r2, r3
 8000eae:	f002 f9b3 	bl	8003218 <HAL_GPIO_WritePin>
	// Set/Update motor PWM duty cycle
	set_pwm(&PWM_TIM_INSTANCE, m->pwm_channel, dc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	78fa      	ldrb	r2, [r7, #3]
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <motor_control+0x5c>)
 8000ec0:	f000 fce8 	bl	8001894 <set_pwm>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08006b78 	.word	0x08006b78
 8000ed0:	200002f8 	.word	0x200002f8

08000ed4 <move_start>:
@brief	Start movement. Enables both motors
@param	none
@retval none
******************************************************************************/
void move_start(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	motor_init(&motor_right);
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <move_start+0x1c>)
 8000eda:	f7ff ffab 	bl	8000e34 <motor_init>
	motor_init(&motor_left);
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <move_start+0x20>)
 8000ee0:	f7ff ffa8 	bl	8000e34 <motor_init>
	// indicate to the module that motors have been enabled
	move_flag = 1;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <move_start+0x24>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000030 	.word	0x20000030
 8000ef4:	20000044 	.word	0x20000044
 8000ef8:	20000094 	.word	0x20000094

08000efc <move_stop>:
@brief	Stop movement. Disables both motors
@param	none
@retval none
******************************************************************************/
void move_stop(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	motor_kill(&motor_right);
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <move_stop+0x1c>)
 8000f02:	f7ff ffa7 	bl	8000e54 <motor_kill>
	motor_kill(&motor_left);
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <move_stop+0x20>)
 8000f08:	f7ff ffa4 	bl	8000e54 <motor_kill>
	// indicate to the module that motors have been disable
	move_flag = 0;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <move_stop+0x24>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000030 	.word	0x20000030
 8000f1c:	20000044 	.word	0x20000044
 8000f20:	20000094 	.word	0x20000094
 8000f24:	00000000 	.word	0x00000000

08000f28 <move_control>:
@brief	Controls movement, setting speeds on each motor.
@param	Left and right motor speeds, respectively
@retval none
******************************************************************************/
void move_control(float speedL, float speedR)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f32:	edc7 0a02 	vstr	s1, [r7, #8]
	if(move_flag == 0)
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <move_control+0xd0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <move_control+0x1a>
		// move_start hasn't occurred
		move_start();
 8000f3e:	f7ff ffc9 	bl	8000ed4 <move_start>
	// speedL and speedR are PWM values, from -1 to +1
	// since dirL and dirR are uint8_t, speed values are truncated
	// so, by adding 0.99 (number less than 1) we get:
	// dirX = 0 if speedX is negative
	// dirX = 1 if speedX is positive
	uint8_t dirL = 0.99 + speedL;
 8000f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000fe8 <move_control+0xc0>
 8000f4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f56:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f5a:	793b      	ldrb	r3, [r7, #4]
 8000f5c:	75fb      	strb	r3, [r7, #23]
	uint8_t dirR = 0.99 + speedR;
 8000f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f66:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000fe8 <move_control+0xc0>
 8000f6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000f6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f72:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f76:	793b      	ldrb	r3, [r7, #4]
 8000f78:	75bb      	strb	r3, [r7, #22]

	// dirL and dirR (motor_dir_e) are:
	// 0 -> motor moving BACKWARDS (MOTOR_BACKWARD)
	// 1 -> motor moving FORWARD (MOTOR_FORWARD)
	motor_control(&motor_right, fabs(speedR) * 100, (motor_dir_e)(dirR & 0x01));
 8000f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f7e:	eef0 7ae7 	vabs.f32	s15, s15
 8000f82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f86:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8000ff0 <move_control+0xc8>
 8000f8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f92:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f96:	793b      	ldrb	r3, [r7, #4]
 8000f98:	b2d9      	uxtb	r1, r3
 8000f9a:	7dbb      	ldrb	r3, [r7, #22]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4815      	ldr	r0, [pc, #84]	; (8000ffc <move_control+0xd4>)
 8000fa6:	f7ff ff65 	bl	8000e74 <motor_control>
	motor_control(&motor_left, fabs(speedL) * 100, (motor_dir_e)(dirL & 0x01));
 8000faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fae:	eef0 7ae7 	vabs.f32	s15, s15
 8000fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000ff0 <move_control+0xc8>
 8000fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fbe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fc6:	793b      	ldrb	r3, [r7, #4]
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	480a      	ldr	r0, [pc, #40]	; (8001000 <move_control+0xd8>)
 8000fd6:	f7ff ff4d 	bl	8000e74 <motor_control>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	7ae147ae 	.word	0x7ae147ae
 8000fec:	3fefae14 	.word	0x3fefae14
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40590000 	.word	0x40590000
 8000ff8:	20000094 	.word	0x20000094
 8000ffc:	20000030 	.word	0x20000030
 8001000:	20000044 	.word	0x20000044

08001004 <pid_calcule>:
@param	PID struct
		inputs to the controller, in1 and in2
@retval none
******************************************************************************/
void pid_calcule(pid_st* pid, float in1, float in2)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001010:	edc7 0a01 	vstr	s1, [r7, #4]
	// set error
	pid->error = in1 - in2;
 8001014:	ed97 7a02 	vldr	s14, [r7, #8]
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a03 	vstr	s15, [r3, #12]

	// update sum of errors
	pid->sum_errors_bck = pid->sum_errors;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	619a      	str	r2, [r3, #24]
	pid->sum_errors += pid->prev_error;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	ed93 7a05 	vldr	s14, [r3, #20]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edd3 7a04 	vldr	s15, [r3, #16]
 800103a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edc3 7a05 	vstr	s15, [r3, #20]

	// calculate u
	pid->u_d =  pid->kd_h * (pid->error - pid->prev_error) + A_PID * pid->prev_u_d;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	ed93 7a02 	vldr	s14, [r3, #8]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	edd3 7a04 	vldr	s15, [r3, #16]
 8001056:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800105a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 7a08 	vldr	s15, [r3, #32]
 8001064:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001118 <pid_calcule+0x114>
 8001068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800106c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	edc3 7a07 	vstr	s15, [r3, #28]
	pid->u = pid->kp_h * pid->error + pid->ki_h * pid->sum_errors + pid->u_d;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	ed93 7a00 	vldr	s14, [r3]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 6a01 	vldr	s13, [r3, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	edd3 7a07 	vldr	s15, [r3, #28]
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// update previous values
	pid->prev_error = pid->error;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	611a      	str	r2, [r3, #16]
	pid->prev_u_d = pid->u_d;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69da      	ldr	r2, [r3, #28]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	621a      	str	r2, [r3, #32]

	// is u above upper saturation?
	if(pid->u > pid->u_sat_a)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dd08      	ble.n	80010e2 <pid_calcule+0xde>
	{
		pid->u = pid->u_sat_a;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	699a      	ldr	r2, [r3, #24]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	615a      	str	r2, [r3, #20]
	{
		pid->u = pid->u_sat_b;
		//sum of errors frozen
		pid->sum_errors = pid->sum_errors_bck;
	}
}
 80010e0:	e013      	b.n	800110a <pid_calcule+0x106>
	else if	(pid->u < pid->u_sat_b)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80010ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	d400      	bmi.n	80010fa <pid_calcule+0xf6>
}
 80010f8:	e007      	b.n	800110a <pid_calcule+0x106>
		pid->u = pid->u_sat_b;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
		pid->sum_errors = pid->sum_errors_bck;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	615a      	str	r2, [r3, #20]
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	3e99999a 	.word	0x3e99999a

0800111c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_SPI3_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_SPI3_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_SPI3_Init+0x74>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_SPI3_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_SPI3_Init+0x74>)
 8001136:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800113a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_SPI3_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_SPI3_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_SPI3_Init+0x74>)
 800114a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_SPI3_Init+0x74>)
 8001152:	2218      	movs	r2, #24
 8001154:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_SPI3_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_SPI3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_SPI3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_SPI3_Init+0x74>)
 800116a:	2207      	movs	r2, #7
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_SPI3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_SPI3_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_SPI3_Init+0x74>)
 800117c:	f003 f962 	bl	8004444 <HAL_SPI_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001186:	f7ff fe4f 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000230 	.word	0x20000230
 8001194:	40003c00 	.word	0x40003c00

08001198 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_SPI_MspInit+0x8c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d130      	bne.n	800121c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_SPI_MspInit+0x90>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011fc:	2306      	movs	r3, #6
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <HAL_SPI_MspInit+0x94>)
 8001208:	f001 fe5a 	bl	8002ec0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2033      	movs	r0, #51	; 0x33
 8001212:	f001 faa2 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001216:	2033      	movs	r0, #51	; 0x33
 8001218:	f001 fabb 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40003c00 	.word	0x40003c00
 8001228:	40023800 	.word	0x40023800
 800122c:	40020800 	.word	0x40020800

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x44>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x44>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x44>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a08      	ldr	r2, [pc, #32]	; (8001274 <HAL_MspInit+0x44>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_MspInit+0x44>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 fc8e 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <ADC_IRQHandler+0x1c>)
 80012d2:	f000 fdc3 	bl	8001e5c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <ADC_IRQHandler+0x20>)
 80012d8:	f000 fdc0 	bl	8001e5c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <ADC_IRQHandler+0x24>)
 80012de:	f000 fdbd 	bl	8001e5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000140 	.word	0x20000140
 80012ec:	20000098 	.word	0x20000098
 80012f0:	20000188 	.word	0x20000188

080012f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <TIM4_IRQHandler+0x10>)
 80012fa:	f003 fd67 	bl	8004dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200002f8 	.word	0x200002f8

08001308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART1_IRQHandler+0x10>)
 800130e:	f004 fda9 	bl	8005e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200004ac 	.word	0x200004ac

0800131c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <USART3_IRQHandler+0x10>)
 8001322:	f004 fd9f 	bl	8005e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000428 	.word	0x20000428

08001330 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <SPI3_IRQHandler+0x10>)
 8001336:	f003 f931 	bl	800459c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000230 	.word	0x20000230

08001344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM6_DAC_IRQHandler+0x10>)
 800134a:	f003 fd3f 	bl	8004dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000390 	.word	0x20000390

08001358 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM7_IRQHandler+0x10>)
 800135e:	f003 fd35 	bl	8004dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003dc 	.word	0x200003dc

0800136c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA2_Stream0_IRQHandler+0x10>)
 8001372:	f001 fb69 	bl	8002a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001d0 	.word	0x200001d0

08001380 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <DMA2_Stream1_IRQHandler+0x10>)
 8001386:	f001 fb5f 	bl	8002a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200000e0 	.word	0x200000e0

08001394 <stop_sensors_init>:

/******************************************************************************
Obstacle Detector
******************************************************************************/
void stop_sensors_init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	// start Obstacle detector timer
	HAL_TIM_Base_Start(&OBS_DETECTOR_TIM);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <stop_sensors_init+0x14>)
 800139a:	f003 fa75 	bl	8004888 <HAL_TIM_Base_Start>
	// start Obstacle detector ADC
	HAL_ADC_Start_IT(&OBS_DETECTOR_ADC);
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <stop_sensors_init+0x18>)
 80013a0:	f000 fc84 	bl	8001cac <HAL_ADC_Start_IT>
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000344 	.word	0x20000344
 80013ac:	20000098 	.word	0x20000098

080013b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <test_stop_sensor>:
	  move_stop();
	  HAL_Delay(2000);
}

void test_stop_sensor(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	// init stop sensors
	stop_sensors_init();
 80013d8:	f7ff ffdc 	bl	8001394 <stop_sensors_init>

	// start moving forwards
	move_forward(0.7);
 80013dc:	eddf 0a09 	vldr	s1, [pc, #36]	; 8001404 <test_stop_sensor+0x30>
 80013e0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001404 <test_stop_sensor+0x30>
 80013e4:	f7ff fda0 	bl	8000f28 <move_control>

	// wait for extern interrupt
	while((!cross_found_flag) && (!room_found_flag))
 80013e8:	bf00      	nop
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <test_stop_sensor+0x34>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <test_stop_sensor+0x26>
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <test_stop_sensor+0x38>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f7      	beq.n	80013ea <test_stop_sensor+0x16>
		;

	// stop movement
	move_stop();
 80013fa:	f7ff fd7f 	bl	8000efc <move_stop>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	3f333333 	.word	0x3f333333
 8001408:	20000095 	.word	0x20000095
 800140c:	20000096 	.word	0x20000096

08001410 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001442:	4b2d      	ldr	r3, [pc, #180]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001444:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <MX_TIM3_Init+0xec>)
 8001446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 864-1;
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_TIM3_Init+0xe8>)
 800144a:	f240 325f 	movw	r2, #863	; 0x35f
 800144e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62500-1;
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001458:	f24f 4223 	movw	r2, #62499	; 0xf423
 800145c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146a:	4823      	ldr	r0, [pc, #140]	; (80014f8 <MX_TIM3_Init+0xe8>)
 800146c:	f003 f9b5 	bl	80047da <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001476:	f7ff fcd7 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001488:	f003 ff46 	bl	8005318 <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001492:	f7ff fcc9 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001496:	4818      	ldr	r0, [pc, #96]	; (80014f8 <MX_TIM3_Init+0xe8>)
 8001498:	f003 fa66 	bl	8004968 <HAL_TIM_OC_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014a2:	f7ff fcc1 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <MX_TIM3_Init+0xe8>)
 80014b6:	f004 fbdb 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80014c0:	f7ff fcb2 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80014c4:	2330      	movs	r3, #48	; 0x30
 80014c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	220c      	movs	r2, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <MX_TIM3_Init+0xe8>)
 80014dc:	f003 fd96 	bl	800500c <HAL_TIM_OC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80014e6:	f7ff fc9f 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014ea:	4803      	ldr	r0, [pc, #12]	; (80014f8 <MX_TIM3_Init+0xe8>)
 80014ec:	f000 f956 	bl	800179c <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	; 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000344 	.word	0x20000344
 80014fc:	40000400 	.word	0x40000400

08001500 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_TIM4_Init+0xc0>)
 8001526:	4a27      	ldr	r2, [pc, #156]	; (80015c4 <MX_TIM4_Init+0xc4>)
 8001528:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108-1;
 800152a:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <MX_TIM4_Init+0xc0>)
 800152c:	226b      	movs	r2, #107	; 0x6b
 800152e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <MX_TIM4_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-0;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_TIM4_Init+0xc0>)
 8001538:	2264      	movs	r2, #100	; 0x64
 800153a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM4_Init+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_TIM4_Init+0xc0>)
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001548:	481d      	ldr	r0, [pc, #116]	; (80015c0 <MX_TIM4_Init+0xc0>)
 800154a:	f003 fa6e 	bl	8004a2a <HAL_TIM_PWM_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001554:	f7ff fc68 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4816      	ldr	r0, [pc, #88]	; (80015c0 <MX_TIM4_Init+0xc0>)
 8001568:	f004 fb82 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001572:	f7ff fc59 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001576:	2360      	movs	r3, #96	; 0x60
 8001578:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001586:	463b      	mov	r3, r7
 8001588:	2208      	movs	r2, #8
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM4_Init+0xc0>)
 800158e:	f003 fdb3 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001598:	f7ff fc46 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	220c      	movs	r2, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	; (80015c0 <MX_TIM4_Init+0xc0>)
 80015a4:	f003 fda8 	bl	80050f8 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80015ae:	f7ff fc3b 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <MX_TIM4_Init+0xc0>)
 80015b4:	f000 f8f2 	bl	800179c <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_TIM6_Init+0x64>)
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_TIM6_Init+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_TIM6_Init+0x64>)
 80015e0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80015e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_TIM6_Init+0x64>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_TIM6_Init+0x64>)
 80015ee:	2263      	movs	r2, #99	; 0x63
 80015f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_TIM6_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015f8:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_TIM6_Init+0x64>)
 80015fa:	f003 f8ee 	bl	80047da <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001604:	f7ff fc10 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001608:	2320      	movs	r3, #32
 800160a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_TIM6_Init+0x64>)
 8001616:	f004 fb2b 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001620:	f7ff fc02 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000390 	.word	0x20000390
 8001630:	40001000 	.word	0x40001000

08001634 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM7_Init+0x68>)
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <MX_TIM7_Init+0x6c>)
 8001648:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_TIM7_Init+0x68>)
 800164c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8001650:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_TIM7_Init+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_TIM7_Init+0x68>)
 800165a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800165e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_TIM7_Init+0x68>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_TIM7_Init+0x68>)
 8001668:	f003 f8b7 	bl	80047da <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001672:	f7ff fbd9 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001676:	2320      	movs	r3, #32
 8001678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_TIM7_Init+0x68>)
 8001684:	f004 faf4 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800168e:	f7ff fbcb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200003dc 	.word	0x200003dc
 80016a0:	40001400 	.word	0x40001400

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_TIM_Base_MspInit+0x9c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d10c      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016ce:	e032      	b.n	8001736 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_TIM_Base_MspInit+0xa4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d114      	bne.n	8001704 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016e0:	f043 0310 	orr.w	r3, r3, #16
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2036      	movs	r0, #54	; 0x36
 80016f8:	f001 f82f 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016fc:	2036      	movs	r0, #54	; 0x36
 80016fe:	f001 f848 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8001702:	e018      	b.n	8001736 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a10      	ldr	r2, [pc, #64]	; (800174c <HAL_TIM_Base_MspInit+0xa8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d113      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 8001714:	f043 0320 	orr.w	r3, r3, #32
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_TIM_Base_MspInit+0xa0>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2100      	movs	r1, #0
 800172a:	2037      	movs	r0, #55	; 0x37
 800172c:	f001 f815 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001730:	2037      	movs	r0, #55	; 0x37
 8001732:	f001 f82e 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40000400 	.word	0x40000400
 8001744:	40023800 	.word	0x40023800
 8001748:	40001000 	.word	0x40001000
 800174c:	40001400 	.word	0x40001400

08001750 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_TIM_PWM_MspInit+0x44>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d113      	bne.n	800178a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_TIM_PWM_MspInit+0x48>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a0c      	ldr	r2, [pc, #48]	; (8001798 <HAL_TIM_PWM_MspInit+0x48>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_TIM_PWM_MspInit+0x48>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201e      	movs	r0, #30
 8001780:	f000 ffeb 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001784:	201e      	movs	r0, #30
 8001786:	f001 f804 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40000800 	.word	0x40000800
 8001798:	40023800 	.word	0x40023800

0800179c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a31      	ldr	r2, [pc, #196]	; (8001880 <HAL_TIM_MspPostInit+0xe4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11c      	bne.n	80017f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a30      	ldr	r2, [pc, #192]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b2e      	ldr	r3, [pc, #184]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017d6:	2302      	movs	r3, #2
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e6:	2302      	movs	r3, #2
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4825      	ldr	r0, [pc, #148]	; (8001888 <HAL_TIM_MspPostInit+0xec>)
 80017f2:	f001 fb65 	bl	8002ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017f6:	e03e      	b.n	8001876 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM4)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a23      	ldr	r2, [pc, #140]	; (800188c <HAL_TIM_MspPostInit+0xf0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d139      	bne.n	8001876 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a19      	ldr	r2, [pc, #100]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <HAL_TIM_MspPostInit+0xe8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_LEFT_Pin;
 8001832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001844:	2302      	movs	r3, #2
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4810      	ldr	r0, [pc, #64]	; (8001890 <HAL_TIM_MspPostInit+0xf4>)
 8001850:	f001 fb36 	bl	8002ec0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_RIGHT_Pin;
 8001854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001866:	2302      	movs	r3, #2
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <HAL_TIM_MspPostInit+0xec>)
 8001872:	f001 fb25 	bl	8002ec0 <HAL_GPIO_Init>
}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40000400 	.word	0x40000400
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400
 800188c:	40000800 	.word	0x40000800
 8001890:	40020c00 	.word	0x40020c00

08001894 <set_pwm>:
  }
}

/* USER CODE BEGIN 1 */
void set_pwm(TIM_HandleTypeDef *htim, uint16_t channel, uint16_t dc)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018a4:	887b      	ldrh	r3, [r7, #2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d104      	bne.n	80018b4 <set_pwm+0x20>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	883a      	ldrh	r2, [r7, #0]
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018b2:	e023      	b.n	80018fc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d104      	bne.n	80018c4 <set_pwm+0x30>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	883b      	ldrh	r3, [r7, #0]
 80018c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018c2:	e01b      	b.n	80018fc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d104      	bne.n	80018d4 <set_pwm+0x40>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	883b      	ldrh	r3, [r7, #0]
 80018d0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80018d2:	e013      	b.n	80018fc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d104      	bne.n	80018e4 <set_pwm+0x50>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	883b      	ldrh	r3, [r7, #0]
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80018e2:	e00b      	b.n	80018fc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d104      	bne.n	80018f4 <set_pwm+0x60>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	883b      	ldrh	r3, [r7, #0]
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80018f2:	e003      	b.n	80018fc <set_pwm+0x68>
	__HAL_TIM_SET_COMPARE(htim, channel, dc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	883b      	ldrh	r3, [r7, #0]
 80018fa:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		lfollower_pid();
 8001918:	f7ff f96a 	bl	8000bf0 <lfollower_pid>
	}
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000390 	.word	0x20000390

08001928 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_USART1_UART_Init+0x58>)
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <MX_USART1_UART_Init+0x5c>)
 8001930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART1_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART1_UART_Init+0x58>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART1_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART1_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART1_UART_Init+0x58>)
 800196c:	f004 fa2c 	bl	8005dc8 <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001976:	f7ff fa57 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200004ac 	.word	0x200004ac
 8001984:	40011000 	.word	0x40011000

08001988 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 800198e:	4a15      	ldr	r2, [pc, #84]	; (80019e4 <MX_USART3_UART_Init+0x5c>)
 8001990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART3_UART_Init+0x58>)
 80019cc:	f004 f9fc 	bl	8005dc8 <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019d6:	f7ff fa27 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000428 	.word	0x20000428
 80019e4:	40004800 	.word	0x40004800

080019e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_UART_MspInit+0x11c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d141      	bne.n	8001a8e <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a38      	ldr	r2, [pc, #224]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = BLUET_RX_Pin;
 8001a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_RX_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	482d      	ldr	r0, [pc, #180]	; (8001b0c <HAL_UART_MspInit+0x124>)
 8001a58:	f001 fa32 	bl	8002ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUET_TX_Pin;
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLUET_TX_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4825      	ldr	r0, [pc, #148]	; (8001b0c <HAL_UART_MspInit+0x124>)
 8001a78:	f001 fa22 	bl	8002ec0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2025      	movs	r0, #37	; 0x25
 8001a82:	f000 fe6a 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a86:	2025      	movs	r0, #37	; 0x25
 8001a88:	f000 fe83 	bl	8002792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a8c:	e035      	b.n	8001afa <HAL_UART_MspInit+0x112>
  else if(uartHandle->Instance==USART3)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_UART_MspInit+0x128>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d130      	bne.n	8001afa <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001ab6:	f043 0308 	orr.w	r3, r3, #8
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_UART_MspInit+0x120>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ada:	2307      	movs	r3, #7
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480b      	ldr	r0, [pc, #44]	; (8001b14 <HAL_UART_MspInit+0x12c>)
 8001ae6:	f001 f9eb 	bl	8002ec0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2027      	movs	r0, #39	; 0x27
 8001af0:	f000 fe33 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001af4:	2027      	movs	r0, #39	; 0x27
 8001af6:	f000 fe4c 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400
 8001b10:	40004800 	.word	0x40004800
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b42:	f7ff fc35 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f004 ffdf 	bl	8006b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff f8ad 	bl	8000ca8 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b5c:	08006bb0 	.word	0x08006bb0
  ldr r2, =_sbss
 8001b60:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b64:	20000534 	.word	0x20000534

08001b68 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <CAN1_RX0_IRQHandler>

08001b6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f000 fde8 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f805 	bl	8001b84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b7a:	f7ff fb59 	bl	8001230 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fe03 	bl	80027ae <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 fdcb 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000058 	.word	0x20000058
 8001bdc:	20000060 	.word	0x20000060
 8001be0:	2000005c 	.word	0x2000005c

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000060 	.word	0x20000060
 8001c08:	20000530 	.word	0x20000530

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000530 	.word	0x20000530

08001c24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e031      	b.n	8001c9e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fda2 	bl	800078c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_ADC_Init+0x84>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fb92 	bl	800239c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	f043 0201 	orr.w	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8e:	e001      	b.n	8001c94 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ffffeefd 	.word	0xffffeefd

08001cac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Start_IT+0x1a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e0b5      	b.n	8001e32 <HAL_ADC_Start_IT+0x186>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d018      	beq.n	8001d0e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001cec:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_ADC_Start_IT+0x194>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_ADC_Start_IT+0x198>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9a      	lsrs	r2, r3, #18
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d17d      	bne.n	8001e18 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d20:	4b49      	ldr	r3, [pc, #292]	; (8001e48 <HAL_ADC_Start_IT+0x19c>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f023 0206 	bic.w	r2, r3, #6
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d7c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_ADC_Start_IT+0x1a0>)
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_ADC_Start_IT+0x1a4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10f      	bne.n	8001dba <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d143      	bne.n	8001e30 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	e03a      	b.n	8001e30 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_ADC_Start_IT+0x1a8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d10e      	bne.n	8001de2 <HAL_ADC_Start_IT+0x136>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d107      	bne.n	8001de2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001de0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_ADC_Start_IT+0x1a4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d120      	bne.n	8001e30 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_ADC_Start_IT+0x1ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d11b      	bne.n	8001e30 <HAL_ADC_Start_IT+0x184>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d114      	bne.n	8001e30 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e00b      	b.n	8001e30 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000058 	.word	0x20000058
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	fffff8fe 	.word	0xfffff8fe
 8001e4c:	04000020 	.word	0x04000020
 8001e50:	40012300 	.word	0x40012300
 8001e54:	40012000 	.word	0x40012000
 8001e58:	40012200 	.word	0x40012200

08001e5c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d049      	beq.n	8001f32 <HAL_ADC_IRQHandler+0xd6>
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d046      	beq.n	8001f32 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d12b      	bne.n	8001f22 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d127      	bne.n	8001f22 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d119      	bne.n	8001f22 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0220 	bic.w	r2, r2, #32
 8001efc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d105      	bne.n	8001f22 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7fe fd7e 	bl	8000a24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0212 	mvn.w	r2, #18
 8001f30:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d057      	beq.n	8002014 <HAL_ADC_IRQHandler+0x1b8>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d054      	beq.n	8002014 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d139      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d12b      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d124      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d11d      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d119      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d105      	bne.n	8002004 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fac3 	bl	8002590 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 020c 	mvn.w	r2, #12
 8002012:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	bf0c      	ite	eq
 8002022:	2301      	moveq	r3, #1
 8002024:	2300      	movne	r3, #0
 8002026:	b2db      	uxtb	r3, r3
 8002028:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d017      	beq.n	8002076 <HAL_ADC_IRQHandler+0x21a>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10d      	bne.n	8002076 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f839 	bl	80020de <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b20      	cmp	r3, #32
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x27a>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0220 	mvn.w	r2, #32
 80020c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f813 	bl	80020f2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	601a      	str	r2, [r3, #0]
  }
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1c>
 8002120:	2302      	movs	r3, #2
 8002122:	e12a      	b.n	800237a <HAL_ADC_ConfigChannel+0x272>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b09      	cmp	r3, #9
 8002132:	d93a      	bls.n	80021aa <HAL_ADC_ConfigChannel+0xa2>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800213c:	d035      	beq.n	80021aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68d9      	ldr	r1, [r3, #12]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	3b1e      	subs	r3, #30
 8002154:	2207      	movs	r2, #7
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a87      	ldr	r2, [pc, #540]	; (8002388 <HAL_ADC_ConfigChannel+0x280>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10a      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68d9      	ldr	r1, [r3, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	061a      	lsls	r2, r3, #24
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002182:	e035      	b.n	80021f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68d9      	ldr	r1, [r3, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	4603      	mov	r3, r0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4403      	add	r3, r0
 800219c:	3b1e      	subs	r3, #30
 800219e:	409a      	lsls	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021a8:	e022      	b.n	80021f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	2207      	movs	r2, #7
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43da      	mvns	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	400a      	ands	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6919      	ldr	r1, [r3, #16]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4618      	mov	r0, r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4403      	add	r3, r0
 80021e6:	409a      	lsls	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d824      	bhi.n	8002242 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	3b05      	subs	r3, #5
 800220a:	221f      	movs	r2, #31
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43da      	mvns	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	400a      	ands	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3b05      	subs	r3, #5
 8002234:	fa00 f203 	lsl.w	r2, r0, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	635a      	str	r2, [r3, #52]	; 0x34
 8002240:	e04c      	b.n	80022dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b0c      	cmp	r3, #12
 8002248:	d824      	bhi.n	8002294 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b23      	subs	r3, #35	; 0x23
 800225c:	221f      	movs	r2, #31
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b23      	subs	r3, #35	; 0x23
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
 8002292:	e023      	b.n	80022dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b41      	subs	r3, #65	; 0x41
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b41      	subs	r3, #65	; 0x41
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a2a      	ldr	r2, [pc, #168]	; (800238c <HAL_ADC_ConfigChannel+0x284>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1f4>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ee:	d105      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a26      	ldr	r2, [pc, #152]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 80022f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a22      	ldr	r2, [pc, #136]	; (800238c <HAL_ADC_ConfigChannel+0x284>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d109      	bne.n	800231a <HAL_ADC_ConfigChannel+0x212>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b12      	cmp	r3, #18
 800230c:	d105      	bne.n	800231a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002318:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1b      	ldr	r2, [pc, #108]	; (800238c <HAL_ADC_ConfigChannel+0x284>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d125      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x268>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_ADC_ConfigChannel+0x280>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d003      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x22e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b11      	cmp	r3, #17
 8002334:	d11c      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_ADC_ConfigChannel+0x288>)
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002340:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_ADC_ConfigChannel+0x280>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d111      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_ADC_ConfigChannel+0x28c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_ADC_ConfigChannel+0x290>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002362:	e002      	b.n	800236a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b01      	subs	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	10000012 	.word	0x10000012
 800238c:	40012000 	.word	0x40012000
 8002390:	40012300 	.word	0x40012300
 8002394:	20000058 	.word	0x20000058
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <ADC_Init+0x1ec>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <ADC_Init+0x1ec>)
 80023aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023b0:	4b75      	ldr	r3, [pc, #468]	; (8002588 <ADC_Init+0x1ec>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4973      	ldr	r1, [pc, #460]	; (8002588 <ADC_Init+0x1ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <ADC_Init+0x1f0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e00f      	b.n	8002496 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0202 	bic.w	r2, r2, #2
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	005a      	lsls	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	3b01      	subs	r3, #1
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	e007      	b.n	800250c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	3b01      	subs	r3, #1
 8002528:	051a      	lsls	r2, r3, #20
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254e:	025a      	lsls	r2, r3, #9
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	029a      	lsls	r2, r3, #10
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012300 	.word	0x40012300
 800258c:	0f000001 	.word	0x0f000001

08002590 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <__NVIC_SetPriorityGrouping+0x40>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x40>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	05fa0000 	.word	0x05fa0000

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff fa1a 	bl	8001c0c <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e099      	b.n	8002918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002804:	e00f      	b.n	8002826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002806:	f7ff fa01 	bl	8001c0c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d908      	bls.n	8002826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2203      	movs	r2, #3
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e078      	b.n	8002918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1e8      	bne.n	8002806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_DMA_Init+0x158>)
 8002840:	4013      	ands	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2b04      	cmp	r3, #4
 800287e:	d107      	bne.n	8002890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	4313      	orrs	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f023 0307 	bic.w	r3, r3, #7
 80028a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d117      	bne.n	80028ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00e      	beq.n	80028ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fa7b 	bl	8002dc8 <DMA_CheckFifoParam>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028e6:	2301      	movs	r3, #1
 80028e8:	e016      	b.n	8002918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa32 	bl	8002d5c <DMA_CalcBaseAndBitshift>
 80028f8:	4603      	mov	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	223f      	movs	r2, #63	; 0x3f
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	e010803f 	.word	0xe010803f

08002924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002932:	f7ff f96b 	bl	8001c0c <HAL_GetTick>
 8002936:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d008      	beq.n	8002956 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e052      	b.n	80029fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0216 	bic.w	r2, r2, #22
 8002964:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002974:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_DMA_Abort+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a6:	e013      	b.n	80029d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a8:	f7ff f930 	bl	8001c0c <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d90c      	bls.n	80029d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2203      	movs	r2, #3
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e015      	b.n	80029fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e4      	bne.n	80029a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	223f      	movs	r2, #63	; 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d004      	beq.n	8002a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00c      	b.n	8002a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2205      	movs	r2, #5
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002a54:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_DMA_IRQHandler+0x258>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a92      	ldr	r2, [pc, #584]	; (8002ca4 <HAL_DMA_IRQHandler+0x25c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	0a9b      	lsrs	r3, r3, #10
 8002a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	2208      	movs	r2, #8
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0204 	bic.w	r2, r2, #4
 8002a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2204      	movs	r2, #4
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0204 	orr.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2210      	movs	r2, #16
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d043      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03c      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2210      	movs	r2, #16
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d018      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d024      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
 8002b76:	e01f      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e016      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0208 	bic.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 808e 	beq.w	8002ce6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8086 	beq.w	8002ce6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bde:	2220      	movs	r2, #32
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d136      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0216 	bic.w	r2, r2, #22
 8002c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x1da>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0208 	bic.w	r2, r2, #8
 8002c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	223f      	movs	r2, #63	; 0x3f
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d07d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
        }
        return;
 8002c5e:	e078      	b.n	8002d52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01c      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d108      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d030      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e02b      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d027      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
 8002c9e:	e022      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x29e>
 8002ca0:	20000058 	.word	0x20000058
 8002ca4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0210 	bic.w	r2, r2, #16
 8002cc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d032      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d022      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d307      	bcc.n	8002d2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f2      	bne.n	8002d12 <HAL_DMA_IRQHandler+0x2ca>
 8002d2c:	e000      	b.n	8002d30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e000      	b.n	8002d54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d52:	bf00      	nop
    }
  }
}
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3b10      	subs	r3, #16
 8002d6c:	4a13      	ldr	r2, [pc, #76]	; (8002dbc <DMA_CalcBaseAndBitshift+0x60>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d76:	4a12      	ldr	r2, [pc, #72]	; (8002dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b03      	cmp	r3, #3
 8002d88:	d908      	bls.n	8002d9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	659a      	str	r2, [r3, #88]	; 0x58
 8002d9a:	e006      	b.n	8002daa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	aaaaaaab 	.word	0xaaaaaaab
 8002dc0:	08006b98 	.word	0x08006b98
 8002dc4:	fffffc00 	.word	0xfffffc00

08002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d11f      	bne.n	8002e22 <DMA_CheckFifoParam+0x5a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d856      	bhi.n	8002e96 <DMA_CheckFifoParam+0xce>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <DMA_CheckFifoParam+0x28>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e13 	.word	0x08002e13
 8002df8:	08002e01 	.word	0x08002e01
 8002dfc:	08002e97 	.word	0x08002e97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d046      	beq.n	8002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e043      	b.n	8002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1a:	d140      	bne.n	8002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e03d      	b.n	8002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2a:	d121      	bne.n	8002e70 <DMA_CheckFifoParam+0xa8>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d837      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xda>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <DMA_CheckFifoParam+0x70>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e49 	.word	0x08002e49
 8002e3c:	08002e4f 	.word	0x08002e4f
 8002e40:	08002e49 	.word	0x08002e49
 8002e44:	08002e61 	.word	0x08002e61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4c:	e030      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d025      	beq.n	8002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e5e:	e022      	b.n	8002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e68:	d11f      	bne.n	8002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e6e:	e01c      	b.n	8002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d903      	bls.n	8002e7e <DMA_CheckFifoParam+0xb6>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d003      	beq.n	8002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e7c:	e018      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      break;
 8002e82:	e015      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      break;
 8002e94:	e00b      	b.n	8002eae <DMA_CheckFifoParam+0xe6>
      break;
 8002e96:	bf00      	nop
 8002e98:	e00a      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e008      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e006      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e004      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop

08002ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e175      	b.n	80031cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f040 8164 	bne.w	80031c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d00b      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d007      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f12:	2b11      	cmp	r3, #17
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b12      	cmp	r3, #18
 8002f1c:	d130      	bne.n	8002f80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2203      	movs	r2, #3
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 0201 	and.w	r2, r3, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x100>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b12      	cmp	r3, #18
 8002fbe:	d123      	bne.n	8003008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0203 	and.w	r2, r3, #3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80be 	beq.w	80031c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	4b66      	ldr	r3, [pc, #408]	; (80031e4 <HAL_GPIO_Init+0x324>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	4a65      	ldr	r2, [pc, #404]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003054:	6453      	str	r3, [r2, #68]	; 0x44
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_GPIO_Init+0x324>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003062:	4a61      	ldr	r2, [pc, #388]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	089b      	lsrs	r3, r3, #2
 8003068:	3302      	adds	r3, #2
 800306a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	220f      	movs	r2, #15
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a58      	ldr	r2, [pc, #352]	; (80031ec <HAL_GPIO_Init+0x32c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d037      	beq.n	80030fe <HAL_GPIO_Init+0x23e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a57      	ldr	r2, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x330>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d031      	beq.n	80030fa <HAL_GPIO_Init+0x23a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a56      	ldr	r2, [pc, #344]	; (80031f4 <HAL_GPIO_Init+0x334>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d02b      	beq.n	80030f6 <HAL_GPIO_Init+0x236>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a55      	ldr	r2, [pc, #340]	; (80031f8 <HAL_GPIO_Init+0x338>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d025      	beq.n	80030f2 <HAL_GPIO_Init+0x232>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a54      	ldr	r2, [pc, #336]	; (80031fc <HAL_GPIO_Init+0x33c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01f      	beq.n	80030ee <HAL_GPIO_Init+0x22e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a53      	ldr	r2, [pc, #332]	; (8003200 <HAL_GPIO_Init+0x340>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x22a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x344>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x348>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x34c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x350>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x21a>
 80030d6:	2309      	movs	r3, #9
 80030d8:	e012      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030da:	230a      	movs	r3, #10
 80030dc:	e010      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030de:	2308      	movs	r3, #8
 80030e0:	e00e      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e00c      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030e6:	2306      	movs	r3, #6
 80030e8:	e00a      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ea:	2305      	movs	r3, #5
 80030ec:	e008      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030ee:	2304      	movs	r3, #4
 80030f0:	e006      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f2:	2303      	movs	r3, #3
 80030f4:	e004      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e002      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_GPIO_Init+0x240>
 80030fe:	2300      	movs	r3, #0
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f002 0203 	and.w	r2, r2, #3
 8003106:	0092      	lsls	r2, r2, #2
 8003108:	4093      	lsls	r3, r2
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003110:	4935      	ldr	r1, [pc, #212]	; (80031e8 <HAL_GPIO_Init+0x328>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	3302      	adds	r3, #2
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311e:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_GPIO_Init+0x354>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <HAL_GPIO_Init+0x354>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_GPIO_Init+0x354>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <HAL_GPIO_Init+0x354>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3301      	adds	r3, #1
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	f67f ae86 	bls.w	8002ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40021000 	.word	0x40021000
 8003200:	40021400 	.word	0x40021400
 8003204:	40021800 	.word	0x40021800
 8003208:	40021c00 	.word	0x40021c00
 800320c:	40022000 	.word	0x40022000
 8003210:	40022400 	.word	0x40022400
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	807b      	strh	r3, [r7, #2]
 8003224:	4613      	mov	r3, r2
 8003226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003228:	787b      	ldrb	r3, [r7, #1]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003234:	e003      	b.n	800323e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	041a      	lsls	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	619a      	str	r2, [r3, #24]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800327a:	f7fe fcc7 	bl	8001c0c <HAL_GetTick>
 800327e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003280:	e009      	b.n	8003296 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003282:	f7fe fcc3 	bl	8001c0c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003290:	d901      	bls.n	8003296 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e022      	b.n	80032dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003296:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a2:	d1ee      	bne.n	8003282 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032a4:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0f      	ldr	r2, [pc, #60]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b0:	f7fe fcac 	bl	8001c0c <HAL_GetTick>
 80032b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032b6:	e009      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b8:	f7fe fca8 	bl	8001c0c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c6:	d901      	bls.n	80032cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e007      	b.n	80032dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032d8:	d1ee      	bne.n	80032b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40007000 	.word	0x40007000

080032ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e29b      	b.n	800383a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8087 	beq.w	800341e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003310:	4b96      	ldr	r3, [pc, #600]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00c      	beq.n	8003336 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331c:	4b93      	ldr	r3, [pc, #588]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d112      	bne.n	800334e <HAL_RCC_OscConfig+0x62>
 8003328:	4b90      	ldr	r3, [pc, #576]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003334:	d10b      	bne.n	800334e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	4b8d      	ldr	r3, [pc, #564]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d06c      	beq.n	800341c <HAL_RCC_OscConfig+0x130>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d168      	bne.n	800341c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e275      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x7a>
 8003358:	4b84      	ldr	r3, [pc, #528]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a83      	ldr	r2, [pc, #524]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e02e      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x9c>
 800336e:	4b7f      	ldr	r3, [pc, #508]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7e      	ldr	r2, [pc, #504]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b7c      	ldr	r3, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a7b      	ldr	r2, [pc, #492]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0xc0>
 8003392:	4b76      	ldr	r3, [pc, #472]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a75      	ldr	r2, [pc, #468]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xd8>
 80033ac:	4b6f      	ldr	r3, [pc, #444]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6e      	ldr	r2, [pc, #440]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a6b      	ldr	r2, [pc, #428]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fe fc1e 	bl	8001c0c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fc1a 	bl	8001c0c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e229      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe8>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fc0a 	bl	8001c0c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fc06 	bl	8001c0c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e215      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	4b57      	ldr	r3, [pc, #348]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x110>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d069      	beq.n	80034fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342a:	4b50      	ldr	r3, [pc, #320]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x190>
 8003442:	4b4a      	ldr	r3, [pc, #296]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b47      	ldr	r3, [pc, #284]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x17a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1e9      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b41      	ldr	r3, [pc, #260]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	493d      	ldr	r1, [pc, #244]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e040      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d023      	beq.n	80034cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fe fbbc 	bl	8001c0c <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003498:	f7fe fbb8 	bl	8001c0c <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1c7      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b30      	ldr	r3, [pc, #192]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b2d      	ldr	r3, [pc, #180]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4929      	ldr	r1, [pc, #164]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fb98 	bl	8001c0c <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fe fb94 	bl	8001c0c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1a3      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d038      	beq.n	800357c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b16      	ldr	r3, [pc, #88]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003516:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fb75 	bl	8001c0c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fb71 	bl	8001c0c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e180      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800353a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x23a>
 8003544:	e01a      	b.n	800357c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_OscConfig+0x280>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	4a08      	ldr	r2, [pc, #32]	; (800356c <HAL_RCC_OscConfig+0x280>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003552:	f7fe fb5b 	bl	8001c0c <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe fb57 	bl	8001c0c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d903      	bls.n	8003570 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e166      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
 800356c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b92      	ldr	r3, [pc, #584]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1ee      	bne.n	800355a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a4 	beq.w	80036d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a88      	ldr	r2, [pc, #544]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b86      	ldr	r3, [pc, #536]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b2:	4b83      	ldr	r3, [pc, #524]	; (80037c0 <HAL_RCC_OscConfig+0x4d4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d118      	bne.n	80035f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035be:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCC_OscConfig+0x4d4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a7f      	ldr	r2, [pc, #508]	; (80037c0 <HAL_RCC_OscConfig+0x4d4>)
 80035c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ca:	f7fe fb1f 	bl	8001c0c <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fe fb1b 	bl	8001c0c <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e12a      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035e4:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x4d4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x31a>
 80035f8:	4b70      	ldr	r3, [pc, #448]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fc:	4a6f      	ldr	r2, [pc, #444]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6713      	str	r3, [r2, #112]	; 0x70
 8003604:	e02d      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x33c>
 800360e:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a6a      	ldr	r2, [pc, #424]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a67      	ldr	r2, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e01c      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b05      	cmp	r3, #5
 800362e:	d10c      	bne.n	800364a <HAL_RCC_OscConfig+0x35e>
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a61      	ldr	r2, [pc, #388]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a5e      	ldr	r2, [pc, #376]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	e00b      	b.n	8003662 <HAL_RCC_OscConfig+0x376>
 800364a:	4b5c      	ldr	r3, [pc, #368]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a5b      	ldr	r2, [pc, #364]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
 8003656:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d015      	beq.n	8003696 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366a:	f7fe facf 	bl	8001c0c <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe facb 	bl	8001c0c <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e0d8      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ee      	beq.n	8003672 <HAL_RCC_OscConfig+0x386>
 8003694:	e014      	b.n	80036c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fab9 	bl	8001c0c <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe fab5 	bl	8001c0c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0c2      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ee      	bne.n	800369e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c6:	4b3d      	ldr	r3, [pc, #244]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80ae 	beq.w	8003838 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d06d      	beq.n	80037c4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d14b      	bne.n	8003788 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a31      	ldr	r2, [pc, #196]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80036f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fa86 	bl	8001c0c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fe fa82 	bl	8001c0c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e091      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	491b      	ldr	r1, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a18      	ldr	r2, [pc, #96]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fe fa54 	bl	8001c0c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fa50 	bl	8001c0c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e05f      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x47c>
 8003786:	e057      	b.n	8003838 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 800378e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fa3a 	bl	8001c0c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fe fa36 	bl	8001c0c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e045      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x4b0>
 80037ba:	e03d      	b.n	8003838 <HAL_RCC_OscConfig+0x54c>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCC_OscConfig+0x558>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d030      	beq.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d129      	bne.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d122      	bne.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d119      	bne.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d10f      	bne.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0d0      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 020f 	bic.w	r2, r3, #15
 8003876:	4965      	ldr	r1, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d040      	beq.n	800396c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d115      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e073      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4936      	ldr	r1, [pc, #216]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393c:	f7fe f966 	bl	8001c0c <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fe f962 	bl	8001c0c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e053      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d210      	bcs.n	800399c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 020f 	bic.w	r2, r3, #15
 8003982:	4922      	ldr	r1, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1cc>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1d0>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1d4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe f8c2 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08006b80 	.word	0x08006b80
 8003a18:	20000058 	.word	0x20000058
 8003a1c:	2000005c 	.word	0x2000005c

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b5b0      	push	{r4, r5, r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a26:	2100      	movs	r1, #0
 8003a28:	6079      	str	r1, [r7, #4]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	60f9      	str	r1, [r7, #12]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a32:	2100      	movs	r1, #0
 8003a34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4952      	ldr	r1, [pc, #328]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a38:	6889      	ldr	r1, [r1, #8]
 8003a3a:	f001 010c 	and.w	r1, r1, #12
 8003a3e:	2908      	cmp	r1, #8
 8003a40:	d00d      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x3e>
 8003a42:	2908      	cmp	r1, #8
 8003a44:	f200 8094 	bhi.w	8003b70 <HAL_RCC_GetSysClockFreq+0x150>
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x32>
 8003a4c:	2904      	cmp	r1, #4
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x38>
 8003a50:	e08e      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a52:	4b4c      	ldr	r3, [pc, #304]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a54:	60bb      	str	r3, [r7, #8]
      break;
 8003a56:	e08e      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b4b      	ldr	r3, [pc, #300]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a5a:	60bb      	str	r3, [r7, #8]
      break;
 8003a5c:	e08b      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5e:	4948      	ldr	r1, [pc, #288]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a60:	6849      	ldr	r1, [r1, #4]
 8003a62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a68:	4945      	ldr	r1, [pc, #276]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a6a:	6849      	ldr	r1, [r1, #4]
 8003a6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a70:	2900      	cmp	r1, #0
 8003a72:	d024      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4942      	ldr	r1, [pc, #264]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a76:	6849      	ldr	r1, [r1, #4]
 8003a78:	0989      	lsrs	r1, r1, #6
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	ea00 0204 	and.w	r2, r0, r4
 8003a8c:	ea01 0305 	and.w	r3, r1, r5
 8003a90:	493d      	ldr	r1, [pc, #244]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a92:	fb01 f003 	mul.w	r0, r1, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	fb01 f102 	mul.w	r1, r1, r2
 8003a9c:	1844      	adds	r4, r0, r1
 8003a9e:	493a      	ldr	r1, [pc, #232]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x168>)
 8003aa0:	fba2 0101 	umull	r0, r1, r2, r1
 8003aa4:	1863      	adds	r3, r4, r1
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	f7fc fbc2 	bl	8000238 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e04a      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	ea02 0400 	and.w	r4, r2, r0
 8003ad6:	ea03 0501 	and.w	r5, r3, r1
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	014b      	lsls	r3, r1, #5
 8003ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003aec:	0142      	lsls	r2, r0, #5
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	1b00      	subs	r0, r0, r4
 8003af4:	eb61 0105 	sbc.w	r1, r1, r5
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	018b      	lsls	r3, r1, #6
 8003b02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b06:	0182      	lsls	r2, r0, #6
 8003b08:	1a12      	subs	r2, r2, r0
 8003b0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	00d9      	lsls	r1, r3, #3
 8003b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1c:	00d0      	lsls	r0, r2, #3
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	1912      	adds	r2, r2, r4
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0299      	lsls	r1, r3, #10
 8003b32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b36:	0290      	lsls	r0, r2, #10
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fc fb76 	bl	8000238 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	60bb      	str	r3, [r7, #8]
      break;
 8003b6e:	e002      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b72:	60bb      	str	r3, [r7, #8]
      break;
 8003b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b76:	68bb      	ldr	r3, [r7, #8]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	00f42400 	.word	0x00f42400
 8003b88:	017d7840 	.word	0x017d7840

08003b8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000058 	.word	0x20000058

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ba8:	f7ff fff0 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0a9b      	lsrs	r3, r3, #10
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	; (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	08006b90 	.word	0x08006b90

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd0:	f7ff ffdc 	bl	8003b8c <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0b5b      	lsrs	r3, r3, #13
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08006b90 	.word	0x08006b90

08003bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d012      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c1c:	4b69      	ldr	r3, [pc, #420]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a68      	ldr	r2, [pc, #416]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c26:	6093      	str	r3, [r2, #8]
 8003c28:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	4964      	ldr	r1, [pc, #400]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d017      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	4959      	ldr	r1, [pc, #356]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d017      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c8a:	4b4e      	ldr	r3, [pc, #312]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	494a      	ldr	r1, [pc, #296]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca8:	d101      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 808b 	beq.w	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce4:	4b37      	ldr	r3, [pc, #220]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd ff86 	bl	8001c0c <HAL_GetTick>
 8003d00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fd ff82 	bl	8001c0c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e38f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d16:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d22:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d035      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d02e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d40:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d4a:	4b1e      	ldr	r3, [pc, #120]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d56:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d62:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d68:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d114      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd ff4a 	bl	8001c0c <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fd ff46 	bl	8001c0c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e351      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d92:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ee      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dba:	400b      	ands	r3, r1
 8003dbc:	4901      	ldr	r1, [pc, #4]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	0ffffcff 	.word	0x0ffffcff
 8003dd0:	4bb3      	ldr	r3, [pc, #716]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4ab2      	ldr	r2, [pc, #712]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003dda:	6093      	str	r3, [r2, #8]
 8003ddc:	4bb0      	ldr	r3, [pc, #704]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	49ad      	ldr	r1, [pc, #692]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d010      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dfa:	4ba9      	ldr	r3, [pc, #676]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	4aa7      	ldr	r2, [pc, #668]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e0a:	4ba5      	ldr	r3, [pc, #660]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	49a2      	ldr	r1, [pc, #648]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e28:	4b9d      	ldr	r3, [pc, #628]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e36:	499a      	ldr	r1, [pc, #616]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e4a:	4b95      	ldr	r3, [pc, #596]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e58:	4991      	ldr	r1, [pc, #580]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e6c:	4b8c      	ldr	r3, [pc, #560]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e7a:	4989      	ldr	r1, [pc, #548]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e8e:	4b84      	ldr	r3, [pc, #528]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4980      	ldr	r1, [pc, #512]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eb0:	4b7b      	ldr	r3, [pc, #492]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4978      	ldr	r1, [pc, #480]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed2:	4b73      	ldr	r3, [pc, #460]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f023 020c 	bic.w	r2, r3, #12
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	496f      	ldr	r1, [pc, #444]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ef4:	4b6a      	ldr	r3, [pc, #424]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	4967      	ldr	r1, [pc, #412]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f16:	4b62      	ldr	r3, [pc, #392]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f24:	495e      	ldr	r1, [pc, #376]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f38:	4b59      	ldr	r3, [pc, #356]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	4956      	ldr	r1, [pc, #344]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	494d      	ldr	r1, [pc, #308]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f7c:	4b48      	ldr	r3, [pc, #288]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8a:	4945      	ldr	r1, [pc, #276]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	493c      	ldr	r1, [pc, #240]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fc0:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fce:	4934      	ldr	r1, [pc, #208]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d011      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff0:	492b      	ldr	r1, [pc, #172]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004000:	d101      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004012:	2301      	movs	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004022:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	491b      	ldr	r1, [pc, #108]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004044:	4b16      	ldr	r3, [pc, #88]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004054:	4912      	ldr	r1, [pc, #72]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004068:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004078:	4909      	ldr	r1, [pc, #36]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00f      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004092:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	4986      	ldr	r1, [pc, #536]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80040b8:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c8:	497d      	ldr	r1, [pc, #500]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d006      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80d6 	beq.w	8004290 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040e4:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fd fd8c 	bl	8001c0c <HAL_GetTick>
 80040f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040f8:	f7fd fd88 	bl	8001c0c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e195      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d021      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11d      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413e:	0e1b      	lsrs	r3, r3, #24
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	019a      	lsls	r2, r3, #6
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	431a      	orrs	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	071b      	lsls	r3, r3, #28
 800415e:	4958      	ldr	r1, [pc, #352]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02e      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004190:	d129      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004192:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041a0:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a6:	0f1b      	lsrs	r3, r3, #28
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	019a      	lsls	r2, r3, #6
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	431a      	orrs	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	493e      	ldr	r1, [pc, #248]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041ce:	4b3c      	ldr	r3, [pc, #240]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d4:	f023 021f 	bic.w	r2, r3, #31
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	3b01      	subs	r3, #1
 80041de:	4938      	ldr	r1, [pc, #224]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01d      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041f2:	4b33      	ldr	r3, [pc, #204]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	0f1b      	lsrs	r3, r3, #28
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	431a      	orrs	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	4926      	ldr	r1, [pc, #152]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d011      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	019a      	lsls	r2, r3, #6
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	061b      	lsls	r3, r3, #24
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	071b      	lsls	r3, r3, #28
 8004256:	491a      	ldr	r1, [pc, #104]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800425e:	4b18      	ldr	r3, [pc, #96]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a17      	ldr	r2, [pc, #92]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800426a:	f7fd fccf 	bl	8001c0c <HAL_GetTick>
 800426e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004272:	f7fd fccb 	bl	8001c0c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b64      	cmp	r3, #100	; 0x64
 800427e:	d901      	bls.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e0d8      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	f040 80ce 	bne.w	8004434 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a4:	f7fd fcb2 	bl	8001c0c <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042ac:	f7fd fcae 	bl	8001c0c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d904      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0bb      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042c4:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d0:	d0ec      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02e      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d12a      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042fa:	4b51      	ldr	r3, [pc, #324]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004308:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430e:	0f1b      	lsrs	r3, r3, #28
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	071b      	lsls	r3, r3, #28
 800432e:	4944      	ldr	r1, [pc, #272]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004336:	4b42      	ldr	r3, [pc, #264]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800433c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	493d      	ldr	r1, [pc, #244]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004364:	d11d      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004366:	4b36      	ldr	r3, [pc, #216]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004374:	4b32      	ldr	r3, [pc, #200]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	0f1b      	lsrs	r3, r3, #28
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	019a      	lsls	r2, r3, #6
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	071b      	lsls	r3, r3, #28
 800439a:	4929      	ldr	r1, [pc, #164]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d028      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043ae:	4b24      	ldr	r3, [pc, #144]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	0e1b      	lsrs	r3, r3, #24
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4917      	ldr	r1, [pc, #92]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043ea:	4b15      	ldr	r3, [pc, #84]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f8:	4911      	ldr	r1, [pc, #68]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440c:	f7fd fbfe 	bl	8001c0c <HAL_GetTick>
 8004410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004414:	f7fd fbfa 	bl	8001c0c <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e007      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004432:	d1ef      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e09d      	b.n	8004592 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b00      	cmp	r3, #0
 800445c:	d108      	bne.n	8004470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004466:	d009      	beq.n	800447c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
 800446e:	e005      	b.n	800447c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fc fe7e 	bl	8001198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044bc:	d902      	bls.n	80044c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e002      	b.n	80044ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044d2:	d007      	beq.n	80044e4 <HAL_SPI_Init+0xa0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	ea42 0103 	orr.w	r1, r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	f003 0204 	and.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004560:	ea42 0103 	orr.w	r1, r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b088      	sub	sp, #32
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10f      	bne.n	80045e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
    return;
 80045de:	e0d7      	b.n	8004790 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_SPI_IRQHandler+0x66>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
    return;
 8004600:	e0c6      	b.n	8004790 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <HAL_SPI_IRQHandler+0x8c>
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	099b      	lsrs	r3, r3, #6
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80b4 	beq.w	8004790 <HAL_SPI_IRQHandler+0x1f4>
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80ad 	beq.w	8004790 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	099b      	lsrs	r3, r3, #6
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d023      	beq.n	800468a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b03      	cmp	r3, #3
 800464c:	d011      	beq.n	8004672 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	e00b      	b.n	800468a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
        return;
 8004688:	e082      	b.n	8004790 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d014      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d0:	f043 0208 	orr.w	r2, r3, #8
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04f      	beq.n	800478e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <HAL_SPI_IRQHandler+0x17e>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d034      	beq.n	8004784 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0203 	bic.w	r2, r2, #3
 8004728:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	2b00      	cmp	r3, #0
 8004730:	d011      	beq.n	8004756 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_SPI_IRQHandler+0x1fc>)
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe f960 	bl	8002a04 <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	4a0d      	ldr	r2, [pc, #52]	; (8004798 <HAL_SPI_IRQHandler+0x1fc>)
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe f94a 	bl	8002a04 <HAL_DMA_Abort_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004782:	e003      	b.n	800478c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f809 	bl	800479c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800478a:	e000      	b.n	800478e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800478c:	bf00      	nop
    return;
 800478e:	bf00      	nop
  }
}
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	080047b1 	.word	0x080047b1

0800479c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff ffe5 	bl	800479c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e049      	b.n	8004880 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fc ff4f 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fe6b 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	d001      	beq.n	80048a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e04c      	b.n	800493a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <HAL_TIM_Base_Start+0xc0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d01d      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <HAL_TIM_Base_Start+0xc4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a21      	ldr	r2, [pc, #132]	; (8004950 <HAL_TIM_Base_Start+0xc8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1f      	ldr	r2, [pc, #124]	; (8004954 <HAL_TIM_Base_Start+0xcc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_TIM_Base_Start+0xd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1c      	ldr	r2, [pc, #112]	; (800495c <HAL_TIM_Base_Start+0xd4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_Base_Start+0x70>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_TIM_Base_Start+0xd8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d115      	bne.n	8004924 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_TIM_Base_Start+0xdc>)
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d015      	beq.n	8004936 <HAL_TIM_Base_Start+0xae>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d011      	beq.n	8004936 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0201 	orr.w	r2, r2, #1
 8004920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004922:	e008      	b.n	8004936 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e000      	b.n	8004938 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40010400 	.word	0x40010400
 800495c:	40014000 	.word	0x40014000
 8004960:	40001800 	.word	0x40001800
 8004964:	00010007 	.word	0x00010007

08004968 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e049      	b.n	8004a0e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f841 	bl	8004a16 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f000 fda4 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e049      	b.n	8004ad0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fc fe7d 	bl	8001750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3304      	adds	r3, #4
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fd43 	bl	80054f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_TIM_PWM_Start+0x24>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e03c      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d109      	bne.n	8004b16 <HAL_TIM_PWM_Start+0x3e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	bf14      	ite	ne
 8004b0e:	2301      	movne	r3, #1
 8004b10:	2300      	moveq	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e02f      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d109      	bne.n	8004b30 <HAL_TIM_PWM_Start+0x58>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	e022      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b0c      	cmp	r3, #12
 8004b34:	d109      	bne.n	8004b4a <HAL_TIM_PWM_Start+0x72>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	e015      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start+0x8c>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <HAL_TIM_PWM_Start+0x9e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e092      	b.n	8004ca4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_TIM_PWM_Start+0xb6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b8c:	e023      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d104      	bne.n	8004b9e <HAL_TIM_PWM_Start+0xc6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b9c:	e01b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d104      	bne.n	8004bae <HAL_TIM_PWM_Start+0xd6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bac:	e013      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b0c      	cmp	r3, #12
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xe6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bbc:	e00b      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xf6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bcc:	e003      	b.n	8004bd6 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	6839      	ldr	r1, [r7, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 f820 	bl	8005c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a30      	ldr	r2, [pc, #192]	; (8004cac <HAL_TIM_PWM_Start+0x1d4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_TIM_PWM_Start+0x120>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <HAL_TIM_PWM_Start+0x1d8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIM_PWM_Start+0x124>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_TIM_PWM_Start+0x126>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a25      	ldr	r2, [pc, #148]	; (8004cac <HAL_TIM_PWM_Start+0x1d4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d01d      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a22      	ldr	r2, [pc, #136]	; (8004cb4 <HAL_TIM_PWM_Start+0x1dc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <HAL_TIM_PWM_Start+0x1e0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_TIM_PWM_Start+0x1e4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a19      	ldr	r2, [pc, #100]	; (8004cb0 <HAL_TIM_PWM_Start+0x1d8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_TIM_PWM_Start+0x1e8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x18a>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_TIM_PWM_Start+0x1ec>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d115      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_TIM_PWM_Start+0x1f0>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b06      	cmp	r3, #6
 8004c72:	d015      	beq.n	8004ca0 <HAL_TIM_PWM_Start+0x1c8>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d011      	beq.n	8004ca0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8c:	e008      	b.n	8004ca0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e000      	b.n	8004ca2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40010400 	.word	0x40010400
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800
 8004cc8:	00010007 	.word	0x00010007

08004ccc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ffa0 	bl	8005c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a36      	ldr	r2, [pc, #216]	; (8004dc4 <HAL_TIM_PWM_Stop+0xf8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIM_PWM_Stop+0x2c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a35      	ldr	r2, [pc, #212]	; (8004dc8 <HAL_TIM_PWM_Stop+0xfc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIM_PWM_Stop+0x30>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_PWM_Stop+0x32>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d017      	beq.n	8004d32 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a1a      	ldr	r2, [r3, #32]
 8004d08:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x66>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1a      	ldr	r2, [r3, #32]
 8004d18:	f240 4344 	movw	r3, #1092	; 0x444
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_PWM_Stop+0x66>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x96>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	f240 4344 	movw	r3, #1092	; 0x444
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_PWM_Stop+0x96>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0201 	bic.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Stop+0xa6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	e023      	b.n	8004dba <HAL_TIM_PWM_Stop+0xee>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Stop+0xb6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	e01b      	b.n	8004dba <HAL_TIM_PWM_Stop+0xee>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Stop+0xc6>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	e013      	b.n	8004dba <HAL_TIM_PWM_Stop+0xee>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Stop+0xd6>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	e00b      	b.n	8004dba <HAL_TIM_PWM_Stop+0xee>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b10      	cmp	r3, #16
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Stop+0xe6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db0:	e003      	b.n	8004dba <HAL_TIM_PWM_Stop+0xee>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40010000 	.word	0x40010000
 8004dc8:	40010400 	.word	0x40010400

08004dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d122      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0202 	mvn.w	r2, #2
 8004df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fb52 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fb44 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fb55 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d122      	bne.n	8004e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d11b      	bne.n	8004e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0204 	mvn.w	r2, #4
 8004e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fb28 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb1a 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fb2b 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d122      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d11b      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0208 	mvn.w	r2, #8
 8004ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2204      	movs	r2, #4
 8004ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fafe 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 8004ebc:	e005      	b.n	8004eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 faf0 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fb01 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d122      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d11b      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0210 	mvn.w	r2, #16
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2208      	movs	r2, #8
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fad4 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fac6 	bl	80054a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fad7 	bl	80054cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0201 	mvn.w	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc fcdc 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d10e      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 ff12 	bl	8005da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	2b80      	cmp	r3, #128	; 0x80
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 ff05 	bl	8005db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc2:	2b40      	cmp	r3, #64	; 0x40
 8004fc4:	d107      	bne.n	8004fd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa85 	bl	80054e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d10e      	bne.n	8005002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d107      	bne.n	8005002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f06f 0220 	mvn.w	r2, #32
 8004ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fec5 	bl	8005d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005022:	2302      	movs	r3, #2
 8005024:	e064      	b.n	80050f0 <HAL_TIM_OC_ConfigChannel+0xe4>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b14      	cmp	r3, #20
 8005032:	d857      	bhi.n	80050e4 <HAL_TIM_OC_ConfigChannel+0xd8>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005091 	.word	0x08005091
 8005040:	080050e5 	.word	0x080050e5
 8005044:	080050e5 	.word	0x080050e5
 8005048:	080050e5 	.word	0x080050e5
 800504c:	0800509f 	.word	0x0800509f
 8005050:	080050e5 	.word	0x080050e5
 8005054:	080050e5 	.word	0x080050e5
 8005058:	080050e5 	.word	0x080050e5
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050e5 	.word	0x080050e5
 8005064:	080050e5 	.word	0x080050e5
 8005068:	080050e5 	.word	0x080050e5
 800506c:	080050bb 	.word	0x080050bb
 8005070:	080050e5 	.word	0x080050e5
 8005074:	080050e5 	.word	0x080050e5
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080050c9 	.word	0x080050c9
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080050e5 	.word	0x080050e5
 8005088:	080050e5 	.word	0x080050e5
 800508c:	080050d7 	.word	0x080050d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68b9      	ldr	r1, [r7, #8]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 facc 	bl	8005634 <TIM_OC1_SetConfig>
      break;
 800509c:	e023      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fb37 	bl	8005718 <TIM_OC2_SetConfig>
      break;
 80050aa:	e01c      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fba8 	bl	8005808 <TIM_OC3_SetConfig>
      break;
 80050b8:	e015      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fc17 	bl	80058f4 <TIM_OC4_SetConfig>
      break;
 80050c6:	e00e      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fc68 	bl	80059a4 <TIM_OC5_SetConfig>
      break;
 80050d4:	e007      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68b9      	ldr	r1, [r7, #8]
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fcb3 	bl	8005a48 <TIM_OC6_SetConfig>
      break;
 80050e2:	e000      	b.n	80050e6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80050e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800510e:	2302      	movs	r3, #2
 8005110:	e0fd      	b.n	800530e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b14      	cmp	r3, #20
 800511e:	f200 80f0 	bhi.w	8005302 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005122:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005128:	0800517d 	.word	0x0800517d
 800512c:	08005303 	.word	0x08005303
 8005130:	08005303 	.word	0x08005303
 8005134:	08005303 	.word	0x08005303
 8005138:	080051bd 	.word	0x080051bd
 800513c:	08005303 	.word	0x08005303
 8005140:	08005303 	.word	0x08005303
 8005144:	08005303 	.word	0x08005303
 8005148:	080051ff 	.word	0x080051ff
 800514c:	08005303 	.word	0x08005303
 8005150:	08005303 	.word	0x08005303
 8005154:	08005303 	.word	0x08005303
 8005158:	0800523f 	.word	0x0800523f
 800515c:	08005303 	.word	0x08005303
 8005160:	08005303 	.word	0x08005303
 8005164:	08005303 	.word	0x08005303
 8005168:	08005281 	.word	0x08005281
 800516c:	08005303 	.word	0x08005303
 8005170:	08005303 	.word	0x08005303
 8005174:	08005303 	.word	0x08005303
 8005178:	080052c1 	.word	0x080052c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa56 	bl	8005634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	619a      	str	r2, [r3, #24]
      break;
 80051ba:	e0a3      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 faa8 	bl	8005718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
      break;
 80051fc:	e082      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 faff 	bl	8005808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0208 	orr.w	r2, r2, #8
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0204 	bic.w	r2, r2, #4
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
      break;
 800523c:	e062      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb55 	bl	80058f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69d9      	ldr	r1, [r3, #28]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	021a      	lsls	r2, r3, #8
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	61da      	str	r2, [r3, #28]
      break;
 800527e:	e041      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fb8c 	bl	80059a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0208 	orr.w	r2, r2, #8
 800529a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0204 	bic.w	r2, r2, #4
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052be:	e021      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fbbe 	bl	8005a48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005300:	e000      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop

08005318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_TIM_ConfigClockSource+0x18>
 800532c:	2302      	movs	r3, #2
 800532e:	e0b3      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x180>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4b55      	ldr	r3, [pc, #340]	; (80054a0 <HAL_TIM_ConfigClockSource+0x188>)
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005368:	d03e      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0xd0>
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536e:	f200 8087 	bhi.w	8005480 <HAL_TIM_ConfigClockSource+0x168>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	f000 8085 	beq.w	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537e:	d87f      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 8005380:	2b70      	cmp	r3, #112	; 0x70
 8005382:	d01a      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0xa2>
 8005384:	2b70      	cmp	r3, #112	; 0x70
 8005386:	d87b      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 8005388:	2b60      	cmp	r3, #96	; 0x60
 800538a:	d050      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x116>
 800538c:	2b60      	cmp	r3, #96	; 0x60
 800538e:	d877      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 8005390:	2b50      	cmp	r3, #80	; 0x50
 8005392:	d03c      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xf6>
 8005394:	2b50      	cmp	r3, #80	; 0x50
 8005396:	d873      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 8005398:	2b40      	cmp	r3, #64	; 0x40
 800539a:	d058      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x136>
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d86f      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 80053a0:	2b30      	cmp	r3, #48	; 0x30
 80053a2:	d064      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x156>
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d86b      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d060      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x156>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d867      	bhi.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05c      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x156>
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d05a      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053b8:	e062      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6899      	ldr	r1, [r3, #8]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f000 fc0b 	bl	8005be4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	609a      	str	r2, [r3, #8]
      break;
 80053e6:	e04e      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6899      	ldr	r1, [r3, #8]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f000 fbf4 	bl	8005be4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540a:	609a      	str	r2, [r3, #8]
      break;
 800540c:	e03b      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	461a      	mov	r2, r3
 800541c:	f000 fb68 	bl	8005af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2150      	movs	r1, #80	; 0x50
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fbc1 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800542c:	e02b      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	f000 fb87 	bl	8005b4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2160      	movs	r1, #96	; 0x60
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fbb1 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800544c:	e01b      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fb48 	bl	8005af0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fba1 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 800546c:	e00b      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f000 fb98 	bl	8005bae <TIM_ITRx_SetConfig>
        break;
 800547e:	e002      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	fffeff88 	.word	0xfffeff88

080054a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a40      	ldr	r2, [pc, #256]	; (8005608 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d013      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d00f      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3d      	ldr	r2, [pc, #244]	; (800560c <TIM_Base_SetConfig+0x118>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d00b      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3c      	ldr	r2, [pc, #240]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d007      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a3b      	ldr	r2, [pc, #236]	; (8005614 <TIM_Base_SetConfig+0x120>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3a      	ldr	r2, [pc, #232]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d108      	bne.n	8005546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <TIM_Base_SetConfig+0x114>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005554:	d027      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2c      	ldr	r2, [pc, #176]	; (800560c <TIM_Base_SetConfig+0x118>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d023      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2b      	ldr	r2, [pc, #172]	; (8005610 <TIM_Base_SetConfig+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d01f      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <TIM_Base_SetConfig+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <TIM_Base_SetConfig+0x124>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d017      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a28      	ldr	r2, [pc, #160]	; (800561c <TIM_Base_SetConfig+0x128>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a27      	ldr	r2, [pc, #156]	; (8005620 <TIM_Base_SetConfig+0x12c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <TIM_Base_SetConfig+0x130>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a25      	ldr	r2, [pc, #148]	; (8005628 <TIM_Base_SetConfig+0x134>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a24      	ldr	r2, [pc, #144]	; (800562c <TIM_Base_SetConfig+0x138>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a23      	ldr	r2, [pc, #140]	; (8005630 <TIM_Base_SetConfig+0x13c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <TIM_Base_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0xf8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a0c      	ldr	r2, [pc, #48]	; (8005618 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d103      	bne.n	80055f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	615a      	str	r2, [r3, #20]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40010000 	.word	0x40010000
 800560c:	40000400 	.word	0x40000400
 8005610:	40000800 	.word	0x40000800
 8005614:	40000c00 	.word	0x40000c00
 8005618:	40010400 	.word	0x40010400
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800
 8005628:	40001800 	.word	0x40001800
 800562c:	40001c00 	.word	0x40001c00
 8005630:	40002000 	.word	0x40002000

08005634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4b2b      	ldr	r3, [pc, #172]	; (800570c <TIM_OC1_SetConfig+0xd8>)
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 0302 	bic.w	r3, r3, #2
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a21      	ldr	r2, [pc, #132]	; (8005710 <TIM_OC1_SetConfig+0xdc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC1_SetConfig+0x64>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a20      	ldr	r2, [pc, #128]	; (8005714 <TIM_OC1_SetConfig+0xe0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d10c      	bne.n	80056b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f023 0308 	bic.w	r3, r3, #8
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0304 	bic.w	r3, r3, #4
 80056b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <TIM_OC1_SetConfig+0xdc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC1_SetConfig+0x8e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a15      	ldr	r2, [pc, #84]	; (8005714 <TIM_OC1_SetConfig+0xe0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d111      	bne.n	80056e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	621a      	str	r2, [r3, #32]
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	fffeff8f 	.word	0xfffeff8f
 8005710:	40010000 	.word	0x40010000
 8005714:	40010400 	.word	0x40010400

08005718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0210 	bic.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4b2e      	ldr	r3, [pc, #184]	; (80057fc <TIM_OC2_SetConfig+0xe4>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0320 	bic.w	r3, r3, #32
 8005762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <TIM_OC2_SetConfig+0xe8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_OC2_SetConfig+0x68>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a22      	ldr	r2, [pc, #136]	; (8005804 <TIM_OC2_SetConfig+0xec>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d10d      	bne.n	800579c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <TIM_OC2_SetConfig+0xe8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_OC2_SetConfig+0x94>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a17      	ldr	r2, [pc, #92]	; (8005804 <TIM_OC2_SetConfig+0xec>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d113      	bne.n	80057d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	621a      	str	r2, [r3, #32]
}
 80057ee:	bf00      	nop
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	feff8fff 	.word	0xfeff8fff
 8005800:	40010000 	.word	0x40010000
 8005804:	40010400 	.word	0x40010400

08005808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4b2d      	ldr	r3, [pc, #180]	; (80058e8 <TIM_OC3_SetConfig+0xe0>)
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <TIM_OC3_SetConfig+0xe4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC3_SetConfig+0x66>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <TIM_OC3_SetConfig+0xe8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a17      	ldr	r2, [pc, #92]	; (80058ec <TIM_OC3_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <TIM_OC3_SetConfig+0x92>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <TIM_OC3_SetConfig+0xe8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d113      	bne.n	80058c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	621a      	str	r2, [r3, #32]
}
 80058dc:	bf00      	nop
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	fffeff8f 	.word	0xfffeff8f
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40010400 	.word	0x40010400

080058f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <TIM_OC4_SetConfig+0xa4>)
 8005920:	4013      	ands	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <TIM_OC4_SetConfig+0xa8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC4_SetConfig+0x68>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a12      	ldr	r2, [pc, #72]	; (80059a0 <TIM_OC4_SetConfig+0xac>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d109      	bne.n	8005970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	feff8fff 	.word	0xfeff8fff
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400

080059a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <TIM_OC5_SetConfig+0x98>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a12      	ldr	r2, [pc, #72]	; (8005a40 <TIM_OC5_SetConfig+0x9c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_OC5_SetConfig+0x5e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <TIM_OC5_SetConfig+0xa0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d109      	bne.n	8005a16 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	621a      	str	r2, [r3, #32]
}
 8005a30:	bf00      	nop
 8005a32:	371c      	adds	r7, #28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	fffeff8f 	.word	0xfffeff8f
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <TIM_OC6_SetConfig+0x9c>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	051b      	lsls	r3, r3, #20
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a13      	ldr	r2, [pc, #76]	; (8005ae8 <TIM_OC6_SetConfig+0xa0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_OC6_SetConfig+0x60>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <TIM_OC6_SetConfig+0xa4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d109      	bne.n	8005abc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	feff8fff 	.word	0xfeff8fff
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40010400 	.word	0x40010400

08005af0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f023 030a 	bic.w	r3, r3, #10
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b087      	sub	sp, #28
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f023 0210 	bic.w	r2, r3, #16
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	031b      	lsls	r3, r3, #12
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	011b      	lsls	r3, r3, #4
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	621a      	str	r2, [r3, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f043 0307 	orr.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	021a      	lsls	r2, r3, #8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	609a      	str	r2, [r3, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e06d      	b.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a30      	ldr	r2, [pc, #192]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d108      	bne.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d01d      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1a      	ldr	r2, [pc, #104]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10c      	bne.n	8005d52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40001800 	.word	0x40001800

08005d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e040      	b.n	8005e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb fdfc 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa56 	bl	80062b8 <UART_SetConfig>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e022      	b.n	8005e5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fcac 	bl	800677c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fd33 	bl	80068c0 <UART_CheckIdleState>
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d113      	bne.n	8005ebc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00e      	beq.n	8005ebc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d009      	beq.n	8005ebc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 81cc 	beq.w	800624a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
      }
      return;
 8005eba:	e1c6      	b.n	800624a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 80e3 	beq.w	800608a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d105      	bne.n	8005eda <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4ba5      	ldr	r3, [pc, #660]	; (8006168 <HAL_UART_IRQHandler+0x304>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80d8 	beq.w	800608a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d010      	beq.n	8005f06 <HAL_UART_IRQHandler+0xa2>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_UART_IRQHandler+0xce>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00b      	beq.n	8005f32 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f28:	f043 0204 	orr.w	r2, r3, #4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d010      	beq.n	8005f5e <HAL_UART_IRQHandler+0xfa>
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f54:	f043 0202 	orr.w	r2, r3, #2
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d015      	beq.n	8005f94 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d104      	bne.n	8005f7c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00b      	beq.n	8005f94 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2208      	movs	r2, #8
 8005f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f8a:	f043 0208 	orr.w	r2, r3, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x15e>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00c      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8140 	beq.w	800624e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d004      	beq.n	8006012 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800600e:	2b00      	cmp	r3, #0
 8006010:	d031      	beq.n	8006076 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd19 	bl	8006a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d123      	bne.n	800606e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006034:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	2b00      	cmp	r3, #0
 800603c:	d013      	beq.n	8006066 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <HAL_UART_IRQHandler+0x308>)
 8006044:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	4618      	mov	r0, r3
 800604c:	f7fc fcda 	bl	8002a04 <HAL_DMA_Abort_IT>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d017      	beq.n	8006086 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006064:	e00f      	b.n	8006086 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f906 	bl	8006278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800606c:	e00b      	b.n	8006086 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f902 	bl	8006278 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006074:	e007      	b.n	8006086 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f8fe 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006084:	e0e3      	b.n	800624e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006086:	bf00      	nop
    return;
 8006088:	e0e1      	b.n	800624e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608e:	2b01      	cmp	r3, #1
 8006090:	f040 80a7 	bne.w	80061e2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80a1 	beq.w	80061e2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 809b 	beq.w	80061e2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2210      	movs	r2, #16
 80060b2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060be:	2b40      	cmp	r3, #64	; 0x40
 80060c0:	d156      	bne.n	8006170 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80060cc:	893b      	ldrh	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80bf 	beq.w	8006252 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060da:	893a      	ldrh	r2, [r7, #8]
 80060dc:	429a      	cmp	r2, r3
 80060de:	f080 80b8 	bcs.w	8006252 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	893a      	ldrh	r2, [r7, #8]
 80060e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f4:	d02a      	beq.n	800614c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006104:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006124:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0210 	bic.w	r2, r2, #16
 8006140:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4618      	mov	r0, r3
 8006148:	f7fc fbec 	bl	8002924 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006158:	b29b      	uxth	r3, r3
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	b29b      	uxth	r3, r3
 800615e:	4619      	mov	r1, r3
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f893 	bl	800628c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006166:	e074      	b.n	8006252 <HAL_UART_IRQHandler+0x3ee>
 8006168:	04000120 	.word	0x04000120
 800616c:	08006aa9 	.word	0x08006aa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800617c:	b29b      	uxth	r3, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d063      	beq.n	8006256 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800618e:	897b      	ldrh	r3, [r7, #10]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d060      	beq.n	8006256 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0210 	bic.w	r2, r2, #16
 80061d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d6:	897b      	ldrh	r3, [r7, #10]
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f856 	bl	800628c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e0:	e039      	b.n	8006256 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <HAL_UART_IRQHandler+0x3a4>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f84f 	bl	80062a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006206:	e029      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00d      	beq.n	800622e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d008      	beq.n	800622e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
    }
    return;
 800622c:	e015      	b.n	800625a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d011      	beq.n	800625c <HAL_UART_IRQHandler+0x3f8>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00c      	beq.n	800625c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc46 	bl	8006ad4 <UART_EndTransmit_IT>
    return;
 8006248:	e008      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
      return;
 800624a:	bf00      	nop
 800624c:	e006      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
    return;
 800624e:	bf00      	nop
 8006250:	e004      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006252:	bf00      	nop
 8006254:	e002      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <HAL_UART_IRQHandler+0x3f8>
    return;
 800625a:	bf00      	nop
  }

}
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4ba7      	ldr	r3, [pc, #668]	; (8006580 <UART_SetConfig+0x2c8>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	6979      	ldr	r1, [r7, #20]
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	430a      	orrs	r2, r1
 8006328:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a95      	ldr	r2, [pc, #596]	; (8006584 <UART_SetConfig+0x2cc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d120      	bne.n	8006376 <UART_SetConfig+0xbe>
 8006334:	4b94      	ldr	r3, [pc, #592]	; (8006588 <UART_SetConfig+0x2d0>)
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d816      	bhi.n	8006370 <UART_SetConfig+0xb8>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0x90>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006359 	.word	0x08006359
 800634c:	08006365 	.word	0x08006365
 8006350:	0800635f 	.word	0x0800635f
 8006354:	0800636b 	.word	0x0800636b
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
 800635c:	e14f      	b.n	80065fe <UART_SetConfig+0x346>
 800635e:	2302      	movs	r3, #2
 8006360:	77fb      	strb	r3, [r7, #31]
 8006362:	e14c      	b.n	80065fe <UART_SetConfig+0x346>
 8006364:	2304      	movs	r3, #4
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e149      	b.n	80065fe <UART_SetConfig+0x346>
 800636a:	2308      	movs	r3, #8
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e146      	b.n	80065fe <UART_SetConfig+0x346>
 8006370:	2310      	movs	r3, #16
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e143      	b.n	80065fe <UART_SetConfig+0x346>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a84      	ldr	r2, [pc, #528]	; (800658c <UART_SetConfig+0x2d4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d132      	bne.n	80063e6 <UART_SetConfig+0x12e>
 8006380:	4b81      	ldr	r3, [pc, #516]	; (8006588 <UART_SetConfig+0x2d0>)
 8006382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b0c      	cmp	r3, #12
 800638c:	d828      	bhi.n	80063e0 <UART_SetConfig+0x128>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <UART_SetConfig+0xdc>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	080063cf 	.word	0x080063cf
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e1 	.word	0x080063e1
 80063c4:	080063db 	.word	0x080063db
 80063c8:	2300      	movs	r3, #0
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e117      	b.n	80065fe <UART_SetConfig+0x346>
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e114      	b.n	80065fe <UART_SetConfig+0x346>
 80063d4:	2304      	movs	r3, #4
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e111      	b.n	80065fe <UART_SetConfig+0x346>
 80063da:	2308      	movs	r3, #8
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e10e      	b.n	80065fe <UART_SetConfig+0x346>
 80063e0:	2310      	movs	r3, #16
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e10b      	b.n	80065fe <UART_SetConfig+0x346>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a69      	ldr	r2, [pc, #420]	; (8006590 <UART_SetConfig+0x2d8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d120      	bne.n	8006432 <UART_SetConfig+0x17a>
 80063f0:	4b65      	ldr	r3, [pc, #404]	; (8006588 <UART_SetConfig+0x2d0>)
 80063f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063fa:	2b30      	cmp	r3, #48	; 0x30
 80063fc:	d013      	beq.n	8006426 <UART_SetConfig+0x16e>
 80063fe:	2b30      	cmp	r3, #48	; 0x30
 8006400:	d814      	bhi.n	800642c <UART_SetConfig+0x174>
 8006402:	2b20      	cmp	r3, #32
 8006404:	d009      	beq.n	800641a <UART_SetConfig+0x162>
 8006406:	2b20      	cmp	r3, #32
 8006408:	d810      	bhi.n	800642c <UART_SetConfig+0x174>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <UART_SetConfig+0x15c>
 800640e:	2b10      	cmp	r3, #16
 8006410:	d006      	beq.n	8006420 <UART_SetConfig+0x168>
 8006412:	e00b      	b.n	800642c <UART_SetConfig+0x174>
 8006414:	2300      	movs	r3, #0
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e0f1      	b.n	80065fe <UART_SetConfig+0x346>
 800641a:	2302      	movs	r3, #2
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e0ee      	b.n	80065fe <UART_SetConfig+0x346>
 8006420:	2304      	movs	r3, #4
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e0eb      	b.n	80065fe <UART_SetConfig+0x346>
 8006426:	2308      	movs	r3, #8
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e0e8      	b.n	80065fe <UART_SetConfig+0x346>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]
 8006430:	e0e5      	b.n	80065fe <UART_SetConfig+0x346>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a57      	ldr	r2, [pc, #348]	; (8006594 <UART_SetConfig+0x2dc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d120      	bne.n	800647e <UART_SetConfig+0x1c6>
 800643c:	4b52      	ldr	r3, [pc, #328]	; (8006588 <UART_SetConfig+0x2d0>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006446:	2bc0      	cmp	r3, #192	; 0xc0
 8006448:	d013      	beq.n	8006472 <UART_SetConfig+0x1ba>
 800644a:	2bc0      	cmp	r3, #192	; 0xc0
 800644c:	d814      	bhi.n	8006478 <UART_SetConfig+0x1c0>
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d009      	beq.n	8006466 <UART_SetConfig+0x1ae>
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d810      	bhi.n	8006478 <UART_SetConfig+0x1c0>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <UART_SetConfig+0x1a8>
 800645a:	2b40      	cmp	r3, #64	; 0x40
 800645c:	d006      	beq.n	800646c <UART_SetConfig+0x1b4>
 800645e:	e00b      	b.n	8006478 <UART_SetConfig+0x1c0>
 8006460:	2300      	movs	r3, #0
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e0cb      	b.n	80065fe <UART_SetConfig+0x346>
 8006466:	2302      	movs	r3, #2
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e0c8      	b.n	80065fe <UART_SetConfig+0x346>
 800646c:	2304      	movs	r3, #4
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e0c5      	b.n	80065fe <UART_SetConfig+0x346>
 8006472:	2308      	movs	r3, #8
 8006474:	77fb      	strb	r3, [r7, #31]
 8006476:	e0c2      	b.n	80065fe <UART_SetConfig+0x346>
 8006478:	2310      	movs	r3, #16
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e0bf      	b.n	80065fe <UART_SetConfig+0x346>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a45      	ldr	r2, [pc, #276]	; (8006598 <UART_SetConfig+0x2e0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d125      	bne.n	80064d4 <UART_SetConfig+0x21c>
 8006488:	4b3f      	ldr	r3, [pc, #252]	; (8006588 <UART_SetConfig+0x2d0>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006496:	d017      	beq.n	80064c8 <UART_SetConfig+0x210>
 8006498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649c:	d817      	bhi.n	80064ce <UART_SetConfig+0x216>
 800649e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a2:	d00b      	beq.n	80064bc <UART_SetConfig+0x204>
 80064a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a8:	d811      	bhi.n	80064ce <UART_SetConfig+0x216>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <UART_SetConfig+0x1fe>
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b2:	d006      	beq.n	80064c2 <UART_SetConfig+0x20a>
 80064b4:	e00b      	b.n	80064ce <UART_SetConfig+0x216>
 80064b6:	2300      	movs	r3, #0
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e0a0      	b.n	80065fe <UART_SetConfig+0x346>
 80064bc:	2302      	movs	r3, #2
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e09d      	b.n	80065fe <UART_SetConfig+0x346>
 80064c2:	2304      	movs	r3, #4
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e09a      	b.n	80065fe <UART_SetConfig+0x346>
 80064c8:	2308      	movs	r3, #8
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e097      	b.n	80065fe <UART_SetConfig+0x346>
 80064ce:	2310      	movs	r3, #16
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e094      	b.n	80065fe <UART_SetConfig+0x346>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a30      	ldr	r2, [pc, #192]	; (800659c <UART_SetConfig+0x2e4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d125      	bne.n	800652a <UART_SetConfig+0x272>
 80064de:	4b2a      	ldr	r3, [pc, #168]	; (8006588 <UART_SetConfig+0x2d0>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ec:	d017      	beq.n	800651e <UART_SetConfig+0x266>
 80064ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064f2:	d817      	bhi.n	8006524 <UART_SetConfig+0x26c>
 80064f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f8:	d00b      	beq.n	8006512 <UART_SetConfig+0x25a>
 80064fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064fe:	d811      	bhi.n	8006524 <UART_SetConfig+0x26c>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <UART_SetConfig+0x254>
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	d006      	beq.n	8006518 <UART_SetConfig+0x260>
 800650a:	e00b      	b.n	8006524 <UART_SetConfig+0x26c>
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e075      	b.n	80065fe <UART_SetConfig+0x346>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e072      	b.n	80065fe <UART_SetConfig+0x346>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e06f      	b.n	80065fe <UART_SetConfig+0x346>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e06c      	b.n	80065fe <UART_SetConfig+0x346>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e069      	b.n	80065fe <UART_SetConfig+0x346>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1c      	ldr	r2, [pc, #112]	; (80065a0 <UART_SetConfig+0x2e8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d137      	bne.n	80065a4 <UART_SetConfig+0x2ec>
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <UART_SetConfig+0x2d0>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800653e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006542:	d017      	beq.n	8006574 <UART_SetConfig+0x2bc>
 8006544:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006548:	d817      	bhi.n	800657a <UART_SetConfig+0x2c2>
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654e:	d00b      	beq.n	8006568 <UART_SetConfig+0x2b0>
 8006550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006554:	d811      	bhi.n	800657a <UART_SetConfig+0x2c2>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <UART_SetConfig+0x2aa>
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655e:	d006      	beq.n	800656e <UART_SetConfig+0x2b6>
 8006560:	e00b      	b.n	800657a <UART_SetConfig+0x2c2>
 8006562:	2300      	movs	r3, #0
 8006564:	77fb      	strb	r3, [r7, #31]
 8006566:	e04a      	b.n	80065fe <UART_SetConfig+0x346>
 8006568:	2302      	movs	r3, #2
 800656a:	77fb      	strb	r3, [r7, #31]
 800656c:	e047      	b.n	80065fe <UART_SetConfig+0x346>
 800656e:	2304      	movs	r3, #4
 8006570:	77fb      	strb	r3, [r7, #31]
 8006572:	e044      	b.n	80065fe <UART_SetConfig+0x346>
 8006574:	2308      	movs	r3, #8
 8006576:	77fb      	strb	r3, [r7, #31]
 8006578:	e041      	b.n	80065fe <UART_SetConfig+0x346>
 800657a:	2310      	movs	r3, #16
 800657c:	77fb      	strb	r3, [r7, #31]
 800657e:	e03e      	b.n	80065fe <UART_SetConfig+0x346>
 8006580:	efff69f3 	.word	0xefff69f3
 8006584:	40011000 	.word	0x40011000
 8006588:	40023800 	.word	0x40023800
 800658c:	40004400 	.word	0x40004400
 8006590:	40004800 	.word	0x40004800
 8006594:	40004c00 	.word	0x40004c00
 8006598:	40005000 	.word	0x40005000
 800659c:	40011400 	.word	0x40011400
 80065a0:	40007800 	.word	0x40007800
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a71      	ldr	r2, [pc, #452]	; (8006770 <UART_SetConfig+0x4b8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d125      	bne.n	80065fa <UART_SetConfig+0x342>
 80065ae:	4b71      	ldr	r3, [pc, #452]	; (8006774 <UART_SetConfig+0x4bc>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065bc:	d017      	beq.n	80065ee <UART_SetConfig+0x336>
 80065be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065c2:	d817      	bhi.n	80065f4 <UART_SetConfig+0x33c>
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c8:	d00b      	beq.n	80065e2 <UART_SetConfig+0x32a>
 80065ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ce:	d811      	bhi.n	80065f4 <UART_SetConfig+0x33c>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <UART_SetConfig+0x324>
 80065d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065d8:	d006      	beq.n	80065e8 <UART_SetConfig+0x330>
 80065da:	e00b      	b.n	80065f4 <UART_SetConfig+0x33c>
 80065dc:	2300      	movs	r3, #0
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e00d      	b.n	80065fe <UART_SetConfig+0x346>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e00a      	b.n	80065fe <UART_SetConfig+0x346>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e007      	b.n	80065fe <UART_SetConfig+0x346>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e004      	b.n	80065fe <UART_SetConfig+0x346>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e001      	b.n	80065fe <UART_SetConfig+0x346>
 80065fa:	2310      	movs	r3, #16
 80065fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006606:	d15b      	bne.n	80066c0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006608:	7ffb      	ldrb	r3, [r7, #31]
 800660a:	2b08      	cmp	r3, #8
 800660c:	d827      	bhi.n	800665e <UART_SetConfig+0x3a6>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <UART_SetConfig+0x35c>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fd fab4 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 800663c:	61b8      	str	r0, [r7, #24]
        break;
 800663e:	e013      	b.n	8006668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fd fac4 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8006644:	61b8      	str	r0, [r7, #24]
        break;
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <UART_SetConfig+0x4c0>)
 800664a:	61bb      	str	r3, [r7, #24]
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fd f9e7 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 8006652:	61b8      	str	r0, [r7, #24]
        break;
 8006654:	e008      	b.n	8006668 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	61bb      	str	r3, [r7, #24]
        break;
 800665c:	e004      	b.n	8006668 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	77bb      	strb	r3, [r7, #30]
        break;
 8006666:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d074      	beq.n	8006758 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	005a      	lsls	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d916      	bls.n	80066ba <UART_SetConfig+0x402>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006692:	d212      	bcs.n	80066ba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	b29b      	uxth	r3, r3
 8006698:	f023 030f 	bic.w	r3, r3, #15
 800669c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	085b      	lsrs	r3, r3, #1
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	89fb      	ldrh	r3, [r7, #14]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	89fa      	ldrh	r2, [r7, #14]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	e04e      	b.n	8006758 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	77bb      	strb	r3, [r7, #30]
 80066be:	e04b      	b.n	8006758 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066c0:	7ffb      	ldrb	r3, [r7, #31]
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d827      	bhi.n	8006716 <UART_SetConfig+0x45e>
 80066c6:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0x414>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	080066f9 	.word	0x080066f9
 80066d4:	08006701 	.word	0x08006701
 80066d8:	08006717 	.word	0x08006717
 80066dc:	08006707 	.word	0x08006707
 80066e0:	08006717 	.word	0x08006717
 80066e4:	08006717 	.word	0x08006717
 80066e8:	08006717 	.word	0x08006717
 80066ec:	0800670f 	.word	0x0800670f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f0:	f7fd fa58 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 80066f4:	61b8      	str	r0, [r7, #24]
        break;
 80066f6:	e013      	b.n	8006720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066f8:	f7fd fa68 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 80066fc:	61b8      	str	r0, [r7, #24]
        break;
 80066fe:	e00f      	b.n	8006720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <UART_SetConfig+0x4c0>)
 8006702:	61bb      	str	r3, [r7, #24]
        break;
 8006704:	e00c      	b.n	8006720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006706:	f7fd f98b 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 800670a:	61b8      	str	r0, [r7, #24]
        break;
 800670c:	e008      	b.n	8006720 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006712:	61bb      	str	r3, [r7, #24]
        break;
 8006714:	e004      	b.n	8006720 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	77bb      	strb	r3, [r7, #30]
        break;
 800671e:	bf00      	nop
    }

    if (pclk != 0U)
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d018      	beq.n	8006758 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	085a      	lsrs	r2, r3, #1
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	b29b      	uxth	r3, r3
 800673a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d908      	bls.n	8006754 <UART_SetConfig+0x49c>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006748:	d204      	bcs.n	8006754 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	e001      	b.n	8006758 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006764:	7fbb      	ldrb	r3, [r7, #30]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40007c00 	.word	0x40007c00
 8006774:	40023800 	.word	0x40023800
 8006778:	00f42400 	.word	0x00f42400

0800677c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f003 0310 	and.w	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00a      	beq.n	800682e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01a      	beq.n	8006892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800687a:	d10a      	bne.n	8006892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068d0:	f7fb f99c 	bl	8001c0c <HAL_GetTick>
 80068d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d10e      	bne.n	8006902 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f82d 	bl	8006952 <UART_WaitOnFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e023      	b.n	800694a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b04      	cmp	r3, #4
 800690e:	d10e      	bne.n	800692e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f817 	bl	8006952 <UART_WaitOnFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e00d      	b.n	800694a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2220      	movs	r2, #32
 8006932:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2220      	movs	r2, #32
 8006938:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4613      	mov	r3, r2
 8006960:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006962:	e05e      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d05a      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696c:	f7fb f94e 	bl	8001c0c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <UART_WaitOnFlagUntilTimeout+0x30>
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d11b      	bne.n	80069ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006990:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0201 	bic.w	r2, r2, #1
 80069a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e043      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d02c      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69db      	ldr	r3, [r3, #28]
 80069ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d6:	d124      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e00f      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69da      	ldr	r2, [r3, #28]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d091      	beq.n	8006964 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0201 	bic.w	r2, r2, #1
 8006a70:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d107      	bne.n	8006a8a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0210 	bic.w	r2, r2, #16
 8006a88:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fbd6 	bl	8006278 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aea:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fbb3 	bl	8006264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <__libc_init_array>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4d0d      	ldr	r5, [pc, #52]	; (8006b40 <__libc_init_array+0x38>)
 8006b0c:	4c0d      	ldr	r4, [pc, #52]	; (8006b44 <__libc_init_array+0x3c>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	2600      	movs	r6, #0
 8006b14:	42a6      	cmp	r6, r4
 8006b16:	d109      	bne.n	8006b2c <__libc_init_array+0x24>
 8006b18:	4d0b      	ldr	r5, [pc, #44]	; (8006b48 <__libc_init_array+0x40>)
 8006b1a:	4c0c      	ldr	r4, [pc, #48]	; (8006b4c <__libc_init_array+0x44>)
 8006b1c:	f000 f820 	bl	8006b60 <_init>
 8006b20:	1b64      	subs	r4, r4, r5
 8006b22:	10a4      	asrs	r4, r4, #2
 8006b24:	2600      	movs	r6, #0
 8006b26:	42a6      	cmp	r6, r4
 8006b28:	d105      	bne.n	8006b36 <__libc_init_array+0x2e>
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b30:	4798      	blx	r3
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7ee      	b.n	8006b14 <__libc_init_array+0xc>
 8006b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3a:	4798      	blx	r3
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7f2      	b.n	8006b26 <__libc_init_array+0x1e>
 8006b40:	08006ba8 	.word	0x08006ba8
 8006b44:	08006ba8 	.word	0x08006ba8
 8006b48:	08006ba8 	.word	0x08006ba8
 8006b4c:	08006bac 	.word	0x08006bac

08006b50 <memset>:
 8006b50:	4402      	add	r2, r0
 8006b52:	4603      	mov	r3, r0
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d100      	bne.n	8006b5a <memset+0xa>
 8006b58:	4770      	bx	lr
 8006b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5e:	e7f9      	b.n	8006b54 <memset+0x4>

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr
