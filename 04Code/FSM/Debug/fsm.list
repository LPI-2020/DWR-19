
fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080012ac  080012ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012bc  080012bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012c4  080012c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c4  080012c4  000112c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080012d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080012d8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039c0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cd5  00000000  00000000  000239fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  000246d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000338  00000000  00000000  00024a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243fc  00000000  00000000  00024db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004068  00000000  00000000  000491b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e696b  00000000  00000000  0004d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d24  00000000  00000000  00133bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001294 	.word	0x08001294

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001294 	.word	0x08001294

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f8ef 	bl	8000716 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f802 	bl	8000540 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0xc>
	...

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fe98 	bl	8001284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xb0>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xb0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <SystemClock_Config+0xb4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <SystemClock_Config+0xb4>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <SystemClock_Config+0xb4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f9f5 	bl	800099c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005b8:	f000 f81e 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fc8e 	bl	8000ef8 <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e2:	f000 f809 	bl	80005f8 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <Error_Handler+0x8>
	...

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x44>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x44>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	6413      	str	r3, [r2, #64]	; 0x40
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x44>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_MspInit+0x44>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <HAL_MspInit+0x44>)
 8000628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062c:	6453      	str	r3, [r2, #68]	; 0x44
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_MspInit+0x44>)
 8000630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f87a 	bl	8000790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <SystemInit+0x20>)
 80006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <SystemInit+0x20>)
 80006ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006ca:	490e      	ldr	r1, [pc, #56]	; (8000704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0b      	ldr	r2, [pc, #44]	; (800070c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006e0:	4c0b      	ldr	r4, [pc, #44]	; (8000710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006ee:	f7ff ffd7 	bl	80006a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f000 fda3 	bl	800123c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006f6:	f7ff ff1b 	bl	8000530 <main>
  bx  lr    
 80006fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000704:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000708:	080012cc 	.word	0x080012cc
  ldr r2, =_sbss
 800070c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000710:	2000002c 	.word	0x2000002c

08000714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC_IRQHandler>

08000716 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071a:	2003      	movs	r0, #3
 800071c:	f000 f90a 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000720:	2000      	movs	r0, #0
 8000722:	f000 f805 	bl	8000730 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000726:	f7ff ff6d 	bl	8000604 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x54>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x58>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4619      	mov	r1, r3
 8000742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000746:	fbb3 f3f1 	udiv	r3, r3, r1
 800074a:	fbb2 f3f3 	udiv	r3, r2, r3
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f917 	bl	8000982 <HAL_SYSTICK_Config>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	e00e      	b.n	800077c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d80a      	bhi.n	800077a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f8ed 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_InitTick+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000776:	2300      	movs	r3, #0
 8000778:	e000      	b.n	800077c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000000 	.word	0x20000000
 8000788:	20000008 	.word	0x20000008
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_IncTick+0x20>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_IncTick+0x24>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4413      	add	r3, r2
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_IncTick+0x24>)
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000028 	.word	0x20000028

080007b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <HAL_GetTick+0x14>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000028 	.word	0x20000028

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <__NVIC_SetPriorityGrouping+0x40>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__NVIC_SetPriorityGrouping+0x40>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	60d3      	str	r3, [r2, #12]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00
 8000814:	05fa0000 	.word	0x05fa0000

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	; 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff8e 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff47 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff5c 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff8e 	bl	8000888 <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffb0 	bl	80008f0 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e29b      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8087 	beq.w	8000ace <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009c0:	4b96      	ldr	r3, [pc, #600]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f003 030c 	and.w	r3, r3, #12
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d00c      	beq.n	80009e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009cc:	4b93      	ldr	r3, [pc, #588]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 030c 	and.w	r3, r3, #12
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d112      	bne.n	80009fe <HAL_RCC_OscConfig+0x62>
 80009d8:	4b90      	ldr	r3, [pc, #576]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009e4:	d10b      	bne.n	80009fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009e6:	4b8d      	ldr	r3, [pc, #564]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d06c      	beq.n	8000acc <HAL_RCC_OscConfig+0x130>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d168      	bne.n	8000acc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e275      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a06:	d106      	bne.n	8000a16 <HAL_RCC_OscConfig+0x7a>
 8000a08:	4b84      	ldr	r3, [pc, #528]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a83      	ldr	r2, [pc, #524]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e02e      	b.n	8000a74 <HAL_RCC_OscConfig+0xd8>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10c      	bne.n	8000a38 <HAL_RCC_OscConfig+0x9c>
 8000a1e:	4b7f      	ldr	r3, [pc, #508]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a7e      	ldr	r2, [pc, #504]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	4b7c      	ldr	r3, [pc, #496]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a7b      	ldr	r2, [pc, #492]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	e01d      	b.n	8000a74 <HAL_RCC_OscConfig+0xd8>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a40:	d10c      	bne.n	8000a5c <HAL_RCC_OscConfig+0xc0>
 8000a42:	4b76      	ldr	r3, [pc, #472]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a75      	ldr	r2, [pc, #468]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a72      	ldr	r2, [pc, #456]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e00b      	b.n	8000a74 <HAL_RCC_OscConfig+0xd8>
 8000a5c:	4b6f      	ldr	r3, [pc, #444]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a6e      	ldr	r2, [pc, #440]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a6b      	ldr	r2, [pc, #428]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d013      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fe9c 	bl	80007b8 <HAL_GetTick>
 8000a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	e008      	b.n	8000a96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a84:	f7ff fe98 	bl	80007b8 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b64      	cmp	r3, #100	; 0x64
 8000a90:	d901      	bls.n	8000a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a92:	2303      	movs	r3, #3
 8000a94:	e229      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a96:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f0      	beq.n	8000a84 <HAL_RCC_OscConfig+0xe8>
 8000aa2:	e014      	b.n	8000ace <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fe88 	bl	80007b8 <HAL_GetTick>
 8000aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000aac:	f7ff fe84 	bl	80007b8 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b64      	cmp	r3, #100	; 0x64
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e215      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000abe:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f0      	bne.n	8000aac <HAL_RCC_OscConfig+0x110>
 8000aca:	e000      	b.n	8000ace <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d069      	beq.n	8000bae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00b      	beq.n	8000afe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 030c 	and.w	r3, r3, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d11c      	bne.n	8000b2c <HAL_RCC_OscConfig+0x190>
 8000af2:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d116      	bne.n	8000b2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <HAL_RCC_OscConfig+0x17a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d001      	beq.n	8000b16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e1e9      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	493d      	ldr	r1, [pc, #244]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b26:	4313      	orrs	r3, r2
 8000b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2a:	e040      	b.n	8000bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b34:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a38      	ldr	r2, [pc, #224]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b40:	f7ff fe3a 	bl	80007b8 <HAL_GetTick>
 8000b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	e008      	b.n	8000b5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b48:	f7ff fe36 	bl	80007b8 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e1c7      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f0      	beq.n	8000b48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4929      	ldr	r1, [pc, #164]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b76:	4313      	orrs	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]
 8000b7a:	e018      	b.n	8000bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b88:	f7ff fe16 	bl	80007b8 <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b90:	f7ff fe12 	bl	80007b8 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e1a3      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f0      	bne.n	8000b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d038      	beq.n	8000c2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d019      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bce:	f7ff fdf3 	bl	80007b8 <HAL_GetTick>
 8000bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bd4:	e008      	b.n	8000be8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bd6:	f7ff fdef 	bl	80007b8 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d901      	bls.n	8000be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e180      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f0      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x23a>
 8000bf4:	e01a      	b.n	8000c2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_RCC_OscConfig+0x280>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c02:	f7ff fdd9 	bl	80007b8 <HAL_GetTick>
 8000c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c08:	e00a      	b.n	8000c20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fdd5 	bl	80007b8 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d903      	bls.n	8000c20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e166      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
 8000c1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c20:	4b92      	ldr	r3, [pc, #584]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ee      	bne.n	8000c0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80a4 	beq.w	8000d82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c3a:	4b8c      	ldr	r3, [pc, #560]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10d      	bne.n	8000c62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b89      	ldr	r3, [pc, #548]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a88      	ldr	r2, [pc, #544]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b86      	ldr	r3, [pc, #536]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c62:	4b83      	ldr	r3, [pc, #524]	; (8000e70 <HAL_RCC_OscConfig+0x4d4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000c6e:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <HAL_RCC_OscConfig+0x4d4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_RCC_OscConfig+0x4d4>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c7a:	f7ff fd9d 	bl	80007b8 <HAL_GetTick>
 8000c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c82:	f7ff fd99 	bl	80007b8 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b64      	cmp	r3, #100	; 0x64
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e12a      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c94:	4b76      	ldr	r3, [pc, #472]	; (8000e70 <HAL_RCC_OscConfig+0x4d4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d106      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x31a>
 8000ca8:	4b70      	ldr	r3, [pc, #448]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cac:	4a6f      	ldr	r2, [pc, #444]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8000cb4:	e02d      	b.n	8000d12 <HAL_RCC_OscConfig+0x376>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x33c>
 8000cbe:	4b6b      	ldr	r3, [pc, #428]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cc2:	4a6a      	ldr	r2, [pc, #424]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cc4:	f023 0301 	bic.w	r3, r3, #1
 8000cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8000cca:	4b68      	ldr	r3, [pc, #416]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cce:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cd0:	f023 0304 	bic.w	r3, r3, #4
 8000cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8000cd6:	e01c      	b.n	8000d12 <HAL_RCC_OscConfig+0x376>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d10c      	bne.n	8000cfa <HAL_RCC_OscConfig+0x35e>
 8000ce0:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce4:	4a61      	ldr	r2, [pc, #388]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6713      	str	r3, [r2, #112]	; 0x70
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf0:	4a5e      	ldr	r2, [pc, #376]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8000cf8:	e00b      	b.n	8000d12 <HAL_RCC_OscConfig+0x376>
 8000cfa:	4b5c      	ldr	r3, [pc, #368]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cfe:	4a5b      	ldr	r2, [pc, #364]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	6713      	str	r3, [r2, #112]	; 0x70
 8000d06:	4b59      	ldr	r3, [pc, #356]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d0a:	4a58      	ldr	r2, [pc, #352]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d015      	beq.n	8000d46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fd4d 	bl	80007b8 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d20:	e00a      	b.n	8000d38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d22:	f7ff fd49 	bl	80007b8 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e0d8      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0ee      	beq.n	8000d22 <HAL_RCC_OscConfig+0x386>
 8000d44:	e014      	b.n	8000d70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d46:	f7ff fd37 	bl	80007b8 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4c:	e00a      	b.n	8000d64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fd33 	bl	80007b8 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e0c2      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d64:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1ee      	bne.n	8000d4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d105      	bne.n	8000d82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 80ae 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d06d      	beq.n	8000e74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d14b      	bne.n	8000e38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fd04 	bl	80007b8 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000db4:	f7ff fd00 	bl	80007b8 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e091      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f0      	bne.n	8000db4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69da      	ldr	r2, [r3, #28]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	3b01      	subs	r3, #1
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	061b      	lsls	r3, r3, #24
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	071b      	lsls	r3, r3, #28
 8000dfe:	491b      	ldr	r1, [pc, #108]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e10:	f7ff fcd2 	bl	80007b8 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e18:	f7ff fcce 	bl	80007b8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e05f      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f0      	beq.n	8000e18 <HAL_RCC_OscConfig+0x47c>
 8000e36:	e057      	b.n	8000ee8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e44:	f7ff fcb8 	bl	80007b8 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fcb4 	bl	80007b8 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e045      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5e:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_RCC_OscConfig+0x4d0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x4b0>
 8000e6a:	e03d      	b.n	8000ee8 <HAL_RCC_OscConfig+0x54c>
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_RCC_OscConfig+0x558>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d030      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d129      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d122      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d119      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d10f      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ece:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d107      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e0d0      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f10:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d910      	bls.n	8000f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f1e:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 020f 	bic.w	r2, r3, #15
 8000f26:	4965      	ldr	r1, [pc, #404]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d001      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0b8      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d020      	beq.n	8000f8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d005      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f58:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f70:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	494d      	ldr	r1, [pc, #308]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d040      	beq.n	800101c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d107      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	4b47      	ldr	r3, [pc, #284]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d115      	bne.n	8000fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e07f      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d107      	bne.n	8000fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d109      	bne.n	8000fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e073      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e06b      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f023 0203 	bic.w	r2, r3, #3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4936      	ldr	r1, [pc, #216]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fec:	f7ff fbe4 	bl	80007b8 <HAL_GetTick>
 8000ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff4:	f7ff fbe0 	bl	80007b8 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4293      	cmp	r3, r2
 8001004:	d901      	bls.n	800100a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e053      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 020c 	and.w	r2, r3, #12
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	429a      	cmp	r2, r3
 800101a:	d1eb      	bne.n	8000ff4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d210      	bcs.n	800104c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 020f 	bic.w	r2, r3, #15
 8001032:	4922      	ldr	r1, [pc, #136]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e032      	b.n	80010b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d008      	beq.n	800106a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4916      	ldr	r1, [pc, #88]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001066:	4313      	orrs	r3, r2
 8001068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0308 	and.w	r3, r3, #8
 8001072:	2b00      	cmp	r3, #0
 8001074:	d009      	beq.n	800108a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001086:	4313      	orrs	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800108a:	f000 f821 	bl	80010d0 <HAL_RCC_GetSysClockFreq>
 800108e:	4602      	mov	r2, r0
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <HAL_RCC_ClockConfig+0x1cc>)
 800109c:	5ccb      	ldrb	r3, [r1, r3]
 800109e:	fa22 f303 	lsr.w	r3, r2, r3
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_RCC_ClockConfig+0x1d0>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_RCC_ClockConfig+0x1d4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fb40 	bl	8000730 <HAL_InitTick>

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00
 80010c0:	40023800 	.word	0x40023800
 80010c4:	080012ac 	.word	0x080012ac
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80010d6:	2100      	movs	r1, #0
 80010d8:	6079      	str	r1, [r7, #4]
 80010da:	2100      	movs	r1, #0
 80010dc:	60f9      	str	r1, [r7, #12]
 80010de:	2100      	movs	r1, #0
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80010e2:	2100      	movs	r1, #0
 80010e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010e6:	4952      	ldr	r1, [pc, #328]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 80010e8:	6889      	ldr	r1, [r1, #8]
 80010ea:	f001 010c 	and.w	r1, r1, #12
 80010ee:	2908      	cmp	r1, #8
 80010f0:	d00d      	beq.n	800110e <HAL_RCC_GetSysClockFreq+0x3e>
 80010f2:	2908      	cmp	r1, #8
 80010f4:	f200 8094 	bhi.w	8001220 <HAL_RCC_GetSysClockFreq+0x150>
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d002      	beq.n	8001102 <HAL_RCC_GetSysClockFreq+0x32>
 80010fc:	2904      	cmp	r1, #4
 80010fe:	d003      	beq.n	8001108 <HAL_RCC_GetSysClockFreq+0x38>
 8001100:	e08e      	b.n	8001220 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <HAL_RCC_GetSysClockFreq+0x164>)
 8001104:	60bb      	str	r3, [r7, #8]
      break;
 8001106:	e08e      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001108:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <HAL_RCC_GetSysClockFreq+0x168>)
 800110a:	60bb      	str	r3, [r7, #8]
      break;
 800110c:	e08b      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800110e:	4948      	ldr	r1, [pc, #288]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 8001110:	6849      	ldr	r1, [r1, #4]
 8001112:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001116:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001118:	4945      	ldr	r1, [pc, #276]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 800111a:	6849      	ldr	r1, [r1, #4]
 800111c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001120:	2900      	cmp	r1, #0
 8001122:	d024      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001124:	4942      	ldr	r1, [pc, #264]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 8001126:	6849      	ldr	r1, [r1, #4]
 8001128:	0989      	lsrs	r1, r1, #6
 800112a:	4608      	mov	r0, r1
 800112c:	f04f 0100 	mov.w	r1, #0
 8001130:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001134:	f04f 0500 	mov.w	r5, #0
 8001138:	ea00 0204 	and.w	r2, r0, r4
 800113c:	ea01 0305 	and.w	r3, r1, r5
 8001140:	493d      	ldr	r1, [pc, #244]	; (8001238 <HAL_RCC_GetSysClockFreq+0x168>)
 8001142:	fb01 f003 	mul.w	r0, r1, r3
 8001146:	2100      	movs	r1, #0
 8001148:	fb01 f102 	mul.w	r1, r1, r2
 800114c:	1844      	adds	r4, r0, r1
 800114e:	493a      	ldr	r1, [pc, #232]	; (8001238 <HAL_RCC_GetSysClockFreq+0x168>)
 8001150:	fba2 0101 	umull	r0, r1, r2, r1
 8001154:	1863      	adds	r3, r4, r1
 8001156:	4619      	mov	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	f7ff f86a 	bl	8000238 <__aeabi_uldivmod>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4613      	mov	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e04a      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	099b      	lsrs	r3, r3, #6
 8001174:	461a      	mov	r2, r3
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800117e:	f04f 0100 	mov.w	r1, #0
 8001182:	ea02 0400 	and.w	r4, r2, r0
 8001186:	ea03 0501 	and.w	r5, r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	014b      	lsls	r3, r1, #5
 8001198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800119c:	0142      	lsls	r2, r0, #5
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	1b00      	subs	r0, r0, r4
 80011a4:	eb61 0105 	sbc.w	r1, r1, r5
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	018b      	lsls	r3, r1, #6
 80011b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80011b6:	0182      	lsls	r2, r0, #6
 80011b8:	1a12      	subs	r2, r2, r0
 80011ba:	eb63 0301 	sbc.w	r3, r3, r1
 80011be:	f04f 0000 	mov.w	r0, #0
 80011c2:	f04f 0100 	mov.w	r1, #0
 80011c6:	00d9      	lsls	r1, r3, #3
 80011c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80011cc:	00d0      	lsls	r0, r2, #3
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	1912      	adds	r2, r2, r4
 80011d4:	eb45 0303 	adc.w	r3, r5, r3
 80011d8:	f04f 0000 	mov.w	r0, #0
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	0299      	lsls	r1, r3, #10
 80011e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80011e6:	0290      	lsls	r0, r2, #10
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	f7ff f81e 	bl	8000238 <__aeabi_uldivmod>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4613      	mov	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_RCC_GetSysClockFreq+0x160>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	3301      	adds	r3, #1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	60bb      	str	r3, [r7, #8]
      break;
 800121e:	e002      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <HAL_RCC_GetSysClockFreq+0x164>)
 8001222:	60bb      	str	r3, [r7, #8]
      break;
 8001224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001226:	68bb      	ldr	r3, [r7, #8]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	00f42400 	.word	0x00f42400
 8001238:	017d7840 	.word	0x017d7840

0800123c <__libc_init_array>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	4d0d      	ldr	r5, [pc, #52]	; (8001274 <__libc_init_array+0x38>)
 8001240:	4c0d      	ldr	r4, [pc, #52]	; (8001278 <__libc_init_array+0x3c>)
 8001242:	1b64      	subs	r4, r4, r5
 8001244:	10a4      	asrs	r4, r4, #2
 8001246:	2600      	movs	r6, #0
 8001248:	42a6      	cmp	r6, r4
 800124a:	d109      	bne.n	8001260 <__libc_init_array+0x24>
 800124c:	4d0b      	ldr	r5, [pc, #44]	; (800127c <__libc_init_array+0x40>)
 800124e:	4c0c      	ldr	r4, [pc, #48]	; (8001280 <__libc_init_array+0x44>)
 8001250:	f000 f820 	bl	8001294 <_init>
 8001254:	1b64      	subs	r4, r4, r5
 8001256:	10a4      	asrs	r4, r4, #2
 8001258:	2600      	movs	r6, #0
 800125a:	42a6      	cmp	r6, r4
 800125c:	d105      	bne.n	800126a <__libc_init_array+0x2e>
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	f855 3b04 	ldr.w	r3, [r5], #4
 8001264:	4798      	blx	r3
 8001266:	3601      	adds	r6, #1
 8001268:	e7ee      	b.n	8001248 <__libc_init_array+0xc>
 800126a:	f855 3b04 	ldr.w	r3, [r5], #4
 800126e:	4798      	blx	r3
 8001270:	3601      	adds	r6, #1
 8001272:	e7f2      	b.n	800125a <__libc_init_array+0x1e>
 8001274:	080012c4 	.word	0x080012c4
 8001278:	080012c4 	.word	0x080012c4
 800127c:	080012c4 	.word	0x080012c4
 8001280:	080012c8 	.word	0x080012c8

08001284 <memset>:
 8001284:	4402      	add	r2, r0
 8001286:	4603      	mov	r3, r0
 8001288:	4293      	cmp	r3, r2
 800128a:	d100      	bne.n	800128e <memset+0xa>
 800128c:	4770      	bx	lr
 800128e:	f803 1b01 	strb.w	r1, [r3], #1
 8001292:	e7f9      	b.n	8001288 <memset+0x4>

08001294 <_init>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr

080012a0 <_fini>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr
